// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4

import (
	"context"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
)

func AllCapabilities(ctx context.Context, api any) (capabilities.Capabilities, capabilities.FHIRError) {
	var errs []capabilities.FHIRError
	create := []string{}
	read := []string{}
	search := map[string]search.Capabilities{}
	if _, ok := api.(AccountCreate); ok {
		create = append(create, "Account")
	}
	if _, ok := api.(AccountRead); ok {
		read = append(read, "Account")
	}
	if c, ok := api.(AccountSearch); ok {
		capability, err := c.SearchCapabilitiesAccount(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Account"] = capability
		}
	}
	if _, ok := api.(ActivityDefinitionCreate); ok {
		create = append(create, "ActivityDefinition")
	}
	if _, ok := api.(ActivityDefinitionRead); ok {
		read = append(read, "ActivityDefinition")
	}
	if c, ok := api.(ActivityDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesActivityDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ActivityDefinition"] = capability
		}
	}
	if _, ok := api.(AdverseEventCreate); ok {
		create = append(create, "AdverseEvent")
	}
	if _, ok := api.(AdverseEventRead); ok {
		read = append(read, "AdverseEvent")
	}
	if c, ok := api.(AdverseEventSearch); ok {
		capability, err := c.SearchCapabilitiesAdverseEvent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["AdverseEvent"] = capability
		}
	}
	if _, ok := api.(AllergyIntoleranceCreate); ok {
		create = append(create, "AllergyIntolerance")
	}
	if _, ok := api.(AllergyIntoleranceRead); ok {
		read = append(read, "AllergyIntolerance")
	}
	if c, ok := api.(AllergyIntoleranceSearch); ok {
		capability, err := c.SearchCapabilitiesAllergyIntolerance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["AllergyIntolerance"] = capability
		}
	}
	if _, ok := api.(AppointmentCreate); ok {
		create = append(create, "Appointment")
	}
	if _, ok := api.(AppointmentRead); ok {
		read = append(read, "Appointment")
	}
	if c, ok := api.(AppointmentSearch); ok {
		capability, err := c.SearchCapabilitiesAppointment(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Appointment"] = capability
		}
	}
	if _, ok := api.(AppointmentResponseCreate); ok {
		create = append(create, "AppointmentResponse")
	}
	if _, ok := api.(AppointmentResponseRead); ok {
		read = append(read, "AppointmentResponse")
	}
	if c, ok := api.(AppointmentResponseSearch); ok {
		capability, err := c.SearchCapabilitiesAppointmentResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["AppointmentResponse"] = capability
		}
	}
	if _, ok := api.(AuditEventCreate); ok {
		create = append(create, "AuditEvent")
	}
	if _, ok := api.(AuditEventRead); ok {
		read = append(read, "AuditEvent")
	}
	if c, ok := api.(AuditEventSearch); ok {
		capability, err := c.SearchCapabilitiesAuditEvent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["AuditEvent"] = capability
		}
	}
	if _, ok := api.(BasicCreate); ok {
		create = append(create, "Basic")
	}
	if _, ok := api.(BasicRead); ok {
		read = append(read, "Basic")
	}
	if c, ok := api.(BasicSearch); ok {
		capability, err := c.SearchCapabilitiesBasic(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Basic"] = capability
		}
	}
	if _, ok := api.(BinaryCreate); ok {
		create = append(create, "Binary")
	}
	if _, ok := api.(BinaryRead); ok {
		read = append(read, "Binary")
	}
	if c, ok := api.(BinarySearch); ok {
		capability, err := c.SearchCapabilitiesBinary(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Binary"] = capability
		}
	}
	if _, ok := api.(BiologicallyDerivedProductCreate); ok {
		create = append(create, "BiologicallyDerivedProduct")
	}
	if _, ok := api.(BiologicallyDerivedProductRead); ok {
		read = append(read, "BiologicallyDerivedProduct")
	}
	if c, ok := api.(BiologicallyDerivedProductSearch); ok {
		capability, err := c.SearchCapabilitiesBiologicallyDerivedProduct(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["BiologicallyDerivedProduct"] = capability
		}
	}
	if _, ok := api.(BodyStructureCreate); ok {
		create = append(create, "BodyStructure")
	}
	if _, ok := api.(BodyStructureRead); ok {
		read = append(read, "BodyStructure")
	}
	if c, ok := api.(BodyStructureSearch); ok {
		capability, err := c.SearchCapabilitiesBodyStructure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["BodyStructure"] = capability
		}
	}
	if _, ok := api.(BundleCreate); ok {
		create = append(create, "Bundle")
	}
	if _, ok := api.(BundleRead); ok {
		read = append(read, "Bundle")
	}
	if c, ok := api.(BundleSearch); ok {
		capability, err := c.SearchCapabilitiesBundle(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Bundle"] = capability
		}
	}
	if _, ok := api.(CapabilityStatementCreate); ok {
		create = append(create, "CapabilityStatement")
	}
	if _, ok := api.(CapabilityStatementRead); ok {
		read = append(read, "CapabilityStatement")
	}
	if c, ok := api.(CapabilityStatementSearch); ok {
		capability, err := c.SearchCapabilitiesCapabilityStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CapabilityStatement"] = capability
		}
	}
	if _, ok := api.(CarePlanCreate); ok {
		create = append(create, "CarePlan")
	}
	if _, ok := api.(CarePlanRead); ok {
		read = append(read, "CarePlan")
	}
	if c, ok := api.(CarePlanSearch); ok {
		capability, err := c.SearchCapabilitiesCarePlan(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CarePlan"] = capability
		}
	}
	if _, ok := api.(CareTeamCreate); ok {
		create = append(create, "CareTeam")
	}
	if _, ok := api.(CareTeamRead); ok {
		read = append(read, "CareTeam")
	}
	if c, ok := api.(CareTeamSearch); ok {
		capability, err := c.SearchCapabilitiesCareTeam(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CareTeam"] = capability
		}
	}
	if _, ok := api.(CatalogEntryCreate); ok {
		create = append(create, "CatalogEntry")
	}
	if _, ok := api.(CatalogEntryRead); ok {
		read = append(read, "CatalogEntry")
	}
	if c, ok := api.(CatalogEntrySearch); ok {
		capability, err := c.SearchCapabilitiesCatalogEntry(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CatalogEntry"] = capability
		}
	}
	if _, ok := api.(ChargeItemCreate); ok {
		create = append(create, "ChargeItem")
	}
	if _, ok := api.(ChargeItemRead); ok {
		read = append(read, "ChargeItem")
	}
	if c, ok := api.(ChargeItemSearch); ok {
		capability, err := c.SearchCapabilitiesChargeItem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ChargeItem"] = capability
		}
	}
	if _, ok := api.(ChargeItemDefinitionCreate); ok {
		create = append(create, "ChargeItemDefinition")
	}
	if _, ok := api.(ChargeItemDefinitionRead); ok {
		read = append(read, "ChargeItemDefinition")
	}
	if c, ok := api.(ChargeItemDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesChargeItemDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ChargeItemDefinition"] = capability
		}
	}
	if _, ok := api.(ClaimCreate); ok {
		create = append(create, "Claim")
	}
	if _, ok := api.(ClaimRead); ok {
		read = append(read, "Claim")
	}
	if c, ok := api.(ClaimSearch); ok {
		capability, err := c.SearchCapabilitiesClaim(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Claim"] = capability
		}
	}
	if _, ok := api.(ClaimResponseCreate); ok {
		create = append(create, "ClaimResponse")
	}
	if _, ok := api.(ClaimResponseRead); ok {
		read = append(read, "ClaimResponse")
	}
	if c, ok := api.(ClaimResponseSearch); ok {
		capability, err := c.SearchCapabilitiesClaimResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ClaimResponse"] = capability
		}
	}
	if _, ok := api.(ClinicalImpressionCreate); ok {
		create = append(create, "ClinicalImpression")
	}
	if _, ok := api.(ClinicalImpressionRead); ok {
		read = append(read, "ClinicalImpression")
	}
	if c, ok := api.(ClinicalImpressionSearch); ok {
		capability, err := c.SearchCapabilitiesClinicalImpression(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ClinicalImpression"] = capability
		}
	}
	if _, ok := api.(CodeSystemCreate); ok {
		create = append(create, "CodeSystem")
	}
	if _, ok := api.(CodeSystemRead); ok {
		read = append(read, "CodeSystem")
	}
	if c, ok := api.(CodeSystemSearch); ok {
		capability, err := c.SearchCapabilitiesCodeSystem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CodeSystem"] = capability
		}
	}
	if _, ok := api.(CommunicationCreate); ok {
		create = append(create, "Communication")
	}
	if _, ok := api.(CommunicationRead); ok {
		read = append(read, "Communication")
	}
	if c, ok := api.(CommunicationSearch); ok {
		capability, err := c.SearchCapabilitiesCommunication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Communication"] = capability
		}
	}
	if _, ok := api.(CommunicationRequestCreate); ok {
		create = append(create, "CommunicationRequest")
	}
	if _, ok := api.(CommunicationRequestRead); ok {
		read = append(read, "CommunicationRequest")
	}
	if c, ok := api.(CommunicationRequestSearch); ok {
		capability, err := c.SearchCapabilitiesCommunicationRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CommunicationRequest"] = capability
		}
	}
	if _, ok := api.(CompartmentDefinitionCreate); ok {
		create = append(create, "CompartmentDefinition")
	}
	if _, ok := api.(CompartmentDefinitionRead); ok {
		read = append(read, "CompartmentDefinition")
	}
	if c, ok := api.(CompartmentDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesCompartmentDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CompartmentDefinition"] = capability
		}
	}
	if _, ok := api.(CompositionCreate); ok {
		create = append(create, "Composition")
	}
	if _, ok := api.(CompositionRead); ok {
		read = append(read, "Composition")
	}
	if c, ok := api.(CompositionSearch); ok {
		capability, err := c.SearchCapabilitiesComposition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Composition"] = capability
		}
	}
	if _, ok := api.(ConceptMapCreate); ok {
		create = append(create, "ConceptMap")
	}
	if _, ok := api.(ConceptMapRead); ok {
		read = append(read, "ConceptMap")
	}
	if c, ok := api.(ConceptMapSearch); ok {
		capability, err := c.SearchCapabilitiesConceptMap(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ConceptMap"] = capability
		}
	}
	if _, ok := api.(ConditionCreate); ok {
		create = append(create, "Condition")
	}
	if _, ok := api.(ConditionRead); ok {
		read = append(read, "Condition")
	}
	if c, ok := api.(ConditionSearch); ok {
		capability, err := c.SearchCapabilitiesCondition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Condition"] = capability
		}
	}
	if _, ok := api.(ConsentCreate); ok {
		create = append(create, "Consent")
	}
	if _, ok := api.(ConsentRead); ok {
		read = append(read, "Consent")
	}
	if c, ok := api.(ConsentSearch); ok {
		capability, err := c.SearchCapabilitiesConsent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Consent"] = capability
		}
	}
	if _, ok := api.(ContractCreate); ok {
		create = append(create, "Contract")
	}
	if _, ok := api.(ContractRead); ok {
		read = append(read, "Contract")
	}
	if c, ok := api.(ContractSearch); ok {
		capability, err := c.SearchCapabilitiesContract(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Contract"] = capability
		}
	}
	if _, ok := api.(CoverageCreate); ok {
		create = append(create, "Coverage")
	}
	if _, ok := api.(CoverageRead); ok {
		read = append(read, "Coverage")
	}
	if c, ok := api.(CoverageSearch); ok {
		capability, err := c.SearchCapabilitiesCoverage(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Coverage"] = capability
		}
	}
	if _, ok := api.(CoverageEligibilityRequestCreate); ok {
		create = append(create, "CoverageEligibilityRequest")
	}
	if _, ok := api.(CoverageEligibilityRequestRead); ok {
		read = append(read, "CoverageEligibilityRequest")
	}
	if c, ok := api.(CoverageEligibilityRequestSearch); ok {
		capability, err := c.SearchCapabilitiesCoverageEligibilityRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CoverageEligibilityRequest"] = capability
		}
	}
	if _, ok := api.(CoverageEligibilityResponseCreate); ok {
		create = append(create, "CoverageEligibilityResponse")
	}
	if _, ok := api.(CoverageEligibilityResponseRead); ok {
		read = append(read, "CoverageEligibilityResponse")
	}
	if c, ok := api.(CoverageEligibilityResponseSearch); ok {
		capability, err := c.SearchCapabilitiesCoverageEligibilityResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["CoverageEligibilityResponse"] = capability
		}
	}
	if _, ok := api.(DetectedIssueCreate); ok {
		create = append(create, "DetectedIssue")
	}
	if _, ok := api.(DetectedIssueRead); ok {
		read = append(read, "DetectedIssue")
	}
	if c, ok := api.(DetectedIssueSearch); ok {
		capability, err := c.SearchCapabilitiesDetectedIssue(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DetectedIssue"] = capability
		}
	}
	if _, ok := api.(DeviceCreate); ok {
		create = append(create, "Device")
	}
	if _, ok := api.(DeviceRead); ok {
		read = append(read, "Device")
	}
	if c, ok := api.(DeviceSearch); ok {
		capability, err := c.SearchCapabilitiesDevice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Device"] = capability
		}
	}
	if _, ok := api.(DeviceDefinitionCreate); ok {
		create = append(create, "DeviceDefinition")
	}
	if _, ok := api.(DeviceDefinitionRead); ok {
		read = append(read, "DeviceDefinition")
	}
	if c, ok := api.(DeviceDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesDeviceDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DeviceDefinition"] = capability
		}
	}
	if _, ok := api.(DeviceMetricCreate); ok {
		create = append(create, "DeviceMetric")
	}
	if _, ok := api.(DeviceMetricRead); ok {
		read = append(read, "DeviceMetric")
	}
	if c, ok := api.(DeviceMetricSearch); ok {
		capability, err := c.SearchCapabilitiesDeviceMetric(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DeviceMetric"] = capability
		}
	}
	if _, ok := api.(DeviceRequestCreate); ok {
		create = append(create, "DeviceRequest")
	}
	if _, ok := api.(DeviceRequestRead); ok {
		read = append(read, "DeviceRequest")
	}
	if c, ok := api.(DeviceRequestSearch); ok {
		capability, err := c.SearchCapabilitiesDeviceRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DeviceRequest"] = capability
		}
	}
	if _, ok := api.(DeviceUseStatementCreate); ok {
		create = append(create, "DeviceUseStatement")
	}
	if _, ok := api.(DeviceUseStatementRead); ok {
		read = append(read, "DeviceUseStatement")
	}
	if c, ok := api.(DeviceUseStatementSearch); ok {
		capability, err := c.SearchCapabilitiesDeviceUseStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DeviceUseStatement"] = capability
		}
	}
	if _, ok := api.(DiagnosticReportCreate); ok {
		create = append(create, "DiagnosticReport")
	}
	if _, ok := api.(DiagnosticReportRead); ok {
		read = append(read, "DiagnosticReport")
	}
	if c, ok := api.(DiagnosticReportSearch); ok {
		capability, err := c.SearchCapabilitiesDiagnosticReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DiagnosticReport"] = capability
		}
	}
	if _, ok := api.(DocumentManifestCreate); ok {
		create = append(create, "DocumentManifest")
	}
	if _, ok := api.(DocumentManifestRead); ok {
		read = append(read, "DocumentManifest")
	}
	if c, ok := api.(DocumentManifestSearch); ok {
		capability, err := c.SearchCapabilitiesDocumentManifest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DocumentManifest"] = capability
		}
	}
	if _, ok := api.(DocumentReferenceCreate); ok {
		create = append(create, "DocumentReference")
	}
	if _, ok := api.(DocumentReferenceRead); ok {
		read = append(read, "DocumentReference")
	}
	if c, ok := api.(DocumentReferenceSearch); ok {
		capability, err := c.SearchCapabilitiesDocumentReference(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["DocumentReference"] = capability
		}
	}
	if _, ok := api.(EffectEvidenceSynthesisCreate); ok {
		create = append(create, "EffectEvidenceSynthesis")
	}
	if _, ok := api.(EffectEvidenceSynthesisRead); ok {
		read = append(read, "EffectEvidenceSynthesis")
	}
	if c, ok := api.(EffectEvidenceSynthesisSearch); ok {
		capability, err := c.SearchCapabilitiesEffectEvidenceSynthesis(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["EffectEvidenceSynthesis"] = capability
		}
	}
	if _, ok := api.(EncounterCreate); ok {
		create = append(create, "Encounter")
	}
	if _, ok := api.(EncounterRead); ok {
		read = append(read, "Encounter")
	}
	if c, ok := api.(EncounterSearch); ok {
		capability, err := c.SearchCapabilitiesEncounter(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Encounter"] = capability
		}
	}
	if _, ok := api.(EndpointCreate); ok {
		create = append(create, "Endpoint")
	}
	if _, ok := api.(EndpointRead); ok {
		read = append(read, "Endpoint")
	}
	if c, ok := api.(EndpointSearch); ok {
		capability, err := c.SearchCapabilitiesEndpoint(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Endpoint"] = capability
		}
	}
	if _, ok := api.(EnrollmentRequestCreate); ok {
		create = append(create, "EnrollmentRequest")
	}
	if _, ok := api.(EnrollmentRequestRead); ok {
		read = append(read, "EnrollmentRequest")
	}
	if c, ok := api.(EnrollmentRequestSearch); ok {
		capability, err := c.SearchCapabilitiesEnrollmentRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["EnrollmentRequest"] = capability
		}
	}
	if _, ok := api.(EnrollmentResponseCreate); ok {
		create = append(create, "EnrollmentResponse")
	}
	if _, ok := api.(EnrollmentResponseRead); ok {
		read = append(read, "EnrollmentResponse")
	}
	if c, ok := api.(EnrollmentResponseSearch); ok {
		capability, err := c.SearchCapabilitiesEnrollmentResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["EnrollmentResponse"] = capability
		}
	}
	if _, ok := api.(EpisodeOfCareCreate); ok {
		create = append(create, "EpisodeOfCare")
	}
	if _, ok := api.(EpisodeOfCareRead); ok {
		read = append(read, "EpisodeOfCare")
	}
	if c, ok := api.(EpisodeOfCareSearch); ok {
		capability, err := c.SearchCapabilitiesEpisodeOfCare(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["EpisodeOfCare"] = capability
		}
	}
	if _, ok := api.(EventDefinitionCreate); ok {
		create = append(create, "EventDefinition")
	}
	if _, ok := api.(EventDefinitionRead); ok {
		read = append(read, "EventDefinition")
	}
	if c, ok := api.(EventDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesEventDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["EventDefinition"] = capability
		}
	}
	if _, ok := api.(EvidenceCreate); ok {
		create = append(create, "Evidence")
	}
	if _, ok := api.(EvidenceRead); ok {
		read = append(read, "Evidence")
	}
	if c, ok := api.(EvidenceSearch); ok {
		capability, err := c.SearchCapabilitiesEvidence(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Evidence"] = capability
		}
	}
	if _, ok := api.(EvidenceVariableCreate); ok {
		create = append(create, "EvidenceVariable")
	}
	if _, ok := api.(EvidenceVariableRead); ok {
		read = append(read, "EvidenceVariable")
	}
	if c, ok := api.(EvidenceVariableSearch); ok {
		capability, err := c.SearchCapabilitiesEvidenceVariable(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["EvidenceVariable"] = capability
		}
	}
	if _, ok := api.(ExampleScenarioCreate); ok {
		create = append(create, "ExampleScenario")
	}
	if _, ok := api.(ExampleScenarioRead); ok {
		read = append(read, "ExampleScenario")
	}
	if c, ok := api.(ExampleScenarioSearch); ok {
		capability, err := c.SearchCapabilitiesExampleScenario(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ExampleScenario"] = capability
		}
	}
	if _, ok := api.(ExplanationOfBenefitCreate); ok {
		create = append(create, "ExplanationOfBenefit")
	}
	if _, ok := api.(ExplanationOfBenefitRead); ok {
		read = append(read, "ExplanationOfBenefit")
	}
	if c, ok := api.(ExplanationOfBenefitSearch); ok {
		capability, err := c.SearchCapabilitiesExplanationOfBenefit(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ExplanationOfBenefit"] = capability
		}
	}
	if _, ok := api.(FamilyMemberHistoryCreate); ok {
		create = append(create, "FamilyMemberHistory")
	}
	if _, ok := api.(FamilyMemberHistoryRead); ok {
		read = append(read, "FamilyMemberHistory")
	}
	if c, ok := api.(FamilyMemberHistorySearch); ok {
		capability, err := c.SearchCapabilitiesFamilyMemberHistory(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["FamilyMemberHistory"] = capability
		}
	}
	if _, ok := api.(FlagCreate); ok {
		create = append(create, "Flag")
	}
	if _, ok := api.(FlagRead); ok {
		read = append(read, "Flag")
	}
	if c, ok := api.(FlagSearch); ok {
		capability, err := c.SearchCapabilitiesFlag(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Flag"] = capability
		}
	}
	if _, ok := api.(GoalCreate); ok {
		create = append(create, "Goal")
	}
	if _, ok := api.(GoalRead); ok {
		read = append(read, "Goal")
	}
	if c, ok := api.(GoalSearch); ok {
		capability, err := c.SearchCapabilitiesGoal(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Goal"] = capability
		}
	}
	if _, ok := api.(GraphDefinitionCreate); ok {
		create = append(create, "GraphDefinition")
	}
	if _, ok := api.(GraphDefinitionRead); ok {
		read = append(read, "GraphDefinition")
	}
	if c, ok := api.(GraphDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesGraphDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["GraphDefinition"] = capability
		}
	}
	if _, ok := api.(GroupCreate); ok {
		create = append(create, "Group")
	}
	if _, ok := api.(GroupRead); ok {
		read = append(read, "Group")
	}
	if c, ok := api.(GroupSearch); ok {
		capability, err := c.SearchCapabilitiesGroup(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Group"] = capability
		}
	}
	if _, ok := api.(GuidanceResponseCreate); ok {
		create = append(create, "GuidanceResponse")
	}
	if _, ok := api.(GuidanceResponseRead); ok {
		read = append(read, "GuidanceResponse")
	}
	if c, ok := api.(GuidanceResponseSearch); ok {
		capability, err := c.SearchCapabilitiesGuidanceResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["GuidanceResponse"] = capability
		}
	}
	if _, ok := api.(HealthcareServiceCreate); ok {
		create = append(create, "HealthcareService")
	}
	if _, ok := api.(HealthcareServiceRead); ok {
		read = append(read, "HealthcareService")
	}
	if c, ok := api.(HealthcareServiceSearch); ok {
		capability, err := c.SearchCapabilitiesHealthcareService(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["HealthcareService"] = capability
		}
	}
	if _, ok := api.(ImagingStudyCreate); ok {
		create = append(create, "ImagingStudy")
	}
	if _, ok := api.(ImagingStudyRead); ok {
		read = append(read, "ImagingStudy")
	}
	if c, ok := api.(ImagingStudySearch); ok {
		capability, err := c.SearchCapabilitiesImagingStudy(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ImagingStudy"] = capability
		}
	}
	if _, ok := api.(ImmunizationCreate); ok {
		create = append(create, "Immunization")
	}
	if _, ok := api.(ImmunizationRead); ok {
		read = append(read, "Immunization")
	}
	if c, ok := api.(ImmunizationSearch); ok {
		capability, err := c.SearchCapabilitiesImmunization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Immunization"] = capability
		}
	}
	if _, ok := api.(ImmunizationEvaluationCreate); ok {
		create = append(create, "ImmunizationEvaluation")
	}
	if _, ok := api.(ImmunizationEvaluationRead); ok {
		read = append(read, "ImmunizationEvaluation")
	}
	if c, ok := api.(ImmunizationEvaluationSearch); ok {
		capability, err := c.SearchCapabilitiesImmunizationEvaluation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ImmunizationEvaluation"] = capability
		}
	}
	if _, ok := api.(ImmunizationRecommendationCreate); ok {
		create = append(create, "ImmunizationRecommendation")
	}
	if _, ok := api.(ImmunizationRecommendationRead); ok {
		read = append(read, "ImmunizationRecommendation")
	}
	if c, ok := api.(ImmunizationRecommendationSearch); ok {
		capability, err := c.SearchCapabilitiesImmunizationRecommendation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ImmunizationRecommendation"] = capability
		}
	}
	if _, ok := api.(ImplementationGuideCreate); ok {
		create = append(create, "ImplementationGuide")
	}
	if _, ok := api.(ImplementationGuideRead); ok {
		read = append(read, "ImplementationGuide")
	}
	if c, ok := api.(ImplementationGuideSearch); ok {
		capability, err := c.SearchCapabilitiesImplementationGuide(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ImplementationGuide"] = capability
		}
	}
	if _, ok := api.(InsurancePlanCreate); ok {
		create = append(create, "InsurancePlan")
	}
	if _, ok := api.(InsurancePlanRead); ok {
		read = append(read, "InsurancePlan")
	}
	if c, ok := api.(InsurancePlanSearch); ok {
		capability, err := c.SearchCapabilitiesInsurancePlan(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["InsurancePlan"] = capability
		}
	}
	if _, ok := api.(InvoiceCreate); ok {
		create = append(create, "Invoice")
	}
	if _, ok := api.(InvoiceRead); ok {
		read = append(read, "Invoice")
	}
	if c, ok := api.(InvoiceSearch); ok {
		capability, err := c.SearchCapabilitiesInvoice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Invoice"] = capability
		}
	}
	if _, ok := api.(LibraryCreate); ok {
		create = append(create, "Library")
	}
	if _, ok := api.(LibraryRead); ok {
		read = append(read, "Library")
	}
	if c, ok := api.(LibrarySearch); ok {
		capability, err := c.SearchCapabilitiesLibrary(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Library"] = capability
		}
	}
	if _, ok := api.(LinkageCreate); ok {
		create = append(create, "Linkage")
	}
	if _, ok := api.(LinkageRead); ok {
		read = append(read, "Linkage")
	}
	if c, ok := api.(LinkageSearch); ok {
		capability, err := c.SearchCapabilitiesLinkage(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Linkage"] = capability
		}
	}
	if _, ok := api.(ListCreate); ok {
		create = append(create, "List")
	}
	if _, ok := api.(ListRead); ok {
		read = append(read, "List")
	}
	if c, ok := api.(ListSearch); ok {
		capability, err := c.SearchCapabilitiesList(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["List"] = capability
		}
	}
	if _, ok := api.(LocationCreate); ok {
		create = append(create, "Location")
	}
	if _, ok := api.(LocationRead); ok {
		read = append(read, "Location")
	}
	if c, ok := api.(LocationSearch); ok {
		capability, err := c.SearchCapabilitiesLocation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Location"] = capability
		}
	}
	if _, ok := api.(MeasureCreate); ok {
		create = append(create, "Measure")
	}
	if _, ok := api.(MeasureRead); ok {
		read = append(read, "Measure")
	}
	if c, ok := api.(MeasureSearch); ok {
		capability, err := c.SearchCapabilitiesMeasure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Measure"] = capability
		}
	}
	if _, ok := api.(MeasureReportCreate); ok {
		create = append(create, "MeasureReport")
	}
	if _, ok := api.(MeasureReportRead); ok {
		read = append(read, "MeasureReport")
	}
	if c, ok := api.(MeasureReportSearch); ok {
		capability, err := c.SearchCapabilitiesMeasureReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MeasureReport"] = capability
		}
	}
	if _, ok := api.(MediaCreate); ok {
		create = append(create, "Media")
	}
	if _, ok := api.(MediaRead); ok {
		read = append(read, "Media")
	}
	if c, ok := api.(MediaSearch); ok {
		capability, err := c.SearchCapabilitiesMedia(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Media"] = capability
		}
	}
	if _, ok := api.(MedicationCreate); ok {
		create = append(create, "Medication")
	}
	if _, ok := api.(MedicationRead); ok {
		read = append(read, "Medication")
	}
	if c, ok := api.(MedicationSearch); ok {
		capability, err := c.SearchCapabilitiesMedication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Medication"] = capability
		}
	}
	if _, ok := api.(MedicationAdministrationCreate); ok {
		create = append(create, "MedicationAdministration")
	}
	if _, ok := api.(MedicationAdministrationRead); ok {
		read = append(read, "MedicationAdministration")
	}
	if c, ok := api.(MedicationAdministrationSearch); ok {
		capability, err := c.SearchCapabilitiesMedicationAdministration(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicationAdministration"] = capability
		}
	}
	if _, ok := api.(MedicationDispenseCreate); ok {
		create = append(create, "MedicationDispense")
	}
	if _, ok := api.(MedicationDispenseRead); ok {
		read = append(read, "MedicationDispense")
	}
	if c, ok := api.(MedicationDispenseSearch); ok {
		capability, err := c.SearchCapabilitiesMedicationDispense(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicationDispense"] = capability
		}
	}
	if _, ok := api.(MedicationKnowledgeCreate); ok {
		create = append(create, "MedicationKnowledge")
	}
	if _, ok := api.(MedicationKnowledgeRead); ok {
		read = append(read, "MedicationKnowledge")
	}
	if c, ok := api.(MedicationKnowledgeSearch); ok {
		capability, err := c.SearchCapabilitiesMedicationKnowledge(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicationKnowledge"] = capability
		}
	}
	if _, ok := api.(MedicationRequestCreate); ok {
		create = append(create, "MedicationRequest")
	}
	if _, ok := api.(MedicationRequestRead); ok {
		read = append(read, "MedicationRequest")
	}
	if c, ok := api.(MedicationRequestSearch); ok {
		capability, err := c.SearchCapabilitiesMedicationRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicationRequest"] = capability
		}
	}
	if _, ok := api.(MedicationStatementCreate); ok {
		create = append(create, "MedicationStatement")
	}
	if _, ok := api.(MedicationStatementRead); ok {
		read = append(read, "MedicationStatement")
	}
	if c, ok := api.(MedicationStatementSearch); ok {
		capability, err := c.SearchCapabilitiesMedicationStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicationStatement"] = capability
		}
	}
	if _, ok := api.(MedicinalProductCreate); ok {
		create = append(create, "MedicinalProduct")
	}
	if _, ok := api.(MedicinalProductRead); ok {
		read = append(read, "MedicinalProduct")
	}
	if c, ok := api.(MedicinalProductSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProduct(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProduct"] = capability
		}
	}
	if _, ok := api.(MedicinalProductAuthorizationCreate); ok {
		create = append(create, "MedicinalProductAuthorization")
	}
	if _, ok := api.(MedicinalProductAuthorizationRead); ok {
		read = append(read, "MedicinalProductAuthorization")
	}
	if c, ok := api.(MedicinalProductAuthorizationSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductAuthorization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductAuthorization"] = capability
		}
	}
	if _, ok := api.(MedicinalProductContraindicationCreate); ok {
		create = append(create, "MedicinalProductContraindication")
	}
	if _, ok := api.(MedicinalProductContraindicationRead); ok {
		read = append(read, "MedicinalProductContraindication")
	}
	if c, ok := api.(MedicinalProductContraindicationSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductContraindication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductContraindication"] = capability
		}
	}
	if _, ok := api.(MedicinalProductIndicationCreate); ok {
		create = append(create, "MedicinalProductIndication")
	}
	if _, ok := api.(MedicinalProductIndicationRead); ok {
		read = append(read, "MedicinalProductIndication")
	}
	if c, ok := api.(MedicinalProductIndicationSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductIndication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductIndication"] = capability
		}
	}
	if _, ok := api.(MedicinalProductIngredientCreate); ok {
		create = append(create, "MedicinalProductIngredient")
	}
	if _, ok := api.(MedicinalProductIngredientRead); ok {
		read = append(read, "MedicinalProductIngredient")
	}
	if c, ok := api.(MedicinalProductIngredientSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductIngredient(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductIngredient"] = capability
		}
	}
	if _, ok := api.(MedicinalProductInteractionCreate); ok {
		create = append(create, "MedicinalProductInteraction")
	}
	if _, ok := api.(MedicinalProductInteractionRead); ok {
		read = append(read, "MedicinalProductInteraction")
	}
	if c, ok := api.(MedicinalProductInteractionSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductInteraction(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductInteraction"] = capability
		}
	}
	if _, ok := api.(MedicinalProductManufacturedCreate); ok {
		create = append(create, "MedicinalProductManufactured")
	}
	if _, ok := api.(MedicinalProductManufacturedRead); ok {
		read = append(read, "MedicinalProductManufactured")
	}
	if c, ok := api.(MedicinalProductManufacturedSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductManufactured(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductManufactured"] = capability
		}
	}
	if _, ok := api.(MedicinalProductPackagedCreate); ok {
		create = append(create, "MedicinalProductPackaged")
	}
	if _, ok := api.(MedicinalProductPackagedRead); ok {
		read = append(read, "MedicinalProductPackaged")
	}
	if c, ok := api.(MedicinalProductPackagedSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductPackaged(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductPackaged"] = capability
		}
	}
	if _, ok := api.(MedicinalProductPharmaceuticalCreate); ok {
		create = append(create, "MedicinalProductPharmaceutical")
	}
	if _, ok := api.(MedicinalProductPharmaceuticalRead); ok {
		read = append(read, "MedicinalProductPharmaceutical")
	}
	if c, ok := api.(MedicinalProductPharmaceuticalSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductPharmaceutical(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductPharmaceutical"] = capability
		}
	}
	if _, ok := api.(MedicinalProductUndesirableEffectCreate); ok {
		create = append(create, "MedicinalProductUndesirableEffect")
	}
	if _, ok := api.(MedicinalProductUndesirableEffectRead); ok {
		read = append(read, "MedicinalProductUndesirableEffect")
	}
	if c, ok := api.(MedicinalProductUndesirableEffectSearch); ok {
		capability, err := c.SearchCapabilitiesMedicinalProductUndesirableEffect(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MedicinalProductUndesirableEffect"] = capability
		}
	}
	if _, ok := api.(MessageDefinitionCreate); ok {
		create = append(create, "MessageDefinition")
	}
	if _, ok := api.(MessageDefinitionRead); ok {
		read = append(read, "MessageDefinition")
	}
	if c, ok := api.(MessageDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesMessageDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MessageDefinition"] = capability
		}
	}
	if _, ok := api.(MessageHeaderCreate); ok {
		create = append(create, "MessageHeader")
	}
	if _, ok := api.(MessageHeaderRead); ok {
		read = append(read, "MessageHeader")
	}
	if c, ok := api.(MessageHeaderSearch); ok {
		capability, err := c.SearchCapabilitiesMessageHeader(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MessageHeader"] = capability
		}
	}
	if _, ok := api.(MolecularSequenceCreate); ok {
		create = append(create, "MolecularSequence")
	}
	if _, ok := api.(MolecularSequenceRead); ok {
		read = append(read, "MolecularSequence")
	}
	if c, ok := api.(MolecularSequenceSearch); ok {
		capability, err := c.SearchCapabilitiesMolecularSequence(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["MolecularSequence"] = capability
		}
	}
	if _, ok := api.(NamingSystemCreate); ok {
		create = append(create, "NamingSystem")
	}
	if _, ok := api.(NamingSystemRead); ok {
		read = append(read, "NamingSystem")
	}
	if c, ok := api.(NamingSystemSearch); ok {
		capability, err := c.SearchCapabilitiesNamingSystem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["NamingSystem"] = capability
		}
	}
	if _, ok := api.(NutritionOrderCreate); ok {
		create = append(create, "NutritionOrder")
	}
	if _, ok := api.(NutritionOrderRead); ok {
		read = append(read, "NutritionOrder")
	}
	if c, ok := api.(NutritionOrderSearch); ok {
		capability, err := c.SearchCapabilitiesNutritionOrder(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["NutritionOrder"] = capability
		}
	}
	if _, ok := api.(ObservationCreate); ok {
		create = append(create, "Observation")
	}
	if _, ok := api.(ObservationRead); ok {
		read = append(read, "Observation")
	}
	if c, ok := api.(ObservationSearch); ok {
		capability, err := c.SearchCapabilitiesObservation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Observation"] = capability
		}
	}
	if _, ok := api.(ObservationDefinitionCreate); ok {
		create = append(create, "ObservationDefinition")
	}
	if _, ok := api.(ObservationDefinitionRead); ok {
		read = append(read, "ObservationDefinition")
	}
	if c, ok := api.(ObservationDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesObservationDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ObservationDefinition"] = capability
		}
	}
	if _, ok := api.(OperationDefinitionCreate); ok {
		create = append(create, "OperationDefinition")
	}
	if _, ok := api.(OperationDefinitionRead); ok {
		read = append(read, "OperationDefinition")
	}
	if c, ok := api.(OperationDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesOperationDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["OperationDefinition"] = capability
		}
	}
	if _, ok := api.(OperationOutcomeCreate); ok {
		create = append(create, "OperationOutcome")
	}
	if _, ok := api.(OperationOutcomeRead); ok {
		read = append(read, "OperationOutcome")
	}
	if c, ok := api.(OperationOutcomeSearch); ok {
		capability, err := c.SearchCapabilitiesOperationOutcome(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["OperationOutcome"] = capability
		}
	}
	if _, ok := api.(OrganizationCreate); ok {
		create = append(create, "Organization")
	}
	if _, ok := api.(OrganizationRead); ok {
		read = append(read, "Organization")
	}
	if c, ok := api.(OrganizationSearch); ok {
		capability, err := c.SearchCapabilitiesOrganization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Organization"] = capability
		}
	}
	if _, ok := api.(OrganizationAffiliationCreate); ok {
		create = append(create, "OrganizationAffiliation")
	}
	if _, ok := api.(OrganizationAffiliationRead); ok {
		read = append(read, "OrganizationAffiliation")
	}
	if c, ok := api.(OrganizationAffiliationSearch); ok {
		capability, err := c.SearchCapabilitiesOrganizationAffiliation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["OrganizationAffiliation"] = capability
		}
	}
	if _, ok := api.(ParametersCreate); ok {
		create = append(create, "Parameters")
	}
	if _, ok := api.(ParametersRead); ok {
		read = append(read, "Parameters")
	}
	if c, ok := api.(ParametersSearch); ok {
		capability, err := c.SearchCapabilitiesParameters(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Parameters"] = capability
		}
	}
	if _, ok := api.(PatientCreate); ok {
		create = append(create, "Patient")
	}
	if _, ok := api.(PatientRead); ok {
		read = append(read, "Patient")
	}
	if c, ok := api.(PatientSearch); ok {
		capability, err := c.SearchCapabilitiesPatient(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Patient"] = capability
		}
	}
	if _, ok := api.(PaymentNoticeCreate); ok {
		create = append(create, "PaymentNotice")
	}
	if _, ok := api.(PaymentNoticeRead); ok {
		read = append(read, "PaymentNotice")
	}
	if c, ok := api.(PaymentNoticeSearch); ok {
		capability, err := c.SearchCapabilitiesPaymentNotice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["PaymentNotice"] = capability
		}
	}
	if _, ok := api.(PaymentReconciliationCreate); ok {
		create = append(create, "PaymentReconciliation")
	}
	if _, ok := api.(PaymentReconciliationRead); ok {
		read = append(read, "PaymentReconciliation")
	}
	if c, ok := api.(PaymentReconciliationSearch); ok {
		capability, err := c.SearchCapabilitiesPaymentReconciliation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["PaymentReconciliation"] = capability
		}
	}
	if _, ok := api.(PersonCreate); ok {
		create = append(create, "Person")
	}
	if _, ok := api.(PersonRead); ok {
		read = append(read, "Person")
	}
	if c, ok := api.(PersonSearch); ok {
		capability, err := c.SearchCapabilitiesPerson(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Person"] = capability
		}
	}
	if _, ok := api.(PlanDefinitionCreate); ok {
		create = append(create, "PlanDefinition")
	}
	if _, ok := api.(PlanDefinitionRead); ok {
		read = append(read, "PlanDefinition")
	}
	if c, ok := api.(PlanDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesPlanDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["PlanDefinition"] = capability
		}
	}
	if _, ok := api.(PractitionerCreate); ok {
		create = append(create, "Practitioner")
	}
	if _, ok := api.(PractitionerRead); ok {
		read = append(read, "Practitioner")
	}
	if c, ok := api.(PractitionerSearch); ok {
		capability, err := c.SearchCapabilitiesPractitioner(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Practitioner"] = capability
		}
	}
	if _, ok := api.(PractitionerRoleCreate); ok {
		create = append(create, "PractitionerRole")
	}
	if _, ok := api.(PractitionerRoleRead); ok {
		read = append(read, "PractitionerRole")
	}
	if c, ok := api.(PractitionerRoleSearch); ok {
		capability, err := c.SearchCapabilitiesPractitionerRole(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["PractitionerRole"] = capability
		}
	}
	if _, ok := api.(ProcedureCreate); ok {
		create = append(create, "Procedure")
	}
	if _, ok := api.(ProcedureRead); ok {
		read = append(read, "Procedure")
	}
	if c, ok := api.(ProcedureSearch); ok {
		capability, err := c.SearchCapabilitiesProcedure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Procedure"] = capability
		}
	}
	if _, ok := api.(ProvenanceCreate); ok {
		create = append(create, "Provenance")
	}
	if _, ok := api.(ProvenanceRead); ok {
		read = append(read, "Provenance")
	}
	if c, ok := api.(ProvenanceSearch); ok {
		capability, err := c.SearchCapabilitiesProvenance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Provenance"] = capability
		}
	}
	if _, ok := api.(QuestionnaireCreate); ok {
		create = append(create, "Questionnaire")
	}
	if _, ok := api.(QuestionnaireRead); ok {
		read = append(read, "Questionnaire")
	}
	if c, ok := api.(QuestionnaireSearch); ok {
		capability, err := c.SearchCapabilitiesQuestionnaire(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Questionnaire"] = capability
		}
	}
	if _, ok := api.(QuestionnaireResponseCreate); ok {
		create = append(create, "QuestionnaireResponse")
	}
	if _, ok := api.(QuestionnaireResponseRead); ok {
		read = append(read, "QuestionnaireResponse")
	}
	if c, ok := api.(QuestionnaireResponseSearch); ok {
		capability, err := c.SearchCapabilitiesQuestionnaireResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["QuestionnaireResponse"] = capability
		}
	}
	if _, ok := api.(RelatedPersonCreate); ok {
		create = append(create, "RelatedPerson")
	}
	if _, ok := api.(RelatedPersonRead); ok {
		read = append(read, "RelatedPerson")
	}
	if c, ok := api.(RelatedPersonSearch); ok {
		capability, err := c.SearchCapabilitiesRelatedPerson(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["RelatedPerson"] = capability
		}
	}
	if _, ok := api.(RequestGroupCreate); ok {
		create = append(create, "RequestGroup")
	}
	if _, ok := api.(RequestGroupRead); ok {
		read = append(read, "RequestGroup")
	}
	if c, ok := api.(RequestGroupSearch); ok {
		capability, err := c.SearchCapabilitiesRequestGroup(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["RequestGroup"] = capability
		}
	}
	if _, ok := api.(ResearchDefinitionCreate); ok {
		create = append(create, "ResearchDefinition")
	}
	if _, ok := api.(ResearchDefinitionRead); ok {
		read = append(read, "ResearchDefinition")
	}
	if c, ok := api.(ResearchDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesResearchDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ResearchDefinition"] = capability
		}
	}
	if _, ok := api.(ResearchElementDefinitionCreate); ok {
		create = append(create, "ResearchElementDefinition")
	}
	if _, ok := api.(ResearchElementDefinitionRead); ok {
		read = append(read, "ResearchElementDefinition")
	}
	if c, ok := api.(ResearchElementDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesResearchElementDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ResearchElementDefinition"] = capability
		}
	}
	if _, ok := api.(ResearchStudyCreate); ok {
		create = append(create, "ResearchStudy")
	}
	if _, ok := api.(ResearchStudyRead); ok {
		read = append(read, "ResearchStudy")
	}
	if c, ok := api.(ResearchStudySearch); ok {
		capability, err := c.SearchCapabilitiesResearchStudy(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ResearchStudy"] = capability
		}
	}
	if _, ok := api.(ResearchSubjectCreate); ok {
		create = append(create, "ResearchSubject")
	}
	if _, ok := api.(ResearchSubjectRead); ok {
		read = append(read, "ResearchSubject")
	}
	if c, ok := api.(ResearchSubjectSearch); ok {
		capability, err := c.SearchCapabilitiesResearchSubject(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ResearchSubject"] = capability
		}
	}
	if _, ok := api.(RiskAssessmentCreate); ok {
		create = append(create, "RiskAssessment")
	}
	if _, ok := api.(RiskAssessmentRead); ok {
		read = append(read, "RiskAssessment")
	}
	if c, ok := api.(RiskAssessmentSearch); ok {
		capability, err := c.SearchCapabilitiesRiskAssessment(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["RiskAssessment"] = capability
		}
	}
	if _, ok := api.(RiskEvidenceSynthesisCreate); ok {
		create = append(create, "RiskEvidenceSynthesis")
	}
	if _, ok := api.(RiskEvidenceSynthesisRead); ok {
		read = append(read, "RiskEvidenceSynthesis")
	}
	if c, ok := api.(RiskEvidenceSynthesisSearch); ok {
		capability, err := c.SearchCapabilitiesRiskEvidenceSynthesis(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["RiskEvidenceSynthesis"] = capability
		}
	}
	if _, ok := api.(ScheduleCreate); ok {
		create = append(create, "Schedule")
	}
	if _, ok := api.(ScheduleRead); ok {
		read = append(read, "Schedule")
	}
	if c, ok := api.(ScheduleSearch); ok {
		capability, err := c.SearchCapabilitiesSchedule(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Schedule"] = capability
		}
	}
	if _, ok := api.(SearchParameterCreate); ok {
		create = append(create, "SearchParameter")
	}
	if _, ok := api.(SearchParameterRead); ok {
		read = append(read, "SearchParameter")
	}
	if c, ok := api.(SearchParameterSearch); ok {
		capability, err := c.SearchCapabilitiesSearchParameter(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SearchParameter"] = capability
		}
	}
	if _, ok := api.(ServiceRequestCreate); ok {
		create = append(create, "ServiceRequest")
	}
	if _, ok := api.(ServiceRequestRead); ok {
		read = append(read, "ServiceRequest")
	}
	if c, ok := api.(ServiceRequestSearch); ok {
		capability, err := c.SearchCapabilitiesServiceRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ServiceRequest"] = capability
		}
	}
	if _, ok := api.(SlotCreate); ok {
		create = append(create, "Slot")
	}
	if _, ok := api.(SlotRead); ok {
		read = append(read, "Slot")
	}
	if c, ok := api.(SlotSearch); ok {
		capability, err := c.SearchCapabilitiesSlot(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Slot"] = capability
		}
	}
	if _, ok := api.(SpecimenCreate); ok {
		create = append(create, "Specimen")
	}
	if _, ok := api.(SpecimenRead); ok {
		read = append(read, "Specimen")
	}
	if c, ok := api.(SpecimenSearch); ok {
		capability, err := c.SearchCapabilitiesSpecimen(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Specimen"] = capability
		}
	}
	if _, ok := api.(SpecimenDefinitionCreate); ok {
		create = append(create, "SpecimenDefinition")
	}
	if _, ok := api.(SpecimenDefinitionRead); ok {
		read = append(read, "SpecimenDefinition")
	}
	if c, ok := api.(SpecimenDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesSpecimenDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SpecimenDefinition"] = capability
		}
	}
	if _, ok := api.(StructureDefinitionCreate); ok {
		create = append(create, "StructureDefinition")
	}
	if _, ok := api.(StructureDefinitionRead); ok {
		read = append(read, "StructureDefinition")
	}
	if c, ok := api.(StructureDefinitionSearch); ok {
		capability, err := c.SearchCapabilitiesStructureDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["StructureDefinition"] = capability
		}
	}
	if _, ok := api.(StructureMapCreate); ok {
		create = append(create, "StructureMap")
	}
	if _, ok := api.(StructureMapRead); ok {
		read = append(read, "StructureMap")
	}
	if c, ok := api.(StructureMapSearch); ok {
		capability, err := c.SearchCapabilitiesStructureMap(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["StructureMap"] = capability
		}
	}
	if _, ok := api.(SubscriptionCreate); ok {
		create = append(create, "Subscription")
	}
	if _, ok := api.(SubscriptionRead); ok {
		read = append(read, "Subscription")
	}
	if c, ok := api.(SubscriptionSearch); ok {
		capability, err := c.SearchCapabilitiesSubscription(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Subscription"] = capability
		}
	}
	if _, ok := api.(SubstanceCreate); ok {
		create = append(create, "Substance")
	}
	if _, ok := api.(SubstanceRead); ok {
		read = append(read, "Substance")
	}
	if c, ok := api.(SubstanceSearch); ok {
		capability, err := c.SearchCapabilitiesSubstance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Substance"] = capability
		}
	}
	if _, ok := api.(SubstanceNucleicAcidCreate); ok {
		create = append(create, "SubstanceNucleicAcid")
	}
	if _, ok := api.(SubstanceNucleicAcidRead); ok {
		read = append(read, "SubstanceNucleicAcid")
	}
	if c, ok := api.(SubstanceNucleicAcidSearch); ok {
		capability, err := c.SearchCapabilitiesSubstanceNucleicAcid(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SubstanceNucleicAcid"] = capability
		}
	}
	if _, ok := api.(SubstancePolymerCreate); ok {
		create = append(create, "SubstancePolymer")
	}
	if _, ok := api.(SubstancePolymerRead); ok {
		read = append(read, "SubstancePolymer")
	}
	if c, ok := api.(SubstancePolymerSearch); ok {
		capability, err := c.SearchCapabilitiesSubstancePolymer(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SubstancePolymer"] = capability
		}
	}
	if _, ok := api.(SubstanceProteinCreate); ok {
		create = append(create, "SubstanceProtein")
	}
	if _, ok := api.(SubstanceProteinRead); ok {
		read = append(read, "SubstanceProtein")
	}
	if c, ok := api.(SubstanceProteinSearch); ok {
		capability, err := c.SearchCapabilitiesSubstanceProtein(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SubstanceProtein"] = capability
		}
	}
	if _, ok := api.(SubstanceReferenceInformationCreate); ok {
		create = append(create, "SubstanceReferenceInformation")
	}
	if _, ok := api.(SubstanceReferenceInformationRead); ok {
		read = append(read, "SubstanceReferenceInformation")
	}
	if c, ok := api.(SubstanceReferenceInformationSearch); ok {
		capability, err := c.SearchCapabilitiesSubstanceReferenceInformation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SubstanceReferenceInformation"] = capability
		}
	}
	if _, ok := api.(SubstanceSourceMaterialCreate); ok {
		create = append(create, "SubstanceSourceMaterial")
	}
	if _, ok := api.(SubstanceSourceMaterialRead); ok {
		read = append(read, "SubstanceSourceMaterial")
	}
	if c, ok := api.(SubstanceSourceMaterialSearch); ok {
		capability, err := c.SearchCapabilitiesSubstanceSourceMaterial(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SubstanceSourceMaterial"] = capability
		}
	}
	if _, ok := api.(SubstanceSpecificationCreate); ok {
		create = append(create, "SubstanceSpecification")
	}
	if _, ok := api.(SubstanceSpecificationRead); ok {
		read = append(read, "SubstanceSpecification")
	}
	if c, ok := api.(SubstanceSpecificationSearch); ok {
		capability, err := c.SearchCapabilitiesSubstanceSpecification(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SubstanceSpecification"] = capability
		}
	}
	if _, ok := api.(SupplyDeliveryCreate); ok {
		create = append(create, "SupplyDelivery")
	}
	if _, ok := api.(SupplyDeliveryRead); ok {
		read = append(read, "SupplyDelivery")
	}
	if c, ok := api.(SupplyDeliverySearch); ok {
		capability, err := c.SearchCapabilitiesSupplyDelivery(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SupplyDelivery"] = capability
		}
	}
	if _, ok := api.(SupplyRequestCreate); ok {
		create = append(create, "SupplyRequest")
	}
	if _, ok := api.(SupplyRequestRead); ok {
		read = append(read, "SupplyRequest")
	}
	if c, ok := api.(SupplyRequestSearch); ok {
		capability, err := c.SearchCapabilitiesSupplyRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["SupplyRequest"] = capability
		}
	}
	if _, ok := api.(TaskCreate); ok {
		create = append(create, "Task")
	}
	if _, ok := api.(TaskRead); ok {
		read = append(read, "Task")
	}
	if c, ok := api.(TaskSearch); ok {
		capability, err := c.SearchCapabilitiesTask(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["Task"] = capability
		}
	}
	if _, ok := api.(TerminologyCapabilitiesCreate); ok {
		create = append(create, "TerminologyCapabilities")
	}
	if _, ok := api.(TerminologyCapabilitiesRead); ok {
		read = append(read, "TerminologyCapabilities")
	}
	if c, ok := api.(TerminologyCapabilitiesSearch); ok {
		capability, err := c.SearchCapabilitiesTerminologyCapabilities(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["TerminologyCapabilities"] = capability
		}
	}
	if _, ok := api.(TestReportCreate); ok {
		create = append(create, "TestReport")
	}
	if _, ok := api.(TestReportRead); ok {
		read = append(read, "TestReport")
	}
	if c, ok := api.(TestReportSearch); ok {
		capability, err := c.SearchCapabilitiesTestReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["TestReport"] = capability
		}
	}
	if _, ok := api.(TestScriptCreate); ok {
		create = append(create, "TestScript")
	}
	if _, ok := api.(TestScriptRead); ok {
		read = append(read, "TestScript")
	}
	if c, ok := api.(TestScriptSearch); ok {
		capability, err := c.SearchCapabilitiesTestScript(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["TestScript"] = capability
		}
	}
	if _, ok := api.(ValueSetCreate); ok {
		create = append(create, "ValueSet")
	}
	if _, ok := api.(ValueSetRead); ok {
		read = append(read, "ValueSet")
	}
	if c, ok := api.(ValueSetSearch); ok {
		capability, err := c.SearchCapabilitiesValueSet(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["ValueSet"] = capability
		}
	}
	if _, ok := api.(VerificationResultCreate); ok {
		create = append(create, "VerificationResult")
	}
	if _, ok := api.(VerificationResultRead); ok {
		read = append(read, "VerificationResult")
	}
	if c, ok := api.(VerificationResultSearch); ok {
		capability, err := c.SearchCapabilitiesVerificationResult(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["VerificationResult"] = capability
		}
	}
	if _, ok := api.(VisionPrescriptionCreate); ok {
		create = append(create, "VisionPrescription")
	}
	if _, ok := api.(VisionPrescriptionRead); ok {
		read = append(read, "VisionPrescription")
	}
	if c, ok := api.(VisionPrescriptionSearch); ok {
		capability, err := c.SearchCapabilitiesVisionPrescription(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			search["VisionPrescription"] = capability
		}
	}
	return capabilities.Capabilities{
		ReadInteractions:   read,
		SearchCapabilities: search,
	}, capabilities.JoinErrors(errs)
}
