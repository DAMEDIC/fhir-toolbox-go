// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4

import (
	"context"
	"errors"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
)

func AllCapabilities(ctx context.Context, api any) (capabilities.Capabilities, error) {
	allCapabilities := capabilities.Capabilities{SearchCapabilities: make(map[string]search.Capabilities)}
	var errs []error
	if _, ok := api.(AccountCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Account")
	}
	if _, ok := api.(AccountRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Account")
	}
	if _, ok := api.(AccountUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Account")
	}
	if _, ok := api.(AccountDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Account")
	}
	if c, ok := api.(AccountSearch); ok {
		c, err := c.SearchCapabilitiesAccount(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Account"] = c
		}
	}
	if _, ok := api.(ActivityDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ActivityDefinition")
	}
	if _, ok := api.(ActivityDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ActivityDefinition")
	}
	if _, ok := api.(ActivityDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ActivityDefinition")
	}
	if _, ok := api.(ActivityDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ActivityDefinition")
	}
	if c, ok := api.(ActivityDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesActivityDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ActivityDefinition"] = c
		}
	}
	if _, ok := api.(AdverseEventCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "AdverseEvent")
	}
	if _, ok := api.(AdverseEventRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "AdverseEvent")
	}
	if _, ok := api.(AdverseEventUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "AdverseEvent")
	}
	if _, ok := api.(AdverseEventDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "AdverseEvent")
	}
	if c, ok := api.(AdverseEventSearch); ok {
		c, err := c.SearchCapabilitiesAdverseEvent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["AdverseEvent"] = c
		}
	}
	if _, ok := api.(AllergyIntoleranceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "AllergyIntolerance")
	}
	if _, ok := api.(AllergyIntoleranceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "AllergyIntolerance")
	}
	if _, ok := api.(AllergyIntoleranceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "AllergyIntolerance")
	}
	if _, ok := api.(AllergyIntoleranceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "AllergyIntolerance")
	}
	if c, ok := api.(AllergyIntoleranceSearch); ok {
		c, err := c.SearchCapabilitiesAllergyIntolerance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["AllergyIntolerance"] = c
		}
	}
	if _, ok := api.(AppointmentCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Appointment")
	}
	if _, ok := api.(AppointmentRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Appointment")
	}
	if _, ok := api.(AppointmentUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Appointment")
	}
	if _, ok := api.(AppointmentDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Appointment")
	}
	if c, ok := api.(AppointmentSearch); ok {
		c, err := c.SearchCapabilitiesAppointment(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Appointment"] = c
		}
	}
	if _, ok := api.(AppointmentResponseCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "AppointmentResponse")
	}
	if _, ok := api.(AppointmentResponseRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "AppointmentResponse")
	}
	if _, ok := api.(AppointmentResponseUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "AppointmentResponse")
	}
	if _, ok := api.(AppointmentResponseDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "AppointmentResponse")
	}
	if c, ok := api.(AppointmentResponseSearch); ok {
		c, err := c.SearchCapabilitiesAppointmentResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["AppointmentResponse"] = c
		}
	}
	if _, ok := api.(AuditEventCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "AuditEvent")
	}
	if _, ok := api.(AuditEventRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "AuditEvent")
	}
	if _, ok := api.(AuditEventUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "AuditEvent")
	}
	if _, ok := api.(AuditEventDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "AuditEvent")
	}
	if c, ok := api.(AuditEventSearch); ok {
		c, err := c.SearchCapabilitiesAuditEvent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["AuditEvent"] = c
		}
	}
	if _, ok := api.(BasicCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Basic")
	}
	if _, ok := api.(BasicRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Basic")
	}
	if _, ok := api.(BasicUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Basic")
	}
	if _, ok := api.(BasicDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Basic")
	}
	if c, ok := api.(BasicSearch); ok {
		c, err := c.SearchCapabilitiesBasic(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Basic"] = c
		}
	}
	if _, ok := api.(BinaryCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Binary")
	}
	if _, ok := api.(BinaryRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Binary")
	}
	if _, ok := api.(BinaryUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Binary")
	}
	if _, ok := api.(BinaryDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Binary")
	}
	if c, ok := api.(BinarySearch); ok {
		c, err := c.SearchCapabilitiesBinary(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Binary"] = c
		}
	}
	if _, ok := api.(BiologicallyDerivedProductCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "BiologicallyDerivedProduct")
	}
	if _, ok := api.(BiologicallyDerivedProductRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "BiologicallyDerivedProduct")
	}
	if _, ok := api.(BiologicallyDerivedProductUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "BiologicallyDerivedProduct")
	}
	if _, ok := api.(BiologicallyDerivedProductDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "BiologicallyDerivedProduct")
	}
	if c, ok := api.(BiologicallyDerivedProductSearch); ok {
		c, err := c.SearchCapabilitiesBiologicallyDerivedProduct(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["BiologicallyDerivedProduct"] = c
		}
	}
	if _, ok := api.(BodyStructureCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "BodyStructure")
	}
	if _, ok := api.(BodyStructureRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "BodyStructure")
	}
	if _, ok := api.(BodyStructureUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "BodyStructure")
	}
	if _, ok := api.(BodyStructureDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "BodyStructure")
	}
	if c, ok := api.(BodyStructureSearch); ok {
		c, err := c.SearchCapabilitiesBodyStructure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["BodyStructure"] = c
		}
	}
	if _, ok := api.(BundleCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Bundle")
	}
	if _, ok := api.(BundleRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Bundle")
	}
	if _, ok := api.(BundleUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Bundle")
	}
	if _, ok := api.(BundleDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Bundle")
	}
	if c, ok := api.(BundleSearch); ok {
		c, err := c.SearchCapabilitiesBundle(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Bundle"] = c
		}
	}
	if _, ok := api.(CapabilityStatementCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CapabilityStatement")
	}
	if _, ok := api.(CapabilityStatementRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CapabilityStatement")
	}
	if _, ok := api.(CapabilityStatementUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CapabilityStatement")
	}
	if _, ok := api.(CapabilityStatementDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CapabilityStatement")
	}
	if c, ok := api.(CapabilityStatementSearch); ok {
		c, err := c.SearchCapabilitiesCapabilityStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CapabilityStatement"] = c
		}
	}
	if _, ok := api.(CarePlanCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CarePlan")
	}
	if _, ok := api.(CarePlanRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CarePlan")
	}
	if _, ok := api.(CarePlanUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CarePlan")
	}
	if _, ok := api.(CarePlanDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CarePlan")
	}
	if c, ok := api.(CarePlanSearch); ok {
		c, err := c.SearchCapabilitiesCarePlan(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CarePlan"] = c
		}
	}
	if _, ok := api.(CareTeamCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CareTeam")
	}
	if _, ok := api.(CareTeamRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CareTeam")
	}
	if _, ok := api.(CareTeamUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CareTeam")
	}
	if _, ok := api.(CareTeamDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CareTeam")
	}
	if c, ok := api.(CareTeamSearch); ok {
		c, err := c.SearchCapabilitiesCareTeam(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CareTeam"] = c
		}
	}
	if _, ok := api.(CatalogEntryCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CatalogEntry")
	}
	if _, ok := api.(CatalogEntryRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CatalogEntry")
	}
	if _, ok := api.(CatalogEntryUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CatalogEntry")
	}
	if _, ok := api.(CatalogEntryDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CatalogEntry")
	}
	if c, ok := api.(CatalogEntrySearch); ok {
		c, err := c.SearchCapabilitiesCatalogEntry(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CatalogEntry"] = c
		}
	}
	if _, ok := api.(ChargeItemCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ChargeItem")
	}
	if _, ok := api.(ChargeItemRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ChargeItem")
	}
	if _, ok := api.(ChargeItemUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ChargeItem")
	}
	if _, ok := api.(ChargeItemDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ChargeItem")
	}
	if c, ok := api.(ChargeItemSearch); ok {
		c, err := c.SearchCapabilitiesChargeItem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ChargeItem"] = c
		}
	}
	if _, ok := api.(ChargeItemDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ChargeItemDefinition")
	}
	if _, ok := api.(ChargeItemDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ChargeItemDefinition")
	}
	if _, ok := api.(ChargeItemDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ChargeItemDefinition")
	}
	if _, ok := api.(ChargeItemDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ChargeItemDefinition")
	}
	if c, ok := api.(ChargeItemDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesChargeItemDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ChargeItemDefinition"] = c
		}
	}
	if _, ok := api.(ClaimCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Claim")
	}
	if _, ok := api.(ClaimRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Claim")
	}
	if _, ok := api.(ClaimUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Claim")
	}
	if _, ok := api.(ClaimDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Claim")
	}
	if c, ok := api.(ClaimSearch); ok {
		c, err := c.SearchCapabilitiesClaim(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Claim"] = c
		}
	}
	if _, ok := api.(ClaimResponseCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ClaimResponse")
	}
	if _, ok := api.(ClaimResponseRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ClaimResponse")
	}
	if _, ok := api.(ClaimResponseUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ClaimResponse")
	}
	if _, ok := api.(ClaimResponseDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ClaimResponse")
	}
	if c, ok := api.(ClaimResponseSearch); ok {
		c, err := c.SearchCapabilitiesClaimResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ClaimResponse"] = c
		}
	}
	if _, ok := api.(ClinicalImpressionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ClinicalImpression")
	}
	if _, ok := api.(ClinicalImpressionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ClinicalImpression")
	}
	if _, ok := api.(ClinicalImpressionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ClinicalImpression")
	}
	if _, ok := api.(ClinicalImpressionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ClinicalImpression")
	}
	if c, ok := api.(ClinicalImpressionSearch); ok {
		c, err := c.SearchCapabilitiesClinicalImpression(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ClinicalImpression"] = c
		}
	}
	if _, ok := api.(CodeSystemCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CodeSystem")
	}
	if _, ok := api.(CodeSystemRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CodeSystem")
	}
	if _, ok := api.(CodeSystemUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CodeSystem")
	}
	if _, ok := api.(CodeSystemDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CodeSystem")
	}
	if c, ok := api.(CodeSystemSearch); ok {
		c, err := c.SearchCapabilitiesCodeSystem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CodeSystem"] = c
		}
	}
	if _, ok := api.(CommunicationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Communication")
	}
	if _, ok := api.(CommunicationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Communication")
	}
	if _, ok := api.(CommunicationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Communication")
	}
	if _, ok := api.(CommunicationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Communication")
	}
	if c, ok := api.(CommunicationSearch); ok {
		c, err := c.SearchCapabilitiesCommunication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Communication"] = c
		}
	}
	if _, ok := api.(CommunicationRequestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CommunicationRequest")
	}
	if _, ok := api.(CommunicationRequestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CommunicationRequest")
	}
	if _, ok := api.(CommunicationRequestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CommunicationRequest")
	}
	if _, ok := api.(CommunicationRequestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CommunicationRequest")
	}
	if c, ok := api.(CommunicationRequestSearch); ok {
		c, err := c.SearchCapabilitiesCommunicationRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CommunicationRequest"] = c
		}
	}
	if _, ok := api.(CompartmentDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CompartmentDefinition")
	}
	if _, ok := api.(CompartmentDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CompartmentDefinition")
	}
	if _, ok := api.(CompartmentDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CompartmentDefinition")
	}
	if _, ok := api.(CompartmentDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CompartmentDefinition")
	}
	if c, ok := api.(CompartmentDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesCompartmentDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CompartmentDefinition"] = c
		}
	}
	if _, ok := api.(CompositionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Composition")
	}
	if _, ok := api.(CompositionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Composition")
	}
	if _, ok := api.(CompositionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Composition")
	}
	if _, ok := api.(CompositionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Composition")
	}
	if c, ok := api.(CompositionSearch); ok {
		c, err := c.SearchCapabilitiesComposition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Composition"] = c
		}
	}
	if _, ok := api.(ConceptMapCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ConceptMap")
	}
	if _, ok := api.(ConceptMapRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ConceptMap")
	}
	if _, ok := api.(ConceptMapUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ConceptMap")
	}
	if _, ok := api.(ConceptMapDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ConceptMap")
	}
	if c, ok := api.(ConceptMapSearch); ok {
		c, err := c.SearchCapabilitiesConceptMap(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ConceptMap"] = c
		}
	}
	if _, ok := api.(ConditionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Condition")
	}
	if _, ok := api.(ConditionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Condition")
	}
	if _, ok := api.(ConditionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Condition")
	}
	if _, ok := api.(ConditionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Condition")
	}
	if c, ok := api.(ConditionSearch); ok {
		c, err := c.SearchCapabilitiesCondition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Condition"] = c
		}
	}
	if _, ok := api.(ConsentCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Consent")
	}
	if _, ok := api.(ConsentRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Consent")
	}
	if _, ok := api.(ConsentUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Consent")
	}
	if _, ok := api.(ConsentDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Consent")
	}
	if c, ok := api.(ConsentSearch); ok {
		c, err := c.SearchCapabilitiesConsent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Consent"] = c
		}
	}
	if _, ok := api.(ContractCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Contract")
	}
	if _, ok := api.(ContractRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Contract")
	}
	if _, ok := api.(ContractUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Contract")
	}
	if _, ok := api.(ContractDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Contract")
	}
	if c, ok := api.(ContractSearch); ok {
		c, err := c.SearchCapabilitiesContract(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Contract"] = c
		}
	}
	if _, ok := api.(CoverageCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Coverage")
	}
	if _, ok := api.(CoverageRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Coverage")
	}
	if _, ok := api.(CoverageUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Coverage")
	}
	if _, ok := api.(CoverageDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Coverage")
	}
	if c, ok := api.(CoverageSearch); ok {
		c, err := c.SearchCapabilitiesCoverage(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Coverage"] = c
		}
	}
	if _, ok := api.(CoverageEligibilityRequestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CoverageEligibilityRequest")
	}
	if _, ok := api.(CoverageEligibilityRequestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CoverageEligibilityRequest")
	}
	if _, ok := api.(CoverageEligibilityRequestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CoverageEligibilityRequest")
	}
	if _, ok := api.(CoverageEligibilityRequestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CoverageEligibilityRequest")
	}
	if c, ok := api.(CoverageEligibilityRequestSearch); ok {
		c, err := c.SearchCapabilitiesCoverageEligibilityRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CoverageEligibilityRequest"] = c
		}
	}
	if _, ok := api.(CoverageEligibilityResponseCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "CoverageEligibilityResponse")
	}
	if _, ok := api.(CoverageEligibilityResponseRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "CoverageEligibilityResponse")
	}
	if _, ok := api.(CoverageEligibilityResponseUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "CoverageEligibilityResponse")
	}
	if _, ok := api.(CoverageEligibilityResponseDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "CoverageEligibilityResponse")
	}
	if c, ok := api.(CoverageEligibilityResponseSearch); ok {
		c, err := c.SearchCapabilitiesCoverageEligibilityResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["CoverageEligibilityResponse"] = c
		}
	}
	if _, ok := api.(DetectedIssueCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DetectedIssue")
	}
	if _, ok := api.(DetectedIssueRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DetectedIssue")
	}
	if _, ok := api.(DetectedIssueUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DetectedIssue")
	}
	if _, ok := api.(DetectedIssueDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DetectedIssue")
	}
	if c, ok := api.(DetectedIssueSearch); ok {
		c, err := c.SearchCapabilitiesDetectedIssue(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DetectedIssue"] = c
		}
	}
	if _, ok := api.(DeviceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Device")
	}
	if _, ok := api.(DeviceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Device")
	}
	if _, ok := api.(DeviceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Device")
	}
	if _, ok := api.(DeviceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Device")
	}
	if c, ok := api.(DeviceSearch); ok {
		c, err := c.SearchCapabilitiesDevice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Device"] = c
		}
	}
	if _, ok := api.(DeviceDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DeviceDefinition")
	}
	if _, ok := api.(DeviceDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DeviceDefinition")
	}
	if _, ok := api.(DeviceDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DeviceDefinition")
	}
	if _, ok := api.(DeviceDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DeviceDefinition")
	}
	if c, ok := api.(DeviceDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesDeviceDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DeviceDefinition"] = c
		}
	}
	if _, ok := api.(DeviceMetricCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DeviceMetric")
	}
	if _, ok := api.(DeviceMetricRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DeviceMetric")
	}
	if _, ok := api.(DeviceMetricUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DeviceMetric")
	}
	if _, ok := api.(DeviceMetricDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DeviceMetric")
	}
	if c, ok := api.(DeviceMetricSearch); ok {
		c, err := c.SearchCapabilitiesDeviceMetric(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DeviceMetric"] = c
		}
	}
	if _, ok := api.(DeviceRequestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DeviceRequest")
	}
	if _, ok := api.(DeviceRequestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DeviceRequest")
	}
	if _, ok := api.(DeviceRequestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DeviceRequest")
	}
	if _, ok := api.(DeviceRequestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DeviceRequest")
	}
	if c, ok := api.(DeviceRequestSearch); ok {
		c, err := c.SearchCapabilitiesDeviceRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DeviceRequest"] = c
		}
	}
	if _, ok := api.(DeviceUseStatementCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DeviceUseStatement")
	}
	if _, ok := api.(DeviceUseStatementRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DeviceUseStatement")
	}
	if _, ok := api.(DeviceUseStatementUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DeviceUseStatement")
	}
	if _, ok := api.(DeviceUseStatementDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DeviceUseStatement")
	}
	if c, ok := api.(DeviceUseStatementSearch); ok {
		c, err := c.SearchCapabilitiesDeviceUseStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DeviceUseStatement"] = c
		}
	}
	if _, ok := api.(DiagnosticReportCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DiagnosticReport")
	}
	if _, ok := api.(DiagnosticReportRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DiagnosticReport")
	}
	if _, ok := api.(DiagnosticReportUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DiagnosticReport")
	}
	if _, ok := api.(DiagnosticReportDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DiagnosticReport")
	}
	if c, ok := api.(DiagnosticReportSearch); ok {
		c, err := c.SearchCapabilitiesDiagnosticReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DiagnosticReport"] = c
		}
	}
	if _, ok := api.(DocumentManifestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DocumentManifest")
	}
	if _, ok := api.(DocumentManifestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DocumentManifest")
	}
	if _, ok := api.(DocumentManifestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DocumentManifest")
	}
	if _, ok := api.(DocumentManifestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DocumentManifest")
	}
	if c, ok := api.(DocumentManifestSearch); ok {
		c, err := c.SearchCapabilitiesDocumentManifest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DocumentManifest"] = c
		}
	}
	if _, ok := api.(DocumentReferenceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "DocumentReference")
	}
	if _, ok := api.(DocumentReferenceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "DocumentReference")
	}
	if _, ok := api.(DocumentReferenceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "DocumentReference")
	}
	if _, ok := api.(DocumentReferenceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "DocumentReference")
	}
	if c, ok := api.(DocumentReferenceSearch); ok {
		c, err := c.SearchCapabilitiesDocumentReference(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["DocumentReference"] = c
		}
	}
	if _, ok := api.(EffectEvidenceSynthesisCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "EffectEvidenceSynthesis")
	}
	if _, ok := api.(EffectEvidenceSynthesisRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "EffectEvidenceSynthesis")
	}
	if _, ok := api.(EffectEvidenceSynthesisUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "EffectEvidenceSynthesis")
	}
	if _, ok := api.(EffectEvidenceSynthesisDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "EffectEvidenceSynthesis")
	}
	if c, ok := api.(EffectEvidenceSynthesisSearch); ok {
		c, err := c.SearchCapabilitiesEffectEvidenceSynthesis(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["EffectEvidenceSynthesis"] = c
		}
	}
	if _, ok := api.(EncounterCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Encounter")
	}
	if _, ok := api.(EncounterRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Encounter")
	}
	if _, ok := api.(EncounterUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Encounter")
	}
	if _, ok := api.(EncounterDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Encounter")
	}
	if c, ok := api.(EncounterSearch); ok {
		c, err := c.SearchCapabilitiesEncounter(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Encounter"] = c
		}
	}
	if _, ok := api.(EndpointCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Endpoint")
	}
	if _, ok := api.(EndpointRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Endpoint")
	}
	if _, ok := api.(EndpointUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Endpoint")
	}
	if _, ok := api.(EndpointDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Endpoint")
	}
	if c, ok := api.(EndpointSearch); ok {
		c, err := c.SearchCapabilitiesEndpoint(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Endpoint"] = c
		}
	}
	if _, ok := api.(EnrollmentRequestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "EnrollmentRequest")
	}
	if _, ok := api.(EnrollmentRequestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "EnrollmentRequest")
	}
	if _, ok := api.(EnrollmentRequestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "EnrollmentRequest")
	}
	if _, ok := api.(EnrollmentRequestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "EnrollmentRequest")
	}
	if c, ok := api.(EnrollmentRequestSearch); ok {
		c, err := c.SearchCapabilitiesEnrollmentRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["EnrollmentRequest"] = c
		}
	}
	if _, ok := api.(EnrollmentResponseCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "EnrollmentResponse")
	}
	if _, ok := api.(EnrollmentResponseRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "EnrollmentResponse")
	}
	if _, ok := api.(EnrollmentResponseUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "EnrollmentResponse")
	}
	if _, ok := api.(EnrollmentResponseDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "EnrollmentResponse")
	}
	if c, ok := api.(EnrollmentResponseSearch); ok {
		c, err := c.SearchCapabilitiesEnrollmentResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["EnrollmentResponse"] = c
		}
	}
	if _, ok := api.(EpisodeOfCareCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "EpisodeOfCare")
	}
	if _, ok := api.(EpisodeOfCareRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "EpisodeOfCare")
	}
	if _, ok := api.(EpisodeOfCareUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "EpisodeOfCare")
	}
	if _, ok := api.(EpisodeOfCareDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "EpisodeOfCare")
	}
	if c, ok := api.(EpisodeOfCareSearch); ok {
		c, err := c.SearchCapabilitiesEpisodeOfCare(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["EpisodeOfCare"] = c
		}
	}
	if _, ok := api.(EventDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "EventDefinition")
	}
	if _, ok := api.(EventDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "EventDefinition")
	}
	if _, ok := api.(EventDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "EventDefinition")
	}
	if _, ok := api.(EventDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "EventDefinition")
	}
	if c, ok := api.(EventDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesEventDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["EventDefinition"] = c
		}
	}
	if _, ok := api.(EvidenceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Evidence")
	}
	if _, ok := api.(EvidenceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Evidence")
	}
	if _, ok := api.(EvidenceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Evidence")
	}
	if _, ok := api.(EvidenceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Evidence")
	}
	if c, ok := api.(EvidenceSearch); ok {
		c, err := c.SearchCapabilitiesEvidence(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Evidence"] = c
		}
	}
	if _, ok := api.(EvidenceVariableCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "EvidenceVariable")
	}
	if _, ok := api.(EvidenceVariableRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "EvidenceVariable")
	}
	if _, ok := api.(EvidenceVariableUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "EvidenceVariable")
	}
	if _, ok := api.(EvidenceVariableDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "EvidenceVariable")
	}
	if c, ok := api.(EvidenceVariableSearch); ok {
		c, err := c.SearchCapabilitiesEvidenceVariable(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["EvidenceVariable"] = c
		}
	}
	if _, ok := api.(ExampleScenarioCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ExampleScenario")
	}
	if _, ok := api.(ExampleScenarioRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ExampleScenario")
	}
	if _, ok := api.(ExampleScenarioUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ExampleScenario")
	}
	if _, ok := api.(ExampleScenarioDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ExampleScenario")
	}
	if c, ok := api.(ExampleScenarioSearch); ok {
		c, err := c.SearchCapabilitiesExampleScenario(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ExampleScenario"] = c
		}
	}
	if _, ok := api.(ExplanationOfBenefitCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ExplanationOfBenefit")
	}
	if _, ok := api.(ExplanationOfBenefitRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ExplanationOfBenefit")
	}
	if _, ok := api.(ExplanationOfBenefitUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ExplanationOfBenefit")
	}
	if _, ok := api.(ExplanationOfBenefitDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ExplanationOfBenefit")
	}
	if c, ok := api.(ExplanationOfBenefitSearch); ok {
		c, err := c.SearchCapabilitiesExplanationOfBenefit(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ExplanationOfBenefit"] = c
		}
	}
	if _, ok := api.(FamilyMemberHistoryCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "FamilyMemberHistory")
	}
	if _, ok := api.(FamilyMemberHistoryRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "FamilyMemberHistory")
	}
	if _, ok := api.(FamilyMemberHistoryUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "FamilyMemberHistory")
	}
	if _, ok := api.(FamilyMemberHistoryDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "FamilyMemberHistory")
	}
	if c, ok := api.(FamilyMemberHistorySearch); ok {
		c, err := c.SearchCapabilitiesFamilyMemberHistory(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["FamilyMemberHistory"] = c
		}
	}
	if _, ok := api.(FlagCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Flag")
	}
	if _, ok := api.(FlagRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Flag")
	}
	if _, ok := api.(FlagUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Flag")
	}
	if _, ok := api.(FlagDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Flag")
	}
	if c, ok := api.(FlagSearch); ok {
		c, err := c.SearchCapabilitiesFlag(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Flag"] = c
		}
	}
	if _, ok := api.(GoalCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Goal")
	}
	if _, ok := api.(GoalRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Goal")
	}
	if _, ok := api.(GoalUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Goal")
	}
	if _, ok := api.(GoalDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Goal")
	}
	if c, ok := api.(GoalSearch); ok {
		c, err := c.SearchCapabilitiesGoal(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Goal"] = c
		}
	}
	if _, ok := api.(GraphDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "GraphDefinition")
	}
	if _, ok := api.(GraphDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "GraphDefinition")
	}
	if _, ok := api.(GraphDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "GraphDefinition")
	}
	if _, ok := api.(GraphDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "GraphDefinition")
	}
	if c, ok := api.(GraphDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesGraphDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["GraphDefinition"] = c
		}
	}
	if _, ok := api.(GroupCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Group")
	}
	if _, ok := api.(GroupRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Group")
	}
	if _, ok := api.(GroupUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Group")
	}
	if _, ok := api.(GroupDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Group")
	}
	if c, ok := api.(GroupSearch); ok {
		c, err := c.SearchCapabilitiesGroup(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Group"] = c
		}
	}
	if _, ok := api.(GuidanceResponseCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "GuidanceResponse")
	}
	if _, ok := api.(GuidanceResponseRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "GuidanceResponse")
	}
	if _, ok := api.(GuidanceResponseUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "GuidanceResponse")
	}
	if _, ok := api.(GuidanceResponseDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "GuidanceResponse")
	}
	if c, ok := api.(GuidanceResponseSearch); ok {
		c, err := c.SearchCapabilitiesGuidanceResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["GuidanceResponse"] = c
		}
	}
	if _, ok := api.(HealthcareServiceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "HealthcareService")
	}
	if _, ok := api.(HealthcareServiceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "HealthcareService")
	}
	if _, ok := api.(HealthcareServiceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "HealthcareService")
	}
	if _, ok := api.(HealthcareServiceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "HealthcareService")
	}
	if c, ok := api.(HealthcareServiceSearch); ok {
		c, err := c.SearchCapabilitiesHealthcareService(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["HealthcareService"] = c
		}
	}
	if _, ok := api.(ImagingStudyCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ImagingStudy")
	}
	if _, ok := api.(ImagingStudyRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ImagingStudy")
	}
	if _, ok := api.(ImagingStudyUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ImagingStudy")
	}
	if _, ok := api.(ImagingStudyDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ImagingStudy")
	}
	if c, ok := api.(ImagingStudySearch); ok {
		c, err := c.SearchCapabilitiesImagingStudy(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ImagingStudy"] = c
		}
	}
	if _, ok := api.(ImmunizationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Immunization")
	}
	if _, ok := api.(ImmunizationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Immunization")
	}
	if _, ok := api.(ImmunizationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Immunization")
	}
	if _, ok := api.(ImmunizationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Immunization")
	}
	if c, ok := api.(ImmunizationSearch); ok {
		c, err := c.SearchCapabilitiesImmunization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Immunization"] = c
		}
	}
	if _, ok := api.(ImmunizationEvaluationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ImmunizationEvaluation")
	}
	if _, ok := api.(ImmunizationEvaluationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ImmunizationEvaluation")
	}
	if _, ok := api.(ImmunizationEvaluationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ImmunizationEvaluation")
	}
	if _, ok := api.(ImmunizationEvaluationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ImmunizationEvaluation")
	}
	if c, ok := api.(ImmunizationEvaluationSearch); ok {
		c, err := c.SearchCapabilitiesImmunizationEvaluation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ImmunizationEvaluation"] = c
		}
	}
	if _, ok := api.(ImmunizationRecommendationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ImmunizationRecommendation")
	}
	if _, ok := api.(ImmunizationRecommendationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ImmunizationRecommendation")
	}
	if _, ok := api.(ImmunizationRecommendationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ImmunizationRecommendation")
	}
	if _, ok := api.(ImmunizationRecommendationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ImmunizationRecommendation")
	}
	if c, ok := api.(ImmunizationRecommendationSearch); ok {
		c, err := c.SearchCapabilitiesImmunizationRecommendation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ImmunizationRecommendation"] = c
		}
	}
	if _, ok := api.(ImplementationGuideCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ImplementationGuide")
	}
	if _, ok := api.(ImplementationGuideRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ImplementationGuide")
	}
	if _, ok := api.(ImplementationGuideUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ImplementationGuide")
	}
	if _, ok := api.(ImplementationGuideDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ImplementationGuide")
	}
	if c, ok := api.(ImplementationGuideSearch); ok {
		c, err := c.SearchCapabilitiesImplementationGuide(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ImplementationGuide"] = c
		}
	}
	if _, ok := api.(InsurancePlanCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "InsurancePlan")
	}
	if _, ok := api.(InsurancePlanRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "InsurancePlan")
	}
	if _, ok := api.(InsurancePlanUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "InsurancePlan")
	}
	if _, ok := api.(InsurancePlanDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "InsurancePlan")
	}
	if c, ok := api.(InsurancePlanSearch); ok {
		c, err := c.SearchCapabilitiesInsurancePlan(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["InsurancePlan"] = c
		}
	}
	if _, ok := api.(InvoiceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Invoice")
	}
	if _, ok := api.(InvoiceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Invoice")
	}
	if _, ok := api.(InvoiceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Invoice")
	}
	if _, ok := api.(InvoiceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Invoice")
	}
	if c, ok := api.(InvoiceSearch); ok {
		c, err := c.SearchCapabilitiesInvoice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Invoice"] = c
		}
	}
	if _, ok := api.(LibraryCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Library")
	}
	if _, ok := api.(LibraryRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Library")
	}
	if _, ok := api.(LibraryUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Library")
	}
	if _, ok := api.(LibraryDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Library")
	}
	if c, ok := api.(LibrarySearch); ok {
		c, err := c.SearchCapabilitiesLibrary(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Library"] = c
		}
	}
	if _, ok := api.(LinkageCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Linkage")
	}
	if _, ok := api.(LinkageRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Linkage")
	}
	if _, ok := api.(LinkageUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Linkage")
	}
	if _, ok := api.(LinkageDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Linkage")
	}
	if c, ok := api.(LinkageSearch); ok {
		c, err := c.SearchCapabilitiesLinkage(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Linkage"] = c
		}
	}
	if _, ok := api.(ListCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "List")
	}
	if _, ok := api.(ListRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "List")
	}
	if _, ok := api.(ListUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "List")
	}
	if _, ok := api.(ListDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "List")
	}
	if c, ok := api.(ListSearch); ok {
		c, err := c.SearchCapabilitiesList(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["List"] = c
		}
	}
	if _, ok := api.(LocationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Location")
	}
	if _, ok := api.(LocationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Location")
	}
	if _, ok := api.(LocationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Location")
	}
	if _, ok := api.(LocationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Location")
	}
	if c, ok := api.(LocationSearch); ok {
		c, err := c.SearchCapabilitiesLocation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Location"] = c
		}
	}
	if _, ok := api.(MeasureCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Measure")
	}
	if _, ok := api.(MeasureRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Measure")
	}
	if _, ok := api.(MeasureUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Measure")
	}
	if _, ok := api.(MeasureDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Measure")
	}
	if c, ok := api.(MeasureSearch); ok {
		c, err := c.SearchCapabilitiesMeasure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Measure"] = c
		}
	}
	if _, ok := api.(MeasureReportCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MeasureReport")
	}
	if _, ok := api.(MeasureReportRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MeasureReport")
	}
	if _, ok := api.(MeasureReportUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MeasureReport")
	}
	if _, ok := api.(MeasureReportDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MeasureReport")
	}
	if c, ok := api.(MeasureReportSearch); ok {
		c, err := c.SearchCapabilitiesMeasureReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MeasureReport"] = c
		}
	}
	if _, ok := api.(MediaCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Media")
	}
	if _, ok := api.(MediaRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Media")
	}
	if _, ok := api.(MediaUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Media")
	}
	if _, ok := api.(MediaDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Media")
	}
	if c, ok := api.(MediaSearch); ok {
		c, err := c.SearchCapabilitiesMedia(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Media"] = c
		}
	}
	if _, ok := api.(MedicationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Medication")
	}
	if _, ok := api.(MedicationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Medication")
	}
	if _, ok := api.(MedicationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Medication")
	}
	if _, ok := api.(MedicationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Medication")
	}
	if c, ok := api.(MedicationSearch); ok {
		c, err := c.SearchCapabilitiesMedication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Medication"] = c
		}
	}
	if _, ok := api.(MedicationAdministrationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicationAdministration")
	}
	if _, ok := api.(MedicationAdministrationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicationAdministration")
	}
	if _, ok := api.(MedicationAdministrationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicationAdministration")
	}
	if _, ok := api.(MedicationAdministrationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicationAdministration")
	}
	if c, ok := api.(MedicationAdministrationSearch); ok {
		c, err := c.SearchCapabilitiesMedicationAdministration(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicationAdministration"] = c
		}
	}
	if _, ok := api.(MedicationDispenseCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicationDispense")
	}
	if _, ok := api.(MedicationDispenseRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicationDispense")
	}
	if _, ok := api.(MedicationDispenseUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicationDispense")
	}
	if _, ok := api.(MedicationDispenseDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicationDispense")
	}
	if c, ok := api.(MedicationDispenseSearch); ok {
		c, err := c.SearchCapabilitiesMedicationDispense(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicationDispense"] = c
		}
	}
	if _, ok := api.(MedicationKnowledgeCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicationKnowledge")
	}
	if _, ok := api.(MedicationKnowledgeRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicationKnowledge")
	}
	if _, ok := api.(MedicationKnowledgeUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicationKnowledge")
	}
	if _, ok := api.(MedicationKnowledgeDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicationKnowledge")
	}
	if c, ok := api.(MedicationKnowledgeSearch); ok {
		c, err := c.SearchCapabilitiesMedicationKnowledge(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicationKnowledge"] = c
		}
	}
	if _, ok := api.(MedicationRequestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicationRequest")
	}
	if _, ok := api.(MedicationRequestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicationRequest")
	}
	if _, ok := api.(MedicationRequestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicationRequest")
	}
	if _, ok := api.(MedicationRequestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicationRequest")
	}
	if c, ok := api.(MedicationRequestSearch); ok {
		c, err := c.SearchCapabilitiesMedicationRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicationRequest"] = c
		}
	}
	if _, ok := api.(MedicationStatementCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicationStatement")
	}
	if _, ok := api.(MedicationStatementRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicationStatement")
	}
	if _, ok := api.(MedicationStatementUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicationStatement")
	}
	if _, ok := api.(MedicationStatementDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicationStatement")
	}
	if c, ok := api.(MedicationStatementSearch); ok {
		c, err := c.SearchCapabilitiesMedicationStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicationStatement"] = c
		}
	}
	if _, ok := api.(MedicinalProductCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProduct")
	}
	if _, ok := api.(MedicinalProductRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProduct")
	}
	if _, ok := api.(MedicinalProductUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProduct")
	}
	if _, ok := api.(MedicinalProductDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProduct")
	}
	if c, ok := api.(MedicinalProductSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProduct(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProduct"] = c
		}
	}
	if _, ok := api.(MedicinalProductAuthorizationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductAuthorization")
	}
	if _, ok := api.(MedicinalProductAuthorizationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductAuthorization")
	}
	if _, ok := api.(MedicinalProductAuthorizationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductAuthorization")
	}
	if _, ok := api.(MedicinalProductAuthorizationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductAuthorization")
	}
	if c, ok := api.(MedicinalProductAuthorizationSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductAuthorization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductAuthorization"] = c
		}
	}
	if _, ok := api.(MedicinalProductContraindicationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductContraindication")
	}
	if _, ok := api.(MedicinalProductContraindicationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductContraindication")
	}
	if _, ok := api.(MedicinalProductContraindicationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductContraindication")
	}
	if _, ok := api.(MedicinalProductContraindicationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductContraindication")
	}
	if c, ok := api.(MedicinalProductContraindicationSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductContraindication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductContraindication"] = c
		}
	}
	if _, ok := api.(MedicinalProductIndicationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductIndication")
	}
	if _, ok := api.(MedicinalProductIndicationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductIndication")
	}
	if _, ok := api.(MedicinalProductIndicationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductIndication")
	}
	if _, ok := api.(MedicinalProductIndicationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductIndication")
	}
	if c, ok := api.(MedicinalProductIndicationSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductIndication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductIndication"] = c
		}
	}
	if _, ok := api.(MedicinalProductIngredientCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductIngredient")
	}
	if _, ok := api.(MedicinalProductIngredientRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductIngredient")
	}
	if _, ok := api.(MedicinalProductIngredientUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductIngredient")
	}
	if _, ok := api.(MedicinalProductIngredientDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductIngredient")
	}
	if c, ok := api.(MedicinalProductIngredientSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductIngredient(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductIngredient"] = c
		}
	}
	if _, ok := api.(MedicinalProductInteractionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductInteraction")
	}
	if _, ok := api.(MedicinalProductInteractionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductInteraction")
	}
	if _, ok := api.(MedicinalProductInteractionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductInteraction")
	}
	if _, ok := api.(MedicinalProductInteractionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductInteraction")
	}
	if c, ok := api.(MedicinalProductInteractionSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductInteraction(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductInteraction"] = c
		}
	}
	if _, ok := api.(MedicinalProductManufacturedCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductManufactured")
	}
	if _, ok := api.(MedicinalProductManufacturedRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductManufactured")
	}
	if _, ok := api.(MedicinalProductManufacturedUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductManufactured")
	}
	if _, ok := api.(MedicinalProductManufacturedDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductManufactured")
	}
	if c, ok := api.(MedicinalProductManufacturedSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductManufactured(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductManufactured"] = c
		}
	}
	if _, ok := api.(MedicinalProductPackagedCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductPackaged")
	}
	if _, ok := api.(MedicinalProductPackagedRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductPackaged")
	}
	if _, ok := api.(MedicinalProductPackagedUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductPackaged")
	}
	if _, ok := api.(MedicinalProductPackagedDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductPackaged")
	}
	if c, ok := api.(MedicinalProductPackagedSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductPackaged(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductPackaged"] = c
		}
	}
	if _, ok := api.(MedicinalProductPharmaceuticalCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductPharmaceutical")
	}
	if _, ok := api.(MedicinalProductPharmaceuticalRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductPharmaceutical")
	}
	if _, ok := api.(MedicinalProductPharmaceuticalUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductPharmaceutical")
	}
	if _, ok := api.(MedicinalProductPharmaceuticalDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductPharmaceutical")
	}
	if c, ok := api.(MedicinalProductPharmaceuticalSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductPharmaceutical(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductPharmaceutical"] = c
		}
	}
	if _, ok := api.(MedicinalProductUndesirableEffectCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MedicinalProductUndesirableEffect")
	}
	if _, ok := api.(MedicinalProductUndesirableEffectRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MedicinalProductUndesirableEffect")
	}
	if _, ok := api.(MedicinalProductUndesirableEffectUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MedicinalProductUndesirableEffect")
	}
	if _, ok := api.(MedicinalProductUndesirableEffectDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MedicinalProductUndesirableEffect")
	}
	if c, ok := api.(MedicinalProductUndesirableEffectSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductUndesirableEffect(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MedicinalProductUndesirableEffect"] = c
		}
	}
	if _, ok := api.(MessageDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MessageDefinition")
	}
	if _, ok := api.(MessageDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MessageDefinition")
	}
	if _, ok := api.(MessageDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MessageDefinition")
	}
	if _, ok := api.(MessageDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MessageDefinition")
	}
	if c, ok := api.(MessageDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesMessageDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MessageDefinition"] = c
		}
	}
	if _, ok := api.(MessageHeaderCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MessageHeader")
	}
	if _, ok := api.(MessageHeaderRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MessageHeader")
	}
	if _, ok := api.(MessageHeaderUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MessageHeader")
	}
	if _, ok := api.(MessageHeaderDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MessageHeader")
	}
	if c, ok := api.(MessageHeaderSearch); ok {
		c, err := c.SearchCapabilitiesMessageHeader(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MessageHeader"] = c
		}
	}
	if _, ok := api.(MolecularSequenceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "MolecularSequence")
	}
	if _, ok := api.(MolecularSequenceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "MolecularSequence")
	}
	if _, ok := api.(MolecularSequenceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "MolecularSequence")
	}
	if _, ok := api.(MolecularSequenceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "MolecularSequence")
	}
	if c, ok := api.(MolecularSequenceSearch); ok {
		c, err := c.SearchCapabilitiesMolecularSequence(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["MolecularSequence"] = c
		}
	}
	if _, ok := api.(NamingSystemCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "NamingSystem")
	}
	if _, ok := api.(NamingSystemRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "NamingSystem")
	}
	if _, ok := api.(NamingSystemUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "NamingSystem")
	}
	if _, ok := api.(NamingSystemDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "NamingSystem")
	}
	if c, ok := api.(NamingSystemSearch); ok {
		c, err := c.SearchCapabilitiesNamingSystem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["NamingSystem"] = c
		}
	}
	if _, ok := api.(NutritionOrderCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "NutritionOrder")
	}
	if _, ok := api.(NutritionOrderRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "NutritionOrder")
	}
	if _, ok := api.(NutritionOrderUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "NutritionOrder")
	}
	if _, ok := api.(NutritionOrderDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "NutritionOrder")
	}
	if c, ok := api.(NutritionOrderSearch); ok {
		c, err := c.SearchCapabilitiesNutritionOrder(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["NutritionOrder"] = c
		}
	}
	if _, ok := api.(ObservationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Observation")
	}
	if _, ok := api.(ObservationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Observation")
	}
	if _, ok := api.(ObservationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Observation")
	}
	if _, ok := api.(ObservationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Observation")
	}
	if c, ok := api.(ObservationSearch); ok {
		c, err := c.SearchCapabilitiesObservation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Observation"] = c
		}
	}
	if _, ok := api.(ObservationDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ObservationDefinition")
	}
	if _, ok := api.(ObservationDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ObservationDefinition")
	}
	if _, ok := api.(ObservationDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ObservationDefinition")
	}
	if _, ok := api.(ObservationDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ObservationDefinition")
	}
	if c, ok := api.(ObservationDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesObservationDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ObservationDefinition"] = c
		}
	}
	if _, ok := api.(OperationDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "OperationDefinition")
	}
	if _, ok := api.(OperationDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "OperationDefinition")
	}
	if _, ok := api.(OperationDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "OperationDefinition")
	}
	if _, ok := api.(OperationDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "OperationDefinition")
	}
	if c, ok := api.(OperationDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesOperationDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["OperationDefinition"] = c
		}
	}
	if _, ok := api.(OperationOutcomeCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "OperationOutcome")
	}
	if _, ok := api.(OperationOutcomeRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "OperationOutcome")
	}
	if _, ok := api.(OperationOutcomeUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "OperationOutcome")
	}
	if _, ok := api.(OperationOutcomeDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "OperationOutcome")
	}
	if c, ok := api.(OperationOutcomeSearch); ok {
		c, err := c.SearchCapabilitiesOperationOutcome(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["OperationOutcome"] = c
		}
	}
	if _, ok := api.(OrganizationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Organization")
	}
	if _, ok := api.(OrganizationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Organization")
	}
	if _, ok := api.(OrganizationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Organization")
	}
	if _, ok := api.(OrganizationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Organization")
	}
	if c, ok := api.(OrganizationSearch); ok {
		c, err := c.SearchCapabilitiesOrganization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Organization"] = c
		}
	}
	if _, ok := api.(OrganizationAffiliationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "OrganizationAffiliation")
	}
	if _, ok := api.(OrganizationAffiliationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "OrganizationAffiliation")
	}
	if _, ok := api.(OrganizationAffiliationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "OrganizationAffiliation")
	}
	if _, ok := api.(OrganizationAffiliationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "OrganizationAffiliation")
	}
	if c, ok := api.(OrganizationAffiliationSearch); ok {
		c, err := c.SearchCapabilitiesOrganizationAffiliation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["OrganizationAffiliation"] = c
		}
	}
	if _, ok := api.(ParametersCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Parameters")
	}
	if _, ok := api.(ParametersRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Parameters")
	}
	if _, ok := api.(ParametersUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Parameters")
	}
	if _, ok := api.(ParametersDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Parameters")
	}
	if c, ok := api.(ParametersSearch); ok {
		c, err := c.SearchCapabilitiesParameters(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Parameters"] = c
		}
	}
	if _, ok := api.(PatientCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Patient")
	}
	if _, ok := api.(PatientRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Patient")
	}
	if _, ok := api.(PatientUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Patient")
	}
	if _, ok := api.(PatientDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Patient")
	}
	if c, ok := api.(PatientSearch); ok {
		c, err := c.SearchCapabilitiesPatient(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Patient"] = c
		}
	}
	if _, ok := api.(PaymentNoticeCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "PaymentNotice")
	}
	if _, ok := api.(PaymentNoticeRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "PaymentNotice")
	}
	if _, ok := api.(PaymentNoticeUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "PaymentNotice")
	}
	if _, ok := api.(PaymentNoticeDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "PaymentNotice")
	}
	if c, ok := api.(PaymentNoticeSearch); ok {
		c, err := c.SearchCapabilitiesPaymentNotice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["PaymentNotice"] = c
		}
	}
	if _, ok := api.(PaymentReconciliationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "PaymentReconciliation")
	}
	if _, ok := api.(PaymentReconciliationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "PaymentReconciliation")
	}
	if _, ok := api.(PaymentReconciliationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "PaymentReconciliation")
	}
	if _, ok := api.(PaymentReconciliationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "PaymentReconciliation")
	}
	if c, ok := api.(PaymentReconciliationSearch); ok {
		c, err := c.SearchCapabilitiesPaymentReconciliation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["PaymentReconciliation"] = c
		}
	}
	if _, ok := api.(PersonCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Person")
	}
	if _, ok := api.(PersonRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Person")
	}
	if _, ok := api.(PersonUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Person")
	}
	if _, ok := api.(PersonDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Person")
	}
	if c, ok := api.(PersonSearch); ok {
		c, err := c.SearchCapabilitiesPerson(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Person"] = c
		}
	}
	if _, ok := api.(PlanDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "PlanDefinition")
	}
	if _, ok := api.(PlanDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "PlanDefinition")
	}
	if _, ok := api.(PlanDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "PlanDefinition")
	}
	if _, ok := api.(PlanDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "PlanDefinition")
	}
	if c, ok := api.(PlanDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesPlanDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["PlanDefinition"] = c
		}
	}
	if _, ok := api.(PractitionerCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Practitioner")
	}
	if _, ok := api.(PractitionerRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Practitioner")
	}
	if _, ok := api.(PractitionerUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Practitioner")
	}
	if _, ok := api.(PractitionerDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Practitioner")
	}
	if c, ok := api.(PractitionerSearch); ok {
		c, err := c.SearchCapabilitiesPractitioner(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Practitioner"] = c
		}
	}
	if _, ok := api.(PractitionerRoleCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "PractitionerRole")
	}
	if _, ok := api.(PractitionerRoleRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "PractitionerRole")
	}
	if _, ok := api.(PractitionerRoleUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "PractitionerRole")
	}
	if _, ok := api.(PractitionerRoleDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "PractitionerRole")
	}
	if c, ok := api.(PractitionerRoleSearch); ok {
		c, err := c.SearchCapabilitiesPractitionerRole(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["PractitionerRole"] = c
		}
	}
	if _, ok := api.(ProcedureCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Procedure")
	}
	if _, ok := api.(ProcedureRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Procedure")
	}
	if _, ok := api.(ProcedureUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Procedure")
	}
	if _, ok := api.(ProcedureDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Procedure")
	}
	if c, ok := api.(ProcedureSearch); ok {
		c, err := c.SearchCapabilitiesProcedure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Procedure"] = c
		}
	}
	if _, ok := api.(ProvenanceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Provenance")
	}
	if _, ok := api.(ProvenanceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Provenance")
	}
	if _, ok := api.(ProvenanceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Provenance")
	}
	if _, ok := api.(ProvenanceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Provenance")
	}
	if c, ok := api.(ProvenanceSearch); ok {
		c, err := c.SearchCapabilitiesProvenance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Provenance"] = c
		}
	}
	if _, ok := api.(QuestionnaireCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Questionnaire")
	}
	if _, ok := api.(QuestionnaireRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Questionnaire")
	}
	if _, ok := api.(QuestionnaireUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Questionnaire")
	}
	if _, ok := api.(QuestionnaireDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Questionnaire")
	}
	if c, ok := api.(QuestionnaireSearch); ok {
		c, err := c.SearchCapabilitiesQuestionnaire(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Questionnaire"] = c
		}
	}
	if _, ok := api.(QuestionnaireResponseCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "QuestionnaireResponse")
	}
	if _, ok := api.(QuestionnaireResponseRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "QuestionnaireResponse")
	}
	if _, ok := api.(QuestionnaireResponseUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "QuestionnaireResponse")
	}
	if _, ok := api.(QuestionnaireResponseDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "QuestionnaireResponse")
	}
	if c, ok := api.(QuestionnaireResponseSearch); ok {
		c, err := c.SearchCapabilitiesQuestionnaireResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["QuestionnaireResponse"] = c
		}
	}
	if _, ok := api.(RelatedPersonCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "RelatedPerson")
	}
	if _, ok := api.(RelatedPersonRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "RelatedPerson")
	}
	if _, ok := api.(RelatedPersonUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "RelatedPerson")
	}
	if _, ok := api.(RelatedPersonDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "RelatedPerson")
	}
	if c, ok := api.(RelatedPersonSearch); ok {
		c, err := c.SearchCapabilitiesRelatedPerson(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["RelatedPerson"] = c
		}
	}
	if _, ok := api.(RequestGroupCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "RequestGroup")
	}
	if _, ok := api.(RequestGroupRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "RequestGroup")
	}
	if _, ok := api.(RequestGroupUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "RequestGroup")
	}
	if _, ok := api.(RequestGroupDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "RequestGroup")
	}
	if c, ok := api.(RequestGroupSearch); ok {
		c, err := c.SearchCapabilitiesRequestGroup(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["RequestGroup"] = c
		}
	}
	if _, ok := api.(ResearchDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ResearchDefinition")
	}
	if _, ok := api.(ResearchDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ResearchDefinition")
	}
	if _, ok := api.(ResearchDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ResearchDefinition")
	}
	if _, ok := api.(ResearchDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ResearchDefinition")
	}
	if c, ok := api.(ResearchDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesResearchDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ResearchDefinition"] = c
		}
	}
	if _, ok := api.(ResearchElementDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ResearchElementDefinition")
	}
	if _, ok := api.(ResearchElementDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ResearchElementDefinition")
	}
	if _, ok := api.(ResearchElementDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ResearchElementDefinition")
	}
	if _, ok := api.(ResearchElementDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ResearchElementDefinition")
	}
	if c, ok := api.(ResearchElementDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesResearchElementDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ResearchElementDefinition"] = c
		}
	}
	if _, ok := api.(ResearchStudyCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ResearchStudy")
	}
	if _, ok := api.(ResearchStudyRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ResearchStudy")
	}
	if _, ok := api.(ResearchStudyUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ResearchStudy")
	}
	if _, ok := api.(ResearchStudyDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ResearchStudy")
	}
	if c, ok := api.(ResearchStudySearch); ok {
		c, err := c.SearchCapabilitiesResearchStudy(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ResearchStudy"] = c
		}
	}
	if _, ok := api.(ResearchSubjectCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ResearchSubject")
	}
	if _, ok := api.(ResearchSubjectRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ResearchSubject")
	}
	if _, ok := api.(ResearchSubjectUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ResearchSubject")
	}
	if _, ok := api.(ResearchSubjectDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ResearchSubject")
	}
	if c, ok := api.(ResearchSubjectSearch); ok {
		c, err := c.SearchCapabilitiesResearchSubject(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ResearchSubject"] = c
		}
	}
	if _, ok := api.(RiskAssessmentCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "RiskAssessment")
	}
	if _, ok := api.(RiskAssessmentRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "RiskAssessment")
	}
	if _, ok := api.(RiskAssessmentUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "RiskAssessment")
	}
	if _, ok := api.(RiskAssessmentDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "RiskAssessment")
	}
	if c, ok := api.(RiskAssessmentSearch); ok {
		c, err := c.SearchCapabilitiesRiskAssessment(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["RiskAssessment"] = c
		}
	}
	if _, ok := api.(RiskEvidenceSynthesisCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "RiskEvidenceSynthesis")
	}
	if _, ok := api.(RiskEvidenceSynthesisRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "RiskEvidenceSynthesis")
	}
	if _, ok := api.(RiskEvidenceSynthesisUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "RiskEvidenceSynthesis")
	}
	if _, ok := api.(RiskEvidenceSynthesisDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "RiskEvidenceSynthesis")
	}
	if c, ok := api.(RiskEvidenceSynthesisSearch); ok {
		c, err := c.SearchCapabilitiesRiskEvidenceSynthesis(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["RiskEvidenceSynthesis"] = c
		}
	}
	if _, ok := api.(ScheduleCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Schedule")
	}
	if _, ok := api.(ScheduleRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Schedule")
	}
	if _, ok := api.(ScheduleUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Schedule")
	}
	if _, ok := api.(ScheduleDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Schedule")
	}
	if c, ok := api.(ScheduleSearch); ok {
		c, err := c.SearchCapabilitiesSchedule(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Schedule"] = c
		}
	}
	if _, ok := api.(SearchParameterCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SearchParameter")
	}
	if _, ok := api.(SearchParameterRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SearchParameter")
	}
	if _, ok := api.(SearchParameterUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SearchParameter")
	}
	if _, ok := api.(SearchParameterDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SearchParameter")
	}
	if c, ok := api.(SearchParameterSearch); ok {
		c, err := c.SearchCapabilitiesSearchParameter(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SearchParameter"] = c
		}
	}
	if _, ok := api.(ServiceRequestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ServiceRequest")
	}
	if _, ok := api.(ServiceRequestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ServiceRequest")
	}
	if _, ok := api.(ServiceRequestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ServiceRequest")
	}
	if _, ok := api.(ServiceRequestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ServiceRequest")
	}
	if c, ok := api.(ServiceRequestSearch); ok {
		c, err := c.SearchCapabilitiesServiceRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ServiceRequest"] = c
		}
	}
	if _, ok := api.(SlotCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Slot")
	}
	if _, ok := api.(SlotRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Slot")
	}
	if _, ok := api.(SlotUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Slot")
	}
	if _, ok := api.(SlotDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Slot")
	}
	if c, ok := api.(SlotSearch); ok {
		c, err := c.SearchCapabilitiesSlot(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Slot"] = c
		}
	}
	if _, ok := api.(SpecimenCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Specimen")
	}
	if _, ok := api.(SpecimenRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Specimen")
	}
	if _, ok := api.(SpecimenUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Specimen")
	}
	if _, ok := api.(SpecimenDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Specimen")
	}
	if c, ok := api.(SpecimenSearch); ok {
		c, err := c.SearchCapabilitiesSpecimen(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Specimen"] = c
		}
	}
	if _, ok := api.(SpecimenDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SpecimenDefinition")
	}
	if _, ok := api.(SpecimenDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SpecimenDefinition")
	}
	if _, ok := api.(SpecimenDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SpecimenDefinition")
	}
	if _, ok := api.(SpecimenDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SpecimenDefinition")
	}
	if c, ok := api.(SpecimenDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesSpecimenDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SpecimenDefinition"] = c
		}
	}
	if _, ok := api.(StructureDefinitionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "StructureDefinition")
	}
	if _, ok := api.(StructureDefinitionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "StructureDefinition")
	}
	if _, ok := api.(StructureDefinitionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "StructureDefinition")
	}
	if _, ok := api.(StructureDefinitionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "StructureDefinition")
	}
	if c, ok := api.(StructureDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesStructureDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["StructureDefinition"] = c
		}
	}
	if _, ok := api.(StructureMapCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "StructureMap")
	}
	if _, ok := api.(StructureMapRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "StructureMap")
	}
	if _, ok := api.(StructureMapUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "StructureMap")
	}
	if _, ok := api.(StructureMapDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "StructureMap")
	}
	if c, ok := api.(StructureMapSearch); ok {
		c, err := c.SearchCapabilitiesStructureMap(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["StructureMap"] = c
		}
	}
	if _, ok := api.(SubscriptionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Subscription")
	}
	if _, ok := api.(SubscriptionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Subscription")
	}
	if _, ok := api.(SubscriptionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Subscription")
	}
	if _, ok := api.(SubscriptionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Subscription")
	}
	if c, ok := api.(SubscriptionSearch); ok {
		c, err := c.SearchCapabilitiesSubscription(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Subscription"] = c
		}
	}
	if _, ok := api.(SubstanceCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Substance")
	}
	if _, ok := api.(SubstanceRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Substance")
	}
	if _, ok := api.(SubstanceUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Substance")
	}
	if _, ok := api.(SubstanceDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Substance")
	}
	if c, ok := api.(SubstanceSearch); ok {
		c, err := c.SearchCapabilitiesSubstance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Substance"] = c
		}
	}
	if _, ok := api.(SubstanceNucleicAcidCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SubstanceNucleicAcid")
	}
	if _, ok := api.(SubstanceNucleicAcidRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SubstanceNucleicAcid")
	}
	if _, ok := api.(SubstanceNucleicAcidUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SubstanceNucleicAcid")
	}
	if _, ok := api.(SubstanceNucleicAcidDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SubstanceNucleicAcid")
	}
	if c, ok := api.(SubstanceNucleicAcidSearch); ok {
		c, err := c.SearchCapabilitiesSubstanceNucleicAcid(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SubstanceNucleicAcid"] = c
		}
	}
	if _, ok := api.(SubstancePolymerCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SubstancePolymer")
	}
	if _, ok := api.(SubstancePolymerRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SubstancePolymer")
	}
	if _, ok := api.(SubstancePolymerUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SubstancePolymer")
	}
	if _, ok := api.(SubstancePolymerDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SubstancePolymer")
	}
	if c, ok := api.(SubstancePolymerSearch); ok {
		c, err := c.SearchCapabilitiesSubstancePolymer(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SubstancePolymer"] = c
		}
	}
	if _, ok := api.(SubstanceProteinCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SubstanceProtein")
	}
	if _, ok := api.(SubstanceProteinRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SubstanceProtein")
	}
	if _, ok := api.(SubstanceProteinUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SubstanceProtein")
	}
	if _, ok := api.(SubstanceProteinDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SubstanceProtein")
	}
	if c, ok := api.(SubstanceProteinSearch); ok {
		c, err := c.SearchCapabilitiesSubstanceProtein(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SubstanceProtein"] = c
		}
	}
	if _, ok := api.(SubstanceReferenceInformationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SubstanceReferenceInformation")
	}
	if _, ok := api.(SubstanceReferenceInformationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SubstanceReferenceInformation")
	}
	if _, ok := api.(SubstanceReferenceInformationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SubstanceReferenceInformation")
	}
	if _, ok := api.(SubstanceReferenceInformationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SubstanceReferenceInformation")
	}
	if c, ok := api.(SubstanceReferenceInformationSearch); ok {
		c, err := c.SearchCapabilitiesSubstanceReferenceInformation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SubstanceReferenceInformation"] = c
		}
	}
	if _, ok := api.(SubstanceSourceMaterialCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SubstanceSourceMaterial")
	}
	if _, ok := api.(SubstanceSourceMaterialRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SubstanceSourceMaterial")
	}
	if _, ok := api.(SubstanceSourceMaterialUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SubstanceSourceMaterial")
	}
	if _, ok := api.(SubstanceSourceMaterialDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SubstanceSourceMaterial")
	}
	if c, ok := api.(SubstanceSourceMaterialSearch); ok {
		c, err := c.SearchCapabilitiesSubstanceSourceMaterial(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SubstanceSourceMaterial"] = c
		}
	}
	if _, ok := api.(SubstanceSpecificationCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SubstanceSpecification")
	}
	if _, ok := api.(SubstanceSpecificationRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SubstanceSpecification")
	}
	if _, ok := api.(SubstanceSpecificationUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SubstanceSpecification")
	}
	if _, ok := api.(SubstanceSpecificationDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SubstanceSpecification")
	}
	if c, ok := api.(SubstanceSpecificationSearch); ok {
		c, err := c.SearchCapabilitiesSubstanceSpecification(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SubstanceSpecification"] = c
		}
	}
	if _, ok := api.(SupplyDeliveryCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SupplyDelivery")
	}
	if _, ok := api.(SupplyDeliveryRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SupplyDelivery")
	}
	if _, ok := api.(SupplyDeliveryUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SupplyDelivery")
	}
	if _, ok := api.(SupplyDeliveryDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SupplyDelivery")
	}
	if c, ok := api.(SupplyDeliverySearch); ok {
		c, err := c.SearchCapabilitiesSupplyDelivery(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SupplyDelivery"] = c
		}
	}
	if _, ok := api.(SupplyRequestCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "SupplyRequest")
	}
	if _, ok := api.(SupplyRequestRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "SupplyRequest")
	}
	if _, ok := api.(SupplyRequestUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "SupplyRequest")
	}
	if _, ok := api.(SupplyRequestDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "SupplyRequest")
	}
	if c, ok := api.(SupplyRequestSearch); ok {
		c, err := c.SearchCapabilitiesSupplyRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["SupplyRequest"] = c
		}
	}
	if _, ok := api.(TaskCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "Task")
	}
	if _, ok := api.(TaskRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "Task")
	}
	if _, ok := api.(TaskUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "Task")
	}
	if _, ok := api.(TaskDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "Task")
	}
	if c, ok := api.(TaskSearch); ok {
		c, err := c.SearchCapabilitiesTask(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["Task"] = c
		}
	}
	if _, ok := api.(TerminologyCapabilitiesCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "TerminologyCapabilities")
	}
	if _, ok := api.(TerminologyCapabilitiesRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "TerminologyCapabilities")
	}
	if _, ok := api.(TerminologyCapabilitiesUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "TerminologyCapabilities")
	}
	if _, ok := api.(TerminologyCapabilitiesDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "TerminologyCapabilities")
	}
	if c, ok := api.(TerminologyCapabilitiesSearch); ok {
		c, err := c.SearchCapabilitiesTerminologyCapabilities(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["TerminologyCapabilities"] = c
		}
	}
	if _, ok := api.(TestReportCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "TestReport")
	}
	if _, ok := api.(TestReportRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "TestReport")
	}
	if _, ok := api.(TestReportUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "TestReport")
	}
	if _, ok := api.(TestReportDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "TestReport")
	}
	if c, ok := api.(TestReportSearch); ok {
		c, err := c.SearchCapabilitiesTestReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["TestReport"] = c
		}
	}
	if _, ok := api.(TestScriptCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "TestScript")
	}
	if _, ok := api.(TestScriptRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "TestScript")
	}
	if _, ok := api.(TestScriptUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "TestScript")
	}
	if _, ok := api.(TestScriptDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "TestScript")
	}
	if c, ok := api.(TestScriptSearch); ok {
		c, err := c.SearchCapabilitiesTestScript(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["TestScript"] = c
		}
	}
	if _, ok := api.(ValueSetCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "ValueSet")
	}
	if _, ok := api.(ValueSetRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "ValueSet")
	}
	if _, ok := api.(ValueSetUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "ValueSet")
	}
	if _, ok := api.(ValueSetDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "ValueSet")
	}
	if c, ok := api.(ValueSetSearch); ok {
		c, err := c.SearchCapabilitiesValueSet(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["ValueSet"] = c
		}
	}
	if _, ok := api.(VerificationResultCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "VerificationResult")
	}
	if _, ok := api.(VerificationResultRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "VerificationResult")
	}
	if _, ok := api.(VerificationResultUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "VerificationResult")
	}
	if _, ok := api.(VerificationResultDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "VerificationResult")
	}
	if c, ok := api.(VerificationResultSearch); ok {
		c, err := c.SearchCapabilitiesVerificationResult(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["VerificationResult"] = c
		}
	}
	if _, ok := api.(VisionPrescriptionCreate); ok {
		allCapabilities.CreateInteractions = append(allCapabilities.CreateInteractions, "VisionPrescription")
	}
	if _, ok := api.(VisionPrescriptionRead); ok {
		allCapabilities.ReadInteractions = append(allCapabilities.ReadInteractions, "VisionPrescription")
	}
	if _, ok := api.(VisionPrescriptionUpdate); ok {
		allCapabilities.UpdateInteractions = append(allCapabilities.UpdateInteractions, "VisionPrescription")
	}
	if _, ok := api.(VisionPrescriptionDelete); ok {
		allCapabilities.DeleteInteractions = append(allCapabilities.DeleteInteractions, "VisionPrescription")
	}
	if c, ok := api.(VisionPrescriptionSearch); ok {
		c, err := c.SearchCapabilitiesVisionPrescription(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.SearchCapabilities["VisionPrescription"] = c
		}
	}
	return allCapabilities, errors.Join(errs...)
}
