// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4

import (
	"context"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	r4 "github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4"
	utils "github.com/DAMEDIC/fhir-toolbox-go/utils"
)

type Concrete struct {
	Generic capabilities.GenericCapabilities
}

func (w Concrete) CreateAccount(ctx context.Context, resource r4.Account) (r4.Account, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Account{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Account")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Account{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Account)
	if !ok {
		return r4.Account{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Account" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateActivityDefinition(ctx context.Context, resource r4.ActivityDefinition) (r4.ActivityDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ActivityDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ActivityDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ActivityDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ActivityDefinition)
	if !ok {
		return r4.ActivityDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ActivityDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAdverseEvent(ctx context.Context, resource r4.AdverseEvent) (r4.AdverseEvent, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AdverseEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for AdverseEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AdverseEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AdverseEvent)
	if !ok {
		return r4.AdverseEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AdverseEvent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAllergyIntolerance(ctx context.Context, resource r4.AllergyIntolerance) (r4.AllergyIntolerance, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AllergyIntolerance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for AllergyIntolerance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AllergyIntolerance)
	if !ok {
		return r4.AllergyIntolerance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AllergyIntolerance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAppointment(ctx context.Context, resource r4.Appointment) (r4.Appointment, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Appointment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Appointment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Appointment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Appointment)
	if !ok {
		return r4.Appointment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Appointment" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAppointmentResponse(ctx context.Context, resource r4.AppointmentResponse) (r4.AppointmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AppointmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for AppointmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AppointmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AppointmentResponse)
	if !ok {
		return r4.AppointmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AppointmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAuditEvent(ctx context.Context, resource r4.AuditEvent) (r4.AuditEvent, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AuditEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for AuditEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AuditEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AuditEvent)
	if !ok {
		return r4.AuditEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AuditEvent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBasic(ctx context.Context, resource r4.Basic) (r4.Basic, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Basic{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Basic")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Basic{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Basic)
	if !ok {
		return r4.Basic{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Basic" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBinary(ctx context.Context, resource r4.Binary) (r4.Binary, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Binary{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Binary")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Binary{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Binary)
	if !ok {
		return r4.Binary{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Binary" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBiologicallyDerivedProduct(ctx context.Context, resource r4.BiologicallyDerivedProduct) (r4.BiologicallyDerivedProduct, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for BiologicallyDerivedProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BiologicallyDerivedProduct)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "BiologicallyDerivedProduct" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBodyStructure(ctx context.Context, resource r4.BodyStructure) (r4.BodyStructure, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.BodyStructure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for BodyStructure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.BodyStructure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BodyStructure)
	if !ok {
		return r4.BodyStructure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "BodyStructure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBundle(ctx context.Context, resource r4.Bundle) (r4.Bundle, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Bundle{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Bundle")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Bundle{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Bundle)
	if !ok {
		return r4.Bundle{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Bundle" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCapabilityStatement(ctx context.Context, resource r4.CapabilityStatement) (r4.CapabilityStatement, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CapabilityStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CapabilityStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CapabilityStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CapabilityStatement)
	if !ok {
		return r4.CapabilityStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CapabilityStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCarePlan(ctx context.Context, resource r4.CarePlan) (r4.CarePlan, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CarePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CarePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CarePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CarePlan)
	if !ok {
		return r4.CarePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CarePlan" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCareTeam(ctx context.Context, resource r4.CareTeam) (r4.CareTeam, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CareTeam{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CareTeam")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CareTeam{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CareTeam)
	if !ok {
		return r4.CareTeam{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CareTeam" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCatalogEntry(ctx context.Context, resource r4.CatalogEntry) (r4.CatalogEntry, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CatalogEntry{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CatalogEntry")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CatalogEntry{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CatalogEntry)
	if !ok {
		return r4.CatalogEntry{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CatalogEntry" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateChargeItem(ctx context.Context, resource r4.ChargeItem) (r4.ChargeItem, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ChargeItem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ChargeItem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ChargeItem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItem)
	if !ok {
		return r4.ChargeItem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ChargeItem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateChargeItemDefinition(ctx context.Context, resource r4.ChargeItemDefinition) (r4.ChargeItemDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ChargeItemDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ChargeItemDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItemDefinition)
	if !ok {
		return r4.ChargeItemDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ChargeItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateClaim(ctx context.Context, resource r4.Claim) (r4.Claim, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Claim{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Claim")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Claim{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Claim)
	if !ok {
		return r4.Claim{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Claim" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateClaimResponse(ctx context.Context, resource r4.ClaimResponse) (r4.ClaimResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ClaimResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ClaimResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ClaimResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClaimResponse)
	if !ok {
		return r4.ClaimResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ClaimResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateClinicalImpression(ctx context.Context, resource r4.ClinicalImpression) (r4.ClinicalImpression, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ClinicalImpression{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ClinicalImpression")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ClinicalImpression{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClinicalImpression)
	if !ok {
		return r4.ClinicalImpression{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ClinicalImpression" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCodeSystem(ctx context.Context, resource r4.CodeSystem) (r4.CodeSystem, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CodeSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CodeSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CodeSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CodeSystem)
	if !ok {
		return r4.CodeSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CodeSystem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCommunication(ctx context.Context, resource r4.Communication) (r4.Communication, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Communication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Communication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Communication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Communication)
	if !ok {
		return r4.Communication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Communication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCommunicationRequest(ctx context.Context, resource r4.CommunicationRequest) (r4.CommunicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CommunicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CommunicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CommunicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CommunicationRequest)
	if !ok {
		return r4.CommunicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CommunicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCompartmentDefinition(ctx context.Context, resource r4.CompartmentDefinition) (r4.CompartmentDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CompartmentDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CompartmentDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CompartmentDefinition)
	if !ok {
		return r4.CompartmentDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CompartmentDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateComposition(ctx context.Context, resource r4.Composition) (r4.Composition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Composition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Composition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Composition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Composition)
	if !ok {
		return r4.Composition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Composition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateConceptMap(ctx context.Context, resource r4.ConceptMap) (r4.ConceptMap, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ConceptMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ConceptMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ConceptMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ConceptMap)
	if !ok {
		return r4.ConceptMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ConceptMap" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCondition(ctx context.Context, resource r4.Condition) (r4.Condition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Condition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Condition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Condition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Condition)
	if !ok {
		return r4.Condition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Condition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateConsent(ctx context.Context, resource r4.Consent) (r4.Consent, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Consent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Consent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Consent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Consent)
	if !ok {
		return r4.Consent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Consent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateContract(ctx context.Context, resource r4.Contract) (r4.Contract, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Contract{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Contract")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Contract{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Contract)
	if !ok {
		return r4.Contract{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Contract" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCoverage(ctx context.Context, resource r4.Coverage) (r4.Coverage, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Coverage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Coverage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Coverage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Coverage)
	if !ok {
		return r4.Coverage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Coverage" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityRequest(ctx context.Context, resource r4.CoverageEligibilityRequest) (r4.CoverageEligibilityRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CoverageEligibilityRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CoverageEligibilityRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityRequest)
	if !ok {
		return r4.CoverageEligibilityRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CoverageEligibilityRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityResponse(ctx context.Context, resource r4.CoverageEligibilityResponse) (r4.CoverageEligibilityResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CoverageEligibilityResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for CoverageEligibilityResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityResponse)
	if !ok {
		return r4.CoverageEligibilityResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CoverageEligibilityResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDetectedIssue(ctx context.Context, resource r4.DetectedIssue) (r4.DetectedIssue, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DetectedIssue{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DetectedIssue")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DetectedIssue{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DetectedIssue)
	if !ok {
		return r4.DetectedIssue{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DetectedIssue" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDevice(ctx context.Context, resource r4.Device) (r4.Device, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Device{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Device")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Device{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Device)
	if !ok {
		return r4.Device{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Device" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceDefinition(ctx context.Context, resource r4.DeviceDefinition) (r4.DeviceDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DeviceDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceDefinition)
	if !ok {
		return r4.DeviceDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceMetric(ctx context.Context, resource r4.DeviceMetric) (r4.DeviceMetric, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceMetric{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DeviceMetric")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceMetric{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceMetric)
	if !ok {
		return r4.DeviceMetric{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceMetric" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceRequest(ctx context.Context, resource r4.DeviceRequest) (r4.DeviceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DeviceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceRequest)
	if !ok {
		return r4.DeviceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceUseStatement(ctx context.Context, resource r4.DeviceUseStatement) (r4.DeviceUseStatement, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceUseStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DeviceUseStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceUseStatement)
	if !ok {
		return r4.DeviceUseStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceUseStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDiagnosticReport(ctx context.Context, resource r4.DiagnosticReport) (r4.DiagnosticReport, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DiagnosticReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DiagnosticReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DiagnosticReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DiagnosticReport)
	if !ok {
		return r4.DiagnosticReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DiagnosticReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDocumentManifest(ctx context.Context, resource r4.DocumentManifest) (r4.DocumentManifest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DocumentManifest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DocumentManifest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DocumentManifest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentManifest)
	if !ok {
		return r4.DocumentManifest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DocumentManifest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDocumentReference(ctx context.Context, resource r4.DocumentReference) (r4.DocumentReference, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DocumentReference{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for DocumentReference")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DocumentReference{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentReference)
	if !ok {
		return r4.DocumentReference{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DocumentReference" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEffectEvidenceSynthesis(ctx context.Context, resource r4.EffectEvidenceSynthesis) (r4.EffectEvidenceSynthesis, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for EffectEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EffectEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EffectEvidenceSynthesis)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EffectEvidenceSynthesis" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEncounter(ctx context.Context, resource r4.Encounter) (r4.Encounter, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Encounter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Encounter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Encounter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Encounter)
	if !ok {
		return r4.Encounter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Encounter" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEndpoint(ctx context.Context, resource r4.Endpoint) (r4.Endpoint, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Endpoint{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Endpoint")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Endpoint{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Endpoint)
	if !ok {
		return r4.Endpoint{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Endpoint" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentRequest(ctx context.Context, resource r4.EnrollmentRequest) (r4.EnrollmentRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EnrollmentRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for EnrollmentRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentRequest)
	if !ok {
		return r4.EnrollmentRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EnrollmentRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentResponse(ctx context.Context, resource r4.EnrollmentResponse) (r4.EnrollmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EnrollmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for EnrollmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentResponse)
	if !ok {
		return r4.EnrollmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EnrollmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEpisodeOfCare(ctx context.Context, resource r4.EpisodeOfCare) (r4.EpisodeOfCare, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EpisodeOfCare{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for EpisodeOfCare")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EpisodeOfCare)
	if !ok {
		return r4.EpisodeOfCare{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EpisodeOfCare" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEventDefinition(ctx context.Context, resource r4.EventDefinition) (r4.EventDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EventDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for EventDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EventDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EventDefinition)
	if !ok {
		return r4.EventDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EventDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEvidence(ctx context.Context, resource r4.Evidence) (r4.Evidence, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Evidence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Evidence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Evidence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Evidence)
	if !ok {
		return r4.Evidence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Evidence" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceVariable(ctx context.Context, resource r4.EvidenceVariable) (r4.EvidenceVariable, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EvidenceVariable{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for EvidenceVariable")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EvidenceVariable{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EvidenceVariable)
	if !ok {
		return r4.EvidenceVariable{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EvidenceVariable" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateExampleScenario(ctx context.Context, resource r4.ExampleScenario) (r4.ExampleScenario, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ExampleScenario{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ExampleScenario")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ExampleScenario{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExampleScenario)
	if !ok {
		return r4.ExampleScenario{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ExampleScenario" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateExplanationOfBenefit(ctx context.Context, resource r4.ExplanationOfBenefit) (r4.ExplanationOfBenefit, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ExplanationOfBenefit{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ExplanationOfBenefit")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExplanationOfBenefit)
	if !ok {
		return r4.ExplanationOfBenefit{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ExplanationOfBenefit" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateFamilyMemberHistory(ctx context.Context, resource r4.FamilyMemberHistory) (r4.FamilyMemberHistory, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.FamilyMemberHistory{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for FamilyMemberHistory")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.FamilyMemberHistory)
	if !ok {
		return r4.FamilyMemberHistory{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "FamilyMemberHistory" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateFlag(ctx context.Context, resource r4.Flag) (r4.Flag, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Flag{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Flag")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Flag{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Flag)
	if !ok {
		return r4.Flag{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Flag" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGoal(ctx context.Context, resource r4.Goal) (r4.Goal, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Goal{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Goal")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Goal{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Goal)
	if !ok {
		return r4.Goal{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Goal" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGraphDefinition(ctx context.Context, resource r4.GraphDefinition) (r4.GraphDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.GraphDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for GraphDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.GraphDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GraphDefinition)
	if !ok {
		return r4.GraphDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "GraphDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGroup(ctx context.Context, resource r4.Group) (r4.Group, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Group{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Group")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Group{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Group)
	if !ok {
		return r4.Group{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Group" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGuidanceResponse(ctx context.Context, resource r4.GuidanceResponse) (r4.GuidanceResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.GuidanceResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for GuidanceResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.GuidanceResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GuidanceResponse)
	if !ok {
		return r4.GuidanceResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "GuidanceResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateHealthcareService(ctx context.Context, resource r4.HealthcareService) (r4.HealthcareService, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.HealthcareService{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for HealthcareService")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.HealthcareService{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.HealthcareService)
	if !ok {
		return r4.HealthcareService{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "HealthcareService" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImagingStudy(ctx context.Context, resource r4.ImagingStudy) (r4.ImagingStudy, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImagingStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ImagingStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImagingStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImagingStudy)
	if !ok {
		return r4.ImagingStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImagingStudy" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImmunization(ctx context.Context, resource r4.Immunization) (r4.Immunization, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Immunization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Immunization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Immunization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Immunization)
	if !ok {
		return r4.Immunization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Immunization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationEvaluation(ctx context.Context, resource r4.ImmunizationEvaluation) (r4.ImmunizationEvaluation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImmunizationEvaluation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ImmunizationEvaluation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationEvaluation)
	if !ok {
		return r4.ImmunizationEvaluation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImmunizationEvaluation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationRecommendation(ctx context.Context, resource r4.ImmunizationRecommendation) (r4.ImmunizationRecommendation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImmunizationRecommendation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ImmunizationRecommendation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationRecommendation)
	if !ok {
		return r4.ImmunizationRecommendation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImmunizationRecommendation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImplementationGuide(ctx context.Context, resource r4.ImplementationGuide) (r4.ImplementationGuide, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImplementationGuide{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ImplementationGuide")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImplementationGuide{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImplementationGuide)
	if !ok {
		return r4.ImplementationGuide{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImplementationGuide" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateInsurancePlan(ctx context.Context, resource r4.InsurancePlan) (r4.InsurancePlan, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.InsurancePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for InsurancePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.InsurancePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.InsurancePlan)
	if !ok {
		return r4.InsurancePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "InsurancePlan" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateInvoice(ctx context.Context, resource r4.Invoice) (r4.Invoice, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Invoice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Invoice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Invoice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Invoice)
	if !ok {
		return r4.Invoice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Invoice" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateLibrary(ctx context.Context, resource r4.Library) (r4.Library, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Library{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Library")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Library{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Library)
	if !ok {
		return r4.Library{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Library" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateLinkage(ctx context.Context, resource r4.Linkage) (r4.Linkage, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Linkage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Linkage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Linkage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Linkage)
	if !ok {
		return r4.Linkage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Linkage" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateList(ctx context.Context, resource r4.List) (r4.List, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.List{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for List")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.List{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.List)
	if !ok {
		return r4.List{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "List" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateLocation(ctx context.Context, resource r4.Location) (r4.Location, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Location{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Location")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Location{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Location)
	if !ok {
		return r4.Location{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Location" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMeasure(ctx context.Context, resource r4.Measure) (r4.Measure, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Measure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Measure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Measure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Measure)
	if !ok {
		return r4.Measure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Measure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMeasureReport(ctx context.Context, resource r4.MeasureReport) (r4.MeasureReport, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MeasureReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MeasureReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MeasureReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MeasureReport)
	if !ok {
		return r4.MeasureReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MeasureReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedia(ctx context.Context, resource r4.Media) (r4.Media, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Media{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Media")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Media{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Media)
	if !ok {
		return r4.Media{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Media" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedication(ctx context.Context, resource r4.Medication) (r4.Medication, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Medication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Medication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Medication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Medication)
	if !ok {
		return r4.Medication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Medication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationAdministration(ctx context.Context, resource r4.MedicationAdministration) (r4.MedicationAdministration, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationAdministration{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicationAdministration")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationAdministration{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationAdministration)
	if !ok {
		return r4.MedicationAdministration{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationAdministration" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationDispense(ctx context.Context, resource r4.MedicationDispense) (r4.MedicationDispense, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationDispense{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicationDispense")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationDispense{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationDispense)
	if !ok {
		return r4.MedicationDispense{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationDispense" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationKnowledge(ctx context.Context, resource r4.MedicationKnowledge) (r4.MedicationKnowledge, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationKnowledge{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicationKnowledge")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationKnowledge)
	if !ok {
		return r4.MedicationKnowledge{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationKnowledge" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationRequest(ctx context.Context, resource r4.MedicationRequest) (r4.MedicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationRequest)
	if !ok {
		return r4.MedicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationStatement(ctx context.Context, resource r4.MedicationStatement) (r4.MedicationStatement, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicationStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationStatement)
	if !ok {
		return r4.MedicationStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProduct(ctx context.Context, resource r4.MedicinalProduct) (r4.MedicinalProduct, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProduct)
	if !ok {
		return r4.MedicinalProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProduct" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductAuthorization(ctx context.Context, resource r4.MedicinalProductAuthorization) (r4.MedicinalProductAuthorization, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductAuthorization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductAuthorization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductAuthorization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductAuthorization)
	if !ok {
		return r4.MedicinalProductAuthorization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductAuthorization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductContraindication(ctx context.Context, resource r4.MedicinalProductContraindication) (r4.MedicinalProductContraindication, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductContraindication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductContraindication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductContraindication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductContraindication)
	if !ok {
		return r4.MedicinalProductContraindication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductContraindication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductIndication(ctx context.Context, resource r4.MedicinalProductIndication) (r4.MedicinalProductIndication, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductIndication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductIndication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductIndication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIndication)
	if !ok {
		return r4.MedicinalProductIndication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductIndication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductIngredient(ctx context.Context, resource r4.MedicinalProductIngredient) (r4.MedicinalProductIngredient, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductIngredient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductIngredient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductIngredient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIngredient)
	if !ok {
		return r4.MedicinalProductIngredient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductIngredient" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductInteraction(ctx context.Context, resource r4.MedicinalProductInteraction) (r4.MedicinalProductInteraction, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductInteraction{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductInteraction")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductInteraction{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductInteraction)
	if !ok {
		return r4.MedicinalProductInteraction{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductInteraction" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductManufactured(ctx context.Context, resource r4.MedicinalProductManufactured) (r4.MedicinalProductManufactured, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductManufactured{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductManufactured")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductManufactured{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductManufactured)
	if !ok {
		return r4.MedicinalProductManufactured{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductManufactured" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductPackaged(ctx context.Context, resource r4.MedicinalProductPackaged) (r4.MedicinalProductPackaged, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductPackaged{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductPackaged")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductPackaged{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPackaged)
	if !ok {
		return r4.MedicinalProductPackaged{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductPackaged" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductPharmaceutical(ctx context.Context, resource r4.MedicinalProductPharmaceutical) (r4.MedicinalProductPharmaceutical, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductPharmaceutical")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductPharmaceutical{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductPharmaceutical" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductUndesirableEffect(ctx context.Context, resource r4.MedicinalProductUndesirableEffect) (r4.MedicinalProductUndesirableEffect, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MedicinalProductUndesirableEffect")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductUndesirableEffect{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductUndesirableEffect" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMessageDefinition(ctx context.Context, resource r4.MessageDefinition) (r4.MessageDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MessageDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MessageDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MessageDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageDefinition)
	if !ok {
		return r4.MessageDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MessageDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMessageHeader(ctx context.Context, resource r4.MessageHeader) (r4.MessageHeader, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MessageHeader{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MessageHeader")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MessageHeader{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageHeader)
	if !ok {
		return r4.MessageHeader{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MessageHeader" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMolecularSequence(ctx context.Context, resource r4.MolecularSequence) (r4.MolecularSequence, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MolecularSequence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for MolecularSequence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MolecularSequence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MolecularSequence)
	if !ok {
		return r4.MolecularSequence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MolecularSequence" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateNamingSystem(ctx context.Context, resource r4.NamingSystem) (r4.NamingSystem, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.NamingSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for NamingSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.NamingSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NamingSystem)
	if !ok {
		return r4.NamingSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "NamingSystem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateNutritionOrder(ctx context.Context, resource r4.NutritionOrder) (r4.NutritionOrder, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.NutritionOrder{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for NutritionOrder")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.NutritionOrder{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NutritionOrder)
	if !ok {
		return r4.NutritionOrder{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "NutritionOrder" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateObservation(ctx context.Context, resource r4.Observation) (r4.Observation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Observation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Observation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Observation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Observation)
	if !ok {
		return r4.Observation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Observation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateObservationDefinition(ctx context.Context, resource r4.ObservationDefinition) (r4.ObservationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ObservationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ObservationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ObservationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ObservationDefinition)
	if !ok {
		return r4.ObservationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ObservationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOperationDefinition(ctx context.Context, resource r4.OperationDefinition) (r4.OperationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.OperationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for OperationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.OperationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationDefinition)
	if !ok {
		return r4.OperationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OperationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOperationOutcome(ctx context.Context, resource r4.OperationOutcome) (r4.OperationOutcome, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.OperationOutcome{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for OperationOutcome")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.OperationOutcome{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationOutcome)
	if !ok {
		return r4.OperationOutcome{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OperationOutcome" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOrganization(ctx context.Context, resource r4.Organization) (r4.Organization, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Organization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Organization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Organization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Organization)
	if !ok {
		return r4.Organization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Organization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOrganizationAffiliation(ctx context.Context, resource r4.OrganizationAffiliation) (r4.OrganizationAffiliation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.OrganizationAffiliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for OrganizationAffiliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OrganizationAffiliation)
	if !ok {
		return r4.OrganizationAffiliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OrganizationAffiliation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateParameters(ctx context.Context, resource r4.Parameters) (r4.Parameters, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Parameters{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Parameters")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Parameters{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Parameters)
	if !ok {
		return r4.Parameters{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Parameters" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePatient(ctx context.Context, resource r4.Patient) (r4.Patient, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Patient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Patient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Patient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Patient)
	if !ok {
		return r4.Patient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Patient" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePaymentNotice(ctx context.Context, resource r4.PaymentNotice) (r4.PaymentNotice, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PaymentNotice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for PaymentNotice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PaymentNotice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentNotice)
	if !ok {
		return r4.PaymentNotice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PaymentNotice" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePaymentReconciliation(ctx context.Context, resource r4.PaymentReconciliation) (r4.PaymentReconciliation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PaymentReconciliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for PaymentReconciliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentReconciliation)
	if !ok {
		return r4.PaymentReconciliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PaymentReconciliation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePerson(ctx context.Context, resource r4.Person) (r4.Person, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Person{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Person")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Person{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Person)
	if !ok {
		return r4.Person{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Person" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePlanDefinition(ctx context.Context, resource r4.PlanDefinition) (r4.PlanDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PlanDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for PlanDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PlanDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PlanDefinition)
	if !ok {
		return r4.PlanDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PlanDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePractitioner(ctx context.Context, resource r4.Practitioner) (r4.Practitioner, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Practitioner{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Practitioner")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Practitioner{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Practitioner)
	if !ok {
		return r4.Practitioner{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Practitioner" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePractitionerRole(ctx context.Context, resource r4.PractitionerRole) (r4.PractitionerRole, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PractitionerRole{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for PractitionerRole")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PractitionerRole{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PractitionerRole)
	if !ok {
		return r4.PractitionerRole{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PractitionerRole" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateProcedure(ctx context.Context, resource r4.Procedure) (r4.Procedure, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Procedure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Procedure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Procedure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Procedure)
	if !ok {
		return r4.Procedure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Procedure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateProvenance(ctx context.Context, resource r4.Provenance) (r4.Provenance, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Provenance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Provenance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Provenance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Provenance)
	if !ok {
		return r4.Provenance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Provenance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaire(ctx context.Context, resource r4.Questionnaire) (r4.Questionnaire, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Questionnaire{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Questionnaire")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Questionnaire{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Questionnaire)
	if !ok {
		return r4.Questionnaire{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Questionnaire" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaireResponse(ctx context.Context, resource r4.QuestionnaireResponse) (r4.QuestionnaireResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.QuestionnaireResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for QuestionnaireResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.QuestionnaireResponse)
	if !ok {
		return r4.QuestionnaireResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "QuestionnaireResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRelatedPerson(ctx context.Context, resource r4.RelatedPerson) (r4.RelatedPerson, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RelatedPerson{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for RelatedPerson")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RelatedPerson{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RelatedPerson)
	if !ok {
		return r4.RelatedPerson{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RelatedPerson" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRequestGroup(ctx context.Context, resource r4.RequestGroup) (r4.RequestGroup, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RequestGroup{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for RequestGroup")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RequestGroup{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RequestGroup)
	if !ok {
		return r4.RequestGroup{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RequestGroup" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchDefinition(ctx context.Context, resource r4.ResearchDefinition) (r4.ResearchDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ResearchDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchDefinition)
	if !ok {
		return r4.ResearchDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchElementDefinition(ctx context.Context, resource r4.ResearchElementDefinition) (r4.ResearchElementDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchElementDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ResearchElementDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchElementDefinition)
	if !ok {
		return r4.ResearchElementDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchElementDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchStudy(ctx context.Context, resource r4.ResearchStudy) (r4.ResearchStudy, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ResearchStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchStudy)
	if !ok {
		return r4.ResearchStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchStudy" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchSubject(ctx context.Context, resource r4.ResearchSubject) (r4.ResearchSubject, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchSubject{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ResearchSubject")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchSubject{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchSubject)
	if !ok {
		return r4.ResearchSubject{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchSubject" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRiskAssessment(ctx context.Context, resource r4.RiskAssessment) (r4.RiskAssessment, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RiskAssessment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for RiskAssessment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RiskAssessment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskAssessment)
	if !ok {
		return r4.RiskAssessment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RiskAssessment" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRiskEvidenceSynthesis(ctx context.Context, resource r4.RiskEvidenceSynthesis) (r4.RiskEvidenceSynthesis, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for RiskEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RiskEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskEvidenceSynthesis)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RiskEvidenceSynthesis" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSchedule(ctx context.Context, resource r4.Schedule) (r4.Schedule, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Schedule{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Schedule")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Schedule{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Schedule)
	if !ok {
		return r4.Schedule{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Schedule" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSearchParameter(ctx context.Context, resource r4.SearchParameter) (r4.SearchParameter, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SearchParameter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SearchParameter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SearchParameter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SearchParameter)
	if !ok {
		return r4.SearchParameter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SearchParameter" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateServiceRequest(ctx context.Context, resource r4.ServiceRequest) (r4.ServiceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ServiceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ServiceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ServiceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ServiceRequest)
	if !ok {
		return r4.ServiceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ServiceRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSlot(ctx context.Context, resource r4.Slot) (r4.Slot, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Slot{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Slot")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Slot{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Slot)
	if !ok {
		return r4.Slot{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Slot" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSpecimen(ctx context.Context, resource r4.Specimen) (r4.Specimen, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Specimen{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Specimen")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Specimen{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Specimen)
	if !ok {
		return r4.Specimen{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Specimen" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSpecimenDefinition(ctx context.Context, resource r4.SpecimenDefinition) (r4.SpecimenDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SpecimenDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SpecimenDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SpecimenDefinition)
	if !ok {
		return r4.SpecimenDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SpecimenDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateStructureDefinition(ctx context.Context, resource r4.StructureDefinition) (r4.StructureDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.StructureDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for StructureDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.StructureDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureDefinition)
	if !ok {
		return r4.StructureDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "StructureDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateStructureMap(ctx context.Context, resource r4.StructureMap) (r4.StructureMap, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.StructureMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for StructureMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.StructureMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureMap)
	if !ok {
		return r4.StructureMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "StructureMap" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubscription(ctx context.Context, resource r4.Subscription) (r4.Subscription, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Subscription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Subscription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Subscription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Subscription)
	if !ok {
		return r4.Subscription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Subscription" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstance(ctx context.Context, resource r4.Substance) (r4.Substance, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Substance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Substance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Substance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Substance)
	if !ok {
		return r4.Substance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Substance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceNucleicAcid(ctx context.Context, resource r4.SubstanceNucleicAcid) (r4.SubstanceNucleicAcid, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceNucleicAcid{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SubstanceNucleicAcid")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceNucleicAcid{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceNucleicAcid)
	if !ok {
		return r4.SubstanceNucleicAcid{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceNucleicAcid" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstancePolymer(ctx context.Context, resource r4.SubstancePolymer) (r4.SubstancePolymer, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstancePolymer{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SubstancePolymer")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstancePolymer{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstancePolymer)
	if !ok {
		return r4.SubstancePolymer{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstancePolymer" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceProtein(ctx context.Context, resource r4.SubstanceProtein) (r4.SubstanceProtein, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceProtein{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SubstanceProtein")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceProtein{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceProtein)
	if !ok {
		return r4.SubstanceProtein{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceProtein" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceReferenceInformation(ctx context.Context, resource r4.SubstanceReferenceInformation) (r4.SubstanceReferenceInformation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceReferenceInformation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SubstanceReferenceInformation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceReferenceInformation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceReferenceInformation)
	if !ok {
		return r4.SubstanceReferenceInformation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceReferenceInformation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceSourceMaterial(ctx context.Context, resource r4.SubstanceSourceMaterial) (r4.SubstanceSourceMaterial, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceSourceMaterial{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SubstanceSourceMaterial")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceSourceMaterial{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSourceMaterial)
	if !ok {
		return r4.SubstanceSourceMaterial{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceSourceMaterial" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceSpecification(ctx context.Context, resource r4.SubstanceSpecification) (r4.SubstanceSpecification, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceSpecification{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SubstanceSpecification")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceSpecification{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSpecification)
	if !ok {
		return r4.SubstanceSpecification{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceSpecification" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSupplyDelivery(ctx context.Context, resource r4.SupplyDelivery) (r4.SupplyDelivery, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SupplyDelivery{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SupplyDelivery")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SupplyDelivery{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyDelivery)
	if !ok {
		return r4.SupplyDelivery{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SupplyDelivery" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSupplyRequest(ctx context.Context, resource r4.SupplyRequest) (r4.SupplyRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SupplyRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for SupplyRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SupplyRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyRequest)
	if !ok {
		return r4.SupplyRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SupplyRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTask(ctx context.Context, resource r4.Task) (r4.Task, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Task{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for Task")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Task{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Task)
	if !ok {
		return r4.Task{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Task" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTerminologyCapabilities(ctx context.Context, resource r4.TerminologyCapabilities) (r4.TerminologyCapabilities, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.TerminologyCapabilities{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for TerminologyCapabilities")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TerminologyCapabilities)
	if !ok {
		return r4.TerminologyCapabilities{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TerminologyCapabilities" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTestReport(ctx context.Context, resource r4.TestReport) (r4.TestReport, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.TestReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for TestReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.TestReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestReport)
	if !ok {
		return r4.TestReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TestReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTestScript(ctx context.Context, resource r4.TestScript) (r4.TestScript, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.TestScript{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for TestScript")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.TestScript{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestScript)
	if !ok {
		return r4.TestScript{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TestScript" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateValueSet(ctx context.Context, resource r4.ValueSet) (r4.ValueSet, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ValueSet{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for ValueSet")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ValueSet{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ValueSet)
	if !ok {
		return r4.ValueSet{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ValueSet" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateVerificationResult(ctx context.Context, resource r4.VerificationResult) (r4.VerificationResult, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.VerificationResult{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for VerificationResult")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.VerificationResult{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VerificationResult)
	if !ok {
		return r4.VerificationResult{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "VerificationResult" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateVisionPrescription(ctx context.Context, resource r4.VisionPrescription) (r4.VisionPrescription, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.VisionPrescription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Create not implemented for VisionPrescription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.VisionPrescription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VisionPrescription)
	if !ok {
		return r4.VisionPrescription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "VisionPrescription" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAccount(ctx context.Context, id string) (r4.Account, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Account{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Account")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Account", id)
	if err != nil {
		return r4.Account{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Account)
	if !ok {
		return r4.Account{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Account" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadActivityDefinition(ctx context.Context, id string) (r4.ActivityDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ActivityDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ActivityDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r4.ActivityDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ActivityDefinition)
	if !ok {
		return r4.ActivityDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ActivityDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAdverseEvent(ctx context.Context, id string) (r4.AdverseEvent, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AdverseEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for AdverseEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r4.AdverseEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AdverseEvent)
	if !ok {
		return r4.AdverseEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AdverseEvent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAllergyIntolerance(ctx context.Context, id string) (r4.AllergyIntolerance, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AllergyIntolerance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for AllergyIntolerance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r4.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AllergyIntolerance)
	if !ok {
		return r4.AllergyIntolerance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AllergyIntolerance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAppointment(ctx context.Context, id string) (r4.Appointment, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Appointment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Appointment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Appointment", id)
	if err != nil {
		return r4.Appointment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Appointment)
	if !ok {
		return r4.Appointment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Appointment" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAppointmentResponse(ctx context.Context, id string) (r4.AppointmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AppointmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for AppointmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r4.AppointmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AppointmentResponse)
	if !ok {
		return r4.AppointmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AppointmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAuditEvent(ctx context.Context, id string) (r4.AuditEvent, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AuditEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for AuditEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r4.AuditEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AuditEvent)
	if !ok {
		return r4.AuditEvent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AuditEvent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBasic(ctx context.Context, id string) (r4.Basic, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Basic{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Basic")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Basic", id)
	if err != nil {
		return r4.Basic{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Basic)
	if !ok {
		return r4.Basic{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Basic" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBinary(ctx context.Context, id string) (r4.Binary, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Binary{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Binary")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Binary", id)
	if err != nil {
		return r4.Binary{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Binary)
	if !ok {
		return r4.Binary{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Binary" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r4.BiologicallyDerivedProduct, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for BiologicallyDerivedProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r4.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BiologicallyDerivedProduct)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "BiologicallyDerivedProduct" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBodyStructure(ctx context.Context, id string) (r4.BodyStructure, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.BodyStructure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for BodyStructure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r4.BodyStructure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BodyStructure)
	if !ok {
		return r4.BodyStructure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "BodyStructure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBundle(ctx context.Context, id string) (r4.Bundle, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Bundle{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Bundle")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Bundle", id)
	if err != nil {
		return r4.Bundle{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Bundle)
	if !ok {
		return r4.Bundle{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Bundle" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCapabilityStatement(ctx context.Context, id string) (r4.CapabilityStatement, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CapabilityStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CapabilityStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r4.CapabilityStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CapabilityStatement)
	if !ok {
		return r4.CapabilityStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CapabilityStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCarePlan(ctx context.Context, id string) (r4.CarePlan, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CarePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CarePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CarePlan", id)
	if err != nil {
		return r4.CarePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CarePlan)
	if !ok {
		return r4.CarePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CarePlan" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCareTeam(ctx context.Context, id string) (r4.CareTeam, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CareTeam{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CareTeam")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CareTeam", id)
	if err != nil {
		return r4.CareTeam{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CareTeam)
	if !ok {
		return r4.CareTeam{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CareTeam" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCatalogEntry(ctx context.Context, id string) (r4.CatalogEntry, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CatalogEntry{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CatalogEntry")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CatalogEntry", id)
	if err != nil {
		return r4.CatalogEntry{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CatalogEntry)
	if !ok {
		return r4.CatalogEntry{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CatalogEntry" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadChargeItem(ctx context.Context, id string) (r4.ChargeItem, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ChargeItem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ChargeItem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r4.ChargeItem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItem)
	if !ok {
		return r4.ChargeItem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ChargeItem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadChargeItemDefinition(ctx context.Context, id string) (r4.ChargeItemDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ChargeItemDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ChargeItemDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r4.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItemDefinition)
	if !ok {
		return r4.ChargeItemDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ChargeItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadClaim(ctx context.Context, id string) (r4.Claim, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Claim{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Claim")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Claim", id)
	if err != nil {
		return r4.Claim{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Claim)
	if !ok {
		return r4.Claim{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Claim" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadClaimResponse(ctx context.Context, id string) (r4.ClaimResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ClaimResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ClaimResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r4.ClaimResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClaimResponse)
	if !ok {
		return r4.ClaimResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ClaimResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadClinicalImpression(ctx context.Context, id string) (r4.ClinicalImpression, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ClinicalImpression{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ClinicalImpression")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r4.ClinicalImpression{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClinicalImpression)
	if !ok {
		return r4.ClinicalImpression{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ClinicalImpression" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCodeSystem(ctx context.Context, id string) (r4.CodeSystem, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CodeSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CodeSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r4.CodeSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CodeSystem)
	if !ok {
		return r4.CodeSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CodeSystem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCommunication(ctx context.Context, id string) (r4.Communication, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Communication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Communication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Communication", id)
	if err != nil {
		return r4.Communication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Communication)
	if !ok {
		return r4.Communication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Communication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCommunicationRequest(ctx context.Context, id string) (r4.CommunicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CommunicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CommunicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r4.CommunicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CommunicationRequest)
	if !ok {
		return r4.CommunicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CommunicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCompartmentDefinition(ctx context.Context, id string) (r4.CompartmentDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CompartmentDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CompartmentDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r4.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CompartmentDefinition)
	if !ok {
		return r4.CompartmentDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CompartmentDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadComposition(ctx context.Context, id string) (r4.Composition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Composition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Composition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Composition", id)
	if err != nil {
		return r4.Composition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Composition)
	if !ok {
		return r4.Composition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Composition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadConceptMap(ctx context.Context, id string) (r4.ConceptMap, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ConceptMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ConceptMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r4.ConceptMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ConceptMap)
	if !ok {
		return r4.ConceptMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ConceptMap" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCondition(ctx context.Context, id string) (r4.Condition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Condition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Condition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Condition", id)
	if err != nil {
		return r4.Condition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Condition)
	if !ok {
		return r4.Condition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Condition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadConsent(ctx context.Context, id string) (r4.Consent, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Consent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Consent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Consent", id)
	if err != nil {
		return r4.Consent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Consent)
	if !ok {
		return r4.Consent{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Consent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadContract(ctx context.Context, id string) (r4.Contract, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Contract{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Contract")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Contract", id)
	if err != nil {
		return r4.Contract{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Contract)
	if !ok {
		return r4.Contract{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Contract" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCoverage(ctx context.Context, id string) (r4.Coverage, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Coverage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Coverage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Coverage", id)
	if err != nil {
		return r4.Coverage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Coverage)
	if !ok {
		return r4.Coverage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Coverage" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r4.CoverageEligibilityRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CoverageEligibilityRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CoverageEligibilityRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r4.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityRequest)
	if !ok {
		return r4.CoverageEligibilityRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CoverageEligibilityRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r4.CoverageEligibilityResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CoverageEligibilityResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for CoverageEligibilityResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r4.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityResponse)
	if !ok {
		return r4.CoverageEligibilityResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CoverageEligibilityResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDetectedIssue(ctx context.Context, id string) (r4.DetectedIssue, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DetectedIssue{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DetectedIssue")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r4.DetectedIssue{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DetectedIssue)
	if !ok {
		return r4.DetectedIssue{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DetectedIssue" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDevice(ctx context.Context, id string) (r4.Device, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Device{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Device")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Device", id)
	if err != nil {
		return r4.Device{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Device)
	if !ok {
		return r4.Device{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Device" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceDefinition(ctx context.Context, id string) (r4.DeviceDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DeviceDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r4.DeviceDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceDefinition)
	if !ok {
		return r4.DeviceDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceMetric(ctx context.Context, id string) (r4.DeviceMetric, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceMetric{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DeviceMetric")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r4.DeviceMetric{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceMetric)
	if !ok {
		return r4.DeviceMetric{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceMetric" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceRequest(ctx context.Context, id string) (r4.DeviceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DeviceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r4.DeviceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceRequest)
	if !ok {
		return r4.DeviceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceUseStatement(ctx context.Context, id string) (r4.DeviceUseStatement, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceUseStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DeviceUseStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceUseStatement", id)
	if err != nil {
		return r4.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceUseStatement)
	if !ok {
		return r4.DeviceUseStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceUseStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDiagnosticReport(ctx context.Context, id string) (r4.DiagnosticReport, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DiagnosticReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DiagnosticReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r4.DiagnosticReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DiagnosticReport)
	if !ok {
		return r4.DiagnosticReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DiagnosticReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDocumentManifest(ctx context.Context, id string) (r4.DocumentManifest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DocumentManifest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DocumentManifest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DocumentManifest", id)
	if err != nil {
		return r4.DocumentManifest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentManifest)
	if !ok {
		return r4.DocumentManifest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DocumentManifest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDocumentReference(ctx context.Context, id string) (r4.DocumentReference, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DocumentReference{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for DocumentReference")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r4.DocumentReference{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentReference)
	if !ok {
		return r4.DocumentReference{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DocumentReference" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEffectEvidenceSynthesis(ctx context.Context, id string) (r4.EffectEvidenceSynthesis, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for EffectEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EffectEvidenceSynthesis", id)
	if err != nil {
		return r4.EffectEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EffectEvidenceSynthesis)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EffectEvidenceSynthesis" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEncounter(ctx context.Context, id string) (r4.Encounter, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Encounter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Encounter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Encounter", id)
	if err != nil {
		return r4.Encounter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Encounter)
	if !ok {
		return r4.Encounter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Encounter" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEndpoint(ctx context.Context, id string) (r4.Endpoint, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Endpoint{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Endpoint")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Endpoint", id)
	if err != nil {
		return r4.Endpoint{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Endpoint)
	if !ok {
		return r4.Endpoint{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Endpoint" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentRequest(ctx context.Context, id string) (r4.EnrollmentRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EnrollmentRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for EnrollmentRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r4.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentRequest)
	if !ok {
		return r4.EnrollmentRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EnrollmentRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentResponse(ctx context.Context, id string) (r4.EnrollmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EnrollmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for EnrollmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r4.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentResponse)
	if !ok {
		return r4.EnrollmentResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EnrollmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEpisodeOfCare(ctx context.Context, id string) (r4.EpisodeOfCare, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EpisodeOfCare{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for EpisodeOfCare")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r4.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EpisodeOfCare)
	if !ok {
		return r4.EpisodeOfCare{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EpisodeOfCare" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEventDefinition(ctx context.Context, id string) (r4.EventDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EventDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for EventDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r4.EventDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EventDefinition)
	if !ok {
		return r4.EventDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EventDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEvidence(ctx context.Context, id string) (r4.Evidence, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Evidence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Evidence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Evidence", id)
	if err != nil {
		return r4.Evidence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Evidence)
	if !ok {
		return r4.Evidence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Evidence" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceVariable(ctx context.Context, id string) (r4.EvidenceVariable, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EvidenceVariable{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for EvidenceVariable")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r4.EvidenceVariable{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EvidenceVariable)
	if !ok {
		return r4.EvidenceVariable{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EvidenceVariable" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadExampleScenario(ctx context.Context, id string) (r4.ExampleScenario, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ExampleScenario{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ExampleScenario")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r4.ExampleScenario{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExampleScenario)
	if !ok {
		return r4.ExampleScenario{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ExampleScenario" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadExplanationOfBenefit(ctx context.Context, id string) (r4.ExplanationOfBenefit, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ExplanationOfBenefit{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ExplanationOfBenefit")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r4.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExplanationOfBenefit)
	if !ok {
		return r4.ExplanationOfBenefit{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ExplanationOfBenefit" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadFamilyMemberHistory(ctx context.Context, id string) (r4.FamilyMemberHistory, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.FamilyMemberHistory{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for FamilyMemberHistory")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r4.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.FamilyMemberHistory)
	if !ok {
		return r4.FamilyMemberHistory{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "FamilyMemberHistory" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadFlag(ctx context.Context, id string) (r4.Flag, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Flag{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Flag")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Flag", id)
	if err != nil {
		return r4.Flag{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Flag)
	if !ok {
		return r4.Flag{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Flag" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGoal(ctx context.Context, id string) (r4.Goal, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Goal{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Goal")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Goal", id)
	if err != nil {
		return r4.Goal{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Goal)
	if !ok {
		return r4.Goal{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Goal" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGraphDefinition(ctx context.Context, id string) (r4.GraphDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.GraphDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for GraphDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r4.GraphDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GraphDefinition)
	if !ok {
		return r4.GraphDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "GraphDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGroup(ctx context.Context, id string) (r4.Group, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Group{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Group")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Group", id)
	if err != nil {
		return r4.Group{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Group)
	if !ok {
		return r4.Group{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Group" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGuidanceResponse(ctx context.Context, id string) (r4.GuidanceResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.GuidanceResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for GuidanceResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r4.GuidanceResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GuidanceResponse)
	if !ok {
		return r4.GuidanceResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "GuidanceResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadHealthcareService(ctx context.Context, id string) (r4.HealthcareService, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.HealthcareService{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for HealthcareService")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r4.HealthcareService{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.HealthcareService)
	if !ok {
		return r4.HealthcareService{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "HealthcareService" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImagingStudy(ctx context.Context, id string) (r4.ImagingStudy, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImagingStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ImagingStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r4.ImagingStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImagingStudy)
	if !ok {
		return r4.ImagingStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImagingStudy" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImmunization(ctx context.Context, id string) (r4.Immunization, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Immunization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Immunization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Immunization", id)
	if err != nil {
		return r4.Immunization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Immunization)
	if !ok {
		return r4.Immunization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Immunization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationEvaluation(ctx context.Context, id string) (r4.ImmunizationEvaluation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImmunizationEvaluation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ImmunizationEvaluation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r4.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationEvaluation)
	if !ok {
		return r4.ImmunizationEvaluation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImmunizationEvaluation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationRecommendation(ctx context.Context, id string) (r4.ImmunizationRecommendation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImmunizationRecommendation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ImmunizationRecommendation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r4.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationRecommendation)
	if !ok {
		return r4.ImmunizationRecommendation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImmunizationRecommendation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImplementationGuide(ctx context.Context, id string) (r4.ImplementationGuide, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImplementationGuide{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ImplementationGuide")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r4.ImplementationGuide{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImplementationGuide)
	if !ok {
		return r4.ImplementationGuide{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImplementationGuide" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadInsurancePlan(ctx context.Context, id string) (r4.InsurancePlan, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.InsurancePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for InsurancePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r4.InsurancePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.InsurancePlan)
	if !ok {
		return r4.InsurancePlan{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "InsurancePlan" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadInvoice(ctx context.Context, id string) (r4.Invoice, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Invoice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Invoice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Invoice", id)
	if err != nil {
		return r4.Invoice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Invoice)
	if !ok {
		return r4.Invoice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Invoice" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadLibrary(ctx context.Context, id string) (r4.Library, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Library{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Library")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Library", id)
	if err != nil {
		return r4.Library{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Library)
	if !ok {
		return r4.Library{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Library" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadLinkage(ctx context.Context, id string) (r4.Linkage, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Linkage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Linkage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Linkage", id)
	if err != nil {
		return r4.Linkage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Linkage)
	if !ok {
		return r4.Linkage{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Linkage" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadList(ctx context.Context, id string) (r4.List, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.List{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for List")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "List", id)
	if err != nil {
		return r4.List{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.List)
	if !ok {
		return r4.List{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "List" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadLocation(ctx context.Context, id string) (r4.Location, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Location{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Location")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Location", id)
	if err != nil {
		return r4.Location{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Location)
	if !ok {
		return r4.Location{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Location" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMeasure(ctx context.Context, id string) (r4.Measure, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Measure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Measure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Measure", id)
	if err != nil {
		return r4.Measure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Measure)
	if !ok {
		return r4.Measure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Measure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMeasureReport(ctx context.Context, id string) (r4.MeasureReport, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MeasureReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MeasureReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r4.MeasureReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MeasureReport)
	if !ok {
		return r4.MeasureReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MeasureReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedia(ctx context.Context, id string) (r4.Media, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Media{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Media")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Media", id)
	if err != nil {
		return r4.Media{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Media)
	if !ok {
		return r4.Media{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Media" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedication(ctx context.Context, id string) (r4.Medication, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Medication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Medication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Medication", id)
	if err != nil {
		return r4.Medication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Medication)
	if !ok {
		return r4.Medication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Medication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationAdministration(ctx context.Context, id string) (r4.MedicationAdministration, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationAdministration{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicationAdministration")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r4.MedicationAdministration{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationAdministration)
	if !ok {
		return r4.MedicationAdministration{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationAdministration" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationDispense(ctx context.Context, id string) (r4.MedicationDispense, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationDispense{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicationDispense")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r4.MedicationDispense{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationDispense)
	if !ok {
		return r4.MedicationDispense{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationDispense" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationKnowledge(ctx context.Context, id string) (r4.MedicationKnowledge, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationKnowledge{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicationKnowledge")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r4.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationKnowledge)
	if !ok {
		return r4.MedicationKnowledge{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationKnowledge" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationRequest(ctx context.Context, id string) (r4.MedicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r4.MedicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationRequest)
	if !ok {
		return r4.MedicationRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationStatement(ctx context.Context, id string) (r4.MedicationStatement, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicationStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r4.MedicationStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationStatement)
	if !ok {
		return r4.MedicationStatement{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProduct(ctx context.Context, id string) (r4.MedicinalProduct, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProduct", id)
	if err != nil {
		return r4.MedicinalProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProduct)
	if !ok {
		return r4.MedicinalProduct{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProduct" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductAuthorization(ctx context.Context, id string) (r4.MedicinalProductAuthorization, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductAuthorization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductAuthorization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductAuthorization", id)
	if err != nil {
		return r4.MedicinalProductAuthorization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductAuthorization)
	if !ok {
		return r4.MedicinalProductAuthorization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductAuthorization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductContraindication(ctx context.Context, id string) (r4.MedicinalProductContraindication, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductContraindication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductContraindication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductContraindication", id)
	if err != nil {
		return r4.MedicinalProductContraindication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductContraindication)
	if !ok {
		return r4.MedicinalProductContraindication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductContraindication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductIndication(ctx context.Context, id string) (r4.MedicinalProductIndication, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductIndication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductIndication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductIndication", id)
	if err != nil {
		return r4.MedicinalProductIndication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIndication)
	if !ok {
		return r4.MedicinalProductIndication{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductIndication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductIngredient(ctx context.Context, id string) (r4.MedicinalProductIngredient, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductIngredient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductIngredient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductIngredient", id)
	if err != nil {
		return r4.MedicinalProductIngredient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIngredient)
	if !ok {
		return r4.MedicinalProductIngredient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductIngredient" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductInteraction(ctx context.Context, id string) (r4.MedicinalProductInteraction, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductInteraction{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductInteraction")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductInteraction", id)
	if err != nil {
		return r4.MedicinalProductInteraction{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductInteraction)
	if !ok {
		return r4.MedicinalProductInteraction{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductInteraction" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductManufactured(ctx context.Context, id string) (r4.MedicinalProductManufactured, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductManufactured{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductManufactured")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductManufactured", id)
	if err != nil {
		return r4.MedicinalProductManufactured{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductManufactured)
	if !ok {
		return r4.MedicinalProductManufactured{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductManufactured" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductPackaged(ctx context.Context, id string) (r4.MedicinalProductPackaged, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductPackaged{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductPackaged")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductPackaged", id)
	if err != nil {
		return r4.MedicinalProductPackaged{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPackaged)
	if !ok {
		return r4.MedicinalProductPackaged{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductPackaged" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductPharmaceutical(ctx context.Context, id string) (r4.MedicinalProductPharmaceutical, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductPharmaceutical")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductPharmaceutical", id)
	if err != nil {
		return r4.MedicinalProductPharmaceutical{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductPharmaceutical" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductUndesirableEffect(ctx context.Context, id string) (r4.MedicinalProductUndesirableEffect, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MedicinalProductUndesirableEffect")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductUndesirableEffect", id)
	if err != nil {
		return r4.MedicinalProductUndesirableEffect{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductUndesirableEffect" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMessageDefinition(ctx context.Context, id string) (r4.MessageDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MessageDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MessageDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r4.MessageDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageDefinition)
	if !ok {
		return r4.MessageDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MessageDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMessageHeader(ctx context.Context, id string) (r4.MessageHeader, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MessageHeader{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MessageHeader")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r4.MessageHeader{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageHeader)
	if !ok {
		return r4.MessageHeader{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MessageHeader" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMolecularSequence(ctx context.Context, id string) (r4.MolecularSequence, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MolecularSequence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for MolecularSequence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r4.MolecularSequence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MolecularSequence)
	if !ok {
		return r4.MolecularSequence{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MolecularSequence" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadNamingSystem(ctx context.Context, id string) (r4.NamingSystem, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.NamingSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for NamingSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r4.NamingSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NamingSystem)
	if !ok {
		return r4.NamingSystem{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "NamingSystem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadNutritionOrder(ctx context.Context, id string) (r4.NutritionOrder, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.NutritionOrder{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for NutritionOrder")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r4.NutritionOrder{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NutritionOrder)
	if !ok {
		return r4.NutritionOrder{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "NutritionOrder" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadObservation(ctx context.Context, id string) (r4.Observation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Observation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Observation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Observation", id)
	if err != nil {
		return r4.Observation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Observation)
	if !ok {
		return r4.Observation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Observation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadObservationDefinition(ctx context.Context, id string) (r4.ObservationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ObservationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ObservationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r4.ObservationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ObservationDefinition)
	if !ok {
		return r4.ObservationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ObservationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOperationDefinition(ctx context.Context, id string) (r4.OperationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.OperationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for OperationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r4.OperationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationDefinition)
	if !ok {
		return r4.OperationDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OperationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOperationOutcome(ctx context.Context, id string) (r4.OperationOutcome, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.OperationOutcome{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for OperationOutcome")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r4.OperationOutcome{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationOutcome)
	if !ok {
		return r4.OperationOutcome{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OperationOutcome" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOrganization(ctx context.Context, id string) (r4.Organization, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Organization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Organization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Organization", id)
	if err != nil {
		return r4.Organization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Organization)
	if !ok {
		return r4.Organization{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Organization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOrganizationAffiliation(ctx context.Context, id string) (r4.OrganizationAffiliation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.OrganizationAffiliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for OrganizationAffiliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r4.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OrganizationAffiliation)
	if !ok {
		return r4.OrganizationAffiliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OrganizationAffiliation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadParameters(ctx context.Context, id string) (r4.Parameters, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Parameters{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Parameters")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Parameters", id)
	if err != nil {
		return r4.Parameters{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Parameters)
	if !ok {
		return r4.Parameters{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Parameters" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPatient(ctx context.Context, id string) (r4.Patient, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Patient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Patient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Patient", id)
	if err != nil {
		return r4.Patient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Patient)
	if !ok {
		return r4.Patient{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Patient" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPaymentNotice(ctx context.Context, id string) (r4.PaymentNotice, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PaymentNotice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for PaymentNotice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r4.PaymentNotice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentNotice)
	if !ok {
		return r4.PaymentNotice{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PaymentNotice" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPaymentReconciliation(ctx context.Context, id string) (r4.PaymentReconciliation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PaymentReconciliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for PaymentReconciliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r4.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentReconciliation)
	if !ok {
		return r4.PaymentReconciliation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PaymentReconciliation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPerson(ctx context.Context, id string) (r4.Person, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Person{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Person")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Person", id)
	if err != nil {
		return r4.Person{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Person)
	if !ok {
		return r4.Person{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Person" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPlanDefinition(ctx context.Context, id string) (r4.PlanDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PlanDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for PlanDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r4.PlanDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PlanDefinition)
	if !ok {
		return r4.PlanDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PlanDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPractitioner(ctx context.Context, id string) (r4.Practitioner, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Practitioner{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Practitioner")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Practitioner", id)
	if err != nil {
		return r4.Practitioner{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Practitioner)
	if !ok {
		return r4.Practitioner{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Practitioner" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPractitionerRole(ctx context.Context, id string) (r4.PractitionerRole, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PractitionerRole{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for PractitionerRole")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r4.PractitionerRole{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PractitionerRole)
	if !ok {
		return r4.PractitionerRole{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PractitionerRole" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadProcedure(ctx context.Context, id string) (r4.Procedure, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Procedure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Procedure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Procedure", id)
	if err != nil {
		return r4.Procedure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Procedure)
	if !ok {
		return r4.Procedure{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Procedure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadProvenance(ctx context.Context, id string) (r4.Provenance, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Provenance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Provenance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Provenance", id)
	if err != nil {
		return r4.Provenance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Provenance)
	if !ok {
		return r4.Provenance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Provenance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaire(ctx context.Context, id string) (r4.Questionnaire, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Questionnaire{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Questionnaire")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r4.Questionnaire{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Questionnaire)
	if !ok {
		return r4.Questionnaire{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Questionnaire" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaireResponse(ctx context.Context, id string) (r4.QuestionnaireResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.QuestionnaireResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for QuestionnaireResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r4.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.QuestionnaireResponse)
	if !ok {
		return r4.QuestionnaireResponse{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "QuestionnaireResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRelatedPerson(ctx context.Context, id string) (r4.RelatedPerson, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RelatedPerson{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for RelatedPerson")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r4.RelatedPerson{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RelatedPerson)
	if !ok {
		return r4.RelatedPerson{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RelatedPerson" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRequestGroup(ctx context.Context, id string) (r4.RequestGroup, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RequestGroup{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for RequestGroup")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RequestGroup", id)
	if err != nil {
		return r4.RequestGroup{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RequestGroup)
	if !ok {
		return r4.RequestGroup{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RequestGroup" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchDefinition(ctx context.Context, id string) (r4.ResearchDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ResearchDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchDefinition", id)
	if err != nil {
		return r4.ResearchDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchDefinition)
	if !ok {
		return r4.ResearchDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchElementDefinition(ctx context.Context, id string) (r4.ResearchElementDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchElementDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ResearchElementDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchElementDefinition", id)
	if err != nil {
		return r4.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchElementDefinition)
	if !ok {
		return r4.ResearchElementDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchElementDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchStudy(ctx context.Context, id string) (r4.ResearchStudy, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ResearchStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r4.ResearchStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchStudy)
	if !ok {
		return r4.ResearchStudy{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchStudy" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchSubject(ctx context.Context, id string) (r4.ResearchSubject, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchSubject{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ResearchSubject")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r4.ResearchSubject{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchSubject)
	if !ok {
		return r4.ResearchSubject{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchSubject" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRiskAssessment(ctx context.Context, id string) (r4.RiskAssessment, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RiskAssessment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for RiskAssessment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r4.RiskAssessment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskAssessment)
	if !ok {
		return r4.RiskAssessment{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RiskAssessment" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRiskEvidenceSynthesis(ctx context.Context, id string) (r4.RiskEvidenceSynthesis, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for RiskEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RiskEvidenceSynthesis", id)
	if err != nil {
		return r4.RiskEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskEvidenceSynthesis)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RiskEvidenceSynthesis" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSchedule(ctx context.Context, id string) (r4.Schedule, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Schedule{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Schedule")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Schedule", id)
	if err != nil {
		return r4.Schedule{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Schedule)
	if !ok {
		return r4.Schedule{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Schedule" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSearchParameter(ctx context.Context, id string) (r4.SearchParameter, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SearchParameter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SearchParameter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r4.SearchParameter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SearchParameter)
	if !ok {
		return r4.SearchParameter{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SearchParameter" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadServiceRequest(ctx context.Context, id string) (r4.ServiceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ServiceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ServiceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r4.ServiceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ServiceRequest)
	if !ok {
		return r4.ServiceRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ServiceRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSlot(ctx context.Context, id string) (r4.Slot, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Slot{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Slot")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Slot", id)
	if err != nil {
		return r4.Slot{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Slot)
	if !ok {
		return r4.Slot{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Slot" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSpecimen(ctx context.Context, id string) (r4.Specimen, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Specimen{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Specimen")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Specimen", id)
	if err != nil {
		return r4.Specimen{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Specimen)
	if !ok {
		return r4.Specimen{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Specimen" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSpecimenDefinition(ctx context.Context, id string) (r4.SpecimenDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SpecimenDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SpecimenDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r4.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SpecimenDefinition)
	if !ok {
		return r4.SpecimenDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SpecimenDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadStructureDefinition(ctx context.Context, id string) (r4.StructureDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.StructureDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for StructureDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r4.StructureDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureDefinition)
	if !ok {
		return r4.StructureDefinition{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "StructureDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadStructureMap(ctx context.Context, id string) (r4.StructureMap, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.StructureMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for StructureMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "StructureMap", id)
	if err != nil {
		return r4.StructureMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureMap)
	if !ok {
		return r4.StructureMap{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "StructureMap" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubscription(ctx context.Context, id string) (r4.Subscription, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Subscription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Subscription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Subscription", id)
	if err != nil {
		return r4.Subscription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Subscription)
	if !ok {
		return r4.Subscription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Subscription" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstance(ctx context.Context, id string) (r4.Substance, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Substance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Substance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Substance", id)
	if err != nil {
		return r4.Substance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Substance)
	if !ok {
		return r4.Substance{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Substance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceNucleicAcid(ctx context.Context, id string) (r4.SubstanceNucleicAcid, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceNucleicAcid{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SubstanceNucleicAcid")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubstanceNucleicAcid", id)
	if err != nil {
		return r4.SubstanceNucleicAcid{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceNucleicAcid)
	if !ok {
		return r4.SubstanceNucleicAcid{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceNucleicAcid" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstancePolymer(ctx context.Context, id string) (r4.SubstancePolymer, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstancePolymer{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SubstancePolymer")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubstancePolymer", id)
	if err != nil {
		return r4.SubstancePolymer{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstancePolymer)
	if !ok {
		return r4.SubstancePolymer{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstancePolymer" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceProtein(ctx context.Context, id string) (r4.SubstanceProtein, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceProtein{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SubstanceProtein")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubstanceProtein", id)
	if err != nil {
		return r4.SubstanceProtein{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceProtein)
	if !ok {
		return r4.SubstanceProtein{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceProtein" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceReferenceInformation(ctx context.Context, id string) (r4.SubstanceReferenceInformation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceReferenceInformation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SubstanceReferenceInformation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubstanceReferenceInformation", id)
	if err != nil {
		return r4.SubstanceReferenceInformation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceReferenceInformation)
	if !ok {
		return r4.SubstanceReferenceInformation{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceReferenceInformation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceSourceMaterial(ctx context.Context, id string) (r4.SubstanceSourceMaterial, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceSourceMaterial{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SubstanceSourceMaterial")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubstanceSourceMaterial", id)
	if err != nil {
		return r4.SubstanceSourceMaterial{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSourceMaterial)
	if !ok {
		return r4.SubstanceSourceMaterial{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceSourceMaterial" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceSpecification(ctx context.Context, id string) (r4.SubstanceSpecification, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceSpecification{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SubstanceSpecification")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubstanceSpecification", id)
	if err != nil {
		return r4.SubstanceSpecification{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSpecification)
	if !ok {
		return r4.SubstanceSpecification{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceSpecification" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSupplyDelivery(ctx context.Context, id string) (r4.SupplyDelivery, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SupplyDelivery{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SupplyDelivery")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r4.SupplyDelivery{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyDelivery)
	if !ok {
		return r4.SupplyDelivery{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SupplyDelivery" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSupplyRequest(ctx context.Context, id string) (r4.SupplyRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SupplyRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for SupplyRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r4.SupplyRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyRequest)
	if !ok {
		return r4.SupplyRequest{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SupplyRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTask(ctx context.Context, id string) (r4.Task, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Task{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for Task")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Task", id)
	if err != nil {
		return r4.Task{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Task)
	if !ok {
		return r4.Task{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Task" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTerminologyCapabilities(ctx context.Context, id string) (r4.TerminologyCapabilities, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.TerminologyCapabilities{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for TerminologyCapabilities")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r4.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TerminologyCapabilities)
	if !ok {
		return r4.TerminologyCapabilities{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TerminologyCapabilities" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTestReport(ctx context.Context, id string) (r4.TestReport, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.TestReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for TestReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "TestReport", id)
	if err != nil {
		return r4.TestReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestReport)
	if !ok {
		return r4.TestReport{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TestReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTestScript(ctx context.Context, id string) (r4.TestScript, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.TestScript{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for TestScript")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "TestScript", id)
	if err != nil {
		return r4.TestScript{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestScript)
	if !ok {
		return r4.TestScript{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TestScript" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadValueSet(ctx context.Context, id string) (r4.ValueSet, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ValueSet{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for ValueSet")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ValueSet", id)
	if err != nil {
		return r4.ValueSet{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ValueSet)
	if !ok {
		return r4.ValueSet{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ValueSet" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadVerificationResult(ctx context.Context, id string) (r4.VerificationResult, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.VerificationResult{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for VerificationResult")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r4.VerificationResult{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VerificationResult)
	if !ok {
		return r4.VerificationResult{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "VerificationResult" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadVisionPrescription(ctx context.Context, id string) (r4.VisionPrescription, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.VisionPrescription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Read not implemented for VisionPrescription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r4.VisionPrescription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VisionPrescription)
	if !ok {
		return r4.VisionPrescription{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "VisionPrescription" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) UpdateAccount(ctx context.Context, resource r4.Account) (capabilities.UpdateResult[r4.Account], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Account]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Account")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Account]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Account)
	if !ok {
		return capabilities.UpdateResult[r4.Account]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Account" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Account]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateActivityDefinition(ctx context.Context, resource r4.ActivityDefinition) (capabilities.UpdateResult[r4.ActivityDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ActivityDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ActivityDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ActivityDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ActivityDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ActivityDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ActivityDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ActivityDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAdverseEvent(ctx context.Context, resource r4.AdverseEvent) (capabilities.UpdateResult[r4.AdverseEvent], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AdverseEvent]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for AdverseEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AdverseEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AdverseEvent)
	if !ok {
		return capabilities.UpdateResult[r4.AdverseEvent]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AdverseEvent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.AdverseEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAllergyIntolerance(ctx context.Context, resource r4.AllergyIntolerance) (capabilities.UpdateResult[r4.AllergyIntolerance], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AllergyIntolerance]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for AllergyIntolerance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AllergyIntolerance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AllergyIntolerance)
	if !ok {
		return capabilities.UpdateResult[r4.AllergyIntolerance]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AllergyIntolerance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.AllergyIntolerance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointment(ctx context.Context, resource r4.Appointment) (capabilities.UpdateResult[r4.Appointment], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Appointment]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Appointment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Appointment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Appointment)
	if !ok {
		return capabilities.UpdateResult[r4.Appointment]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Appointment" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Appointment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointmentResponse(ctx context.Context, resource r4.AppointmentResponse) (capabilities.UpdateResult[r4.AppointmentResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AppointmentResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for AppointmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AppointmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AppointmentResponse)
	if !ok {
		return capabilities.UpdateResult[r4.AppointmentResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AppointmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.AppointmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAuditEvent(ctx context.Context, resource r4.AuditEvent) (capabilities.UpdateResult[r4.AuditEvent], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AuditEvent]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for AuditEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AuditEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AuditEvent)
	if !ok {
		return capabilities.UpdateResult[r4.AuditEvent]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "AuditEvent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.AuditEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBasic(ctx context.Context, resource r4.Basic) (capabilities.UpdateResult[r4.Basic], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Basic]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Basic")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Basic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Basic)
	if !ok {
		return capabilities.UpdateResult[r4.Basic]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Basic" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Basic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBinary(ctx context.Context, resource r4.Binary) (capabilities.UpdateResult[r4.Binary], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Binary]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Binary")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Binary]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Binary)
	if !ok {
		return capabilities.UpdateResult[r4.Binary]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Binary" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Binary]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r4.BiologicallyDerivedProduct) (capabilities.UpdateResult[r4.BiologicallyDerivedProduct], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for BiologicallyDerivedProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BiologicallyDerivedProduct)
	if !ok {
		return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "BiologicallyDerivedProduct" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBodyStructure(ctx context.Context, resource r4.BodyStructure) (capabilities.UpdateResult[r4.BodyStructure], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.BodyStructure]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for BodyStructure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.BodyStructure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BodyStructure)
	if !ok {
		return capabilities.UpdateResult[r4.BodyStructure]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "BodyStructure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.BodyStructure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBundle(ctx context.Context, resource r4.Bundle) (capabilities.UpdateResult[r4.Bundle], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Bundle]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Bundle")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Bundle]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Bundle)
	if !ok {
		return capabilities.UpdateResult[r4.Bundle]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Bundle" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Bundle]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilityStatement(ctx context.Context, resource r4.CapabilityStatement) (capabilities.UpdateResult[r4.CapabilityStatement], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CapabilityStatement]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CapabilityStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CapabilityStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CapabilityStatement)
	if !ok {
		return capabilities.UpdateResult[r4.CapabilityStatement]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CapabilityStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CapabilityStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCarePlan(ctx context.Context, resource r4.CarePlan) (capabilities.UpdateResult[r4.CarePlan], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CarePlan]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CarePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CarePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CarePlan)
	if !ok {
		return capabilities.UpdateResult[r4.CarePlan]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CarePlan" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CarePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCareTeam(ctx context.Context, resource r4.CareTeam) (capabilities.UpdateResult[r4.CareTeam], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CareTeam]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CareTeam")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CareTeam]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CareTeam)
	if !ok {
		return capabilities.UpdateResult[r4.CareTeam]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CareTeam" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CareTeam]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCatalogEntry(ctx context.Context, resource r4.CatalogEntry) (capabilities.UpdateResult[r4.CatalogEntry], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CatalogEntry]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CatalogEntry")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CatalogEntry]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CatalogEntry)
	if !ok {
		return capabilities.UpdateResult[r4.CatalogEntry]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CatalogEntry" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CatalogEntry]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItem(ctx context.Context, resource r4.ChargeItem) (capabilities.UpdateResult[r4.ChargeItem], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItem]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ChargeItem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ChargeItem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItem)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItem]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ChargeItem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ChargeItem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItemDefinition(ctx context.Context, resource r4.ChargeItemDefinition) (capabilities.UpdateResult[r4.ChargeItemDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItemDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ChargeItemDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ChargeItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItemDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItemDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ChargeItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ChargeItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaim(ctx context.Context, resource r4.Claim) (capabilities.UpdateResult[r4.Claim], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Claim]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Claim")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Claim]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Claim)
	if !ok {
		return capabilities.UpdateResult[r4.Claim]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Claim" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Claim]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaimResponse(ctx context.Context, resource r4.ClaimResponse) (capabilities.UpdateResult[r4.ClaimResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ClaimResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ClaimResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ClaimResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClaimResponse)
	if !ok {
		return capabilities.UpdateResult[r4.ClaimResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ClaimResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ClaimResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClinicalImpression(ctx context.Context, resource r4.ClinicalImpression) (capabilities.UpdateResult[r4.ClinicalImpression], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ClinicalImpression]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ClinicalImpression")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ClinicalImpression]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClinicalImpression)
	if !ok {
		return capabilities.UpdateResult[r4.ClinicalImpression]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ClinicalImpression" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ClinicalImpression]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCodeSystem(ctx context.Context, resource r4.CodeSystem) (capabilities.UpdateResult[r4.CodeSystem], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CodeSystem]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CodeSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CodeSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CodeSystem)
	if !ok {
		return capabilities.UpdateResult[r4.CodeSystem]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CodeSystem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CodeSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunication(ctx context.Context, resource r4.Communication) (capabilities.UpdateResult[r4.Communication], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Communication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Communication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Communication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Communication)
	if !ok {
		return capabilities.UpdateResult[r4.Communication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Communication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Communication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunicationRequest(ctx context.Context, resource r4.CommunicationRequest) (capabilities.UpdateResult[r4.CommunicationRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CommunicationRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CommunicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CommunicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CommunicationRequest)
	if !ok {
		return capabilities.UpdateResult[r4.CommunicationRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CommunicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CommunicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCompartmentDefinition(ctx context.Context, resource r4.CompartmentDefinition) (capabilities.UpdateResult[r4.CompartmentDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CompartmentDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CompartmentDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CompartmentDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CompartmentDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.CompartmentDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CompartmentDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CompartmentDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateComposition(ctx context.Context, resource r4.Composition) (capabilities.UpdateResult[r4.Composition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Composition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Composition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Composition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Composition)
	if !ok {
		return capabilities.UpdateResult[r4.Composition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Composition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Composition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConceptMap(ctx context.Context, resource r4.ConceptMap) (capabilities.UpdateResult[r4.ConceptMap], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ConceptMap]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ConceptMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ConceptMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ConceptMap)
	if !ok {
		return capabilities.UpdateResult[r4.ConceptMap]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ConceptMap" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ConceptMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCondition(ctx context.Context, resource r4.Condition) (capabilities.UpdateResult[r4.Condition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Condition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Condition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Condition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Condition)
	if !ok {
		return capabilities.UpdateResult[r4.Condition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Condition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Condition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConsent(ctx context.Context, resource r4.Consent) (capabilities.UpdateResult[r4.Consent], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Consent]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Consent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Consent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Consent)
	if !ok {
		return capabilities.UpdateResult[r4.Consent]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Consent" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Consent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateContract(ctx context.Context, resource r4.Contract) (capabilities.UpdateResult[r4.Contract], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Contract]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Contract")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Contract]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Contract)
	if !ok {
		return capabilities.UpdateResult[r4.Contract]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Contract" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Contract]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverage(ctx context.Context, resource r4.Coverage) (capabilities.UpdateResult[r4.Coverage], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Coverage]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Coverage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Coverage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Coverage)
	if !ok {
		return capabilities.UpdateResult[r4.Coverage]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Coverage" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Coverage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityRequest(ctx context.Context, resource r4.CoverageEligibilityRequest) (capabilities.UpdateResult[r4.CoverageEligibilityRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CoverageEligibilityRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityRequest)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CoverageEligibilityRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityResponse(ctx context.Context, resource r4.CoverageEligibilityResponse) (capabilities.UpdateResult[r4.CoverageEligibilityResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for CoverageEligibilityResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityResponse)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "CoverageEligibilityResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDetectedIssue(ctx context.Context, resource r4.DetectedIssue) (capabilities.UpdateResult[r4.DetectedIssue], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DetectedIssue]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DetectedIssue")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DetectedIssue]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DetectedIssue)
	if !ok {
		return capabilities.UpdateResult[r4.DetectedIssue]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DetectedIssue" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DetectedIssue]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDevice(ctx context.Context, resource r4.Device) (capabilities.UpdateResult[r4.Device], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Device]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Device")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Device]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Device)
	if !ok {
		return capabilities.UpdateResult[r4.Device]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Device" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Device]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceDefinition(ctx context.Context, resource r4.DeviceDefinition) (capabilities.UpdateResult[r4.DeviceDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DeviceDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DeviceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceMetric(ctx context.Context, resource r4.DeviceMetric) (capabilities.UpdateResult[r4.DeviceMetric], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceMetric]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DeviceMetric")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceMetric]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceMetric)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceMetric]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceMetric" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DeviceMetric]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceRequest(ctx context.Context, resource r4.DeviceRequest) (capabilities.UpdateResult[r4.DeviceRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DeviceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceRequest)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DeviceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceUseStatement(ctx context.Context, resource r4.DeviceUseStatement) (capabilities.UpdateResult[r4.DeviceUseStatement], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceUseStatement]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DeviceUseStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceUseStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceUseStatement)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceUseStatement]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DeviceUseStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DeviceUseStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDiagnosticReport(ctx context.Context, resource r4.DiagnosticReport) (capabilities.UpdateResult[r4.DiagnosticReport], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DiagnosticReport]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DiagnosticReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DiagnosticReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DiagnosticReport)
	if !ok {
		return capabilities.UpdateResult[r4.DiagnosticReport]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DiagnosticReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DiagnosticReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDocumentManifest(ctx context.Context, resource r4.DocumentManifest) (capabilities.UpdateResult[r4.DocumentManifest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentManifest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DocumentManifest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DocumentManifest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentManifest)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentManifest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DocumentManifest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DocumentManifest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDocumentReference(ctx context.Context, resource r4.DocumentReference) (capabilities.UpdateResult[r4.DocumentReference], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentReference]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for DocumentReference")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DocumentReference]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentReference)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentReference]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "DocumentReference" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.DocumentReference]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEffectEvidenceSynthesis(ctx context.Context, resource r4.EffectEvidenceSynthesis) (capabilities.UpdateResult[r4.EffectEvidenceSynthesis], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for EffectEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EffectEvidenceSynthesis)
	if !ok {
		return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EffectEvidenceSynthesis" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEncounter(ctx context.Context, resource r4.Encounter) (capabilities.UpdateResult[r4.Encounter], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Encounter]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Encounter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Encounter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Encounter)
	if !ok {
		return capabilities.UpdateResult[r4.Encounter]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Encounter" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Encounter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEndpoint(ctx context.Context, resource r4.Endpoint) (capabilities.UpdateResult[r4.Endpoint], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Endpoint]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Endpoint")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Endpoint]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Endpoint)
	if !ok {
		return capabilities.UpdateResult[r4.Endpoint]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Endpoint" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Endpoint]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentRequest(ctx context.Context, resource r4.EnrollmentRequest) (capabilities.UpdateResult[r4.EnrollmentRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for EnrollmentRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EnrollmentRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentRequest)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EnrollmentRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.EnrollmentRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentResponse(ctx context.Context, resource r4.EnrollmentResponse) (capabilities.UpdateResult[r4.EnrollmentResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for EnrollmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EnrollmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentResponse)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EnrollmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.EnrollmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEpisodeOfCare(ctx context.Context, resource r4.EpisodeOfCare) (capabilities.UpdateResult[r4.EpisodeOfCare], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EpisodeOfCare]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for EpisodeOfCare")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EpisodeOfCare]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EpisodeOfCare)
	if !ok {
		return capabilities.UpdateResult[r4.EpisodeOfCare]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EpisodeOfCare" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.EpisodeOfCare]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEventDefinition(ctx context.Context, resource r4.EventDefinition) (capabilities.UpdateResult[r4.EventDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EventDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for EventDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EventDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EventDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.EventDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EventDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.EventDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidence(ctx context.Context, resource r4.Evidence) (capabilities.UpdateResult[r4.Evidence], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Evidence]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Evidence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Evidence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Evidence)
	if !ok {
		return capabilities.UpdateResult[r4.Evidence]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Evidence" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Evidence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidenceVariable(ctx context.Context, resource r4.EvidenceVariable) (capabilities.UpdateResult[r4.EvidenceVariable], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EvidenceVariable]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for EvidenceVariable")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EvidenceVariable]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EvidenceVariable)
	if !ok {
		return capabilities.UpdateResult[r4.EvidenceVariable]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "EvidenceVariable" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.EvidenceVariable]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExampleScenario(ctx context.Context, resource r4.ExampleScenario) (capabilities.UpdateResult[r4.ExampleScenario], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ExampleScenario]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ExampleScenario")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ExampleScenario]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExampleScenario)
	if !ok {
		return capabilities.UpdateResult[r4.ExampleScenario]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ExampleScenario" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ExampleScenario]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExplanationOfBenefit(ctx context.Context, resource r4.ExplanationOfBenefit) (capabilities.UpdateResult[r4.ExplanationOfBenefit], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ExplanationOfBenefit]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ExplanationOfBenefit")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ExplanationOfBenefit]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExplanationOfBenefit)
	if !ok {
		return capabilities.UpdateResult[r4.ExplanationOfBenefit]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ExplanationOfBenefit" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ExplanationOfBenefit]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFamilyMemberHistory(ctx context.Context, resource r4.FamilyMemberHistory) (capabilities.UpdateResult[r4.FamilyMemberHistory], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.FamilyMemberHistory]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for FamilyMemberHistory")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.FamilyMemberHistory]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.FamilyMemberHistory)
	if !ok {
		return capabilities.UpdateResult[r4.FamilyMemberHistory]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "FamilyMemberHistory" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.FamilyMemberHistory]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFlag(ctx context.Context, resource r4.Flag) (capabilities.UpdateResult[r4.Flag], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Flag]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Flag")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Flag]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Flag)
	if !ok {
		return capabilities.UpdateResult[r4.Flag]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Flag" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Flag]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGoal(ctx context.Context, resource r4.Goal) (capabilities.UpdateResult[r4.Goal], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Goal]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Goal")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Goal]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Goal)
	if !ok {
		return capabilities.UpdateResult[r4.Goal]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Goal" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Goal]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGraphDefinition(ctx context.Context, resource r4.GraphDefinition) (capabilities.UpdateResult[r4.GraphDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.GraphDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for GraphDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.GraphDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GraphDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.GraphDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "GraphDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.GraphDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGroup(ctx context.Context, resource r4.Group) (capabilities.UpdateResult[r4.Group], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Group]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Group")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Group]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Group)
	if !ok {
		return capabilities.UpdateResult[r4.Group]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Group" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Group]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGuidanceResponse(ctx context.Context, resource r4.GuidanceResponse) (capabilities.UpdateResult[r4.GuidanceResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.GuidanceResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for GuidanceResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.GuidanceResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GuidanceResponse)
	if !ok {
		return capabilities.UpdateResult[r4.GuidanceResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "GuidanceResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.GuidanceResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateHealthcareService(ctx context.Context, resource r4.HealthcareService) (capabilities.UpdateResult[r4.HealthcareService], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.HealthcareService]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for HealthcareService")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.HealthcareService]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.HealthcareService)
	if !ok {
		return capabilities.UpdateResult[r4.HealthcareService]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "HealthcareService" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.HealthcareService]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImagingStudy(ctx context.Context, resource r4.ImagingStudy) (capabilities.UpdateResult[r4.ImagingStudy], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImagingStudy]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ImagingStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImagingStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImagingStudy)
	if !ok {
		return capabilities.UpdateResult[r4.ImagingStudy]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImagingStudy" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ImagingStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunization(ctx context.Context, resource r4.Immunization) (capabilities.UpdateResult[r4.Immunization], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Immunization]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Immunization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Immunization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Immunization)
	if !ok {
		return capabilities.UpdateResult[r4.Immunization]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Immunization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Immunization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationEvaluation(ctx context.Context, resource r4.ImmunizationEvaluation) (capabilities.UpdateResult[r4.ImmunizationEvaluation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationEvaluation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ImmunizationEvaluation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImmunizationEvaluation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationEvaluation)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationEvaluation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImmunizationEvaluation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ImmunizationEvaluation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationRecommendation(ctx context.Context, resource r4.ImmunizationRecommendation) (capabilities.UpdateResult[r4.ImmunizationRecommendation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationRecommendation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ImmunizationRecommendation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImmunizationRecommendation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationRecommendation)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationRecommendation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImmunizationRecommendation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ImmunizationRecommendation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImplementationGuide(ctx context.Context, resource r4.ImplementationGuide) (capabilities.UpdateResult[r4.ImplementationGuide], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImplementationGuide]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ImplementationGuide")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImplementationGuide]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImplementationGuide)
	if !ok {
		return capabilities.UpdateResult[r4.ImplementationGuide]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ImplementationGuide" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ImplementationGuide]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInsurancePlan(ctx context.Context, resource r4.InsurancePlan) (capabilities.UpdateResult[r4.InsurancePlan], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.InsurancePlan]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for InsurancePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.InsurancePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.InsurancePlan)
	if !ok {
		return capabilities.UpdateResult[r4.InsurancePlan]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "InsurancePlan" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.InsurancePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInvoice(ctx context.Context, resource r4.Invoice) (capabilities.UpdateResult[r4.Invoice], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Invoice]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Invoice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Invoice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Invoice)
	if !ok {
		return capabilities.UpdateResult[r4.Invoice]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Invoice" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Invoice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLibrary(ctx context.Context, resource r4.Library) (capabilities.UpdateResult[r4.Library], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Library]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Library")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Library]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Library)
	if !ok {
		return capabilities.UpdateResult[r4.Library]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Library" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Library]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLinkage(ctx context.Context, resource r4.Linkage) (capabilities.UpdateResult[r4.Linkage], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Linkage]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Linkage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Linkage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Linkage)
	if !ok {
		return capabilities.UpdateResult[r4.Linkage]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Linkage" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Linkage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateList(ctx context.Context, resource r4.List) (capabilities.UpdateResult[r4.List], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.List]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for List")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.List]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.List)
	if !ok {
		return capabilities.UpdateResult[r4.List]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "List" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.List]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLocation(ctx context.Context, resource r4.Location) (capabilities.UpdateResult[r4.Location], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Location]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Location")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Location]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Location)
	if !ok {
		return capabilities.UpdateResult[r4.Location]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Location" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Location]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasure(ctx context.Context, resource r4.Measure) (capabilities.UpdateResult[r4.Measure], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Measure]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Measure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Measure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Measure)
	if !ok {
		return capabilities.UpdateResult[r4.Measure]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Measure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Measure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasureReport(ctx context.Context, resource r4.MeasureReport) (capabilities.UpdateResult[r4.MeasureReport], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MeasureReport]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MeasureReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MeasureReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MeasureReport)
	if !ok {
		return capabilities.UpdateResult[r4.MeasureReport]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MeasureReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MeasureReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedia(ctx context.Context, resource r4.Media) (capabilities.UpdateResult[r4.Media], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Media]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Media")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Media]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Media)
	if !ok {
		return capabilities.UpdateResult[r4.Media]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Media" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Media]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedication(ctx context.Context, resource r4.Medication) (capabilities.UpdateResult[r4.Medication], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Medication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Medication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Medication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Medication)
	if !ok {
		return capabilities.UpdateResult[r4.Medication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Medication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Medication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationAdministration(ctx context.Context, resource r4.MedicationAdministration) (capabilities.UpdateResult[r4.MedicationAdministration], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationAdministration]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicationAdministration")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationAdministration]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationAdministration)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationAdministration]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationAdministration" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicationAdministration]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationDispense(ctx context.Context, resource r4.MedicationDispense) (capabilities.UpdateResult[r4.MedicationDispense], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationDispense]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicationDispense")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationDispense]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationDispense)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationDispense]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationDispense" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicationDispense]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationKnowledge(ctx context.Context, resource r4.MedicationKnowledge) (capabilities.UpdateResult[r4.MedicationKnowledge], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationKnowledge]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicationKnowledge")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationKnowledge]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationKnowledge)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationKnowledge]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationKnowledge" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicationKnowledge]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationRequest(ctx context.Context, resource r4.MedicationRequest) (capabilities.UpdateResult[r4.MedicationRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationRequest)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationStatement(ctx context.Context, resource r4.MedicationStatement) (capabilities.UpdateResult[r4.MedicationStatement], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationStatement]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicationStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationStatement)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationStatement]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicationStatement" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicationStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProduct(ctx context.Context, resource r4.MedicinalProduct) (capabilities.UpdateResult[r4.MedicinalProduct], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProduct]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProduct)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProduct]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProduct" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductAuthorization(ctx context.Context, resource r4.MedicinalProductAuthorization) (capabilities.UpdateResult[r4.MedicinalProductAuthorization], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductAuthorization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductAuthorization)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductAuthorization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductContraindication(ctx context.Context, resource r4.MedicinalProductContraindication) (capabilities.UpdateResult[r4.MedicinalProductContraindication], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductContraindication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductContraindication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductContraindication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductContraindication)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductContraindication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductContraindication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductContraindication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductIndication(ctx context.Context, resource r4.MedicinalProductIndication) (capabilities.UpdateResult[r4.MedicinalProductIndication], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIndication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductIndication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductIndication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIndication)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIndication]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductIndication" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductIndication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductIngredient(ctx context.Context, resource r4.MedicinalProductIngredient) (capabilities.UpdateResult[r4.MedicinalProductIngredient], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIngredient]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductIngredient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductIngredient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIngredient)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIngredient]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductIngredient" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductIngredient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductInteraction(ctx context.Context, resource r4.MedicinalProductInteraction) (capabilities.UpdateResult[r4.MedicinalProductInteraction], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductInteraction]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductInteraction")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductInteraction]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductInteraction)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductInteraction]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductInteraction" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductInteraction]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductManufactured(ctx context.Context, resource r4.MedicinalProductManufactured) (capabilities.UpdateResult[r4.MedicinalProductManufactured], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductManufactured]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductManufactured")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductManufactured]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductManufactured)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductManufactured]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductManufactured" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductManufactured]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductPackaged(ctx context.Context, resource r4.MedicinalProductPackaged) (capabilities.UpdateResult[r4.MedicinalProductPackaged], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPackaged]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductPackaged")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductPackaged]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPackaged)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPackaged]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductPackaged" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductPackaged]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductPharmaceutical(ctx context.Context, resource r4.MedicinalProductPharmaceutical) (capabilities.UpdateResult[r4.MedicinalProductPharmaceutical], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductPharmaceutical")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductPharmaceutical" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductUndesirableEffect(ctx context.Context, resource r4.MedicinalProductUndesirableEffect) (capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MedicinalProductUndesirableEffect")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MedicinalProductUndesirableEffect" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageDefinition(ctx context.Context, resource r4.MessageDefinition) (capabilities.UpdateResult[r4.MessageDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MessageDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MessageDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MessageDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.MessageDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MessageDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MessageDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageHeader(ctx context.Context, resource r4.MessageHeader) (capabilities.UpdateResult[r4.MessageHeader], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MessageHeader]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MessageHeader")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MessageHeader]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageHeader)
	if !ok {
		return capabilities.UpdateResult[r4.MessageHeader]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MessageHeader" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MessageHeader]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMolecularSequence(ctx context.Context, resource r4.MolecularSequence) (capabilities.UpdateResult[r4.MolecularSequence], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MolecularSequence]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for MolecularSequence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MolecularSequence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MolecularSequence)
	if !ok {
		return capabilities.UpdateResult[r4.MolecularSequence]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "MolecularSequence" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.MolecularSequence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNamingSystem(ctx context.Context, resource r4.NamingSystem) (capabilities.UpdateResult[r4.NamingSystem], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.NamingSystem]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for NamingSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.NamingSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NamingSystem)
	if !ok {
		return capabilities.UpdateResult[r4.NamingSystem]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "NamingSystem" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.NamingSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNutritionOrder(ctx context.Context, resource r4.NutritionOrder) (capabilities.UpdateResult[r4.NutritionOrder], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.NutritionOrder]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for NutritionOrder")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.NutritionOrder]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NutritionOrder)
	if !ok {
		return capabilities.UpdateResult[r4.NutritionOrder]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "NutritionOrder" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.NutritionOrder]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservation(ctx context.Context, resource r4.Observation) (capabilities.UpdateResult[r4.Observation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Observation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Observation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Observation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Observation)
	if !ok {
		return capabilities.UpdateResult[r4.Observation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Observation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Observation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservationDefinition(ctx context.Context, resource r4.ObservationDefinition) (capabilities.UpdateResult[r4.ObservationDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ObservationDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ObservationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ObservationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ObservationDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ObservationDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ObservationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ObservationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationDefinition(ctx context.Context, resource r4.OperationDefinition) (capabilities.UpdateResult[r4.OperationDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.OperationDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for OperationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.OperationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.OperationDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OperationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.OperationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationOutcome(ctx context.Context, resource r4.OperationOutcome) (capabilities.UpdateResult[r4.OperationOutcome], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.OperationOutcome]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for OperationOutcome")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.OperationOutcome]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationOutcome)
	if !ok {
		return capabilities.UpdateResult[r4.OperationOutcome]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OperationOutcome" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.OperationOutcome]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganization(ctx context.Context, resource r4.Organization) (capabilities.UpdateResult[r4.Organization], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Organization]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Organization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Organization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Organization)
	if !ok {
		return capabilities.UpdateResult[r4.Organization]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Organization" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Organization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganizationAffiliation(ctx context.Context, resource r4.OrganizationAffiliation) (capabilities.UpdateResult[r4.OrganizationAffiliation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.OrganizationAffiliation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for OrganizationAffiliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.OrganizationAffiliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OrganizationAffiliation)
	if !ok {
		return capabilities.UpdateResult[r4.OrganizationAffiliation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "OrganizationAffiliation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.OrganizationAffiliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateParameters(ctx context.Context, resource r4.Parameters) (capabilities.UpdateResult[r4.Parameters], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Parameters]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Parameters")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Parameters]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Parameters)
	if !ok {
		return capabilities.UpdateResult[r4.Parameters]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Parameters" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Parameters]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePatient(ctx context.Context, resource r4.Patient) (capabilities.UpdateResult[r4.Patient], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Patient]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Patient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Patient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Patient)
	if !ok {
		return capabilities.UpdateResult[r4.Patient]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Patient" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Patient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentNotice(ctx context.Context, resource r4.PaymentNotice) (capabilities.UpdateResult[r4.PaymentNotice], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentNotice]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for PaymentNotice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PaymentNotice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentNotice)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentNotice]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PaymentNotice" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.PaymentNotice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentReconciliation(ctx context.Context, resource r4.PaymentReconciliation) (capabilities.UpdateResult[r4.PaymentReconciliation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentReconciliation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for PaymentReconciliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PaymentReconciliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentReconciliation)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentReconciliation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PaymentReconciliation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.PaymentReconciliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePerson(ctx context.Context, resource r4.Person) (capabilities.UpdateResult[r4.Person], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Person]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Person")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Person]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Person)
	if !ok {
		return capabilities.UpdateResult[r4.Person]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Person" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Person]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePlanDefinition(ctx context.Context, resource r4.PlanDefinition) (capabilities.UpdateResult[r4.PlanDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PlanDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for PlanDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PlanDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PlanDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.PlanDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PlanDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.PlanDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitioner(ctx context.Context, resource r4.Practitioner) (capabilities.UpdateResult[r4.Practitioner], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Practitioner]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Practitioner")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Practitioner]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Practitioner)
	if !ok {
		return capabilities.UpdateResult[r4.Practitioner]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Practitioner" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Practitioner]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitionerRole(ctx context.Context, resource r4.PractitionerRole) (capabilities.UpdateResult[r4.PractitionerRole], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PractitionerRole]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for PractitionerRole")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PractitionerRole]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PractitionerRole)
	if !ok {
		return capabilities.UpdateResult[r4.PractitionerRole]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "PractitionerRole" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.PractitionerRole]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProcedure(ctx context.Context, resource r4.Procedure) (capabilities.UpdateResult[r4.Procedure], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Procedure]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Procedure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Procedure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Procedure)
	if !ok {
		return capabilities.UpdateResult[r4.Procedure]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Procedure" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Procedure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProvenance(ctx context.Context, resource r4.Provenance) (capabilities.UpdateResult[r4.Provenance], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Provenance]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Provenance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Provenance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Provenance)
	if !ok {
		return capabilities.UpdateResult[r4.Provenance]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Provenance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Provenance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaire(ctx context.Context, resource r4.Questionnaire) (capabilities.UpdateResult[r4.Questionnaire], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Questionnaire]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Questionnaire")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Questionnaire]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Questionnaire)
	if !ok {
		return capabilities.UpdateResult[r4.Questionnaire]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Questionnaire" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Questionnaire]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaireResponse(ctx context.Context, resource r4.QuestionnaireResponse) (capabilities.UpdateResult[r4.QuestionnaireResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.QuestionnaireResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for QuestionnaireResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.QuestionnaireResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.QuestionnaireResponse)
	if !ok {
		return capabilities.UpdateResult[r4.QuestionnaireResponse]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "QuestionnaireResponse" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.QuestionnaireResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRelatedPerson(ctx context.Context, resource r4.RelatedPerson) (capabilities.UpdateResult[r4.RelatedPerson], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RelatedPerson]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for RelatedPerson")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RelatedPerson]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RelatedPerson)
	if !ok {
		return capabilities.UpdateResult[r4.RelatedPerson]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RelatedPerson" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.RelatedPerson]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRequestGroup(ctx context.Context, resource r4.RequestGroup) (capabilities.UpdateResult[r4.RequestGroup], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RequestGroup]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for RequestGroup")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RequestGroup]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RequestGroup)
	if !ok {
		return capabilities.UpdateResult[r4.RequestGroup]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RequestGroup" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.RequestGroup]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchDefinition(ctx context.Context, resource r4.ResearchDefinition) (capabilities.UpdateResult[r4.ResearchDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ResearchDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ResearchDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchElementDefinition(ctx context.Context, resource r4.ResearchElementDefinition) (capabilities.UpdateResult[r4.ResearchElementDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchElementDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ResearchElementDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchElementDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchElementDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchElementDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchElementDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ResearchElementDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchStudy(ctx context.Context, resource r4.ResearchStudy) (capabilities.UpdateResult[r4.ResearchStudy], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchStudy]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ResearchStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchStudy)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchStudy]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchStudy" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ResearchStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchSubject(ctx context.Context, resource r4.ResearchSubject) (capabilities.UpdateResult[r4.ResearchSubject], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchSubject]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ResearchSubject")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchSubject]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchSubject)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchSubject]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ResearchSubject" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ResearchSubject]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRiskAssessment(ctx context.Context, resource r4.RiskAssessment) (capabilities.UpdateResult[r4.RiskAssessment], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RiskAssessment]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for RiskAssessment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RiskAssessment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskAssessment)
	if !ok {
		return capabilities.UpdateResult[r4.RiskAssessment]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RiskAssessment" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.RiskAssessment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRiskEvidenceSynthesis(ctx context.Context, resource r4.RiskEvidenceSynthesis) (capabilities.UpdateResult[r4.RiskEvidenceSynthesis], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for RiskEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskEvidenceSynthesis)
	if !ok {
		return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "RiskEvidenceSynthesis" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSchedule(ctx context.Context, resource r4.Schedule) (capabilities.UpdateResult[r4.Schedule], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Schedule]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Schedule")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Schedule]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Schedule)
	if !ok {
		return capabilities.UpdateResult[r4.Schedule]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Schedule" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Schedule]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSearchParameter(ctx context.Context, resource r4.SearchParameter) (capabilities.UpdateResult[r4.SearchParameter], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SearchParameter]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SearchParameter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SearchParameter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SearchParameter)
	if !ok {
		return capabilities.UpdateResult[r4.SearchParameter]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SearchParameter" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SearchParameter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateServiceRequest(ctx context.Context, resource r4.ServiceRequest) (capabilities.UpdateResult[r4.ServiceRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ServiceRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ServiceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ServiceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ServiceRequest)
	if !ok {
		return capabilities.UpdateResult[r4.ServiceRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ServiceRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ServiceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSlot(ctx context.Context, resource r4.Slot) (capabilities.UpdateResult[r4.Slot], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Slot]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Slot")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Slot]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Slot)
	if !ok {
		return capabilities.UpdateResult[r4.Slot]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Slot" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Slot]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimen(ctx context.Context, resource r4.Specimen) (capabilities.UpdateResult[r4.Specimen], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Specimen]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Specimen")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Specimen]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Specimen)
	if !ok {
		return capabilities.UpdateResult[r4.Specimen]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Specimen" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Specimen]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimenDefinition(ctx context.Context, resource r4.SpecimenDefinition) (capabilities.UpdateResult[r4.SpecimenDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SpecimenDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SpecimenDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SpecimenDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SpecimenDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.SpecimenDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SpecimenDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SpecimenDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureDefinition(ctx context.Context, resource r4.StructureDefinition) (capabilities.UpdateResult[r4.StructureDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.StructureDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for StructureDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.StructureDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.StructureDefinition]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "StructureDefinition" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.StructureDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureMap(ctx context.Context, resource r4.StructureMap) (capabilities.UpdateResult[r4.StructureMap], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.StructureMap]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for StructureMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.StructureMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureMap)
	if !ok {
		return capabilities.UpdateResult[r4.StructureMap]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "StructureMap" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.StructureMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscription(ctx context.Context, resource r4.Subscription) (capabilities.UpdateResult[r4.Subscription], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Subscription]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Subscription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Subscription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Subscription)
	if !ok {
		return capabilities.UpdateResult[r4.Subscription]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Subscription" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Subscription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstance(ctx context.Context, resource r4.Substance) (capabilities.UpdateResult[r4.Substance], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Substance]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Substance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Substance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Substance)
	if !ok {
		return capabilities.UpdateResult[r4.Substance]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Substance" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Substance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceNucleicAcid(ctx context.Context, resource r4.SubstanceNucleicAcid) (capabilities.UpdateResult[r4.SubstanceNucleicAcid], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SubstanceNucleicAcid")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceNucleicAcid)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceNucleicAcid" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstancePolymer(ctx context.Context, resource r4.SubstancePolymer) (capabilities.UpdateResult[r4.SubstancePolymer], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstancePolymer]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SubstancePolymer")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstancePolymer]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstancePolymer)
	if !ok {
		return capabilities.UpdateResult[r4.SubstancePolymer]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstancePolymer" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SubstancePolymer]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceProtein(ctx context.Context, resource r4.SubstanceProtein) (capabilities.UpdateResult[r4.SubstanceProtein], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceProtein]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SubstanceProtein")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceProtein]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceProtein)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceProtein]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceProtein" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SubstanceProtein]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceReferenceInformation(ctx context.Context, resource r4.SubstanceReferenceInformation) (capabilities.UpdateResult[r4.SubstanceReferenceInformation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SubstanceReferenceInformation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceReferenceInformation)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceReferenceInformation" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceSourceMaterial(ctx context.Context, resource r4.SubstanceSourceMaterial) (capabilities.UpdateResult[r4.SubstanceSourceMaterial], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SubstanceSourceMaterial")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSourceMaterial)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceSourceMaterial" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceSpecification(ctx context.Context, resource r4.SubstanceSpecification) (capabilities.UpdateResult[r4.SubstanceSpecification], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSpecification]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SubstanceSpecification")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceSpecification]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSpecification)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSpecification]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SubstanceSpecification" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SubstanceSpecification]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyDelivery(ctx context.Context, resource r4.SupplyDelivery) (capabilities.UpdateResult[r4.SupplyDelivery], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyDelivery]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SupplyDelivery")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SupplyDelivery]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyDelivery)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyDelivery]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SupplyDelivery" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SupplyDelivery]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyRequest(ctx context.Context, resource r4.SupplyRequest) (capabilities.UpdateResult[r4.SupplyRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for SupplyRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SupplyRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyRequest)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyRequest]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "SupplyRequest" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.SupplyRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTask(ctx context.Context, resource r4.Task) (capabilities.UpdateResult[r4.Task], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Task]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for Task")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Task]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Task)
	if !ok {
		return capabilities.UpdateResult[r4.Task]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "Task" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.Task]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTerminologyCapabilities(ctx context.Context, resource r4.TerminologyCapabilities) (capabilities.UpdateResult[r4.TerminologyCapabilities], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.TerminologyCapabilities]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for TerminologyCapabilities")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.TerminologyCapabilities]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TerminologyCapabilities)
	if !ok {
		return capabilities.UpdateResult[r4.TerminologyCapabilities]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TerminologyCapabilities" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.TerminologyCapabilities]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestReport(ctx context.Context, resource r4.TestReport) (capabilities.UpdateResult[r4.TestReport], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.TestReport]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for TestReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.TestReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestReport)
	if !ok {
		return capabilities.UpdateResult[r4.TestReport]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TestReport" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.TestReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestScript(ctx context.Context, resource r4.TestScript) (capabilities.UpdateResult[r4.TestScript], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.TestScript]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for TestScript")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.TestScript]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestScript)
	if !ok {
		return capabilities.UpdateResult[r4.TestScript]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "TestScript" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.TestScript]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateValueSet(ctx context.Context, resource r4.ValueSet) (capabilities.UpdateResult[r4.ValueSet], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ValueSet]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for ValueSet")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ValueSet]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ValueSet)
	if !ok {
		return capabilities.UpdateResult[r4.ValueSet]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "ValueSet" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.ValueSet]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVerificationResult(ctx context.Context, resource r4.VerificationResult) (capabilities.UpdateResult[r4.VerificationResult], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.VerificationResult]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for VerificationResult")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.VerificationResult]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VerificationResult)
	if !ok {
		return capabilities.UpdateResult[r4.VerificationResult]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "VerificationResult" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.VerificationResult]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVisionPrescription(ctx context.Context, resource r4.VisionPrescription) (capabilities.UpdateResult[r4.VisionPrescription], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.VisionPrescription]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Update not implemented for VisionPrescription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.VisionPrescription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VisionPrescription)
	if !ok {
		return capabilities.UpdateResult[r4.VisionPrescription]{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4.String{Value: utils.Ptr("expected " + "VisionPrescription" + " but got " + v.ResourceType())},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return capabilities.UpdateResult[r4.VisionPrescription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) DeleteAccount(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Account")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Account", id)
}
func (w Concrete) DeleteActivityDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ActivityDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ActivityDefinition", id)
}
func (w Concrete) DeleteAdverseEvent(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for AdverseEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AdverseEvent", id)
}
func (w Concrete) DeleteAllergyIntolerance(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for AllergyIntolerance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AllergyIntolerance", id)
}
func (w Concrete) DeleteAppointment(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Appointment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Appointment", id)
}
func (w Concrete) DeleteAppointmentResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for AppointmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AppointmentResponse", id)
}
func (w Concrete) DeleteAuditEvent(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for AuditEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AuditEvent", id)
}
func (w Concrete) DeleteBasic(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Basic")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Basic", id)
}
func (w Concrete) DeleteBinary(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Binary")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Binary", id)
}
func (w Concrete) DeleteBiologicallyDerivedProduct(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for BiologicallyDerivedProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "BiologicallyDerivedProduct", id)
}
func (w Concrete) DeleteBodyStructure(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for BodyStructure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "BodyStructure", id)
}
func (w Concrete) DeleteBundle(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Bundle")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Bundle", id)
}
func (w Concrete) DeleteCapabilityStatement(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CapabilityStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CapabilityStatement", id)
}
func (w Concrete) DeleteCarePlan(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CarePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CarePlan", id)
}
func (w Concrete) DeleteCareTeam(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CareTeam")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CareTeam", id)
}
func (w Concrete) DeleteCatalogEntry(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CatalogEntry")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CatalogEntry", id)
}
func (w Concrete) DeleteChargeItem(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ChargeItem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ChargeItem", id)
}
func (w Concrete) DeleteChargeItemDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ChargeItemDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ChargeItemDefinition", id)
}
func (w Concrete) DeleteClaim(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Claim")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Claim", id)
}
func (w Concrete) DeleteClaimResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ClaimResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ClaimResponse", id)
}
func (w Concrete) DeleteClinicalImpression(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ClinicalImpression")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ClinicalImpression", id)
}
func (w Concrete) DeleteCodeSystem(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CodeSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CodeSystem", id)
}
func (w Concrete) DeleteCommunication(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Communication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Communication", id)
}
func (w Concrete) DeleteCommunicationRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CommunicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CommunicationRequest", id)
}
func (w Concrete) DeleteCompartmentDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CompartmentDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CompartmentDefinition", id)
}
func (w Concrete) DeleteComposition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Composition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Composition", id)
}
func (w Concrete) DeleteConceptMap(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ConceptMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ConceptMap", id)
}
func (w Concrete) DeleteCondition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Condition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Condition", id)
}
func (w Concrete) DeleteConsent(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Consent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Consent", id)
}
func (w Concrete) DeleteContract(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Contract")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Contract", id)
}
func (w Concrete) DeleteCoverage(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Coverage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Coverage", id)
}
func (w Concrete) DeleteCoverageEligibilityRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CoverageEligibilityRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CoverageEligibilityRequest", id)
}
func (w Concrete) DeleteCoverageEligibilityResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for CoverageEligibilityResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CoverageEligibilityResponse", id)
}
func (w Concrete) DeleteDetectedIssue(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DetectedIssue")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DetectedIssue", id)
}
func (w Concrete) DeleteDevice(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Device")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Device", id)
}
func (w Concrete) DeleteDeviceDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DeviceDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceDefinition", id)
}
func (w Concrete) DeleteDeviceMetric(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DeviceMetric")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceMetric", id)
}
func (w Concrete) DeleteDeviceRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DeviceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceRequest", id)
}
func (w Concrete) DeleteDeviceUseStatement(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DeviceUseStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceUseStatement", id)
}
func (w Concrete) DeleteDiagnosticReport(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DiagnosticReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DiagnosticReport", id)
}
func (w Concrete) DeleteDocumentManifest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DocumentManifest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DocumentManifest", id)
}
func (w Concrete) DeleteDocumentReference(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for DocumentReference")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DocumentReference", id)
}
func (w Concrete) DeleteEffectEvidenceSynthesis(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for EffectEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EffectEvidenceSynthesis", id)
}
func (w Concrete) DeleteEncounter(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Encounter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Encounter", id)
}
func (w Concrete) DeleteEndpoint(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Endpoint")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Endpoint", id)
}
func (w Concrete) DeleteEnrollmentRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for EnrollmentRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EnrollmentRequest", id)
}
func (w Concrete) DeleteEnrollmentResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for EnrollmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EnrollmentResponse", id)
}
func (w Concrete) DeleteEpisodeOfCare(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for EpisodeOfCare")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EpisodeOfCare", id)
}
func (w Concrete) DeleteEventDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for EventDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EventDefinition", id)
}
func (w Concrete) DeleteEvidence(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Evidence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Evidence", id)
}
func (w Concrete) DeleteEvidenceVariable(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for EvidenceVariable")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EvidenceVariable", id)
}
func (w Concrete) DeleteExampleScenario(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ExampleScenario")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ExampleScenario", id)
}
func (w Concrete) DeleteExplanationOfBenefit(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ExplanationOfBenefit")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ExplanationOfBenefit", id)
}
func (w Concrete) DeleteFamilyMemberHistory(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for FamilyMemberHistory")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "FamilyMemberHistory", id)
}
func (w Concrete) DeleteFlag(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Flag")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Flag", id)
}
func (w Concrete) DeleteGoal(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Goal")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Goal", id)
}
func (w Concrete) DeleteGraphDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for GraphDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "GraphDefinition", id)
}
func (w Concrete) DeleteGroup(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Group")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Group", id)
}
func (w Concrete) DeleteGuidanceResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for GuidanceResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "GuidanceResponse", id)
}
func (w Concrete) DeleteHealthcareService(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for HealthcareService")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "HealthcareService", id)
}
func (w Concrete) DeleteImagingStudy(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ImagingStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImagingStudy", id)
}
func (w Concrete) DeleteImmunization(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Immunization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Immunization", id)
}
func (w Concrete) DeleteImmunizationEvaluation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ImmunizationEvaluation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImmunizationEvaluation", id)
}
func (w Concrete) DeleteImmunizationRecommendation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ImmunizationRecommendation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImmunizationRecommendation", id)
}
func (w Concrete) DeleteImplementationGuide(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ImplementationGuide")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImplementationGuide", id)
}
func (w Concrete) DeleteInsurancePlan(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for InsurancePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "InsurancePlan", id)
}
func (w Concrete) DeleteInvoice(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Invoice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Invoice", id)
}
func (w Concrete) DeleteLibrary(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Library")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Library", id)
}
func (w Concrete) DeleteLinkage(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Linkage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Linkage", id)
}
func (w Concrete) DeleteList(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for List")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "List", id)
}
func (w Concrete) DeleteLocation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Location")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Location", id)
}
func (w Concrete) DeleteMeasure(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Measure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Measure", id)
}
func (w Concrete) DeleteMeasureReport(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MeasureReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MeasureReport", id)
}
func (w Concrete) DeleteMedia(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Media")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Media", id)
}
func (w Concrete) DeleteMedication(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Medication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Medication", id)
}
func (w Concrete) DeleteMedicationAdministration(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicationAdministration")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationAdministration", id)
}
func (w Concrete) DeleteMedicationDispense(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicationDispense")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationDispense", id)
}
func (w Concrete) DeleteMedicationKnowledge(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicationKnowledge")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationKnowledge", id)
}
func (w Concrete) DeleteMedicationRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationRequest", id)
}
func (w Concrete) DeleteMedicationStatement(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicationStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationStatement", id)
}
func (w Concrete) DeleteMedicinalProduct(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProduct", id)
}
func (w Concrete) DeleteMedicinalProductAuthorization(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductAuthorization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductAuthorization", id)
}
func (w Concrete) DeleteMedicinalProductContraindication(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductContraindication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductContraindication", id)
}
func (w Concrete) DeleteMedicinalProductIndication(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductIndication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductIndication", id)
}
func (w Concrete) DeleteMedicinalProductIngredient(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductIngredient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductIngredient", id)
}
func (w Concrete) DeleteMedicinalProductInteraction(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductInteraction")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductInteraction", id)
}
func (w Concrete) DeleteMedicinalProductManufactured(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductManufactured")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductManufactured", id)
}
func (w Concrete) DeleteMedicinalProductPackaged(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductPackaged")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductPackaged", id)
}
func (w Concrete) DeleteMedicinalProductPharmaceutical(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductPharmaceutical")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductPharmaceutical", id)
}
func (w Concrete) DeleteMedicinalProductUndesirableEffect(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MedicinalProductUndesirableEffect")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductUndesirableEffect", id)
}
func (w Concrete) DeleteMessageDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MessageDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MessageDefinition", id)
}
func (w Concrete) DeleteMessageHeader(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MessageHeader")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MessageHeader", id)
}
func (w Concrete) DeleteMolecularSequence(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for MolecularSequence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MolecularSequence", id)
}
func (w Concrete) DeleteNamingSystem(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for NamingSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "NamingSystem", id)
}
func (w Concrete) DeleteNutritionOrder(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for NutritionOrder")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "NutritionOrder", id)
}
func (w Concrete) DeleteObservation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Observation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Observation", id)
}
func (w Concrete) DeleteObservationDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ObservationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ObservationDefinition", id)
}
func (w Concrete) DeleteOperationDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for OperationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "OperationDefinition", id)
}
func (w Concrete) DeleteOperationOutcome(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for OperationOutcome")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "OperationOutcome", id)
}
func (w Concrete) DeleteOrganization(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Organization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Organization", id)
}
func (w Concrete) DeleteOrganizationAffiliation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for OrganizationAffiliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "OrganizationAffiliation", id)
}
func (w Concrete) DeleteParameters(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Parameters")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Parameters", id)
}
func (w Concrete) DeletePatient(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Patient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Patient", id)
}
func (w Concrete) DeletePaymentNotice(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for PaymentNotice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PaymentNotice", id)
}
func (w Concrete) DeletePaymentReconciliation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for PaymentReconciliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PaymentReconciliation", id)
}
func (w Concrete) DeletePerson(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Person")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Person", id)
}
func (w Concrete) DeletePlanDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for PlanDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PlanDefinition", id)
}
func (w Concrete) DeletePractitioner(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Practitioner")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Practitioner", id)
}
func (w Concrete) DeletePractitionerRole(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for PractitionerRole")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PractitionerRole", id)
}
func (w Concrete) DeleteProcedure(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Procedure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Procedure", id)
}
func (w Concrete) DeleteProvenance(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Provenance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Provenance", id)
}
func (w Concrete) DeleteQuestionnaire(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Questionnaire")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Questionnaire", id)
}
func (w Concrete) DeleteQuestionnaireResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for QuestionnaireResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "QuestionnaireResponse", id)
}
func (w Concrete) DeleteRelatedPerson(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for RelatedPerson")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RelatedPerson", id)
}
func (w Concrete) DeleteRequestGroup(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for RequestGroup")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RequestGroup", id)
}
func (w Concrete) DeleteResearchDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ResearchDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchDefinition", id)
}
func (w Concrete) DeleteResearchElementDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ResearchElementDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchElementDefinition", id)
}
func (w Concrete) DeleteResearchStudy(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ResearchStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchStudy", id)
}
func (w Concrete) DeleteResearchSubject(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ResearchSubject")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchSubject", id)
}
func (w Concrete) DeleteRiskAssessment(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for RiskAssessment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RiskAssessment", id)
}
func (w Concrete) DeleteRiskEvidenceSynthesis(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for RiskEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RiskEvidenceSynthesis", id)
}
func (w Concrete) DeleteSchedule(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Schedule")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Schedule", id)
}
func (w Concrete) DeleteSearchParameter(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SearchParameter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SearchParameter", id)
}
func (w Concrete) DeleteServiceRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ServiceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ServiceRequest", id)
}
func (w Concrete) DeleteSlot(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Slot")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Slot", id)
}
func (w Concrete) DeleteSpecimen(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Specimen")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Specimen", id)
}
func (w Concrete) DeleteSpecimenDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SpecimenDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SpecimenDefinition", id)
}
func (w Concrete) DeleteStructureDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for StructureDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "StructureDefinition", id)
}
func (w Concrete) DeleteStructureMap(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for StructureMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "StructureMap", id)
}
func (w Concrete) DeleteSubscription(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Subscription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Subscription", id)
}
func (w Concrete) DeleteSubstance(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Substance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Substance", id)
}
func (w Concrete) DeleteSubstanceNucleicAcid(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SubstanceNucleicAcid")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubstanceNucleicAcid", id)
}
func (w Concrete) DeleteSubstancePolymer(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SubstancePolymer")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubstancePolymer", id)
}
func (w Concrete) DeleteSubstanceProtein(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SubstanceProtein")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubstanceProtein", id)
}
func (w Concrete) DeleteSubstanceReferenceInformation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SubstanceReferenceInformation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubstanceReferenceInformation", id)
}
func (w Concrete) DeleteSubstanceSourceMaterial(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SubstanceSourceMaterial")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubstanceSourceMaterial", id)
}
func (w Concrete) DeleteSubstanceSpecification(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SubstanceSpecification")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubstanceSpecification", id)
}
func (w Concrete) DeleteSupplyDelivery(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SupplyDelivery")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SupplyDelivery", id)
}
func (w Concrete) DeleteSupplyRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for SupplyRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SupplyRequest", id)
}
func (w Concrete) DeleteTask(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for Task")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Task", id)
}
func (w Concrete) DeleteTerminologyCapabilities(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for TerminologyCapabilities")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "TerminologyCapabilities", id)
}
func (w Concrete) DeleteTestReport(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for TestReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "TestReport", id)
}
func (w Concrete) DeleteTestScript(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for TestScript")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "TestScript", id)
}
func (w Concrete) DeleteValueSet(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for ValueSet")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ValueSet", id)
}
func (w Concrete) DeleteVerificationResult(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for VerificationResult")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "VerificationResult", id)
}
func (w Concrete) DeleteVisionPrescription(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Delete not implemented for VisionPrescription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "VisionPrescription", id)
}
func (w Concrete) SearchCapabilitiesAccount(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Account"], err
}
func (w Concrete) SearchAccount(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Account")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Account", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesActivityDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ActivityDefinition"], err
}
func (w Concrete) SearchActivityDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ActivityDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ActivityDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdverseEvent(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AdverseEvent"], err
}
func (w Concrete) SearchAdverseEvent(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for AdverseEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AdverseEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAllergyIntolerance(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AllergyIntolerance"], err
}
func (w Concrete) SearchAllergyIntolerance(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for AllergyIntolerance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AllergyIntolerance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointment(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Appointment"], err
}
func (w Concrete) SearchAppointment(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Appointment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Appointment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointmentResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AppointmentResponse"], err
}
func (w Concrete) SearchAppointmentResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for AppointmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AppointmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAuditEvent(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AuditEvent"], err
}
func (w Concrete) SearchAuditEvent(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for AuditEvent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AuditEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBasic(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Basic"], err
}
func (w Concrete) SearchBasic(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Basic")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Basic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBinary(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Binary"], err
}
func (w Concrete) SearchBinary(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Binary")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Binary", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBiologicallyDerivedProduct(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BiologicallyDerivedProduct"], err
}
func (w Concrete) SearchBiologicallyDerivedProduct(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for BiologicallyDerivedProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "BiologicallyDerivedProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBodyStructure(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BodyStructure"], err
}
func (w Concrete) SearchBodyStructure(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for BodyStructure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "BodyStructure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBundle(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Bundle"], err
}
func (w Concrete) SearchBundle(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Bundle")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Bundle", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCapabilityStatement(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CapabilityStatement"], err
}
func (w Concrete) SearchCapabilityStatement(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CapabilityStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CapabilityStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCarePlan(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CarePlan"], err
}
func (w Concrete) SearchCarePlan(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CarePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CarePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCareTeam(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CareTeam"], err
}
func (w Concrete) SearchCareTeam(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CareTeam")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CareTeam", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCatalogEntry(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CatalogEntry"], err
}
func (w Concrete) SearchCatalogEntry(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CatalogEntry")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CatalogEntry", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItem(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItem"], err
}
func (w Concrete) SearchChargeItem(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ChargeItem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ChargeItem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItemDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItemDefinition"], err
}
func (w Concrete) SearchChargeItemDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ChargeItemDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ChargeItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaim(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Claim"], err
}
func (w Concrete) SearchClaim(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Claim")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Claim", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaimResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClaimResponse"], err
}
func (w Concrete) SearchClaimResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ClaimResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ClaimResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalImpression(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClinicalImpression"], err
}
func (w Concrete) SearchClinicalImpression(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ClinicalImpression")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ClinicalImpression", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCodeSystem(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CodeSystem"], err
}
func (w Concrete) SearchCodeSystem(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CodeSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CodeSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunication(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Communication"], err
}
func (w Concrete) SearchCommunication(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Communication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Communication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunicationRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CommunicationRequest"], err
}
func (w Concrete) SearchCommunicationRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CommunicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CommunicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCompartmentDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CompartmentDefinition"], err
}
func (w Concrete) SearchCompartmentDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CompartmentDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CompartmentDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesComposition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Composition"], err
}
func (w Concrete) SearchComposition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Composition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Composition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConceptMap(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ConceptMap"], err
}
func (w Concrete) SearchConceptMap(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ConceptMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ConceptMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCondition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Condition"], err
}
func (w Concrete) SearchCondition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Condition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Condition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConsent(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Consent"], err
}
func (w Concrete) SearchConsent(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Consent")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Consent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesContract(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Contract"], err
}
func (w Concrete) SearchContract(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Contract")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Contract", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverage(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Coverage"], err
}
func (w Concrete) SearchCoverage(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Coverage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Coverage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityRequest"], err
}
func (w Concrete) SearchCoverageEligibilityRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CoverageEligibilityRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CoverageEligibilityRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityResponse"], err
}
func (w Concrete) SearchCoverageEligibilityResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for CoverageEligibilityResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CoverageEligibilityResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDetectedIssue(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DetectedIssue"], err
}
func (w Concrete) SearchDetectedIssue(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DetectedIssue")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DetectedIssue", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDevice(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Device"], err
}
func (w Concrete) SearchDevice(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Device")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Device", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceDefinition"], err
}
func (w Concrete) SearchDeviceDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DeviceDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceMetric(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceMetric"], err
}
func (w Concrete) SearchDeviceMetric(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DeviceMetric")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceMetric", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceRequest"], err
}
func (w Concrete) SearchDeviceRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DeviceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceUseStatement(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceUseStatement"], err
}
func (w Concrete) SearchDeviceUseStatement(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DeviceUseStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceUseStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDiagnosticReport(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DiagnosticReport"], err
}
func (w Concrete) SearchDiagnosticReport(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DiagnosticReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DiagnosticReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentManifest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DocumentManifest"], err
}
func (w Concrete) SearchDocumentManifest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DocumentManifest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DocumentManifest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentReference(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DocumentReference"], err
}
func (w Concrete) SearchDocumentReference(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for DocumentReference")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DocumentReference", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEffectEvidenceSynthesis(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EffectEvidenceSynthesis"], err
}
func (w Concrete) SearchEffectEvidenceSynthesis(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for EffectEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EffectEvidenceSynthesis", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEncounter(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Encounter"], err
}
func (w Concrete) SearchEncounter(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Encounter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Encounter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEndpoint(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Endpoint"], err
}
func (w Concrete) SearchEndpoint(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Endpoint")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Endpoint", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentRequest"], err
}
func (w Concrete) SearchEnrollmentRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for EnrollmentRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EnrollmentRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentResponse"], err
}
func (w Concrete) SearchEnrollmentResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for EnrollmentResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EnrollmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEpisodeOfCare(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EpisodeOfCare"], err
}
func (w Concrete) SearchEpisodeOfCare(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for EpisodeOfCare")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EpisodeOfCare", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEventDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EventDefinition"], err
}
func (w Concrete) SearchEventDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for EventDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EventDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidence(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Evidence"], err
}
func (w Concrete) SearchEvidence(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Evidence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Evidence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceVariable(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EvidenceVariable"], err
}
func (w Concrete) SearchEvidenceVariable(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for EvidenceVariable")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EvidenceVariable", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExampleScenario(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExampleScenario"], err
}
func (w Concrete) SearchExampleScenario(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ExampleScenario")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ExampleScenario", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExplanationOfBenefit(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExplanationOfBenefit"], err
}
func (w Concrete) SearchExplanationOfBenefit(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ExplanationOfBenefit")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ExplanationOfBenefit", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFamilyMemberHistory(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["FamilyMemberHistory"], err
}
func (w Concrete) SearchFamilyMemberHistory(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for FamilyMemberHistory")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "FamilyMemberHistory", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFlag(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Flag"], err
}
func (w Concrete) SearchFlag(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Flag")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Flag", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGoal(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Goal"], err
}
func (w Concrete) SearchGoal(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Goal")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Goal", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGraphDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GraphDefinition"], err
}
func (w Concrete) SearchGraphDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for GraphDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "GraphDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGroup(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Group"], err
}
func (w Concrete) SearchGroup(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Group")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Group", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGuidanceResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GuidanceResponse"], err
}
func (w Concrete) SearchGuidanceResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for GuidanceResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "GuidanceResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesHealthcareService(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["HealthcareService"], err
}
func (w Concrete) SearchHealthcareService(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for HealthcareService")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "HealthcareService", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImagingStudy(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImagingStudy"], err
}
func (w Concrete) SearchImagingStudy(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ImagingStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImagingStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunization(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Immunization"], err
}
func (w Concrete) SearchImmunization(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Immunization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Immunization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationEvaluation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationEvaluation"], err
}
func (w Concrete) SearchImmunizationEvaluation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ImmunizationEvaluation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImmunizationEvaluation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationRecommendation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationRecommendation"], err
}
func (w Concrete) SearchImmunizationRecommendation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ImmunizationRecommendation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImmunizationRecommendation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImplementationGuide(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImplementationGuide"], err
}
func (w Concrete) SearchImplementationGuide(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ImplementationGuide")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImplementationGuide", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInsurancePlan(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["InsurancePlan"], err
}
func (w Concrete) SearchInsurancePlan(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for InsurancePlan")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "InsurancePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInvoice(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Invoice"], err
}
func (w Concrete) SearchInvoice(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Invoice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Invoice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLibrary(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Library"], err
}
func (w Concrete) SearchLibrary(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Library")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Library", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLinkage(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Linkage"], err
}
func (w Concrete) SearchLinkage(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Linkage")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Linkage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesList(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["List"], err
}
func (w Concrete) SearchList(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for List")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "List", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLocation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Location"], err
}
func (w Concrete) SearchLocation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Location")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Location", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasure(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Measure"], err
}
func (w Concrete) SearchMeasure(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Measure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Measure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasureReport(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MeasureReport"], err
}
func (w Concrete) SearchMeasureReport(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MeasureReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MeasureReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedia(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Media"], err
}
func (w Concrete) SearchMedia(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Media")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Media", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedication(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Medication"], err
}
func (w Concrete) SearchMedication(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Medication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Medication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationAdministration(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationAdministration"], err
}
func (w Concrete) SearchMedicationAdministration(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicationAdministration")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationAdministration", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationDispense(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationDispense"], err
}
func (w Concrete) SearchMedicationDispense(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicationDispense")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationDispense", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationKnowledge(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationKnowledge"], err
}
func (w Concrete) SearchMedicationKnowledge(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicationKnowledge")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationKnowledge", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationRequest"], err
}
func (w Concrete) SearchMedicationRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicationRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationStatement(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationStatement"], err
}
func (w Concrete) SearchMedicationStatement(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicationStatement")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProduct(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProduct"], err
}
func (w Concrete) SearchMedicinalProduct(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProduct")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductAuthorization(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductAuthorization"], err
}
func (w Concrete) SearchMedicinalProductAuthorization(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductAuthorization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductAuthorization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductContraindication(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductContraindication"], err
}
func (w Concrete) SearchMedicinalProductContraindication(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductContraindication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductContraindication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductIndication(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductIndication"], err
}
func (w Concrete) SearchMedicinalProductIndication(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductIndication")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductIndication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductIngredient(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductIngredient"], err
}
func (w Concrete) SearchMedicinalProductIngredient(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductIngredient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductIngredient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductInteraction(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductInteraction"], err
}
func (w Concrete) SearchMedicinalProductInteraction(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductInteraction")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductInteraction", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductManufactured(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductManufactured"], err
}
func (w Concrete) SearchMedicinalProductManufactured(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductManufactured")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductManufactured", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductPackaged(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductPackaged"], err
}
func (w Concrete) SearchMedicinalProductPackaged(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductPackaged")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductPackaged", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductPharmaceutical(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductPharmaceutical"], err
}
func (w Concrete) SearchMedicinalProductPharmaceutical(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductPharmaceutical")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductPharmaceutical", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductUndesirableEffect(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductUndesirableEffect"], err
}
func (w Concrete) SearchMedicinalProductUndesirableEffect(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MedicinalProductUndesirableEffect")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductUndesirableEffect", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageDefinition"], err
}
func (w Concrete) SearchMessageDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MessageDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MessageDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageHeader(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageHeader"], err
}
func (w Concrete) SearchMessageHeader(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MessageHeader")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MessageHeader", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMolecularSequence(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MolecularSequence"], err
}
func (w Concrete) SearchMolecularSequence(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for MolecularSequence")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MolecularSequence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNamingSystem(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NamingSystem"], err
}
func (w Concrete) SearchNamingSystem(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for NamingSystem")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "NamingSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionOrder(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NutritionOrder"], err
}
func (w Concrete) SearchNutritionOrder(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for NutritionOrder")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "NutritionOrder", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Observation"], err
}
func (w Concrete) SearchObservation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Observation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Observation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservationDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ObservationDefinition"], err
}
func (w Concrete) SearchObservationDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ObservationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ObservationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationDefinition"], err
}
func (w Concrete) SearchOperationDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for OperationDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "OperationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationOutcome(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationOutcome"], err
}
func (w Concrete) SearchOperationOutcome(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for OperationOutcome")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "OperationOutcome", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganization(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Organization"], err
}
func (w Concrete) SearchOrganization(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Organization")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Organization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganizationAffiliation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OrganizationAffiliation"], err
}
func (w Concrete) SearchOrganizationAffiliation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for OrganizationAffiliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "OrganizationAffiliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesParameters(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Parameters"], err
}
func (w Concrete) SearchParameters(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Parameters")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Parameters", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPatient(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Patient"], err
}
func (w Concrete) SearchPatient(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Patient")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Patient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentNotice(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentNotice"], err
}
func (w Concrete) SearchPaymentNotice(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for PaymentNotice")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PaymentNotice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentReconciliation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentReconciliation"], err
}
func (w Concrete) SearchPaymentReconciliation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for PaymentReconciliation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PaymentReconciliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPerson(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Person"], err
}
func (w Concrete) SearchPerson(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Person")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Person", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPlanDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PlanDefinition"], err
}
func (w Concrete) SearchPlanDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for PlanDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PlanDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitioner(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Practitioner"], err
}
func (w Concrete) SearchPractitioner(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Practitioner")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Practitioner", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitionerRole(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PractitionerRole"], err
}
func (w Concrete) SearchPractitionerRole(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for PractitionerRole")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PractitionerRole", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProcedure(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Procedure"], err
}
func (w Concrete) SearchProcedure(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Procedure")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Procedure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProvenance(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Provenance"], err
}
func (w Concrete) SearchProvenance(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Provenance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Provenance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaire(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Questionnaire"], err
}
func (w Concrete) SearchQuestionnaire(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Questionnaire")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Questionnaire", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaireResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["QuestionnaireResponse"], err
}
func (w Concrete) SearchQuestionnaireResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for QuestionnaireResponse")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "QuestionnaireResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRelatedPerson(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RelatedPerson"], err
}
func (w Concrete) SearchRelatedPerson(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for RelatedPerson")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RelatedPerson", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRequestGroup(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RequestGroup"], err
}
func (w Concrete) SearchRequestGroup(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for RequestGroup")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RequestGroup", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchDefinition"], err
}
func (w Concrete) SearchResearchDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ResearchDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchElementDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchElementDefinition"], err
}
func (w Concrete) SearchResearchElementDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ResearchElementDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchElementDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchStudy(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchStudy"], err
}
func (w Concrete) SearchResearchStudy(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ResearchStudy")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchSubject(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchSubject"], err
}
func (w Concrete) SearchResearchSubject(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ResearchSubject")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchSubject", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRiskAssessment(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RiskAssessment"], err
}
func (w Concrete) SearchRiskAssessment(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for RiskAssessment")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RiskAssessment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRiskEvidenceSynthesis(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RiskEvidenceSynthesis"], err
}
func (w Concrete) SearchRiskEvidenceSynthesis(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for RiskEvidenceSynthesis")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RiskEvidenceSynthesis", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSchedule(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Schedule"], err
}
func (w Concrete) SearchSchedule(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Schedule")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Schedule", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSearchParameter(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SearchParameter"], err
}
func (w Concrete) SearchSearchParameter(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SearchParameter")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SearchParameter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesServiceRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ServiceRequest"], err
}
func (w Concrete) SearchServiceRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ServiceRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ServiceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSlot(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Slot"], err
}
func (w Concrete) SearchSlot(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Slot")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Slot", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimen(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Specimen"], err
}
func (w Concrete) SearchSpecimen(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Specimen")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Specimen", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimenDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SpecimenDefinition"], err
}
func (w Concrete) SearchSpecimenDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SpecimenDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SpecimenDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureDefinition"], err
}
func (w Concrete) SearchStructureDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for StructureDefinition")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "StructureDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureMap(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureMap"], err
}
func (w Concrete) SearchStructureMap(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for StructureMap")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "StructureMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscription(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Subscription"], err
}
func (w Concrete) SearchSubscription(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Subscription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Subscription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstance(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Substance"], err
}
func (w Concrete) SearchSubstance(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Substance")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Substance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceNucleicAcid(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceNucleicAcid"], err
}
func (w Concrete) SearchSubstanceNucleicAcid(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SubstanceNucleicAcid")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubstanceNucleicAcid", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstancePolymer(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstancePolymer"], err
}
func (w Concrete) SearchSubstancePolymer(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SubstancePolymer")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubstancePolymer", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceProtein(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceProtein"], err
}
func (w Concrete) SearchSubstanceProtein(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SubstanceProtein")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubstanceProtein", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceReferenceInformation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceReferenceInformation"], err
}
func (w Concrete) SearchSubstanceReferenceInformation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SubstanceReferenceInformation")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubstanceReferenceInformation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceSourceMaterial(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceSourceMaterial"], err
}
func (w Concrete) SearchSubstanceSourceMaterial(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SubstanceSourceMaterial")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubstanceSourceMaterial", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceSpecification(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceSpecification"], err
}
func (w Concrete) SearchSubstanceSpecification(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SubstanceSpecification")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubstanceSpecification", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyDelivery(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyDelivery"], err
}
func (w Concrete) SearchSupplyDelivery(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SupplyDelivery")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SupplyDelivery", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyRequest"], err
}
func (w Concrete) SearchSupplyRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for SupplyRequest")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SupplyRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTask(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Task"], err
}
func (w Concrete) SearchTask(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for Task")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Task", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTerminologyCapabilities(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TerminologyCapabilities"], err
}
func (w Concrete) SearchTerminologyCapabilities(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for TerminologyCapabilities")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "TerminologyCapabilities", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestReport(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestReport"], err
}
func (w Concrete) SearchTestReport(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for TestReport")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "TestReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestScript(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestScript"], err
}
func (w Concrete) SearchTestScript(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for TestScript")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "TestScript", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesValueSet(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ValueSet"], err
}
func (w Concrete) SearchValueSet(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for ValueSet")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ValueSet", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVerificationResult(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VerificationResult"], err
}
func (w Concrete) SearchVerificationResult(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for VerificationResult")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "VerificationResult", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVisionPrescription(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VisionPrescription"], err
}
func (w Concrete) SearchVisionPrescription(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4.OperationOutcome{Issue: []r4.OperationOutcomeIssue{r4.OperationOutcomeIssue{
			Code:        r4.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4.String{Value: utils.Ptr("Search not implemented for VisionPrescription")},
			Severity:    r4.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "VisionPrescription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
