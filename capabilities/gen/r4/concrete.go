// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4

import (
	"context"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	r4 "github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4"
)

type Concrete struct {
	Generic capabilities.GenericCapabilities
}

func (w Concrete) CreateAccount(ctx context.Context, resource r4.Account) (r4.Account, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Account{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Account"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Account{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Account)
	if !ok {
		return r4.Account{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateActivityDefinition(ctx context.Context, resource r4.ActivityDefinition) (r4.ActivityDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ActivityDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ActivityDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ActivityDefinition)
	if !ok {
		return r4.ActivityDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAdverseEvent(ctx context.Context, resource r4.AdverseEvent) (r4.AdverseEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AdverseEvent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AdverseEvent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AdverseEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AdverseEvent)
	if !ok {
		return r4.AdverseEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAllergyIntolerance(ctx context.Context, resource r4.AllergyIntolerance) (r4.AllergyIntolerance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AllergyIntolerance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AllergyIntolerance)
	if !ok {
		return r4.AllergyIntolerance{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAppointment(ctx context.Context, resource r4.Appointment) (r4.Appointment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Appointment{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Appointment"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Appointment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Appointment)
	if !ok {
		return r4.Appointment{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAppointmentResponse(ctx context.Context, resource r4.AppointmentResponse) (r4.AppointmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AppointmentResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AppointmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AppointmentResponse)
	if !ok {
		return r4.AppointmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAuditEvent(ctx context.Context, resource r4.AuditEvent) (r4.AuditEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.AuditEvent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AuditEvent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.AuditEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AuditEvent)
	if !ok {
		return r4.AuditEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBasic(ctx context.Context, resource r4.Basic) (r4.Basic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Basic{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Basic"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Basic{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Basic)
	if !ok {
		return r4.Basic{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBinary(ctx context.Context, resource r4.Binary) (r4.Binary, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Binary{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Binary"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Binary{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Binary)
	if !ok {
		return r4.Binary{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBiologicallyDerivedProduct(ctx context.Context, resource r4.BiologicallyDerivedProduct) (r4.BiologicallyDerivedProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BiologicallyDerivedProduct)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBodyStructure(ctx context.Context, resource r4.BodyStructure) (r4.BodyStructure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.BodyStructure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "BodyStructure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.BodyStructure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BodyStructure)
	if !ok {
		return r4.BodyStructure{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBundle(ctx context.Context, resource r4.Bundle) (r4.Bundle, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Bundle{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Bundle"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Bundle{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Bundle)
	if !ok {
		return r4.Bundle{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCapabilityStatement(ctx context.Context, resource r4.CapabilityStatement) (r4.CapabilityStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CapabilityStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CapabilityStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CapabilityStatement)
	if !ok {
		return r4.CapabilityStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCarePlan(ctx context.Context, resource r4.CarePlan) (r4.CarePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CarePlan{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CarePlan"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CarePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CarePlan)
	if !ok {
		return r4.CarePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCareTeam(ctx context.Context, resource r4.CareTeam) (r4.CareTeam, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CareTeam{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CareTeam"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CareTeam{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CareTeam)
	if !ok {
		return r4.CareTeam{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCatalogEntry(ctx context.Context, resource r4.CatalogEntry) (r4.CatalogEntry, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CatalogEntry{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CatalogEntry"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CatalogEntry{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CatalogEntry)
	if !ok {
		return r4.CatalogEntry{}, capabilities.UnexpectedResourceError{ExpectedType: "CatalogEntry", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateChargeItem(ctx context.Context, resource r4.ChargeItem) (r4.ChargeItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ChargeItem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ChargeItem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ChargeItem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItem)
	if !ok {
		return r4.ChargeItem{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateChargeItemDefinition(ctx context.Context, resource r4.ChargeItemDefinition) (r4.ChargeItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ChargeItemDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItemDefinition)
	if !ok {
		return r4.ChargeItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClaim(ctx context.Context, resource r4.Claim) (r4.Claim, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Claim{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Claim"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Claim{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Claim)
	if !ok {
		return r4.Claim{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClaimResponse(ctx context.Context, resource r4.ClaimResponse) (r4.ClaimResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ClaimResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClaimResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ClaimResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClaimResponse)
	if !ok {
		return r4.ClaimResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClinicalImpression(ctx context.Context, resource r4.ClinicalImpression) (r4.ClinicalImpression, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ClinicalImpression{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ClinicalImpression{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClinicalImpression)
	if !ok {
		return r4.ClinicalImpression{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCodeSystem(ctx context.Context, resource r4.CodeSystem) (r4.CodeSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CodeSystem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CodeSystem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CodeSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CodeSystem)
	if !ok {
		return r4.CodeSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCommunication(ctx context.Context, resource r4.Communication) (r4.Communication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Communication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Communication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Communication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Communication)
	if !ok {
		return r4.Communication{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCommunicationRequest(ctx context.Context, resource r4.CommunicationRequest) (r4.CommunicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CommunicationRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CommunicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CommunicationRequest)
	if !ok {
		return r4.CommunicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCompartmentDefinition(ctx context.Context, resource r4.CompartmentDefinition) (r4.CompartmentDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CompartmentDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CompartmentDefinition)
	if !ok {
		return r4.CompartmentDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateComposition(ctx context.Context, resource r4.Composition) (r4.Composition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Composition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Composition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Composition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Composition)
	if !ok {
		return r4.Composition{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateConceptMap(ctx context.Context, resource r4.ConceptMap) (r4.ConceptMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ConceptMap{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ConceptMap"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ConceptMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ConceptMap)
	if !ok {
		return r4.ConceptMap{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCondition(ctx context.Context, resource r4.Condition) (r4.Condition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Condition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Condition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Condition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Condition)
	if !ok {
		return r4.Condition{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateConsent(ctx context.Context, resource r4.Consent) (r4.Consent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Consent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Consent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Consent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Consent)
	if !ok {
		return r4.Consent{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateContract(ctx context.Context, resource r4.Contract) (r4.Contract, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Contract{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Contract"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Contract{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Contract)
	if !ok {
		return r4.Contract{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverage(ctx context.Context, resource r4.Coverage) (r4.Coverage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Coverage{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Coverage"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Coverage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Coverage)
	if !ok {
		return r4.Coverage{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityRequest(ctx context.Context, resource r4.CoverageEligibilityRequest) (r4.CoverageEligibilityRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CoverageEligibilityRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityRequest)
	if !ok {
		return r4.CoverageEligibilityRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityResponse(ctx context.Context, resource r4.CoverageEligibilityResponse) (r4.CoverageEligibilityResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.CoverageEligibilityResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityResponse)
	if !ok {
		return r4.CoverageEligibilityResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDetectedIssue(ctx context.Context, resource r4.DetectedIssue) (r4.DetectedIssue, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DetectedIssue{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DetectedIssue"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DetectedIssue{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DetectedIssue)
	if !ok {
		return r4.DetectedIssue{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDevice(ctx context.Context, resource r4.Device) (r4.Device, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Device{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Device"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Device{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Device)
	if !ok {
		return r4.Device{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceDefinition(ctx context.Context, resource r4.DeviceDefinition) (r4.DeviceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceDefinition)
	if !ok {
		return r4.DeviceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceMetric(ctx context.Context, resource r4.DeviceMetric) (r4.DeviceMetric, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceMetric{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceMetric"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceMetric{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceMetric)
	if !ok {
		return r4.DeviceMetric{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceRequest(ctx context.Context, resource r4.DeviceRequest) (r4.DeviceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceRequest)
	if !ok {
		return r4.DeviceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceUseStatement(ctx context.Context, resource r4.DeviceUseStatement) (r4.DeviceUseStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DeviceUseStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceUseStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceUseStatement)
	if !ok {
		return r4.DeviceUseStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUseStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDiagnosticReport(ctx context.Context, resource r4.DiagnosticReport) (r4.DiagnosticReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DiagnosticReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DiagnosticReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DiagnosticReport)
	if !ok {
		return r4.DiagnosticReport{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDocumentManifest(ctx context.Context, resource r4.DocumentManifest) (r4.DocumentManifest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DocumentManifest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DocumentManifest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DocumentManifest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentManifest)
	if !ok {
		return r4.DocumentManifest{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentManifest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDocumentReference(ctx context.Context, resource r4.DocumentReference) (r4.DocumentReference, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.DocumentReference{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DocumentReference"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.DocumentReference{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentReference)
	if !ok {
		return r4.DocumentReference{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEffectEvidenceSynthesis(ctx context.Context, resource r4.EffectEvidenceSynthesis) (r4.EffectEvidenceSynthesis, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EffectEvidenceSynthesis"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EffectEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EffectEvidenceSynthesis)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, capabilities.UnexpectedResourceError{ExpectedType: "EffectEvidenceSynthesis", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEncounter(ctx context.Context, resource r4.Encounter) (r4.Encounter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Encounter{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Encounter"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Encounter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Encounter)
	if !ok {
		return r4.Encounter{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEndpoint(ctx context.Context, resource r4.Endpoint) (r4.Endpoint, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Endpoint{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Endpoint"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Endpoint{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Endpoint)
	if !ok {
		return r4.Endpoint{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentRequest(ctx context.Context, resource r4.EnrollmentRequest) (r4.EnrollmentRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EnrollmentRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentRequest)
	if !ok {
		return r4.EnrollmentRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentResponse(ctx context.Context, resource r4.EnrollmentResponse) (r4.EnrollmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EnrollmentResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentResponse)
	if !ok {
		return r4.EnrollmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEpisodeOfCare(ctx context.Context, resource r4.EpisodeOfCare) (r4.EpisodeOfCare, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EpisodeOfCare{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EpisodeOfCare)
	if !ok {
		return r4.EpisodeOfCare{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEventDefinition(ctx context.Context, resource r4.EventDefinition) (r4.EventDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EventDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EventDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EventDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EventDefinition)
	if !ok {
		return r4.EventDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidence(ctx context.Context, resource r4.Evidence) (r4.Evidence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Evidence{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Evidence"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Evidence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Evidence)
	if !ok {
		return r4.Evidence{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceVariable(ctx context.Context, resource r4.EvidenceVariable) (r4.EvidenceVariable, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.EvidenceVariable{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.EvidenceVariable{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EvidenceVariable)
	if !ok {
		return r4.EvidenceVariable{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateExampleScenario(ctx context.Context, resource r4.ExampleScenario) (r4.ExampleScenario, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ExampleScenario{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ExampleScenario"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ExampleScenario{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExampleScenario)
	if !ok {
		return r4.ExampleScenario{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateExplanationOfBenefit(ctx context.Context, resource r4.ExplanationOfBenefit) (r4.ExplanationOfBenefit, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ExplanationOfBenefit{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExplanationOfBenefit)
	if !ok {
		return r4.ExplanationOfBenefit{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateFamilyMemberHistory(ctx context.Context, resource r4.FamilyMemberHistory) (r4.FamilyMemberHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.FamilyMemberHistory{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.FamilyMemberHistory)
	if !ok {
		return r4.FamilyMemberHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateFlag(ctx context.Context, resource r4.Flag) (r4.Flag, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Flag{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Flag"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Flag{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Flag)
	if !ok {
		return r4.Flag{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGoal(ctx context.Context, resource r4.Goal) (r4.Goal, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Goal{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Goal"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Goal{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Goal)
	if !ok {
		return r4.Goal{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGraphDefinition(ctx context.Context, resource r4.GraphDefinition) (r4.GraphDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.GraphDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "GraphDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.GraphDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GraphDefinition)
	if !ok {
		return r4.GraphDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGroup(ctx context.Context, resource r4.Group) (r4.Group, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Group{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Group"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Group{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Group)
	if !ok {
		return r4.Group{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGuidanceResponse(ctx context.Context, resource r4.GuidanceResponse) (r4.GuidanceResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.GuidanceResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.GuidanceResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GuidanceResponse)
	if !ok {
		return r4.GuidanceResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateHealthcareService(ctx context.Context, resource r4.HealthcareService) (r4.HealthcareService, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.HealthcareService{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "HealthcareService"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.HealthcareService{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.HealthcareService)
	if !ok {
		return r4.HealthcareService{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImagingStudy(ctx context.Context, resource r4.ImagingStudy) (r4.ImagingStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImagingStudy{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImagingStudy"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImagingStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImagingStudy)
	if !ok {
		return r4.ImagingStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunization(ctx context.Context, resource r4.Immunization) (r4.Immunization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Immunization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Immunization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Immunization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Immunization)
	if !ok {
		return r4.Immunization{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationEvaluation(ctx context.Context, resource r4.ImmunizationEvaluation) (r4.ImmunizationEvaluation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImmunizationEvaluation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationEvaluation)
	if !ok {
		return r4.ImmunizationEvaluation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationRecommendation(ctx context.Context, resource r4.ImmunizationRecommendation) (r4.ImmunizationRecommendation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImmunizationRecommendation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationRecommendation)
	if !ok {
		return r4.ImmunizationRecommendation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImplementationGuide(ctx context.Context, resource r4.ImplementationGuide) (r4.ImplementationGuide, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ImplementationGuide{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ImplementationGuide{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImplementationGuide)
	if !ok {
		return r4.ImplementationGuide{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInsurancePlan(ctx context.Context, resource r4.InsurancePlan) (r4.InsurancePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.InsurancePlan{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "InsurancePlan"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.InsurancePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.InsurancePlan)
	if !ok {
		return r4.InsurancePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInvoice(ctx context.Context, resource r4.Invoice) (r4.Invoice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Invoice{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Invoice"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Invoice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Invoice)
	if !ok {
		return r4.Invoice{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLibrary(ctx context.Context, resource r4.Library) (r4.Library, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Library{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Library"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Library{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Library)
	if !ok {
		return r4.Library{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLinkage(ctx context.Context, resource r4.Linkage) (r4.Linkage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Linkage{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Linkage"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Linkage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Linkage)
	if !ok {
		return r4.Linkage{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateList(ctx context.Context, resource r4.List) (r4.List, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.List{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "List"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.List{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.List)
	if !ok {
		return r4.List{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLocation(ctx context.Context, resource r4.Location) (r4.Location, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Location{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Location"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Location{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Location)
	if !ok {
		return r4.Location{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMeasure(ctx context.Context, resource r4.Measure) (r4.Measure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Measure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Measure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Measure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Measure)
	if !ok {
		return r4.Measure{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMeasureReport(ctx context.Context, resource r4.MeasureReport) (r4.MeasureReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MeasureReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MeasureReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MeasureReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MeasureReport)
	if !ok {
		return r4.MeasureReport{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedia(ctx context.Context, resource r4.Media) (r4.Media, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Media{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Media"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Media{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Media)
	if !ok {
		return r4.Media{}, capabilities.UnexpectedResourceError{ExpectedType: "Media", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedication(ctx context.Context, resource r4.Medication) (r4.Medication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Medication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Medication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Medication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Medication)
	if !ok {
		return r4.Medication{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationAdministration(ctx context.Context, resource r4.MedicationAdministration) (r4.MedicationAdministration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationAdministration{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationAdministration{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationAdministration)
	if !ok {
		return r4.MedicationAdministration{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationDispense(ctx context.Context, resource r4.MedicationDispense) (r4.MedicationDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationDispense{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationDispense"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationDispense{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationDispense)
	if !ok {
		return r4.MedicationDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationKnowledge(ctx context.Context, resource r4.MedicationKnowledge) (r4.MedicationKnowledge, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationKnowledge{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationKnowledge)
	if !ok {
		return r4.MedicationKnowledge{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationRequest(ctx context.Context, resource r4.MedicationRequest) (r4.MedicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationRequest)
	if !ok {
		return r4.MedicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationStatement(ctx context.Context, resource r4.MedicationStatement) (r4.MedicationStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicationStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicationStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationStatement)
	if !ok {
		return r4.MedicationStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProduct(ctx context.Context, resource r4.MedicinalProduct) (r4.MedicinalProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProduct{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProduct"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProduct)
	if !ok {
		return r4.MedicinalProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductAuthorization(ctx context.Context, resource r4.MedicinalProductAuthorization) (r4.MedicinalProductAuthorization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductAuthorization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductAuthorization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductAuthorization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductAuthorization)
	if !ok {
		return r4.MedicinalProductAuthorization{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductAuthorization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductContraindication(ctx context.Context, resource r4.MedicinalProductContraindication) (r4.MedicinalProductContraindication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductContraindication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductContraindication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductContraindication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductContraindication)
	if !ok {
		return r4.MedicinalProductContraindication{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductContraindication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductIndication(ctx context.Context, resource r4.MedicinalProductIndication) (r4.MedicinalProductIndication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductIndication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductIndication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductIndication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIndication)
	if !ok {
		return r4.MedicinalProductIndication{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductIndication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductIngredient(ctx context.Context, resource r4.MedicinalProductIngredient) (r4.MedicinalProductIngredient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductIngredient{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductIngredient"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductIngredient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIngredient)
	if !ok {
		return r4.MedicinalProductIngredient{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductIngredient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductInteraction(ctx context.Context, resource r4.MedicinalProductInteraction) (r4.MedicinalProductInteraction, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductInteraction{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductInteraction"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductInteraction{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductInteraction)
	if !ok {
		return r4.MedicinalProductInteraction{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductInteraction", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductManufactured(ctx context.Context, resource r4.MedicinalProductManufactured) (r4.MedicinalProductManufactured, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductManufactured{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductManufactured"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductManufactured{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductManufactured)
	if !ok {
		return r4.MedicinalProductManufactured{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductManufactured", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductPackaged(ctx context.Context, resource r4.MedicinalProductPackaged) (r4.MedicinalProductPackaged, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductPackaged{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductPackaged"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductPackaged{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPackaged)
	if !ok {
		return r4.MedicinalProductPackaged{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductPackaged", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductPharmaceutical(ctx context.Context, resource r4.MedicinalProductPharmaceutical) (r4.MedicinalProductPharmaceutical, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductPharmaceutical"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductPharmaceutical{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductPharmaceutical", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductUndesirableEffect(ctx context.Context, resource r4.MedicinalProductUndesirableEffect) (r4.MedicinalProductUndesirableEffect, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductUndesirableEffect"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductUndesirableEffect{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductUndesirableEffect", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMessageDefinition(ctx context.Context, resource r4.MessageDefinition) (r4.MessageDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MessageDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MessageDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MessageDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageDefinition)
	if !ok {
		return r4.MessageDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMessageHeader(ctx context.Context, resource r4.MessageHeader) (r4.MessageHeader, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MessageHeader{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MessageHeader"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MessageHeader{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageHeader)
	if !ok {
		return r4.MessageHeader{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMolecularSequence(ctx context.Context, resource r4.MolecularSequence) (r4.MolecularSequence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.MolecularSequence{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MolecularSequence"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.MolecularSequence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MolecularSequence)
	if !ok {
		return r4.MolecularSequence{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNamingSystem(ctx context.Context, resource r4.NamingSystem) (r4.NamingSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.NamingSystem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NamingSystem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.NamingSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NamingSystem)
	if !ok {
		return r4.NamingSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNutritionOrder(ctx context.Context, resource r4.NutritionOrder) (r4.NutritionOrder, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.NutritionOrder{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NutritionOrder"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.NutritionOrder{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NutritionOrder)
	if !ok {
		return r4.NutritionOrder{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateObservation(ctx context.Context, resource r4.Observation) (r4.Observation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Observation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Observation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Observation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Observation)
	if !ok {
		return r4.Observation{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateObservationDefinition(ctx context.Context, resource r4.ObservationDefinition) (r4.ObservationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ObservationDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ObservationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ObservationDefinition)
	if !ok {
		return r4.ObservationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOperationDefinition(ctx context.Context, resource r4.OperationDefinition) (r4.OperationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.OperationDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OperationDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.OperationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationDefinition)
	if !ok {
		return r4.OperationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOperationOutcome(ctx context.Context, resource r4.OperationOutcome) (r4.OperationOutcome, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.OperationOutcome{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OperationOutcome"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.OperationOutcome{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationOutcome)
	if !ok {
		return r4.OperationOutcome{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOrganization(ctx context.Context, resource r4.Organization) (r4.Organization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Organization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Organization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Organization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Organization)
	if !ok {
		return r4.Organization{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOrganizationAffiliation(ctx context.Context, resource r4.OrganizationAffiliation) (r4.OrganizationAffiliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.OrganizationAffiliation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OrganizationAffiliation)
	if !ok {
		return r4.OrganizationAffiliation{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateParameters(ctx context.Context, resource r4.Parameters) (r4.Parameters, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Parameters{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Parameters"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Parameters{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Parameters)
	if !ok {
		return r4.Parameters{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePatient(ctx context.Context, resource r4.Patient) (r4.Patient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Patient{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Patient"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Patient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Patient)
	if !ok {
		return r4.Patient{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePaymentNotice(ctx context.Context, resource r4.PaymentNotice) (r4.PaymentNotice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PaymentNotice{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PaymentNotice"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PaymentNotice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentNotice)
	if !ok {
		return r4.PaymentNotice{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePaymentReconciliation(ctx context.Context, resource r4.PaymentReconciliation) (r4.PaymentReconciliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PaymentReconciliation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentReconciliation)
	if !ok {
		return r4.PaymentReconciliation{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePerson(ctx context.Context, resource r4.Person) (r4.Person, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Person{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Person"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Person{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Person)
	if !ok {
		return r4.Person{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePlanDefinition(ctx context.Context, resource r4.PlanDefinition) (r4.PlanDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PlanDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PlanDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PlanDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PlanDefinition)
	if !ok {
		return r4.PlanDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePractitioner(ctx context.Context, resource r4.Practitioner) (r4.Practitioner, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Practitioner{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Practitioner"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Practitioner{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Practitioner)
	if !ok {
		return r4.Practitioner{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePractitionerRole(ctx context.Context, resource r4.PractitionerRole) (r4.PractitionerRole, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.PractitionerRole{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PractitionerRole"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.PractitionerRole{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PractitionerRole)
	if !ok {
		return r4.PractitionerRole{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateProcedure(ctx context.Context, resource r4.Procedure) (r4.Procedure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Procedure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Procedure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Procedure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Procedure)
	if !ok {
		return r4.Procedure{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateProvenance(ctx context.Context, resource r4.Provenance) (r4.Provenance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Provenance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Provenance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Provenance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Provenance)
	if !ok {
		return r4.Provenance{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaire(ctx context.Context, resource r4.Questionnaire) (r4.Questionnaire, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Questionnaire{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Questionnaire"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Questionnaire{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Questionnaire)
	if !ok {
		return r4.Questionnaire{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaireResponse(ctx context.Context, resource r4.QuestionnaireResponse) (r4.QuestionnaireResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.QuestionnaireResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.QuestionnaireResponse)
	if !ok {
		return r4.QuestionnaireResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRelatedPerson(ctx context.Context, resource r4.RelatedPerson) (r4.RelatedPerson, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RelatedPerson{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RelatedPerson"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RelatedPerson{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RelatedPerson)
	if !ok {
		return r4.RelatedPerson{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRequestGroup(ctx context.Context, resource r4.RequestGroup) (r4.RequestGroup, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RequestGroup{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RequestGroup"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RequestGroup{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RequestGroup)
	if !ok {
		return r4.RequestGroup{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestGroup", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchDefinition(ctx context.Context, resource r4.ResearchDefinition) (r4.ResearchDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchDefinition)
	if !ok {
		return r4.ResearchDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchElementDefinition(ctx context.Context, resource r4.ResearchElementDefinition) (r4.ResearchElementDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchElementDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchElementDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchElementDefinition)
	if !ok {
		return r4.ResearchElementDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchElementDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchStudy(ctx context.Context, resource r4.ResearchStudy) (r4.ResearchStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchStudy{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchStudy"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchStudy)
	if !ok {
		return r4.ResearchStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchSubject(ctx context.Context, resource r4.ResearchSubject) (r4.ResearchSubject, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ResearchSubject{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchSubject"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ResearchSubject{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchSubject)
	if !ok {
		return r4.ResearchSubject{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRiskAssessment(ctx context.Context, resource r4.RiskAssessment) (r4.RiskAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RiskAssessment{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RiskAssessment"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RiskAssessment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskAssessment)
	if !ok {
		return r4.RiskAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRiskEvidenceSynthesis(ctx context.Context, resource r4.RiskEvidenceSynthesis) (r4.RiskEvidenceSynthesis, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RiskEvidenceSynthesis"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.RiskEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskEvidenceSynthesis)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskEvidenceSynthesis", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSchedule(ctx context.Context, resource r4.Schedule) (r4.Schedule, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Schedule{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Schedule"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Schedule{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Schedule)
	if !ok {
		return r4.Schedule{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSearchParameter(ctx context.Context, resource r4.SearchParameter) (r4.SearchParameter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SearchParameter{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SearchParameter"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SearchParameter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SearchParameter)
	if !ok {
		return r4.SearchParameter{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateServiceRequest(ctx context.Context, resource r4.ServiceRequest) (r4.ServiceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ServiceRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ServiceRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ServiceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ServiceRequest)
	if !ok {
		return r4.ServiceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSlot(ctx context.Context, resource r4.Slot) (r4.Slot, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Slot{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Slot"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Slot{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Slot)
	if !ok {
		return r4.Slot{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSpecimen(ctx context.Context, resource r4.Specimen) (r4.Specimen, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Specimen{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Specimen"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Specimen{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Specimen)
	if !ok {
		return r4.Specimen{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSpecimenDefinition(ctx context.Context, resource r4.SpecimenDefinition) (r4.SpecimenDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SpecimenDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SpecimenDefinition)
	if !ok {
		return r4.SpecimenDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateStructureDefinition(ctx context.Context, resource r4.StructureDefinition) (r4.StructureDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.StructureDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "StructureDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.StructureDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureDefinition)
	if !ok {
		return r4.StructureDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateStructureMap(ctx context.Context, resource r4.StructureMap) (r4.StructureMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.StructureMap{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "StructureMap"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.StructureMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureMap)
	if !ok {
		return r4.StructureMap{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubscription(ctx context.Context, resource r4.Subscription) (r4.Subscription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Subscription{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Subscription"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Subscription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Subscription)
	if !ok {
		return r4.Subscription{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstance(ctx context.Context, resource r4.Substance) (r4.Substance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Substance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Substance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Substance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Substance)
	if !ok {
		return r4.Substance{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceNucleicAcid(ctx context.Context, resource r4.SubstanceNucleicAcid) (r4.SubstanceNucleicAcid, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceNucleicAcid{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceNucleicAcid"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceNucleicAcid{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceNucleicAcid)
	if !ok {
		return r4.SubstanceNucleicAcid{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceNucleicAcid", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstancePolymer(ctx context.Context, resource r4.SubstancePolymer) (r4.SubstancePolymer, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstancePolymer{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstancePolymer"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstancePolymer{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstancePolymer)
	if !ok {
		return r4.SubstancePolymer{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstancePolymer", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceProtein(ctx context.Context, resource r4.SubstanceProtein) (r4.SubstanceProtein, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceProtein{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceProtein"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceProtein{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceProtein)
	if !ok {
		return r4.SubstanceProtein{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceProtein", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceReferenceInformation(ctx context.Context, resource r4.SubstanceReferenceInformation) (r4.SubstanceReferenceInformation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceReferenceInformation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceReferenceInformation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceReferenceInformation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceReferenceInformation)
	if !ok {
		return r4.SubstanceReferenceInformation{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceReferenceInformation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceSourceMaterial(ctx context.Context, resource r4.SubstanceSourceMaterial) (r4.SubstanceSourceMaterial, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceSourceMaterial{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceSourceMaterial"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceSourceMaterial{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSourceMaterial)
	if !ok {
		return r4.SubstanceSourceMaterial{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSourceMaterial", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceSpecification(ctx context.Context, resource r4.SubstanceSpecification) (r4.SubstanceSpecification, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SubstanceSpecification{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceSpecification"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceSpecification{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSpecification)
	if !ok {
		return r4.SubstanceSpecification{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSpecification", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSupplyDelivery(ctx context.Context, resource r4.SupplyDelivery) (r4.SupplyDelivery, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SupplyDelivery{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SupplyDelivery{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyDelivery)
	if !ok {
		return r4.SupplyDelivery{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSupplyRequest(ctx context.Context, resource r4.SupplyRequest) (r4.SupplyRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.SupplyRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SupplyRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.SupplyRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyRequest)
	if !ok {
		return r4.SupplyRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTask(ctx context.Context, resource r4.Task) (r4.Task, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.Task{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Task"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.Task{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Task)
	if !ok {
		return r4.Task{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTerminologyCapabilities(ctx context.Context, resource r4.TerminologyCapabilities) (r4.TerminologyCapabilities, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.TerminologyCapabilities{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TerminologyCapabilities)
	if !ok {
		return r4.TerminologyCapabilities{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTestReport(ctx context.Context, resource r4.TestReport) (r4.TestReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.TestReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TestReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.TestReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestReport)
	if !ok {
		return r4.TestReport{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTestScript(ctx context.Context, resource r4.TestScript) (r4.TestScript, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.TestScript{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TestScript"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.TestScript{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestScript)
	if !ok {
		return r4.TestScript{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateValueSet(ctx context.Context, resource r4.ValueSet) (r4.ValueSet, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.ValueSet{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ValueSet"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.ValueSet{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ValueSet)
	if !ok {
		return r4.ValueSet{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateVerificationResult(ctx context.Context, resource r4.VerificationResult) (r4.VerificationResult, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.VerificationResult{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "VerificationResult"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.VerificationResult{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VerificationResult)
	if !ok {
		return r4.VerificationResult{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateVisionPrescription(ctx context.Context, resource r4.VisionPrescription) (r4.VisionPrescription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4.VisionPrescription{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "VisionPrescription"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4.VisionPrescription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VisionPrescription)
	if !ok {
		return r4.VisionPrescription{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAccount(ctx context.Context, id string) (r4.Account, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Account{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Account"}
	}
	v, err := g.Read(ctx, "Account", id)
	if err != nil {
		return r4.Account{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Account)
	if !ok {
		return r4.Account{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadActivityDefinition(ctx context.Context, id string) (r4.ActivityDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ActivityDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r4.ActivityDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ActivityDefinition)
	if !ok {
		return r4.ActivityDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAdverseEvent(ctx context.Context, id string) (r4.AdverseEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AdverseEvent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AdverseEvent"}
	}
	v, err := g.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r4.AdverseEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AdverseEvent)
	if !ok {
		return r4.AdverseEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAllergyIntolerance(ctx context.Context, id string) (r4.AllergyIntolerance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AllergyIntolerance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r4.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AllergyIntolerance)
	if !ok {
		return r4.AllergyIntolerance{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAppointment(ctx context.Context, id string) (r4.Appointment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Appointment{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Appointment"}
	}
	v, err := g.Read(ctx, "Appointment", id)
	if err != nil {
		return r4.Appointment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Appointment)
	if !ok {
		return r4.Appointment{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAppointmentResponse(ctx context.Context, id string) (r4.AppointmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AppointmentResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r4.AppointmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AppointmentResponse)
	if !ok {
		return r4.AppointmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAuditEvent(ctx context.Context, id string) (r4.AuditEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.AuditEvent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AuditEvent"}
	}
	v, err := g.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r4.AuditEvent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AuditEvent)
	if !ok {
		return r4.AuditEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBasic(ctx context.Context, id string) (r4.Basic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Basic{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Basic"}
	}
	v, err := g.Read(ctx, "Basic", id)
	if err != nil {
		return r4.Basic{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Basic)
	if !ok {
		return r4.Basic{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBinary(ctx context.Context, id string) (r4.Binary, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Binary{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Binary"}
	}
	v, err := g.Read(ctx, "Binary", id)
	if err != nil {
		return r4.Binary{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Binary)
	if !ok {
		return r4.Binary{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r4.BiologicallyDerivedProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r4.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BiologicallyDerivedProduct)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBodyStructure(ctx context.Context, id string) (r4.BodyStructure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.BodyStructure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "BodyStructure"}
	}
	v, err := g.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r4.BodyStructure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BodyStructure)
	if !ok {
		return r4.BodyStructure{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBundle(ctx context.Context, id string) (r4.Bundle, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Bundle{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Bundle"}
	}
	v, err := g.Read(ctx, "Bundle", id)
	if err != nil {
		return r4.Bundle{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Bundle)
	if !ok {
		return r4.Bundle{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCapabilityStatement(ctx context.Context, id string) (r4.CapabilityStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CapabilityStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r4.CapabilityStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CapabilityStatement)
	if !ok {
		return r4.CapabilityStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCarePlan(ctx context.Context, id string) (r4.CarePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CarePlan{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CarePlan"}
	}
	v, err := g.Read(ctx, "CarePlan", id)
	if err != nil {
		return r4.CarePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CarePlan)
	if !ok {
		return r4.CarePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCareTeam(ctx context.Context, id string) (r4.CareTeam, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CareTeam{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CareTeam"}
	}
	v, err := g.Read(ctx, "CareTeam", id)
	if err != nil {
		return r4.CareTeam{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CareTeam)
	if !ok {
		return r4.CareTeam{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCatalogEntry(ctx context.Context, id string) (r4.CatalogEntry, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CatalogEntry{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CatalogEntry"}
	}
	v, err := g.Read(ctx, "CatalogEntry", id)
	if err != nil {
		return r4.CatalogEntry{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CatalogEntry)
	if !ok {
		return r4.CatalogEntry{}, capabilities.UnexpectedResourceError{ExpectedType: "CatalogEntry", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadChargeItem(ctx context.Context, id string) (r4.ChargeItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ChargeItem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ChargeItem"}
	}
	v, err := g.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r4.ChargeItem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItem)
	if !ok {
		return r4.ChargeItem{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadChargeItemDefinition(ctx context.Context, id string) (r4.ChargeItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ChargeItemDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r4.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItemDefinition)
	if !ok {
		return r4.ChargeItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClaim(ctx context.Context, id string) (r4.Claim, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Claim{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Claim"}
	}
	v, err := g.Read(ctx, "Claim", id)
	if err != nil {
		return r4.Claim{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Claim)
	if !ok {
		return r4.Claim{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClaimResponse(ctx context.Context, id string) (r4.ClaimResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ClaimResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClaimResponse"}
	}
	v, err := g.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r4.ClaimResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClaimResponse)
	if !ok {
		return r4.ClaimResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClinicalImpression(ctx context.Context, id string) (r4.ClinicalImpression, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ClinicalImpression{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r4.ClinicalImpression{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClinicalImpression)
	if !ok {
		return r4.ClinicalImpression{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCodeSystem(ctx context.Context, id string) (r4.CodeSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CodeSystem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CodeSystem"}
	}
	v, err := g.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r4.CodeSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CodeSystem)
	if !ok {
		return r4.CodeSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCommunication(ctx context.Context, id string) (r4.Communication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Communication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Communication"}
	}
	v, err := g.Read(ctx, "Communication", id)
	if err != nil {
		return r4.Communication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Communication)
	if !ok {
		return r4.Communication{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCommunicationRequest(ctx context.Context, id string) (r4.CommunicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CommunicationRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r4.CommunicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CommunicationRequest)
	if !ok {
		return r4.CommunicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCompartmentDefinition(ctx context.Context, id string) (r4.CompartmentDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CompartmentDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r4.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CompartmentDefinition)
	if !ok {
		return r4.CompartmentDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadComposition(ctx context.Context, id string) (r4.Composition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Composition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Composition"}
	}
	v, err := g.Read(ctx, "Composition", id)
	if err != nil {
		return r4.Composition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Composition)
	if !ok {
		return r4.Composition{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadConceptMap(ctx context.Context, id string) (r4.ConceptMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ConceptMap{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ConceptMap"}
	}
	v, err := g.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r4.ConceptMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ConceptMap)
	if !ok {
		return r4.ConceptMap{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCondition(ctx context.Context, id string) (r4.Condition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Condition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Condition"}
	}
	v, err := g.Read(ctx, "Condition", id)
	if err != nil {
		return r4.Condition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Condition)
	if !ok {
		return r4.Condition{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadConsent(ctx context.Context, id string) (r4.Consent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Consent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Consent"}
	}
	v, err := g.Read(ctx, "Consent", id)
	if err != nil {
		return r4.Consent{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Consent)
	if !ok {
		return r4.Consent{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadContract(ctx context.Context, id string) (r4.Contract, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Contract{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Contract"}
	}
	v, err := g.Read(ctx, "Contract", id)
	if err != nil {
		return r4.Contract{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Contract)
	if !ok {
		return r4.Contract{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverage(ctx context.Context, id string) (r4.Coverage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Coverage{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Coverage"}
	}
	v, err := g.Read(ctx, "Coverage", id)
	if err != nil {
		return r4.Coverage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Coverage)
	if !ok {
		return r4.Coverage{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r4.CoverageEligibilityRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CoverageEligibilityRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r4.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityRequest)
	if !ok {
		return r4.CoverageEligibilityRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r4.CoverageEligibilityResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.CoverageEligibilityResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r4.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityResponse)
	if !ok {
		return r4.CoverageEligibilityResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDetectedIssue(ctx context.Context, id string) (r4.DetectedIssue, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DetectedIssue{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DetectedIssue"}
	}
	v, err := g.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r4.DetectedIssue{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DetectedIssue)
	if !ok {
		return r4.DetectedIssue{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDevice(ctx context.Context, id string) (r4.Device, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Device{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Device"}
	}
	v, err := g.Read(ctx, "Device", id)
	if err != nil {
		return r4.Device{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Device)
	if !ok {
		return r4.Device{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceDefinition(ctx context.Context, id string) (r4.DeviceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r4.DeviceDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceDefinition)
	if !ok {
		return r4.DeviceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceMetric(ctx context.Context, id string) (r4.DeviceMetric, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceMetric{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceMetric"}
	}
	v, err := g.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r4.DeviceMetric{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceMetric)
	if !ok {
		return r4.DeviceMetric{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceRequest(ctx context.Context, id string) (r4.DeviceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceRequest"}
	}
	v, err := g.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r4.DeviceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceRequest)
	if !ok {
		return r4.DeviceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceUseStatement(ctx context.Context, id string) (r4.DeviceUseStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DeviceUseStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceUseStatement"}
	}
	v, err := g.Read(ctx, "DeviceUseStatement", id)
	if err != nil {
		return r4.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceUseStatement)
	if !ok {
		return r4.DeviceUseStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUseStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDiagnosticReport(ctx context.Context, id string) (r4.DiagnosticReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DiagnosticReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r4.DiagnosticReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DiagnosticReport)
	if !ok {
		return r4.DiagnosticReport{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDocumentManifest(ctx context.Context, id string) (r4.DocumentManifest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DocumentManifest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DocumentManifest"}
	}
	v, err := g.Read(ctx, "DocumentManifest", id)
	if err != nil {
		return r4.DocumentManifest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentManifest)
	if !ok {
		return r4.DocumentManifest{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentManifest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDocumentReference(ctx context.Context, id string) (r4.DocumentReference, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.DocumentReference{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DocumentReference"}
	}
	v, err := g.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r4.DocumentReference{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentReference)
	if !ok {
		return r4.DocumentReference{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEffectEvidenceSynthesis(ctx context.Context, id string) (r4.EffectEvidenceSynthesis, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EffectEvidenceSynthesis"}
	}
	v, err := g.Read(ctx, "EffectEvidenceSynthesis", id)
	if err != nil {
		return r4.EffectEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EffectEvidenceSynthesis)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, capabilities.UnexpectedResourceError{ExpectedType: "EffectEvidenceSynthesis", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEncounter(ctx context.Context, id string) (r4.Encounter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Encounter{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Encounter"}
	}
	v, err := g.Read(ctx, "Encounter", id)
	if err != nil {
		return r4.Encounter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Encounter)
	if !ok {
		return r4.Encounter{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEndpoint(ctx context.Context, id string) (r4.Endpoint, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Endpoint{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Endpoint"}
	}
	v, err := g.Read(ctx, "Endpoint", id)
	if err != nil {
		return r4.Endpoint{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Endpoint)
	if !ok {
		return r4.Endpoint{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentRequest(ctx context.Context, id string) (r4.EnrollmentRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EnrollmentRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r4.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentRequest)
	if !ok {
		return r4.EnrollmentRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentResponse(ctx context.Context, id string) (r4.EnrollmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EnrollmentResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r4.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentResponse)
	if !ok {
		return r4.EnrollmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEpisodeOfCare(ctx context.Context, id string) (r4.EpisodeOfCare, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EpisodeOfCare{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r4.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EpisodeOfCare)
	if !ok {
		return r4.EpisodeOfCare{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEventDefinition(ctx context.Context, id string) (r4.EventDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EventDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EventDefinition"}
	}
	v, err := g.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r4.EventDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EventDefinition)
	if !ok {
		return r4.EventDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidence(ctx context.Context, id string) (r4.Evidence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Evidence{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Evidence"}
	}
	v, err := g.Read(ctx, "Evidence", id)
	if err != nil {
		return r4.Evidence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Evidence)
	if !ok {
		return r4.Evidence{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceVariable(ctx context.Context, id string) (r4.EvidenceVariable, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.EvidenceVariable{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r4.EvidenceVariable{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EvidenceVariable)
	if !ok {
		return r4.EvidenceVariable{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadExampleScenario(ctx context.Context, id string) (r4.ExampleScenario, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ExampleScenario{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ExampleScenario"}
	}
	v, err := g.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r4.ExampleScenario{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExampleScenario)
	if !ok {
		return r4.ExampleScenario{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadExplanationOfBenefit(ctx context.Context, id string) (r4.ExplanationOfBenefit, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ExplanationOfBenefit{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r4.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExplanationOfBenefit)
	if !ok {
		return r4.ExplanationOfBenefit{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadFamilyMemberHistory(ctx context.Context, id string) (r4.FamilyMemberHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.FamilyMemberHistory{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r4.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.FamilyMemberHistory)
	if !ok {
		return r4.FamilyMemberHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadFlag(ctx context.Context, id string) (r4.Flag, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Flag{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Flag"}
	}
	v, err := g.Read(ctx, "Flag", id)
	if err != nil {
		return r4.Flag{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Flag)
	if !ok {
		return r4.Flag{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGoal(ctx context.Context, id string) (r4.Goal, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Goal{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Goal"}
	}
	v, err := g.Read(ctx, "Goal", id)
	if err != nil {
		return r4.Goal{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Goal)
	if !ok {
		return r4.Goal{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGraphDefinition(ctx context.Context, id string) (r4.GraphDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.GraphDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "GraphDefinition"}
	}
	v, err := g.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r4.GraphDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GraphDefinition)
	if !ok {
		return r4.GraphDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGroup(ctx context.Context, id string) (r4.Group, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Group{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Group"}
	}
	v, err := g.Read(ctx, "Group", id)
	if err != nil {
		return r4.Group{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Group)
	if !ok {
		return r4.Group{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGuidanceResponse(ctx context.Context, id string) (r4.GuidanceResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.GuidanceResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r4.GuidanceResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GuidanceResponse)
	if !ok {
		return r4.GuidanceResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadHealthcareService(ctx context.Context, id string) (r4.HealthcareService, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.HealthcareService{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "HealthcareService"}
	}
	v, err := g.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r4.HealthcareService{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.HealthcareService)
	if !ok {
		return r4.HealthcareService{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImagingStudy(ctx context.Context, id string) (r4.ImagingStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImagingStudy{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImagingStudy"}
	}
	v, err := g.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r4.ImagingStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImagingStudy)
	if !ok {
		return r4.ImagingStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunization(ctx context.Context, id string) (r4.Immunization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Immunization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Immunization"}
	}
	v, err := g.Read(ctx, "Immunization", id)
	if err != nil {
		return r4.Immunization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Immunization)
	if !ok {
		return r4.Immunization{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationEvaluation(ctx context.Context, id string) (r4.ImmunizationEvaluation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImmunizationEvaluation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r4.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationEvaluation)
	if !ok {
		return r4.ImmunizationEvaluation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationRecommendation(ctx context.Context, id string) (r4.ImmunizationRecommendation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImmunizationRecommendation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r4.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationRecommendation)
	if !ok {
		return r4.ImmunizationRecommendation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImplementationGuide(ctx context.Context, id string) (r4.ImplementationGuide, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ImplementationGuide{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r4.ImplementationGuide{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImplementationGuide)
	if !ok {
		return r4.ImplementationGuide{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInsurancePlan(ctx context.Context, id string) (r4.InsurancePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.InsurancePlan{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "InsurancePlan"}
	}
	v, err := g.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r4.InsurancePlan{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.InsurancePlan)
	if !ok {
		return r4.InsurancePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInvoice(ctx context.Context, id string) (r4.Invoice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Invoice{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Invoice"}
	}
	v, err := g.Read(ctx, "Invoice", id)
	if err != nil {
		return r4.Invoice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Invoice)
	if !ok {
		return r4.Invoice{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLibrary(ctx context.Context, id string) (r4.Library, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Library{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Library"}
	}
	v, err := g.Read(ctx, "Library", id)
	if err != nil {
		return r4.Library{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Library)
	if !ok {
		return r4.Library{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLinkage(ctx context.Context, id string) (r4.Linkage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Linkage{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Linkage"}
	}
	v, err := g.Read(ctx, "Linkage", id)
	if err != nil {
		return r4.Linkage{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Linkage)
	if !ok {
		return r4.Linkage{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadList(ctx context.Context, id string) (r4.List, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.List{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "List"}
	}
	v, err := g.Read(ctx, "List", id)
	if err != nil {
		return r4.List{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.List)
	if !ok {
		return r4.List{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLocation(ctx context.Context, id string) (r4.Location, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Location{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Location"}
	}
	v, err := g.Read(ctx, "Location", id)
	if err != nil {
		return r4.Location{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Location)
	if !ok {
		return r4.Location{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMeasure(ctx context.Context, id string) (r4.Measure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Measure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Measure"}
	}
	v, err := g.Read(ctx, "Measure", id)
	if err != nil {
		return r4.Measure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Measure)
	if !ok {
		return r4.Measure{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMeasureReport(ctx context.Context, id string) (r4.MeasureReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MeasureReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MeasureReport"}
	}
	v, err := g.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r4.MeasureReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MeasureReport)
	if !ok {
		return r4.MeasureReport{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedia(ctx context.Context, id string) (r4.Media, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Media{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Media"}
	}
	v, err := g.Read(ctx, "Media", id)
	if err != nil {
		return r4.Media{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Media)
	if !ok {
		return r4.Media{}, capabilities.UnexpectedResourceError{ExpectedType: "Media", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedication(ctx context.Context, id string) (r4.Medication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Medication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Medication"}
	}
	v, err := g.Read(ctx, "Medication", id)
	if err != nil {
		return r4.Medication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Medication)
	if !ok {
		return r4.Medication{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationAdministration(ctx context.Context, id string) (r4.MedicationAdministration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationAdministration{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r4.MedicationAdministration{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationAdministration)
	if !ok {
		return r4.MedicationAdministration{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationDispense(ctx context.Context, id string) (r4.MedicationDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationDispense{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationDispense"}
	}
	v, err := g.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r4.MedicationDispense{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationDispense)
	if !ok {
		return r4.MedicationDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationKnowledge(ctx context.Context, id string) (r4.MedicationKnowledge, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationKnowledge{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r4.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationKnowledge)
	if !ok {
		return r4.MedicationKnowledge{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationRequest(ctx context.Context, id string) (r4.MedicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationRequest"}
	}
	v, err := g.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r4.MedicationRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationRequest)
	if !ok {
		return r4.MedicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationStatement(ctx context.Context, id string) (r4.MedicationStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicationStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationStatement"}
	}
	v, err := g.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r4.MedicationStatement{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationStatement)
	if !ok {
		return r4.MedicationStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProduct(ctx context.Context, id string) (r4.MedicinalProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProduct{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProduct"}
	}
	v, err := g.Read(ctx, "MedicinalProduct", id)
	if err != nil {
		return r4.MedicinalProduct{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProduct)
	if !ok {
		return r4.MedicinalProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductAuthorization(ctx context.Context, id string) (r4.MedicinalProductAuthorization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductAuthorization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductAuthorization"}
	}
	v, err := g.Read(ctx, "MedicinalProductAuthorization", id)
	if err != nil {
		return r4.MedicinalProductAuthorization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductAuthorization)
	if !ok {
		return r4.MedicinalProductAuthorization{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductAuthorization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductContraindication(ctx context.Context, id string) (r4.MedicinalProductContraindication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductContraindication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductContraindication"}
	}
	v, err := g.Read(ctx, "MedicinalProductContraindication", id)
	if err != nil {
		return r4.MedicinalProductContraindication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductContraindication)
	if !ok {
		return r4.MedicinalProductContraindication{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductContraindication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductIndication(ctx context.Context, id string) (r4.MedicinalProductIndication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductIndication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductIndication"}
	}
	v, err := g.Read(ctx, "MedicinalProductIndication", id)
	if err != nil {
		return r4.MedicinalProductIndication{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIndication)
	if !ok {
		return r4.MedicinalProductIndication{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductIndication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductIngredient(ctx context.Context, id string) (r4.MedicinalProductIngredient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductIngredient{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductIngredient"}
	}
	v, err := g.Read(ctx, "MedicinalProductIngredient", id)
	if err != nil {
		return r4.MedicinalProductIngredient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIngredient)
	if !ok {
		return r4.MedicinalProductIngredient{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductIngredient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductInteraction(ctx context.Context, id string) (r4.MedicinalProductInteraction, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductInteraction{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductInteraction"}
	}
	v, err := g.Read(ctx, "MedicinalProductInteraction", id)
	if err != nil {
		return r4.MedicinalProductInteraction{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductInteraction)
	if !ok {
		return r4.MedicinalProductInteraction{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductInteraction", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductManufactured(ctx context.Context, id string) (r4.MedicinalProductManufactured, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductManufactured{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductManufactured"}
	}
	v, err := g.Read(ctx, "MedicinalProductManufactured", id)
	if err != nil {
		return r4.MedicinalProductManufactured{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductManufactured)
	if !ok {
		return r4.MedicinalProductManufactured{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductManufactured", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductPackaged(ctx context.Context, id string) (r4.MedicinalProductPackaged, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductPackaged{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductPackaged"}
	}
	v, err := g.Read(ctx, "MedicinalProductPackaged", id)
	if err != nil {
		return r4.MedicinalProductPackaged{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPackaged)
	if !ok {
		return r4.MedicinalProductPackaged{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductPackaged", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductPharmaceutical(ctx context.Context, id string) (r4.MedicinalProductPharmaceutical, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductPharmaceutical"}
	}
	v, err := g.Read(ctx, "MedicinalProductPharmaceutical", id)
	if err != nil {
		return r4.MedicinalProductPharmaceutical{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductPharmaceutical", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductUndesirableEffect(ctx context.Context, id string) (r4.MedicinalProductUndesirableEffect, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductUndesirableEffect"}
	}
	v, err := g.Read(ctx, "MedicinalProductUndesirableEffect", id)
	if err != nil {
		return r4.MedicinalProductUndesirableEffect{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductUndesirableEffect", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMessageDefinition(ctx context.Context, id string) (r4.MessageDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MessageDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MessageDefinition"}
	}
	v, err := g.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r4.MessageDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageDefinition)
	if !ok {
		return r4.MessageDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMessageHeader(ctx context.Context, id string) (r4.MessageHeader, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MessageHeader{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MessageHeader"}
	}
	v, err := g.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r4.MessageHeader{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageHeader)
	if !ok {
		return r4.MessageHeader{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMolecularSequence(ctx context.Context, id string) (r4.MolecularSequence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.MolecularSequence{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MolecularSequence"}
	}
	v, err := g.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r4.MolecularSequence{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MolecularSequence)
	if !ok {
		return r4.MolecularSequence{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNamingSystem(ctx context.Context, id string) (r4.NamingSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.NamingSystem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NamingSystem"}
	}
	v, err := g.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r4.NamingSystem{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NamingSystem)
	if !ok {
		return r4.NamingSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNutritionOrder(ctx context.Context, id string) (r4.NutritionOrder, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.NutritionOrder{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NutritionOrder"}
	}
	v, err := g.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r4.NutritionOrder{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NutritionOrder)
	if !ok {
		return r4.NutritionOrder{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadObservation(ctx context.Context, id string) (r4.Observation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Observation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Observation"}
	}
	v, err := g.Read(ctx, "Observation", id)
	if err != nil {
		return r4.Observation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Observation)
	if !ok {
		return r4.Observation{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadObservationDefinition(ctx context.Context, id string) (r4.ObservationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ObservationDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r4.ObservationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ObservationDefinition)
	if !ok {
		return r4.ObservationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOperationDefinition(ctx context.Context, id string) (r4.OperationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.OperationDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OperationDefinition"}
	}
	v, err := g.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r4.OperationDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationDefinition)
	if !ok {
		return r4.OperationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOperationOutcome(ctx context.Context, id string) (r4.OperationOutcome, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.OperationOutcome{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OperationOutcome"}
	}
	v, err := g.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r4.OperationOutcome{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationOutcome)
	if !ok {
		return r4.OperationOutcome{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOrganization(ctx context.Context, id string) (r4.Organization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Organization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Organization"}
	}
	v, err := g.Read(ctx, "Organization", id)
	if err != nil {
		return r4.Organization{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Organization)
	if !ok {
		return r4.Organization{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOrganizationAffiliation(ctx context.Context, id string) (r4.OrganizationAffiliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.OrganizationAffiliation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r4.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OrganizationAffiliation)
	if !ok {
		return r4.OrganizationAffiliation{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadParameters(ctx context.Context, id string) (r4.Parameters, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Parameters{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Parameters"}
	}
	v, err := g.Read(ctx, "Parameters", id)
	if err != nil {
		return r4.Parameters{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Parameters)
	if !ok {
		return r4.Parameters{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPatient(ctx context.Context, id string) (r4.Patient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Patient{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Patient"}
	}
	v, err := g.Read(ctx, "Patient", id)
	if err != nil {
		return r4.Patient{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Patient)
	if !ok {
		return r4.Patient{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPaymentNotice(ctx context.Context, id string) (r4.PaymentNotice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PaymentNotice{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PaymentNotice"}
	}
	v, err := g.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r4.PaymentNotice{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentNotice)
	if !ok {
		return r4.PaymentNotice{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPaymentReconciliation(ctx context.Context, id string) (r4.PaymentReconciliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PaymentReconciliation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r4.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentReconciliation)
	if !ok {
		return r4.PaymentReconciliation{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPerson(ctx context.Context, id string) (r4.Person, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Person{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Person"}
	}
	v, err := g.Read(ctx, "Person", id)
	if err != nil {
		return r4.Person{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Person)
	if !ok {
		return r4.Person{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPlanDefinition(ctx context.Context, id string) (r4.PlanDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PlanDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PlanDefinition"}
	}
	v, err := g.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r4.PlanDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PlanDefinition)
	if !ok {
		return r4.PlanDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPractitioner(ctx context.Context, id string) (r4.Practitioner, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Practitioner{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Practitioner"}
	}
	v, err := g.Read(ctx, "Practitioner", id)
	if err != nil {
		return r4.Practitioner{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Practitioner)
	if !ok {
		return r4.Practitioner{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPractitionerRole(ctx context.Context, id string) (r4.PractitionerRole, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.PractitionerRole{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PractitionerRole"}
	}
	v, err := g.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r4.PractitionerRole{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PractitionerRole)
	if !ok {
		return r4.PractitionerRole{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadProcedure(ctx context.Context, id string) (r4.Procedure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Procedure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Procedure"}
	}
	v, err := g.Read(ctx, "Procedure", id)
	if err != nil {
		return r4.Procedure{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Procedure)
	if !ok {
		return r4.Procedure{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadProvenance(ctx context.Context, id string) (r4.Provenance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Provenance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Provenance"}
	}
	v, err := g.Read(ctx, "Provenance", id)
	if err != nil {
		return r4.Provenance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Provenance)
	if !ok {
		return r4.Provenance{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaire(ctx context.Context, id string) (r4.Questionnaire, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Questionnaire{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Questionnaire"}
	}
	v, err := g.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r4.Questionnaire{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Questionnaire)
	if !ok {
		return r4.Questionnaire{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaireResponse(ctx context.Context, id string) (r4.QuestionnaireResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.QuestionnaireResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r4.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.QuestionnaireResponse)
	if !ok {
		return r4.QuestionnaireResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRelatedPerson(ctx context.Context, id string) (r4.RelatedPerson, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RelatedPerson{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RelatedPerson"}
	}
	v, err := g.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r4.RelatedPerson{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RelatedPerson)
	if !ok {
		return r4.RelatedPerson{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRequestGroup(ctx context.Context, id string) (r4.RequestGroup, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RequestGroup{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RequestGroup"}
	}
	v, err := g.Read(ctx, "RequestGroup", id)
	if err != nil {
		return r4.RequestGroup{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RequestGroup)
	if !ok {
		return r4.RequestGroup{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestGroup", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchDefinition(ctx context.Context, id string) (r4.ResearchDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchDefinition"}
	}
	v, err := g.Read(ctx, "ResearchDefinition", id)
	if err != nil {
		return r4.ResearchDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchDefinition)
	if !ok {
		return r4.ResearchDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchElementDefinition(ctx context.Context, id string) (r4.ResearchElementDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchElementDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchElementDefinition"}
	}
	v, err := g.Read(ctx, "ResearchElementDefinition", id)
	if err != nil {
		return r4.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchElementDefinition)
	if !ok {
		return r4.ResearchElementDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchElementDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchStudy(ctx context.Context, id string) (r4.ResearchStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchStudy{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchStudy"}
	}
	v, err := g.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r4.ResearchStudy{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchStudy)
	if !ok {
		return r4.ResearchStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchSubject(ctx context.Context, id string) (r4.ResearchSubject, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ResearchSubject{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchSubject"}
	}
	v, err := g.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r4.ResearchSubject{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchSubject)
	if !ok {
		return r4.ResearchSubject{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRiskAssessment(ctx context.Context, id string) (r4.RiskAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RiskAssessment{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RiskAssessment"}
	}
	v, err := g.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r4.RiskAssessment{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskAssessment)
	if !ok {
		return r4.RiskAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRiskEvidenceSynthesis(ctx context.Context, id string) (r4.RiskEvidenceSynthesis, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RiskEvidenceSynthesis"}
	}
	v, err := g.Read(ctx, "RiskEvidenceSynthesis", id)
	if err != nil {
		return r4.RiskEvidenceSynthesis{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskEvidenceSynthesis)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskEvidenceSynthesis", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSchedule(ctx context.Context, id string) (r4.Schedule, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Schedule{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Schedule"}
	}
	v, err := g.Read(ctx, "Schedule", id)
	if err != nil {
		return r4.Schedule{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Schedule)
	if !ok {
		return r4.Schedule{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSearchParameter(ctx context.Context, id string) (r4.SearchParameter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SearchParameter{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SearchParameter"}
	}
	v, err := g.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r4.SearchParameter{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SearchParameter)
	if !ok {
		return r4.SearchParameter{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadServiceRequest(ctx context.Context, id string) (r4.ServiceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ServiceRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ServiceRequest"}
	}
	v, err := g.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r4.ServiceRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ServiceRequest)
	if !ok {
		return r4.ServiceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSlot(ctx context.Context, id string) (r4.Slot, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Slot{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Slot"}
	}
	v, err := g.Read(ctx, "Slot", id)
	if err != nil {
		return r4.Slot{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Slot)
	if !ok {
		return r4.Slot{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSpecimen(ctx context.Context, id string) (r4.Specimen, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Specimen{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Specimen"}
	}
	v, err := g.Read(ctx, "Specimen", id)
	if err != nil {
		return r4.Specimen{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Specimen)
	if !ok {
		return r4.Specimen{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSpecimenDefinition(ctx context.Context, id string) (r4.SpecimenDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SpecimenDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r4.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SpecimenDefinition)
	if !ok {
		return r4.SpecimenDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadStructureDefinition(ctx context.Context, id string) (r4.StructureDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.StructureDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "StructureDefinition"}
	}
	v, err := g.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r4.StructureDefinition{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureDefinition)
	if !ok {
		return r4.StructureDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadStructureMap(ctx context.Context, id string) (r4.StructureMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.StructureMap{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "StructureMap"}
	}
	v, err := g.Read(ctx, "StructureMap", id)
	if err != nil {
		return r4.StructureMap{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureMap)
	if !ok {
		return r4.StructureMap{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubscription(ctx context.Context, id string) (r4.Subscription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Subscription{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Subscription"}
	}
	v, err := g.Read(ctx, "Subscription", id)
	if err != nil {
		return r4.Subscription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Subscription)
	if !ok {
		return r4.Subscription{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstance(ctx context.Context, id string) (r4.Substance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Substance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Substance"}
	}
	v, err := g.Read(ctx, "Substance", id)
	if err != nil {
		return r4.Substance{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Substance)
	if !ok {
		return r4.Substance{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceNucleicAcid(ctx context.Context, id string) (r4.SubstanceNucleicAcid, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceNucleicAcid{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceNucleicAcid"}
	}
	v, err := g.Read(ctx, "SubstanceNucleicAcid", id)
	if err != nil {
		return r4.SubstanceNucleicAcid{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceNucleicAcid)
	if !ok {
		return r4.SubstanceNucleicAcid{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceNucleicAcid", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstancePolymer(ctx context.Context, id string) (r4.SubstancePolymer, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstancePolymer{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstancePolymer"}
	}
	v, err := g.Read(ctx, "SubstancePolymer", id)
	if err != nil {
		return r4.SubstancePolymer{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstancePolymer)
	if !ok {
		return r4.SubstancePolymer{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstancePolymer", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceProtein(ctx context.Context, id string) (r4.SubstanceProtein, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceProtein{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceProtein"}
	}
	v, err := g.Read(ctx, "SubstanceProtein", id)
	if err != nil {
		return r4.SubstanceProtein{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceProtein)
	if !ok {
		return r4.SubstanceProtein{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceProtein", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceReferenceInformation(ctx context.Context, id string) (r4.SubstanceReferenceInformation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceReferenceInformation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceReferenceInformation"}
	}
	v, err := g.Read(ctx, "SubstanceReferenceInformation", id)
	if err != nil {
		return r4.SubstanceReferenceInformation{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceReferenceInformation)
	if !ok {
		return r4.SubstanceReferenceInformation{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceReferenceInformation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceSourceMaterial(ctx context.Context, id string) (r4.SubstanceSourceMaterial, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceSourceMaterial{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceSourceMaterial"}
	}
	v, err := g.Read(ctx, "SubstanceSourceMaterial", id)
	if err != nil {
		return r4.SubstanceSourceMaterial{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSourceMaterial)
	if !ok {
		return r4.SubstanceSourceMaterial{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSourceMaterial", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceSpecification(ctx context.Context, id string) (r4.SubstanceSpecification, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SubstanceSpecification{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceSpecification"}
	}
	v, err := g.Read(ctx, "SubstanceSpecification", id)
	if err != nil {
		return r4.SubstanceSpecification{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSpecification)
	if !ok {
		return r4.SubstanceSpecification{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSpecification", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSupplyDelivery(ctx context.Context, id string) (r4.SupplyDelivery, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SupplyDelivery{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r4.SupplyDelivery{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyDelivery)
	if !ok {
		return r4.SupplyDelivery{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSupplyRequest(ctx context.Context, id string) (r4.SupplyRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.SupplyRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SupplyRequest"}
	}
	v, err := g.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r4.SupplyRequest{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyRequest)
	if !ok {
		return r4.SupplyRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTask(ctx context.Context, id string) (r4.Task, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.Task{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Task"}
	}
	v, err := g.Read(ctx, "Task", id)
	if err != nil {
		return r4.Task{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Task)
	if !ok {
		return r4.Task{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTerminologyCapabilities(ctx context.Context, id string) (r4.TerminologyCapabilities, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.TerminologyCapabilities{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r4.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TerminologyCapabilities)
	if !ok {
		return r4.TerminologyCapabilities{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTestReport(ctx context.Context, id string) (r4.TestReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.TestReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TestReport"}
	}
	v, err := g.Read(ctx, "TestReport", id)
	if err != nil {
		return r4.TestReport{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestReport)
	if !ok {
		return r4.TestReport{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTestScript(ctx context.Context, id string) (r4.TestScript, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.TestScript{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TestScript"}
	}
	v, err := g.Read(ctx, "TestScript", id)
	if err != nil {
		return r4.TestScript{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestScript)
	if !ok {
		return r4.TestScript{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadValueSet(ctx context.Context, id string) (r4.ValueSet, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.ValueSet{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ValueSet"}
	}
	v, err := g.Read(ctx, "ValueSet", id)
	if err != nil {
		return r4.ValueSet{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ValueSet)
	if !ok {
		return r4.ValueSet{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadVerificationResult(ctx context.Context, id string) (r4.VerificationResult, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.VerificationResult{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "VerificationResult"}
	}
	v, err := g.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r4.VerificationResult{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VerificationResult)
	if !ok {
		return r4.VerificationResult{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadVisionPrescription(ctx context.Context, id string) (r4.VisionPrescription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4.VisionPrescription{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "VisionPrescription"}
	}
	v, err := g.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r4.VisionPrescription{}, err
	}
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VisionPrescription)
	if !ok {
		return r4.VisionPrescription{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) UpdateAccount(ctx context.Context, resource r4.Account) (capabilities.UpdateResult[r4.Account], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Account]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Account"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Account]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Account)
	if !ok {
		return capabilities.UpdateResult[r4.Account]{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Account]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateActivityDefinition(ctx context.Context, resource r4.ActivityDefinition) (capabilities.UpdateResult[r4.ActivityDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ActivityDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ActivityDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ActivityDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ActivityDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ActivityDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ActivityDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAdverseEvent(ctx context.Context, resource r4.AdverseEvent) (capabilities.UpdateResult[r4.AdverseEvent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AdverseEvent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AdverseEvent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AdverseEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AdverseEvent)
	if !ok {
		return capabilities.UpdateResult[r4.AdverseEvent]{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.AdverseEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAllergyIntolerance(ctx context.Context, resource r4.AllergyIntolerance) (capabilities.UpdateResult[r4.AllergyIntolerance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AllergyIntolerance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AllergyIntolerance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AllergyIntolerance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AllergyIntolerance)
	if !ok {
		return capabilities.UpdateResult[r4.AllergyIntolerance]{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.AllergyIntolerance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointment(ctx context.Context, resource r4.Appointment) (capabilities.UpdateResult[r4.Appointment], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Appointment]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Appointment"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Appointment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Appointment)
	if !ok {
		return capabilities.UpdateResult[r4.Appointment]{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Appointment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointmentResponse(ctx context.Context, resource r4.AppointmentResponse) (capabilities.UpdateResult[r4.AppointmentResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AppointmentResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AppointmentResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AppointmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AppointmentResponse)
	if !ok {
		return capabilities.UpdateResult[r4.AppointmentResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.AppointmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAuditEvent(ctx context.Context, resource r4.AuditEvent) (capabilities.UpdateResult[r4.AuditEvent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.AuditEvent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AuditEvent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.AuditEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.AuditEvent)
	if !ok {
		return capabilities.UpdateResult[r4.AuditEvent]{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.AuditEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBasic(ctx context.Context, resource r4.Basic) (capabilities.UpdateResult[r4.Basic], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Basic]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Basic"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Basic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Basic)
	if !ok {
		return capabilities.UpdateResult[r4.Basic]{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Basic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBinary(ctx context.Context, resource r4.Binary) (capabilities.UpdateResult[r4.Binary], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Binary]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Binary"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Binary]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Binary)
	if !ok {
		return capabilities.UpdateResult[r4.Binary]{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Binary]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r4.BiologicallyDerivedProduct) (capabilities.UpdateResult[r4.BiologicallyDerivedProduct], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "BiologicallyDerivedProduct"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BiologicallyDerivedProduct)
	if !ok {
		return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.BiologicallyDerivedProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBodyStructure(ctx context.Context, resource r4.BodyStructure) (capabilities.UpdateResult[r4.BodyStructure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.BodyStructure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "BodyStructure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.BodyStructure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.BodyStructure)
	if !ok {
		return capabilities.UpdateResult[r4.BodyStructure]{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.BodyStructure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBundle(ctx context.Context, resource r4.Bundle) (capabilities.UpdateResult[r4.Bundle], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Bundle]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Bundle"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Bundle]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Bundle)
	if !ok {
		return capabilities.UpdateResult[r4.Bundle]{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Bundle]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilityStatement(ctx context.Context, resource r4.CapabilityStatement) (capabilities.UpdateResult[r4.CapabilityStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CapabilityStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CapabilityStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CapabilityStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CapabilityStatement)
	if !ok {
		return capabilities.UpdateResult[r4.CapabilityStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CapabilityStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCarePlan(ctx context.Context, resource r4.CarePlan) (capabilities.UpdateResult[r4.CarePlan], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CarePlan]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CarePlan"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CarePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CarePlan)
	if !ok {
		return capabilities.UpdateResult[r4.CarePlan]{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CarePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCareTeam(ctx context.Context, resource r4.CareTeam) (capabilities.UpdateResult[r4.CareTeam], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CareTeam]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CareTeam"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CareTeam]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CareTeam)
	if !ok {
		return capabilities.UpdateResult[r4.CareTeam]{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CareTeam]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCatalogEntry(ctx context.Context, resource r4.CatalogEntry) (capabilities.UpdateResult[r4.CatalogEntry], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CatalogEntry]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CatalogEntry"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CatalogEntry]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CatalogEntry)
	if !ok {
		return capabilities.UpdateResult[r4.CatalogEntry]{}, capabilities.UnexpectedResourceError{ExpectedType: "CatalogEntry", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CatalogEntry]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItem(ctx context.Context, resource r4.ChargeItem) (capabilities.UpdateResult[r4.ChargeItem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ChargeItem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ChargeItem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItem)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItem]{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ChargeItem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItemDefinition(ctx context.Context, resource r4.ChargeItemDefinition) (capabilities.UpdateResult[r4.ChargeItemDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItemDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ChargeItemDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ChargeItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ChargeItemDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ChargeItemDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ChargeItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaim(ctx context.Context, resource r4.Claim) (capabilities.UpdateResult[r4.Claim], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Claim]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Claim"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Claim]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Claim)
	if !ok {
		return capabilities.UpdateResult[r4.Claim]{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Claim]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaimResponse(ctx context.Context, resource r4.ClaimResponse) (capabilities.UpdateResult[r4.ClaimResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ClaimResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClaimResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ClaimResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClaimResponse)
	if !ok {
		return capabilities.UpdateResult[r4.ClaimResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ClaimResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClinicalImpression(ctx context.Context, resource r4.ClinicalImpression) (capabilities.UpdateResult[r4.ClinicalImpression], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ClinicalImpression]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClinicalImpression"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ClinicalImpression]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ClinicalImpression)
	if !ok {
		return capabilities.UpdateResult[r4.ClinicalImpression]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ClinicalImpression]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCodeSystem(ctx context.Context, resource r4.CodeSystem) (capabilities.UpdateResult[r4.CodeSystem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CodeSystem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CodeSystem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CodeSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CodeSystem)
	if !ok {
		return capabilities.UpdateResult[r4.CodeSystem]{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CodeSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunication(ctx context.Context, resource r4.Communication) (capabilities.UpdateResult[r4.Communication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Communication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Communication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Communication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Communication)
	if !ok {
		return capabilities.UpdateResult[r4.Communication]{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Communication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunicationRequest(ctx context.Context, resource r4.CommunicationRequest) (capabilities.UpdateResult[r4.CommunicationRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CommunicationRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CommunicationRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CommunicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CommunicationRequest)
	if !ok {
		return capabilities.UpdateResult[r4.CommunicationRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CommunicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCompartmentDefinition(ctx context.Context, resource r4.CompartmentDefinition) (capabilities.UpdateResult[r4.CompartmentDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CompartmentDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CompartmentDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CompartmentDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CompartmentDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.CompartmentDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CompartmentDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateComposition(ctx context.Context, resource r4.Composition) (capabilities.UpdateResult[r4.Composition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Composition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Composition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Composition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Composition)
	if !ok {
		return capabilities.UpdateResult[r4.Composition]{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Composition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConceptMap(ctx context.Context, resource r4.ConceptMap) (capabilities.UpdateResult[r4.ConceptMap], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ConceptMap]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ConceptMap"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ConceptMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ConceptMap)
	if !ok {
		return capabilities.UpdateResult[r4.ConceptMap]{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ConceptMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCondition(ctx context.Context, resource r4.Condition) (capabilities.UpdateResult[r4.Condition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Condition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Condition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Condition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Condition)
	if !ok {
		return capabilities.UpdateResult[r4.Condition]{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Condition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConsent(ctx context.Context, resource r4.Consent) (capabilities.UpdateResult[r4.Consent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Consent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Consent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Consent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Consent)
	if !ok {
		return capabilities.UpdateResult[r4.Consent]{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Consent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateContract(ctx context.Context, resource r4.Contract) (capabilities.UpdateResult[r4.Contract], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Contract]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Contract"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Contract]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Contract)
	if !ok {
		return capabilities.UpdateResult[r4.Contract]{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Contract]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverage(ctx context.Context, resource r4.Coverage) (capabilities.UpdateResult[r4.Coverage], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Coverage]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Coverage"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Coverage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Coverage)
	if !ok {
		return capabilities.UpdateResult[r4.Coverage]{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Coverage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityRequest(ctx context.Context, resource r4.CoverageEligibilityRequest) (capabilities.UpdateResult[r4.CoverageEligibilityRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CoverageEligibilityRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityRequest)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CoverageEligibilityRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityResponse(ctx context.Context, resource r4.CoverageEligibilityResponse) (capabilities.UpdateResult[r4.CoverageEligibilityResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CoverageEligibilityResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.CoverageEligibilityResponse)
	if !ok {
		return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.CoverageEligibilityResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDetectedIssue(ctx context.Context, resource r4.DetectedIssue) (capabilities.UpdateResult[r4.DetectedIssue], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DetectedIssue]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DetectedIssue"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DetectedIssue]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DetectedIssue)
	if !ok {
		return capabilities.UpdateResult[r4.DetectedIssue]{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DetectedIssue]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDevice(ctx context.Context, resource r4.Device) (capabilities.UpdateResult[r4.Device], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Device]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Device"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Device]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Device)
	if !ok {
		return capabilities.UpdateResult[r4.Device]{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Device]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceDefinition(ctx context.Context, resource r4.DeviceDefinition) (capabilities.UpdateResult[r4.DeviceDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DeviceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceMetric(ctx context.Context, resource r4.DeviceMetric) (capabilities.UpdateResult[r4.DeviceMetric], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceMetric]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceMetric"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceMetric]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceMetric)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceMetric]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DeviceMetric]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceRequest(ctx context.Context, resource r4.DeviceRequest) (capabilities.UpdateResult[r4.DeviceRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceRequest)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DeviceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceUseStatement(ctx context.Context, resource r4.DeviceUseStatement) (capabilities.UpdateResult[r4.DeviceUseStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceUseStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceUseStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DeviceUseStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DeviceUseStatement)
	if !ok {
		return capabilities.UpdateResult[r4.DeviceUseStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUseStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DeviceUseStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDiagnosticReport(ctx context.Context, resource r4.DiagnosticReport) (capabilities.UpdateResult[r4.DiagnosticReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DiagnosticReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DiagnosticReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DiagnosticReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DiagnosticReport)
	if !ok {
		return capabilities.UpdateResult[r4.DiagnosticReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DiagnosticReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDocumentManifest(ctx context.Context, resource r4.DocumentManifest) (capabilities.UpdateResult[r4.DocumentManifest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentManifest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DocumentManifest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DocumentManifest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentManifest)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentManifest]{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentManifest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DocumentManifest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDocumentReference(ctx context.Context, resource r4.DocumentReference) (capabilities.UpdateResult[r4.DocumentReference], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentReference]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DocumentReference"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.DocumentReference]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.DocumentReference)
	if !ok {
		return capabilities.UpdateResult[r4.DocumentReference]{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.DocumentReference]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEffectEvidenceSynthesis(ctx context.Context, resource r4.EffectEvidenceSynthesis) (capabilities.UpdateResult[r4.EffectEvidenceSynthesis], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EffectEvidenceSynthesis"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EffectEvidenceSynthesis)
	if !ok {
		return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{}, capabilities.UnexpectedResourceError{ExpectedType: "EffectEvidenceSynthesis", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.EffectEvidenceSynthesis]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEncounter(ctx context.Context, resource r4.Encounter) (capabilities.UpdateResult[r4.Encounter], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Encounter]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Encounter"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Encounter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Encounter)
	if !ok {
		return capabilities.UpdateResult[r4.Encounter]{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Encounter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEndpoint(ctx context.Context, resource r4.Endpoint) (capabilities.UpdateResult[r4.Endpoint], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Endpoint]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Endpoint"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Endpoint]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Endpoint)
	if !ok {
		return capabilities.UpdateResult[r4.Endpoint]{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Endpoint]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentRequest(ctx context.Context, resource r4.EnrollmentRequest) (capabilities.UpdateResult[r4.EnrollmentRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EnrollmentRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EnrollmentRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentRequest)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.EnrollmentRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentResponse(ctx context.Context, resource r4.EnrollmentResponse) (capabilities.UpdateResult[r4.EnrollmentResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EnrollmentResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EnrollmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EnrollmentResponse)
	if !ok {
		return capabilities.UpdateResult[r4.EnrollmentResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.EnrollmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEpisodeOfCare(ctx context.Context, resource r4.EpisodeOfCare) (capabilities.UpdateResult[r4.EpisodeOfCare], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EpisodeOfCare]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EpisodeOfCare"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EpisodeOfCare]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EpisodeOfCare)
	if !ok {
		return capabilities.UpdateResult[r4.EpisodeOfCare]{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.EpisodeOfCare]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEventDefinition(ctx context.Context, resource r4.EventDefinition) (capabilities.UpdateResult[r4.EventDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EventDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EventDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EventDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EventDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.EventDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.EventDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidence(ctx context.Context, resource r4.Evidence) (capabilities.UpdateResult[r4.Evidence], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Evidence]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Evidence"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Evidence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Evidence)
	if !ok {
		return capabilities.UpdateResult[r4.Evidence]{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Evidence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidenceVariable(ctx context.Context, resource r4.EvidenceVariable) (capabilities.UpdateResult[r4.EvidenceVariable], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.EvidenceVariable]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EvidenceVariable"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.EvidenceVariable]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.EvidenceVariable)
	if !ok {
		return capabilities.UpdateResult[r4.EvidenceVariable]{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.EvidenceVariable]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExampleScenario(ctx context.Context, resource r4.ExampleScenario) (capabilities.UpdateResult[r4.ExampleScenario], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ExampleScenario]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ExampleScenario"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ExampleScenario]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExampleScenario)
	if !ok {
		return capabilities.UpdateResult[r4.ExampleScenario]{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ExampleScenario]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExplanationOfBenefit(ctx context.Context, resource r4.ExplanationOfBenefit) (capabilities.UpdateResult[r4.ExplanationOfBenefit], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ExplanationOfBenefit]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ExplanationOfBenefit"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ExplanationOfBenefit]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ExplanationOfBenefit)
	if !ok {
		return capabilities.UpdateResult[r4.ExplanationOfBenefit]{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ExplanationOfBenefit]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFamilyMemberHistory(ctx context.Context, resource r4.FamilyMemberHistory) (capabilities.UpdateResult[r4.FamilyMemberHistory], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.FamilyMemberHistory]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "FamilyMemberHistory"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.FamilyMemberHistory]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.FamilyMemberHistory)
	if !ok {
		return capabilities.UpdateResult[r4.FamilyMemberHistory]{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.FamilyMemberHistory]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFlag(ctx context.Context, resource r4.Flag) (capabilities.UpdateResult[r4.Flag], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Flag]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Flag"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Flag]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Flag)
	if !ok {
		return capabilities.UpdateResult[r4.Flag]{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Flag]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGoal(ctx context.Context, resource r4.Goal) (capabilities.UpdateResult[r4.Goal], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Goal]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Goal"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Goal]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Goal)
	if !ok {
		return capabilities.UpdateResult[r4.Goal]{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Goal]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGraphDefinition(ctx context.Context, resource r4.GraphDefinition) (capabilities.UpdateResult[r4.GraphDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.GraphDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "GraphDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.GraphDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GraphDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.GraphDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.GraphDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGroup(ctx context.Context, resource r4.Group) (capabilities.UpdateResult[r4.Group], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Group]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Group"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Group]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Group)
	if !ok {
		return capabilities.UpdateResult[r4.Group]{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Group]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGuidanceResponse(ctx context.Context, resource r4.GuidanceResponse) (capabilities.UpdateResult[r4.GuidanceResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.GuidanceResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "GuidanceResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.GuidanceResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.GuidanceResponse)
	if !ok {
		return capabilities.UpdateResult[r4.GuidanceResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.GuidanceResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateHealthcareService(ctx context.Context, resource r4.HealthcareService) (capabilities.UpdateResult[r4.HealthcareService], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.HealthcareService]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "HealthcareService"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.HealthcareService]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.HealthcareService)
	if !ok {
		return capabilities.UpdateResult[r4.HealthcareService]{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.HealthcareService]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImagingStudy(ctx context.Context, resource r4.ImagingStudy) (capabilities.UpdateResult[r4.ImagingStudy], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImagingStudy]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImagingStudy"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImagingStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImagingStudy)
	if !ok {
		return capabilities.UpdateResult[r4.ImagingStudy]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ImagingStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunization(ctx context.Context, resource r4.Immunization) (capabilities.UpdateResult[r4.Immunization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Immunization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Immunization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Immunization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Immunization)
	if !ok {
		return capabilities.UpdateResult[r4.Immunization]{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Immunization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationEvaluation(ctx context.Context, resource r4.ImmunizationEvaluation) (capabilities.UpdateResult[r4.ImmunizationEvaluation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationEvaluation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImmunizationEvaluation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImmunizationEvaluation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationEvaluation)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationEvaluation]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ImmunizationEvaluation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationRecommendation(ctx context.Context, resource r4.ImmunizationRecommendation) (capabilities.UpdateResult[r4.ImmunizationRecommendation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationRecommendation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImmunizationRecommendation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImmunizationRecommendation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImmunizationRecommendation)
	if !ok {
		return capabilities.UpdateResult[r4.ImmunizationRecommendation]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ImmunizationRecommendation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImplementationGuide(ctx context.Context, resource r4.ImplementationGuide) (capabilities.UpdateResult[r4.ImplementationGuide], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ImplementationGuide]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImplementationGuide"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ImplementationGuide]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ImplementationGuide)
	if !ok {
		return capabilities.UpdateResult[r4.ImplementationGuide]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ImplementationGuide]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInsurancePlan(ctx context.Context, resource r4.InsurancePlan) (capabilities.UpdateResult[r4.InsurancePlan], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.InsurancePlan]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "InsurancePlan"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.InsurancePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.InsurancePlan)
	if !ok {
		return capabilities.UpdateResult[r4.InsurancePlan]{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.InsurancePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInvoice(ctx context.Context, resource r4.Invoice) (capabilities.UpdateResult[r4.Invoice], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Invoice]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Invoice"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Invoice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Invoice)
	if !ok {
		return capabilities.UpdateResult[r4.Invoice]{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Invoice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLibrary(ctx context.Context, resource r4.Library) (capabilities.UpdateResult[r4.Library], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Library]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Library"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Library]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Library)
	if !ok {
		return capabilities.UpdateResult[r4.Library]{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Library]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLinkage(ctx context.Context, resource r4.Linkage) (capabilities.UpdateResult[r4.Linkage], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Linkage]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Linkage"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Linkage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Linkage)
	if !ok {
		return capabilities.UpdateResult[r4.Linkage]{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Linkage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateList(ctx context.Context, resource r4.List) (capabilities.UpdateResult[r4.List], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.List]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "List"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.List]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.List)
	if !ok {
		return capabilities.UpdateResult[r4.List]{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.List]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLocation(ctx context.Context, resource r4.Location) (capabilities.UpdateResult[r4.Location], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Location]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Location"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Location]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Location)
	if !ok {
		return capabilities.UpdateResult[r4.Location]{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Location]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasure(ctx context.Context, resource r4.Measure) (capabilities.UpdateResult[r4.Measure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Measure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Measure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Measure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Measure)
	if !ok {
		return capabilities.UpdateResult[r4.Measure]{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Measure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasureReport(ctx context.Context, resource r4.MeasureReport) (capabilities.UpdateResult[r4.MeasureReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MeasureReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MeasureReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MeasureReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MeasureReport)
	if !ok {
		return capabilities.UpdateResult[r4.MeasureReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MeasureReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedia(ctx context.Context, resource r4.Media) (capabilities.UpdateResult[r4.Media], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Media]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Media"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Media]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Media)
	if !ok {
		return capabilities.UpdateResult[r4.Media]{}, capabilities.UnexpectedResourceError{ExpectedType: "Media", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Media]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedication(ctx context.Context, resource r4.Medication) (capabilities.UpdateResult[r4.Medication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Medication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Medication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Medication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Medication)
	if !ok {
		return capabilities.UpdateResult[r4.Medication]{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Medication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationAdministration(ctx context.Context, resource r4.MedicationAdministration) (capabilities.UpdateResult[r4.MedicationAdministration], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationAdministration]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationAdministration"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationAdministration]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationAdministration)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationAdministration]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicationAdministration]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationDispense(ctx context.Context, resource r4.MedicationDispense) (capabilities.UpdateResult[r4.MedicationDispense], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationDispense]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationDispense"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationDispense]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationDispense)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationDispense]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicationDispense]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationKnowledge(ctx context.Context, resource r4.MedicationKnowledge) (capabilities.UpdateResult[r4.MedicationKnowledge], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationKnowledge]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationKnowledge"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationKnowledge]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationKnowledge)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationKnowledge]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicationKnowledge]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationRequest(ctx context.Context, resource r4.MedicationRequest) (capabilities.UpdateResult[r4.MedicationRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationRequest)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationStatement(ctx context.Context, resource r4.MedicationStatement) (capabilities.UpdateResult[r4.MedicationStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicationStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicationStatement)
	if !ok {
		return capabilities.UpdateResult[r4.MedicationStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicationStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProduct(ctx context.Context, resource r4.MedicinalProduct) (capabilities.UpdateResult[r4.MedicinalProduct], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProduct]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProduct"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProduct)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProduct]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProduct", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductAuthorization(ctx context.Context, resource r4.MedicinalProductAuthorization) (capabilities.UpdateResult[r4.MedicinalProductAuthorization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductAuthorization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductAuthorization)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductAuthorization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductAuthorization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductContraindication(ctx context.Context, resource r4.MedicinalProductContraindication) (capabilities.UpdateResult[r4.MedicinalProductContraindication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductContraindication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductContraindication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductContraindication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductContraindication)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductContraindication]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductContraindication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductContraindication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductIndication(ctx context.Context, resource r4.MedicinalProductIndication) (capabilities.UpdateResult[r4.MedicinalProductIndication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIndication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductIndication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductIndication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIndication)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIndication]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductIndication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductIndication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductIngredient(ctx context.Context, resource r4.MedicinalProductIngredient) (capabilities.UpdateResult[r4.MedicinalProductIngredient], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIngredient]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductIngredient"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductIngredient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductIngredient)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductIngredient]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductIngredient", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductIngredient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductInteraction(ctx context.Context, resource r4.MedicinalProductInteraction) (capabilities.UpdateResult[r4.MedicinalProductInteraction], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductInteraction]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductInteraction"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductInteraction]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductInteraction)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductInteraction]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductInteraction", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductInteraction]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductManufactured(ctx context.Context, resource r4.MedicinalProductManufactured) (capabilities.UpdateResult[r4.MedicinalProductManufactured], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductManufactured]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductManufactured"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductManufactured]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductManufactured)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductManufactured]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductManufactured", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductManufactured]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductPackaged(ctx context.Context, resource r4.MedicinalProductPackaged) (capabilities.UpdateResult[r4.MedicinalProductPackaged], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPackaged]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductPackaged"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductPackaged]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPackaged)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPackaged]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductPackaged", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductPackaged]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductPharmaceutical(ctx context.Context, resource r4.MedicinalProductPharmaceutical) (capabilities.UpdateResult[r4.MedicinalProductPharmaceutical], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductPharmaceutical"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductPharmaceutical", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductPharmaceutical]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductUndesirableEffect(ctx context.Context, resource r4.MedicinalProductUndesirableEffect) (capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductUndesirableEffect"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductUndesirableEffect", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MedicinalProductUndesirableEffect]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageDefinition(ctx context.Context, resource r4.MessageDefinition) (capabilities.UpdateResult[r4.MessageDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MessageDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MessageDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MessageDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.MessageDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MessageDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageHeader(ctx context.Context, resource r4.MessageHeader) (capabilities.UpdateResult[r4.MessageHeader], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MessageHeader]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MessageHeader"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MessageHeader]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MessageHeader)
	if !ok {
		return capabilities.UpdateResult[r4.MessageHeader]{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MessageHeader]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMolecularSequence(ctx context.Context, resource r4.MolecularSequence) (capabilities.UpdateResult[r4.MolecularSequence], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.MolecularSequence]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MolecularSequence"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.MolecularSequence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.MolecularSequence)
	if !ok {
		return capabilities.UpdateResult[r4.MolecularSequence]{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.MolecularSequence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNamingSystem(ctx context.Context, resource r4.NamingSystem) (capabilities.UpdateResult[r4.NamingSystem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.NamingSystem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NamingSystem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.NamingSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NamingSystem)
	if !ok {
		return capabilities.UpdateResult[r4.NamingSystem]{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.NamingSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNutritionOrder(ctx context.Context, resource r4.NutritionOrder) (capabilities.UpdateResult[r4.NutritionOrder], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.NutritionOrder]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NutritionOrder"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.NutritionOrder]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.NutritionOrder)
	if !ok {
		return capabilities.UpdateResult[r4.NutritionOrder]{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.NutritionOrder]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservation(ctx context.Context, resource r4.Observation) (capabilities.UpdateResult[r4.Observation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Observation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Observation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Observation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Observation)
	if !ok {
		return capabilities.UpdateResult[r4.Observation]{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Observation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservationDefinition(ctx context.Context, resource r4.ObservationDefinition) (capabilities.UpdateResult[r4.ObservationDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ObservationDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ObservationDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ObservationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ObservationDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ObservationDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ObservationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationDefinition(ctx context.Context, resource r4.OperationDefinition) (capabilities.UpdateResult[r4.OperationDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.OperationDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OperationDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.OperationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.OperationDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.OperationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationOutcome(ctx context.Context, resource r4.OperationOutcome) (capabilities.UpdateResult[r4.OperationOutcome], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.OperationOutcome]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OperationOutcome"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.OperationOutcome]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OperationOutcome)
	if !ok {
		return capabilities.UpdateResult[r4.OperationOutcome]{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.OperationOutcome]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganization(ctx context.Context, resource r4.Organization) (capabilities.UpdateResult[r4.Organization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Organization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Organization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Organization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Organization)
	if !ok {
		return capabilities.UpdateResult[r4.Organization]{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Organization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganizationAffiliation(ctx context.Context, resource r4.OrganizationAffiliation) (capabilities.UpdateResult[r4.OrganizationAffiliation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.OrganizationAffiliation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OrganizationAffiliation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.OrganizationAffiliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.OrganizationAffiliation)
	if !ok {
		return capabilities.UpdateResult[r4.OrganizationAffiliation]{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.OrganizationAffiliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateParameters(ctx context.Context, resource r4.Parameters) (capabilities.UpdateResult[r4.Parameters], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Parameters]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Parameters"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Parameters]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Parameters)
	if !ok {
		return capabilities.UpdateResult[r4.Parameters]{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Parameters]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePatient(ctx context.Context, resource r4.Patient) (capabilities.UpdateResult[r4.Patient], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Patient]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Patient"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Patient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Patient)
	if !ok {
		return capabilities.UpdateResult[r4.Patient]{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Patient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentNotice(ctx context.Context, resource r4.PaymentNotice) (capabilities.UpdateResult[r4.PaymentNotice], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentNotice]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PaymentNotice"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PaymentNotice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentNotice)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentNotice]{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.PaymentNotice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentReconciliation(ctx context.Context, resource r4.PaymentReconciliation) (capabilities.UpdateResult[r4.PaymentReconciliation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentReconciliation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PaymentReconciliation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PaymentReconciliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PaymentReconciliation)
	if !ok {
		return capabilities.UpdateResult[r4.PaymentReconciliation]{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.PaymentReconciliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePerson(ctx context.Context, resource r4.Person) (capabilities.UpdateResult[r4.Person], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Person]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Person"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Person]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Person)
	if !ok {
		return capabilities.UpdateResult[r4.Person]{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Person]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePlanDefinition(ctx context.Context, resource r4.PlanDefinition) (capabilities.UpdateResult[r4.PlanDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PlanDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PlanDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PlanDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PlanDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.PlanDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.PlanDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitioner(ctx context.Context, resource r4.Practitioner) (capabilities.UpdateResult[r4.Practitioner], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Practitioner]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Practitioner"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Practitioner]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Practitioner)
	if !ok {
		return capabilities.UpdateResult[r4.Practitioner]{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Practitioner]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitionerRole(ctx context.Context, resource r4.PractitionerRole) (capabilities.UpdateResult[r4.PractitionerRole], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.PractitionerRole]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PractitionerRole"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.PractitionerRole]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.PractitionerRole)
	if !ok {
		return capabilities.UpdateResult[r4.PractitionerRole]{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.PractitionerRole]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProcedure(ctx context.Context, resource r4.Procedure) (capabilities.UpdateResult[r4.Procedure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Procedure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Procedure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Procedure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Procedure)
	if !ok {
		return capabilities.UpdateResult[r4.Procedure]{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Procedure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProvenance(ctx context.Context, resource r4.Provenance) (capabilities.UpdateResult[r4.Provenance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Provenance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Provenance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Provenance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Provenance)
	if !ok {
		return capabilities.UpdateResult[r4.Provenance]{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Provenance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaire(ctx context.Context, resource r4.Questionnaire) (capabilities.UpdateResult[r4.Questionnaire], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Questionnaire]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Questionnaire"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Questionnaire]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Questionnaire)
	if !ok {
		return capabilities.UpdateResult[r4.Questionnaire]{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Questionnaire]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaireResponse(ctx context.Context, resource r4.QuestionnaireResponse) (capabilities.UpdateResult[r4.QuestionnaireResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.QuestionnaireResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "QuestionnaireResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.QuestionnaireResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.QuestionnaireResponse)
	if !ok {
		return capabilities.UpdateResult[r4.QuestionnaireResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.QuestionnaireResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRelatedPerson(ctx context.Context, resource r4.RelatedPerson) (capabilities.UpdateResult[r4.RelatedPerson], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RelatedPerson]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RelatedPerson"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RelatedPerson]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RelatedPerson)
	if !ok {
		return capabilities.UpdateResult[r4.RelatedPerson]{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.RelatedPerson]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRequestGroup(ctx context.Context, resource r4.RequestGroup) (capabilities.UpdateResult[r4.RequestGroup], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RequestGroup]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RequestGroup"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RequestGroup]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RequestGroup)
	if !ok {
		return capabilities.UpdateResult[r4.RequestGroup]{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestGroup", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.RequestGroup]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchDefinition(ctx context.Context, resource r4.ResearchDefinition) (capabilities.UpdateResult[r4.ResearchDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ResearchDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchElementDefinition(ctx context.Context, resource r4.ResearchElementDefinition) (capabilities.UpdateResult[r4.ResearchElementDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchElementDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchElementDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchElementDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchElementDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchElementDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchElementDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ResearchElementDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchStudy(ctx context.Context, resource r4.ResearchStudy) (capabilities.UpdateResult[r4.ResearchStudy], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchStudy]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchStudy"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchStudy)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchStudy]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ResearchStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchSubject(ctx context.Context, resource r4.ResearchSubject) (capabilities.UpdateResult[r4.ResearchSubject], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchSubject]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchSubject"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ResearchSubject]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ResearchSubject)
	if !ok {
		return capabilities.UpdateResult[r4.ResearchSubject]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ResearchSubject]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRiskAssessment(ctx context.Context, resource r4.RiskAssessment) (capabilities.UpdateResult[r4.RiskAssessment], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RiskAssessment]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RiskAssessment"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RiskAssessment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskAssessment)
	if !ok {
		return capabilities.UpdateResult[r4.RiskAssessment]{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.RiskAssessment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRiskEvidenceSynthesis(ctx context.Context, resource r4.RiskEvidenceSynthesis) (capabilities.UpdateResult[r4.RiskEvidenceSynthesis], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RiskEvidenceSynthesis"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.RiskEvidenceSynthesis)
	if !ok {
		return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskEvidenceSynthesis", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.RiskEvidenceSynthesis]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSchedule(ctx context.Context, resource r4.Schedule) (capabilities.UpdateResult[r4.Schedule], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Schedule]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Schedule"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Schedule]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Schedule)
	if !ok {
		return capabilities.UpdateResult[r4.Schedule]{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Schedule]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSearchParameter(ctx context.Context, resource r4.SearchParameter) (capabilities.UpdateResult[r4.SearchParameter], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SearchParameter]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SearchParameter"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SearchParameter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SearchParameter)
	if !ok {
		return capabilities.UpdateResult[r4.SearchParameter]{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SearchParameter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateServiceRequest(ctx context.Context, resource r4.ServiceRequest) (capabilities.UpdateResult[r4.ServiceRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ServiceRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ServiceRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ServiceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ServiceRequest)
	if !ok {
		return capabilities.UpdateResult[r4.ServiceRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ServiceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSlot(ctx context.Context, resource r4.Slot) (capabilities.UpdateResult[r4.Slot], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Slot]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Slot"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Slot]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Slot)
	if !ok {
		return capabilities.UpdateResult[r4.Slot]{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Slot]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimen(ctx context.Context, resource r4.Specimen) (capabilities.UpdateResult[r4.Specimen], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Specimen]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Specimen"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Specimen]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Specimen)
	if !ok {
		return capabilities.UpdateResult[r4.Specimen]{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Specimen]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimenDefinition(ctx context.Context, resource r4.SpecimenDefinition) (capabilities.UpdateResult[r4.SpecimenDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SpecimenDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SpecimenDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SpecimenDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SpecimenDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.SpecimenDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SpecimenDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureDefinition(ctx context.Context, resource r4.StructureDefinition) (capabilities.UpdateResult[r4.StructureDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.StructureDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "StructureDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.StructureDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureDefinition)
	if !ok {
		return capabilities.UpdateResult[r4.StructureDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.StructureDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureMap(ctx context.Context, resource r4.StructureMap) (capabilities.UpdateResult[r4.StructureMap], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.StructureMap]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "StructureMap"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.StructureMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.StructureMap)
	if !ok {
		return capabilities.UpdateResult[r4.StructureMap]{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.StructureMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscription(ctx context.Context, resource r4.Subscription) (capabilities.UpdateResult[r4.Subscription], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Subscription]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Subscription"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Subscription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Subscription)
	if !ok {
		return capabilities.UpdateResult[r4.Subscription]{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Subscription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstance(ctx context.Context, resource r4.Substance) (capabilities.UpdateResult[r4.Substance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Substance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Substance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Substance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Substance)
	if !ok {
		return capabilities.UpdateResult[r4.Substance]{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Substance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceNucleicAcid(ctx context.Context, resource r4.SubstanceNucleicAcid) (capabilities.UpdateResult[r4.SubstanceNucleicAcid], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceNucleicAcid"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceNucleicAcid)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceNucleicAcid", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SubstanceNucleicAcid]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstancePolymer(ctx context.Context, resource r4.SubstancePolymer) (capabilities.UpdateResult[r4.SubstancePolymer], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstancePolymer]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstancePolymer"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstancePolymer]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstancePolymer)
	if !ok {
		return capabilities.UpdateResult[r4.SubstancePolymer]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstancePolymer", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SubstancePolymer]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceProtein(ctx context.Context, resource r4.SubstanceProtein) (capabilities.UpdateResult[r4.SubstanceProtein], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceProtein]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceProtein"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceProtein]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceProtein)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceProtein]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceProtein", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SubstanceProtein]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceReferenceInformation(ctx context.Context, resource r4.SubstanceReferenceInformation) (capabilities.UpdateResult[r4.SubstanceReferenceInformation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceReferenceInformation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceReferenceInformation)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceReferenceInformation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SubstanceReferenceInformation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceSourceMaterial(ctx context.Context, resource r4.SubstanceSourceMaterial) (capabilities.UpdateResult[r4.SubstanceSourceMaterial], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceSourceMaterial"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSourceMaterial)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSourceMaterial", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SubstanceSourceMaterial]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceSpecification(ctx context.Context, resource r4.SubstanceSpecification) (capabilities.UpdateResult[r4.SubstanceSpecification], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSpecification]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceSpecification"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SubstanceSpecification]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SubstanceSpecification)
	if !ok {
		return capabilities.UpdateResult[r4.SubstanceSpecification]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSpecification", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SubstanceSpecification]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyDelivery(ctx context.Context, resource r4.SupplyDelivery) (capabilities.UpdateResult[r4.SupplyDelivery], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyDelivery]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SupplyDelivery"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SupplyDelivery]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyDelivery)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyDelivery]{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SupplyDelivery]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyRequest(ctx context.Context, resource r4.SupplyRequest) (capabilities.UpdateResult[r4.SupplyRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SupplyRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.SupplyRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.SupplyRequest)
	if !ok {
		return capabilities.UpdateResult[r4.SupplyRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.SupplyRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTask(ctx context.Context, resource r4.Task) (capabilities.UpdateResult[r4.Task], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.Task]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Task"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.Task]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.Task)
	if !ok {
		return capabilities.UpdateResult[r4.Task]{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.Task]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTerminologyCapabilities(ctx context.Context, resource r4.TerminologyCapabilities) (capabilities.UpdateResult[r4.TerminologyCapabilities], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.TerminologyCapabilities]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TerminologyCapabilities"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.TerminologyCapabilities]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TerminologyCapabilities)
	if !ok {
		return capabilities.UpdateResult[r4.TerminologyCapabilities]{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.TerminologyCapabilities]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestReport(ctx context.Context, resource r4.TestReport) (capabilities.UpdateResult[r4.TestReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.TestReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TestReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.TestReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestReport)
	if !ok {
		return capabilities.UpdateResult[r4.TestReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.TestReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestScript(ctx context.Context, resource r4.TestScript) (capabilities.UpdateResult[r4.TestScript], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.TestScript]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TestScript"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.TestScript]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.TestScript)
	if !ok {
		return capabilities.UpdateResult[r4.TestScript]{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.TestScript]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateValueSet(ctx context.Context, resource r4.ValueSet) (capabilities.UpdateResult[r4.ValueSet], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.ValueSet]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ValueSet"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.ValueSet]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.ValueSet)
	if !ok {
		return capabilities.UpdateResult[r4.ValueSet]{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.ValueSet]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVerificationResult(ctx context.Context, resource r4.VerificationResult) (capabilities.UpdateResult[r4.VerificationResult], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.VerificationResult]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "VerificationResult"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.VerificationResult]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VerificationResult)
	if !ok {
		return capabilities.UpdateResult[r4.VerificationResult]{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.VerificationResult]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVisionPrescription(ctx context.Context, resource r4.VisionPrescription) (capabilities.UpdateResult[r4.VisionPrescription], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4.VisionPrescription]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "VisionPrescription"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4.VisionPrescription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4.VisionPrescription)
	if !ok {
		return capabilities.UpdateResult[r4.VisionPrescription]{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4.VisionPrescription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) SearchCapabilitiesAccount(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Account"], err
}
func (w Concrete) SearchAccount(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Account"}
	}
	v, err := g.Search(ctx, "Account", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesActivityDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ActivityDefinition"], err
}
func (w Concrete) SearchActivityDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Search(ctx, "ActivityDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdverseEvent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AdverseEvent"], err
}
func (w Concrete) SearchAdverseEvent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AdverseEvent"}
	}
	v, err := g.Search(ctx, "AdverseEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAllergyIntolerance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AllergyIntolerance"], err
}
func (w Concrete) SearchAllergyIntolerance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Search(ctx, "AllergyIntolerance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointment(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Appointment"], err
}
func (w Concrete) SearchAppointment(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Appointment"}
	}
	v, err := g.Search(ctx, "Appointment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointmentResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AppointmentResponse"], err
}
func (w Concrete) SearchAppointmentResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Search(ctx, "AppointmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAuditEvent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AuditEvent"], err
}
func (w Concrete) SearchAuditEvent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AuditEvent"}
	}
	v, err := g.Search(ctx, "AuditEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBasic(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Basic"], err
}
func (w Concrete) SearchBasic(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Basic"}
	}
	v, err := g.Search(ctx, "Basic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBinary(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Binary"], err
}
func (w Concrete) SearchBinary(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Binary"}
	}
	v, err := g.Search(ctx, "Binary", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBiologicallyDerivedProduct(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BiologicallyDerivedProduct"], err
}
func (w Concrete) SearchBiologicallyDerivedProduct(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Search(ctx, "BiologicallyDerivedProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBodyStructure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BodyStructure"], err
}
func (w Concrete) SearchBodyStructure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "BodyStructure"}
	}
	v, err := g.Search(ctx, "BodyStructure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBundle(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Bundle"], err
}
func (w Concrete) SearchBundle(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Bundle"}
	}
	v, err := g.Search(ctx, "Bundle", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCapabilityStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CapabilityStatement"], err
}
func (w Concrete) SearchCapabilityStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Search(ctx, "CapabilityStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCarePlan(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CarePlan"], err
}
func (w Concrete) SearchCarePlan(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CarePlan"}
	}
	v, err := g.Search(ctx, "CarePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCareTeam(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CareTeam"], err
}
func (w Concrete) SearchCareTeam(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CareTeam"}
	}
	v, err := g.Search(ctx, "CareTeam", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCatalogEntry(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CatalogEntry"], err
}
func (w Concrete) SearchCatalogEntry(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CatalogEntry"}
	}
	v, err := g.Search(ctx, "CatalogEntry", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItem"], err
}
func (w Concrete) SearchChargeItem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ChargeItem"}
	}
	v, err := g.Search(ctx, "ChargeItem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItemDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItemDefinition"], err
}
func (w Concrete) SearchChargeItemDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Search(ctx, "ChargeItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaim(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Claim"], err
}
func (w Concrete) SearchClaim(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Claim"}
	}
	v, err := g.Search(ctx, "Claim", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaimResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClaimResponse"], err
}
func (w Concrete) SearchClaimResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClaimResponse"}
	}
	v, err := g.Search(ctx, "ClaimResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalImpression(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClinicalImpression"], err
}
func (w Concrete) SearchClinicalImpression(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Search(ctx, "ClinicalImpression", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCodeSystem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CodeSystem"], err
}
func (w Concrete) SearchCodeSystem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CodeSystem"}
	}
	v, err := g.Search(ctx, "CodeSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Communication"], err
}
func (w Concrete) SearchCommunication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Communication"}
	}
	v, err := g.Search(ctx, "Communication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunicationRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CommunicationRequest"], err
}
func (w Concrete) SearchCommunicationRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Search(ctx, "CommunicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCompartmentDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CompartmentDefinition"], err
}
func (w Concrete) SearchCompartmentDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Search(ctx, "CompartmentDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesComposition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Composition"], err
}
func (w Concrete) SearchComposition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Composition"}
	}
	v, err := g.Search(ctx, "Composition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConceptMap(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ConceptMap"], err
}
func (w Concrete) SearchConceptMap(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ConceptMap"}
	}
	v, err := g.Search(ctx, "ConceptMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCondition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Condition"], err
}
func (w Concrete) SearchCondition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Condition"}
	}
	v, err := g.Search(ctx, "Condition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConsent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Consent"], err
}
func (w Concrete) SearchConsent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Consent"}
	}
	v, err := g.Search(ctx, "Consent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesContract(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Contract"], err
}
func (w Concrete) SearchContract(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Contract"}
	}
	v, err := g.Search(ctx, "Contract", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverage(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Coverage"], err
}
func (w Concrete) SearchCoverage(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Coverage"}
	}
	v, err := g.Search(ctx, "Coverage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityRequest"], err
}
func (w Concrete) SearchCoverageEligibilityRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Search(ctx, "CoverageEligibilityRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityResponse"], err
}
func (w Concrete) SearchCoverageEligibilityResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Search(ctx, "CoverageEligibilityResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDetectedIssue(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DetectedIssue"], err
}
func (w Concrete) SearchDetectedIssue(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DetectedIssue"}
	}
	v, err := g.Search(ctx, "DetectedIssue", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDevice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Device"], err
}
func (w Concrete) SearchDevice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Device"}
	}
	v, err := g.Search(ctx, "Device", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceDefinition"], err
}
func (w Concrete) SearchDeviceDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Search(ctx, "DeviceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceMetric(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceMetric"], err
}
func (w Concrete) SearchDeviceMetric(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceMetric"}
	}
	v, err := g.Search(ctx, "DeviceMetric", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceRequest"], err
}
func (w Concrete) SearchDeviceRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceRequest"}
	}
	v, err := g.Search(ctx, "DeviceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceUseStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceUseStatement"], err
}
func (w Concrete) SearchDeviceUseStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceUseStatement"}
	}
	v, err := g.Search(ctx, "DeviceUseStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDiagnosticReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DiagnosticReport"], err
}
func (w Concrete) SearchDiagnosticReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Search(ctx, "DiagnosticReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentManifest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DocumentManifest"], err
}
func (w Concrete) SearchDocumentManifest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DocumentManifest"}
	}
	v, err := g.Search(ctx, "DocumentManifest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentReference(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DocumentReference"], err
}
func (w Concrete) SearchDocumentReference(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DocumentReference"}
	}
	v, err := g.Search(ctx, "DocumentReference", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEffectEvidenceSynthesis(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EffectEvidenceSynthesis"], err
}
func (w Concrete) SearchEffectEvidenceSynthesis(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EffectEvidenceSynthesis"}
	}
	v, err := g.Search(ctx, "EffectEvidenceSynthesis", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEncounter(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Encounter"], err
}
func (w Concrete) SearchEncounter(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Encounter"}
	}
	v, err := g.Search(ctx, "Encounter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEndpoint(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Endpoint"], err
}
func (w Concrete) SearchEndpoint(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Endpoint"}
	}
	v, err := g.Search(ctx, "Endpoint", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentRequest"], err
}
func (w Concrete) SearchEnrollmentRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Search(ctx, "EnrollmentRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentResponse"], err
}
func (w Concrete) SearchEnrollmentResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Search(ctx, "EnrollmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEpisodeOfCare(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EpisodeOfCare"], err
}
func (w Concrete) SearchEpisodeOfCare(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Search(ctx, "EpisodeOfCare", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEventDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EventDefinition"], err
}
func (w Concrete) SearchEventDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EventDefinition"}
	}
	v, err := g.Search(ctx, "EventDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidence(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Evidence"], err
}
func (w Concrete) SearchEvidence(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Evidence"}
	}
	v, err := g.Search(ctx, "Evidence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceVariable(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EvidenceVariable"], err
}
func (w Concrete) SearchEvidenceVariable(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Search(ctx, "EvidenceVariable", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExampleScenario(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExampleScenario"], err
}
func (w Concrete) SearchExampleScenario(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ExampleScenario"}
	}
	v, err := g.Search(ctx, "ExampleScenario", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExplanationOfBenefit(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExplanationOfBenefit"], err
}
func (w Concrete) SearchExplanationOfBenefit(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Search(ctx, "ExplanationOfBenefit", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFamilyMemberHistory(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["FamilyMemberHistory"], err
}
func (w Concrete) SearchFamilyMemberHistory(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Search(ctx, "FamilyMemberHistory", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFlag(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Flag"], err
}
func (w Concrete) SearchFlag(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Flag"}
	}
	v, err := g.Search(ctx, "Flag", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGoal(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Goal"], err
}
func (w Concrete) SearchGoal(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Goal"}
	}
	v, err := g.Search(ctx, "Goal", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGraphDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GraphDefinition"], err
}
func (w Concrete) SearchGraphDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "GraphDefinition"}
	}
	v, err := g.Search(ctx, "GraphDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGroup(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Group"], err
}
func (w Concrete) SearchGroup(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Group"}
	}
	v, err := g.Search(ctx, "Group", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGuidanceResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GuidanceResponse"], err
}
func (w Concrete) SearchGuidanceResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Search(ctx, "GuidanceResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesHealthcareService(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["HealthcareService"], err
}
func (w Concrete) SearchHealthcareService(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "HealthcareService"}
	}
	v, err := g.Search(ctx, "HealthcareService", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImagingStudy(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImagingStudy"], err
}
func (w Concrete) SearchImagingStudy(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImagingStudy"}
	}
	v, err := g.Search(ctx, "ImagingStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Immunization"], err
}
func (w Concrete) SearchImmunization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Immunization"}
	}
	v, err := g.Search(ctx, "Immunization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationEvaluation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationEvaluation"], err
}
func (w Concrete) SearchImmunizationEvaluation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Search(ctx, "ImmunizationEvaluation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationRecommendation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationRecommendation"], err
}
func (w Concrete) SearchImmunizationRecommendation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Search(ctx, "ImmunizationRecommendation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImplementationGuide(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImplementationGuide"], err
}
func (w Concrete) SearchImplementationGuide(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Search(ctx, "ImplementationGuide", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInsurancePlan(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["InsurancePlan"], err
}
func (w Concrete) SearchInsurancePlan(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "InsurancePlan"}
	}
	v, err := g.Search(ctx, "InsurancePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInvoice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Invoice"], err
}
func (w Concrete) SearchInvoice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Invoice"}
	}
	v, err := g.Search(ctx, "Invoice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLibrary(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Library"], err
}
func (w Concrete) SearchLibrary(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Library"}
	}
	v, err := g.Search(ctx, "Library", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLinkage(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Linkage"], err
}
func (w Concrete) SearchLinkage(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Linkage"}
	}
	v, err := g.Search(ctx, "Linkage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesList(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["List"], err
}
func (w Concrete) SearchList(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "List"}
	}
	v, err := g.Search(ctx, "List", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLocation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Location"], err
}
func (w Concrete) SearchLocation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Location"}
	}
	v, err := g.Search(ctx, "Location", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Measure"], err
}
func (w Concrete) SearchMeasure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Measure"}
	}
	v, err := g.Search(ctx, "Measure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasureReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MeasureReport"], err
}
func (w Concrete) SearchMeasureReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MeasureReport"}
	}
	v, err := g.Search(ctx, "MeasureReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedia(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Media"], err
}
func (w Concrete) SearchMedia(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Media"}
	}
	v, err := g.Search(ctx, "Media", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Medication"], err
}
func (w Concrete) SearchMedication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Medication"}
	}
	v, err := g.Search(ctx, "Medication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationAdministration(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationAdministration"], err
}
func (w Concrete) SearchMedicationAdministration(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Search(ctx, "MedicationAdministration", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationDispense(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationDispense"], err
}
func (w Concrete) SearchMedicationDispense(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationDispense"}
	}
	v, err := g.Search(ctx, "MedicationDispense", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationKnowledge(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationKnowledge"], err
}
func (w Concrete) SearchMedicationKnowledge(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Search(ctx, "MedicationKnowledge", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationRequest"], err
}
func (w Concrete) SearchMedicationRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationRequest"}
	}
	v, err := g.Search(ctx, "MedicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationStatement"], err
}
func (w Concrete) SearchMedicationStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationStatement"}
	}
	v, err := g.Search(ctx, "MedicationStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProduct(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProduct"], err
}
func (w Concrete) SearchMedicinalProduct(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProduct"}
	}
	v, err := g.Search(ctx, "MedicinalProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductAuthorization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductAuthorization"], err
}
func (w Concrete) SearchMedicinalProductAuthorization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductAuthorization"}
	}
	v, err := g.Search(ctx, "MedicinalProductAuthorization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductContraindication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductContraindication"], err
}
func (w Concrete) SearchMedicinalProductContraindication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductContraindication"}
	}
	v, err := g.Search(ctx, "MedicinalProductContraindication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductIndication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductIndication"], err
}
func (w Concrete) SearchMedicinalProductIndication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductIndication"}
	}
	v, err := g.Search(ctx, "MedicinalProductIndication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductIngredient(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductIngredient"], err
}
func (w Concrete) SearchMedicinalProductIngredient(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductIngredient"}
	}
	v, err := g.Search(ctx, "MedicinalProductIngredient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductInteraction(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductInteraction"], err
}
func (w Concrete) SearchMedicinalProductInteraction(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductInteraction"}
	}
	v, err := g.Search(ctx, "MedicinalProductInteraction", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductManufactured(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductManufactured"], err
}
func (w Concrete) SearchMedicinalProductManufactured(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductManufactured"}
	}
	v, err := g.Search(ctx, "MedicinalProductManufactured", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductPackaged(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductPackaged"], err
}
func (w Concrete) SearchMedicinalProductPackaged(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductPackaged"}
	}
	v, err := g.Search(ctx, "MedicinalProductPackaged", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductPharmaceutical(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductPharmaceutical"], err
}
func (w Concrete) SearchMedicinalProductPharmaceutical(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductPharmaceutical"}
	}
	v, err := g.Search(ctx, "MedicinalProductPharmaceutical", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductUndesirableEffect(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductUndesirableEffect"], err
}
func (w Concrete) SearchMedicinalProductUndesirableEffect(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductUndesirableEffect"}
	}
	v, err := g.Search(ctx, "MedicinalProductUndesirableEffect", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageDefinition"], err
}
func (w Concrete) SearchMessageDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MessageDefinition"}
	}
	v, err := g.Search(ctx, "MessageDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageHeader(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageHeader"], err
}
func (w Concrete) SearchMessageHeader(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MessageHeader"}
	}
	v, err := g.Search(ctx, "MessageHeader", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMolecularSequence(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MolecularSequence"], err
}
func (w Concrete) SearchMolecularSequence(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MolecularSequence"}
	}
	v, err := g.Search(ctx, "MolecularSequence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNamingSystem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NamingSystem"], err
}
func (w Concrete) SearchNamingSystem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NamingSystem"}
	}
	v, err := g.Search(ctx, "NamingSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionOrder(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NutritionOrder"], err
}
func (w Concrete) SearchNutritionOrder(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NutritionOrder"}
	}
	v, err := g.Search(ctx, "NutritionOrder", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Observation"], err
}
func (w Concrete) SearchObservation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Observation"}
	}
	v, err := g.Search(ctx, "Observation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservationDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ObservationDefinition"], err
}
func (w Concrete) SearchObservationDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Search(ctx, "ObservationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationDefinition"], err
}
func (w Concrete) SearchOperationDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OperationDefinition"}
	}
	v, err := g.Search(ctx, "OperationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationOutcome(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationOutcome"], err
}
func (w Concrete) SearchOperationOutcome(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OperationOutcome"}
	}
	v, err := g.Search(ctx, "OperationOutcome", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Organization"], err
}
func (w Concrete) SearchOrganization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Organization"}
	}
	v, err := g.Search(ctx, "Organization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganizationAffiliation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OrganizationAffiliation"], err
}
func (w Concrete) SearchOrganizationAffiliation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Search(ctx, "OrganizationAffiliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesParameters(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Parameters"], err
}
func (w Concrete) SearchParameters(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Parameters"}
	}
	v, err := g.Search(ctx, "Parameters", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPatient(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Patient"], err
}
func (w Concrete) SearchPatient(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Patient"}
	}
	v, err := g.Search(ctx, "Patient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentNotice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentNotice"], err
}
func (w Concrete) SearchPaymentNotice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PaymentNotice"}
	}
	v, err := g.Search(ctx, "PaymentNotice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentReconciliation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentReconciliation"], err
}
func (w Concrete) SearchPaymentReconciliation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Search(ctx, "PaymentReconciliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPerson(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Person"], err
}
func (w Concrete) SearchPerson(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Person"}
	}
	v, err := g.Search(ctx, "Person", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPlanDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PlanDefinition"], err
}
func (w Concrete) SearchPlanDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PlanDefinition"}
	}
	v, err := g.Search(ctx, "PlanDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitioner(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Practitioner"], err
}
func (w Concrete) SearchPractitioner(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Practitioner"}
	}
	v, err := g.Search(ctx, "Practitioner", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitionerRole(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PractitionerRole"], err
}
func (w Concrete) SearchPractitionerRole(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PractitionerRole"}
	}
	v, err := g.Search(ctx, "PractitionerRole", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProcedure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Procedure"], err
}
func (w Concrete) SearchProcedure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Procedure"}
	}
	v, err := g.Search(ctx, "Procedure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProvenance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Provenance"], err
}
func (w Concrete) SearchProvenance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Provenance"}
	}
	v, err := g.Search(ctx, "Provenance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaire(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Questionnaire"], err
}
func (w Concrete) SearchQuestionnaire(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Questionnaire"}
	}
	v, err := g.Search(ctx, "Questionnaire", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaireResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["QuestionnaireResponse"], err
}
func (w Concrete) SearchQuestionnaireResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Search(ctx, "QuestionnaireResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRelatedPerson(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RelatedPerson"], err
}
func (w Concrete) SearchRelatedPerson(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RelatedPerson"}
	}
	v, err := g.Search(ctx, "RelatedPerson", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRequestGroup(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RequestGroup"], err
}
func (w Concrete) SearchRequestGroup(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RequestGroup"}
	}
	v, err := g.Search(ctx, "RequestGroup", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchDefinition"], err
}
func (w Concrete) SearchResearchDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchDefinition"}
	}
	v, err := g.Search(ctx, "ResearchDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchElementDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchElementDefinition"], err
}
func (w Concrete) SearchResearchElementDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchElementDefinition"}
	}
	v, err := g.Search(ctx, "ResearchElementDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchStudy(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchStudy"], err
}
func (w Concrete) SearchResearchStudy(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchStudy"}
	}
	v, err := g.Search(ctx, "ResearchStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchSubject(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchSubject"], err
}
func (w Concrete) SearchResearchSubject(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchSubject"}
	}
	v, err := g.Search(ctx, "ResearchSubject", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRiskAssessment(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RiskAssessment"], err
}
func (w Concrete) SearchRiskAssessment(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RiskAssessment"}
	}
	v, err := g.Search(ctx, "RiskAssessment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRiskEvidenceSynthesis(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RiskEvidenceSynthesis"], err
}
func (w Concrete) SearchRiskEvidenceSynthesis(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RiskEvidenceSynthesis"}
	}
	v, err := g.Search(ctx, "RiskEvidenceSynthesis", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSchedule(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Schedule"], err
}
func (w Concrete) SearchSchedule(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Schedule"}
	}
	v, err := g.Search(ctx, "Schedule", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSearchParameter(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SearchParameter"], err
}
func (w Concrete) SearchSearchParameter(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SearchParameter"}
	}
	v, err := g.Search(ctx, "SearchParameter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesServiceRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ServiceRequest"], err
}
func (w Concrete) SearchServiceRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ServiceRequest"}
	}
	v, err := g.Search(ctx, "ServiceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSlot(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Slot"], err
}
func (w Concrete) SearchSlot(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Slot"}
	}
	v, err := g.Search(ctx, "Slot", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimen(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Specimen"], err
}
func (w Concrete) SearchSpecimen(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Specimen"}
	}
	v, err := g.Search(ctx, "Specimen", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimenDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SpecimenDefinition"], err
}
func (w Concrete) SearchSpecimenDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Search(ctx, "SpecimenDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureDefinition"], err
}
func (w Concrete) SearchStructureDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "StructureDefinition"}
	}
	v, err := g.Search(ctx, "StructureDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureMap(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureMap"], err
}
func (w Concrete) SearchStructureMap(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "StructureMap"}
	}
	v, err := g.Search(ctx, "StructureMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscription(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Subscription"], err
}
func (w Concrete) SearchSubscription(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Subscription"}
	}
	v, err := g.Search(ctx, "Subscription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Substance"], err
}
func (w Concrete) SearchSubstance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Substance"}
	}
	v, err := g.Search(ctx, "Substance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceNucleicAcid(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceNucleicAcid"], err
}
func (w Concrete) SearchSubstanceNucleicAcid(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceNucleicAcid"}
	}
	v, err := g.Search(ctx, "SubstanceNucleicAcid", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstancePolymer(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstancePolymer"], err
}
func (w Concrete) SearchSubstancePolymer(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstancePolymer"}
	}
	v, err := g.Search(ctx, "SubstancePolymer", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceProtein(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceProtein"], err
}
func (w Concrete) SearchSubstanceProtein(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceProtein"}
	}
	v, err := g.Search(ctx, "SubstanceProtein", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceReferenceInformation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceReferenceInformation"], err
}
func (w Concrete) SearchSubstanceReferenceInformation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceReferenceInformation"}
	}
	v, err := g.Search(ctx, "SubstanceReferenceInformation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceSourceMaterial(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceSourceMaterial"], err
}
func (w Concrete) SearchSubstanceSourceMaterial(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceSourceMaterial"}
	}
	v, err := g.Search(ctx, "SubstanceSourceMaterial", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceSpecification(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceSpecification"], err
}
func (w Concrete) SearchSubstanceSpecification(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceSpecification"}
	}
	v, err := g.Search(ctx, "SubstanceSpecification", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyDelivery(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyDelivery"], err
}
func (w Concrete) SearchSupplyDelivery(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Search(ctx, "SupplyDelivery", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyRequest"], err
}
func (w Concrete) SearchSupplyRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SupplyRequest"}
	}
	v, err := g.Search(ctx, "SupplyRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTask(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Task"], err
}
func (w Concrete) SearchTask(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Task"}
	}
	v, err := g.Search(ctx, "Task", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTerminologyCapabilities(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TerminologyCapabilities"], err
}
func (w Concrete) SearchTerminologyCapabilities(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Search(ctx, "TerminologyCapabilities", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestReport"], err
}
func (w Concrete) SearchTestReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TestReport"}
	}
	v, err := g.Search(ctx, "TestReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestScript(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestScript"], err
}
func (w Concrete) SearchTestScript(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TestScript"}
	}
	v, err := g.Search(ctx, "TestScript", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesValueSet(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ValueSet"], err
}
func (w Concrete) SearchValueSet(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ValueSet"}
	}
	v, err := g.Search(ctx, "ValueSet", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVerificationResult(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VerificationResult"], err
}
func (w Concrete) SearchVerificationResult(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "VerificationResult"}
	}
	v, err := g.Search(ctx, "VerificationResult", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVisionPrescription(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VisionPrescription"], err
}
func (w Concrete) SearchVisionPrescription(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "VisionPrescription"}
	}
	v, err := g.Search(ctx, "VisionPrescription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
