// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR5

import (
	"context"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	r5 "github.com/DAMEDIC/fhir-toolbox-go/model/gen/r5"
)

type Concrete struct {
	Generic capabilities.GenericCapabilities
}

func (w Concrete) CreateAccount(ctx context.Context, resource r5.Account) (r5.Account, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Account{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Account"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Account{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Account)
	if !ok {
		return r5.Account{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateActivityDefinition(ctx context.Context, resource r5.ActivityDefinition) (r5.ActivityDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ActivityDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ActivityDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ActivityDefinition)
	if !ok {
		return r5.ActivityDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateActorDefinition(ctx context.Context, resource r5.ActorDefinition) (r5.ActorDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ActorDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ActorDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ActorDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ActorDefinition)
	if !ok {
		return r5.ActorDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActorDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAdministrableProductDefinition(ctx context.Context, resource r5.AdministrableProductDefinition) (r5.AdministrableProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.AdministrableProductDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AdministrableProductDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.AdministrableProductDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AdministrableProductDefinition)
	if !ok {
		return r5.AdministrableProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "AdministrableProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAdverseEvent(ctx context.Context, resource r5.AdverseEvent) (r5.AdverseEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.AdverseEvent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AdverseEvent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.AdverseEvent{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AdverseEvent)
	if !ok {
		return r5.AdverseEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAllergyIntolerance(ctx context.Context, resource r5.AllergyIntolerance) (r5.AllergyIntolerance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.AllergyIntolerance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.AllergyIntolerance{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AllergyIntolerance)
	if !ok {
		return r5.AllergyIntolerance{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAppointment(ctx context.Context, resource r5.Appointment) (r5.Appointment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Appointment{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Appointment"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Appointment{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Appointment)
	if !ok {
		return r5.Appointment{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAppointmentResponse(ctx context.Context, resource r5.AppointmentResponse) (r5.AppointmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.AppointmentResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.AppointmentResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AppointmentResponse)
	if !ok {
		return r5.AppointmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateArtifactAssessment(ctx context.Context, resource r5.ArtifactAssessment) (r5.ArtifactAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ArtifactAssessment{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ArtifactAssessment"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ArtifactAssessment{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ArtifactAssessment)
	if !ok {
		return r5.ArtifactAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "ArtifactAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAuditEvent(ctx context.Context, resource r5.AuditEvent) (r5.AuditEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.AuditEvent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AuditEvent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.AuditEvent{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AuditEvent)
	if !ok {
		return r5.AuditEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBasic(ctx context.Context, resource r5.Basic) (r5.Basic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Basic{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Basic"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Basic{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Basic)
	if !ok {
		return r5.Basic{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBinary(ctx context.Context, resource r5.Binary) (r5.Binary, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Binary{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Binary"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Binary{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Binary)
	if !ok {
		return r5.Binary{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBiologicallyDerivedProduct(ctx context.Context, resource r5.BiologicallyDerivedProduct) (r5.BiologicallyDerivedProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.BiologicallyDerivedProduct{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BiologicallyDerivedProduct)
	if !ok {
		return r5.BiologicallyDerivedProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBiologicallyDerivedProductDispense(ctx context.Context, resource r5.BiologicallyDerivedProductDispense) (r5.BiologicallyDerivedProductDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.BiologicallyDerivedProductDispense{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "BiologicallyDerivedProductDispense"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.BiologicallyDerivedProductDispense{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BiologicallyDerivedProductDispense)
	if !ok {
		return r5.BiologicallyDerivedProductDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProductDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBodyStructure(ctx context.Context, resource r5.BodyStructure) (r5.BodyStructure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.BodyStructure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "BodyStructure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.BodyStructure{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BodyStructure)
	if !ok {
		return r5.BodyStructure{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBundle(ctx context.Context, resource r5.Bundle) (r5.Bundle, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Bundle{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Bundle"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Bundle{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Bundle)
	if !ok {
		return r5.Bundle{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCapabilityStatement(ctx context.Context, resource r5.CapabilityStatement) (r5.CapabilityStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CapabilityStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CapabilityStatement{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CapabilityStatement)
	if !ok {
		return r5.CapabilityStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCarePlan(ctx context.Context, resource r5.CarePlan) (r5.CarePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CarePlan{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CarePlan"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CarePlan{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CarePlan)
	if !ok {
		return r5.CarePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCareTeam(ctx context.Context, resource r5.CareTeam) (r5.CareTeam, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CareTeam{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CareTeam"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CareTeam{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CareTeam)
	if !ok {
		return r5.CareTeam{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateChargeItem(ctx context.Context, resource r5.ChargeItem) (r5.ChargeItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ChargeItem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ChargeItem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ChargeItem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ChargeItem)
	if !ok {
		return r5.ChargeItem{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateChargeItemDefinition(ctx context.Context, resource r5.ChargeItemDefinition) (r5.ChargeItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ChargeItemDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ChargeItemDefinition)
	if !ok {
		return r5.ChargeItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCitation(ctx context.Context, resource r5.Citation) (r5.Citation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Citation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Citation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Citation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Citation)
	if !ok {
		return r5.Citation{}, capabilities.UnexpectedResourceError{ExpectedType: "Citation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClaim(ctx context.Context, resource r5.Claim) (r5.Claim, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Claim{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Claim"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Claim{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Claim)
	if !ok {
		return r5.Claim{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClaimResponse(ctx context.Context, resource r5.ClaimResponse) (r5.ClaimResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ClaimResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClaimResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ClaimResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClaimResponse)
	if !ok {
		return r5.ClaimResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClinicalImpression(ctx context.Context, resource r5.ClinicalImpression) (r5.ClinicalImpression, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ClinicalImpression{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ClinicalImpression{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClinicalImpression)
	if !ok {
		return r5.ClinicalImpression{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClinicalUseDefinition(ctx context.Context, resource r5.ClinicalUseDefinition) (r5.ClinicalUseDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ClinicalUseDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClinicalUseDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ClinicalUseDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClinicalUseDefinition)
	if !ok {
		return r5.ClinicalUseDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalUseDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCodeSystem(ctx context.Context, resource r5.CodeSystem) (r5.CodeSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CodeSystem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CodeSystem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CodeSystem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CodeSystem)
	if !ok {
		return r5.CodeSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCommunication(ctx context.Context, resource r5.Communication) (r5.Communication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Communication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Communication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Communication{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Communication)
	if !ok {
		return r5.Communication{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCommunicationRequest(ctx context.Context, resource r5.CommunicationRequest) (r5.CommunicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CommunicationRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CommunicationRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CommunicationRequest)
	if !ok {
		return r5.CommunicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCompartmentDefinition(ctx context.Context, resource r5.CompartmentDefinition) (r5.CompartmentDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CompartmentDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CompartmentDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CompartmentDefinition)
	if !ok {
		return r5.CompartmentDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateComposition(ctx context.Context, resource r5.Composition) (r5.Composition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Composition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Composition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Composition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Composition)
	if !ok {
		return r5.Composition{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateConceptMap(ctx context.Context, resource r5.ConceptMap) (r5.ConceptMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ConceptMap{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ConceptMap"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ConceptMap{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ConceptMap)
	if !ok {
		return r5.ConceptMap{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCondition(ctx context.Context, resource r5.Condition) (r5.Condition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Condition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Condition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Condition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Condition)
	if !ok {
		return r5.Condition{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateConditionDefinition(ctx context.Context, resource r5.ConditionDefinition) (r5.ConditionDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ConditionDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ConditionDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ConditionDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ConditionDefinition)
	if !ok {
		return r5.ConditionDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ConditionDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateConsent(ctx context.Context, resource r5.Consent) (r5.Consent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Consent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Consent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Consent{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Consent)
	if !ok {
		return r5.Consent{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateContract(ctx context.Context, resource r5.Contract) (r5.Contract, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Contract{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Contract"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Contract{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Contract)
	if !ok {
		return r5.Contract{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverage(ctx context.Context, resource r5.Coverage) (r5.Coverage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Coverage{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Coverage"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Coverage{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Coverage)
	if !ok {
		return r5.Coverage{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityRequest(ctx context.Context, resource r5.CoverageEligibilityRequest) (r5.CoverageEligibilityRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CoverageEligibilityRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CoverageEligibilityRequest)
	if !ok {
		return r5.CoverageEligibilityRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityResponse(ctx context.Context, resource r5.CoverageEligibilityResponse) (r5.CoverageEligibilityResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.CoverageEligibilityResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CoverageEligibilityResponse)
	if !ok {
		return r5.CoverageEligibilityResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDetectedIssue(ctx context.Context, resource r5.DetectedIssue) (r5.DetectedIssue, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DetectedIssue{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DetectedIssue"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DetectedIssue{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DetectedIssue)
	if !ok {
		return r5.DetectedIssue{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDevice(ctx context.Context, resource r5.Device) (r5.Device, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Device{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Device"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Device{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Device)
	if !ok {
		return r5.Device{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceAssociation(ctx context.Context, resource r5.DeviceAssociation) (r5.DeviceAssociation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DeviceAssociation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceAssociation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DeviceAssociation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceAssociation)
	if !ok {
		return r5.DeviceAssociation{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceAssociation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceDefinition(ctx context.Context, resource r5.DeviceDefinition) (r5.DeviceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DeviceDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DeviceDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceDefinition)
	if !ok {
		return r5.DeviceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceDispense(ctx context.Context, resource r5.DeviceDispense) (r5.DeviceDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DeviceDispense{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceDispense"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DeviceDispense{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceDispense)
	if !ok {
		return r5.DeviceDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceMetric(ctx context.Context, resource r5.DeviceMetric) (r5.DeviceMetric, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DeviceMetric{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceMetric"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DeviceMetric{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceMetric)
	if !ok {
		return r5.DeviceMetric{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceRequest(ctx context.Context, resource r5.DeviceRequest) (r5.DeviceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DeviceRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DeviceRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceRequest)
	if !ok {
		return r5.DeviceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceUsage(ctx context.Context, resource r5.DeviceUsage) (r5.DeviceUsage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DeviceUsage{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceUsage"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DeviceUsage{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceUsage)
	if !ok {
		return r5.DeviceUsage{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUsage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDiagnosticReport(ctx context.Context, resource r5.DiagnosticReport) (r5.DiagnosticReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DiagnosticReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DiagnosticReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DiagnosticReport)
	if !ok {
		return r5.DiagnosticReport{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDocumentReference(ctx context.Context, resource r5.DocumentReference) (r5.DocumentReference, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.DocumentReference{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DocumentReference"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.DocumentReference{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DocumentReference)
	if !ok {
		return r5.DocumentReference{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEncounter(ctx context.Context, resource r5.Encounter) (r5.Encounter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Encounter{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Encounter"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Encounter{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Encounter)
	if !ok {
		return r5.Encounter{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEncounterHistory(ctx context.Context, resource r5.EncounterHistory) (r5.EncounterHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.EncounterHistory{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EncounterHistory"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.EncounterHistory{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EncounterHistory)
	if !ok {
		return r5.EncounterHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "EncounterHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEndpoint(ctx context.Context, resource r5.Endpoint) (r5.Endpoint, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Endpoint{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Endpoint"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Endpoint{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Endpoint)
	if !ok {
		return r5.Endpoint{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentRequest(ctx context.Context, resource r5.EnrollmentRequest) (r5.EnrollmentRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.EnrollmentRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.EnrollmentRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EnrollmentRequest)
	if !ok {
		return r5.EnrollmentRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentResponse(ctx context.Context, resource r5.EnrollmentResponse) (r5.EnrollmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.EnrollmentResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.EnrollmentResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EnrollmentResponse)
	if !ok {
		return r5.EnrollmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEpisodeOfCare(ctx context.Context, resource r5.EpisodeOfCare) (r5.EpisodeOfCare, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.EpisodeOfCare{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.EpisodeOfCare{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EpisodeOfCare)
	if !ok {
		return r5.EpisodeOfCare{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEventDefinition(ctx context.Context, resource r5.EventDefinition) (r5.EventDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.EventDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EventDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.EventDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EventDefinition)
	if !ok {
		return r5.EventDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidence(ctx context.Context, resource r5.Evidence) (r5.Evidence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Evidence{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Evidence"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Evidence{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Evidence)
	if !ok {
		return r5.Evidence{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceReport(ctx context.Context, resource r5.EvidenceReport) (r5.EvidenceReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.EvidenceReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EvidenceReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.EvidenceReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EvidenceReport)
	if !ok {
		return r5.EvidenceReport{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceVariable(ctx context.Context, resource r5.EvidenceVariable) (r5.EvidenceVariable, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.EvidenceVariable{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.EvidenceVariable{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EvidenceVariable)
	if !ok {
		return r5.EvidenceVariable{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateExampleScenario(ctx context.Context, resource r5.ExampleScenario) (r5.ExampleScenario, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ExampleScenario{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ExampleScenario"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ExampleScenario{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ExampleScenario)
	if !ok {
		return r5.ExampleScenario{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateExplanationOfBenefit(ctx context.Context, resource r5.ExplanationOfBenefit) (r5.ExplanationOfBenefit, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ExplanationOfBenefit{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ExplanationOfBenefit)
	if !ok {
		return r5.ExplanationOfBenefit{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateFamilyMemberHistory(ctx context.Context, resource r5.FamilyMemberHistory) (r5.FamilyMemberHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.FamilyMemberHistory{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.FamilyMemberHistory)
	if !ok {
		return r5.FamilyMemberHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateFlag(ctx context.Context, resource r5.Flag) (r5.Flag, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Flag{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Flag"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Flag{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Flag)
	if !ok {
		return r5.Flag{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateFormularyItem(ctx context.Context, resource r5.FormularyItem) (r5.FormularyItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.FormularyItem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "FormularyItem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.FormularyItem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.FormularyItem)
	if !ok {
		return r5.FormularyItem{}, capabilities.UnexpectedResourceError{ExpectedType: "FormularyItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGenomicStudy(ctx context.Context, resource r5.GenomicStudy) (r5.GenomicStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.GenomicStudy{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "GenomicStudy"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.GenomicStudy{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GenomicStudy)
	if !ok {
		return r5.GenomicStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "GenomicStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGoal(ctx context.Context, resource r5.Goal) (r5.Goal, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Goal{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Goal"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Goal{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Goal)
	if !ok {
		return r5.Goal{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGraphDefinition(ctx context.Context, resource r5.GraphDefinition) (r5.GraphDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.GraphDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "GraphDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.GraphDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GraphDefinition)
	if !ok {
		return r5.GraphDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGroup(ctx context.Context, resource r5.Group) (r5.Group, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Group{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Group"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Group{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Group)
	if !ok {
		return r5.Group{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGuidanceResponse(ctx context.Context, resource r5.GuidanceResponse) (r5.GuidanceResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.GuidanceResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.GuidanceResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GuidanceResponse)
	if !ok {
		return r5.GuidanceResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateHealthcareService(ctx context.Context, resource r5.HealthcareService) (r5.HealthcareService, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.HealthcareService{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "HealthcareService"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.HealthcareService{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.HealthcareService)
	if !ok {
		return r5.HealthcareService{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImagingSelection(ctx context.Context, resource r5.ImagingSelection) (r5.ImagingSelection, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ImagingSelection{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImagingSelection"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ImagingSelection{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImagingSelection)
	if !ok {
		return r5.ImagingSelection{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingSelection", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImagingStudy(ctx context.Context, resource r5.ImagingStudy) (r5.ImagingStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ImagingStudy{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImagingStudy"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ImagingStudy{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImagingStudy)
	if !ok {
		return r5.ImagingStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunization(ctx context.Context, resource r5.Immunization) (r5.Immunization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Immunization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Immunization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Immunization{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Immunization)
	if !ok {
		return r5.Immunization{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationEvaluation(ctx context.Context, resource r5.ImmunizationEvaluation) (r5.ImmunizationEvaluation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ImmunizationEvaluation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImmunizationEvaluation)
	if !ok {
		return r5.ImmunizationEvaluation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationRecommendation(ctx context.Context, resource r5.ImmunizationRecommendation) (r5.ImmunizationRecommendation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ImmunizationRecommendation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImmunizationRecommendation)
	if !ok {
		return r5.ImmunizationRecommendation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImplementationGuide(ctx context.Context, resource r5.ImplementationGuide) (r5.ImplementationGuide, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ImplementationGuide{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ImplementationGuide{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImplementationGuide)
	if !ok {
		return r5.ImplementationGuide{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateIngredient(ctx context.Context, resource r5.Ingredient) (r5.Ingredient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Ingredient{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Ingredient"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Ingredient{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Ingredient)
	if !ok {
		return r5.Ingredient{}, capabilities.UnexpectedResourceError{ExpectedType: "Ingredient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInsurancePlan(ctx context.Context, resource r5.InsurancePlan) (r5.InsurancePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.InsurancePlan{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "InsurancePlan"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.InsurancePlan{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InsurancePlan)
	if !ok {
		return r5.InsurancePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInventoryItem(ctx context.Context, resource r5.InventoryItem) (r5.InventoryItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.InventoryItem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "InventoryItem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.InventoryItem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InventoryItem)
	if !ok {
		return r5.InventoryItem{}, capabilities.UnexpectedResourceError{ExpectedType: "InventoryItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInventoryReport(ctx context.Context, resource r5.InventoryReport) (r5.InventoryReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.InventoryReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "InventoryReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.InventoryReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InventoryReport)
	if !ok {
		return r5.InventoryReport{}, capabilities.UnexpectedResourceError{ExpectedType: "InventoryReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInvoice(ctx context.Context, resource r5.Invoice) (r5.Invoice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Invoice{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Invoice"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Invoice{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Invoice)
	if !ok {
		return r5.Invoice{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLibrary(ctx context.Context, resource r5.Library) (r5.Library, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Library{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Library"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Library{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Library)
	if !ok {
		return r5.Library{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLinkage(ctx context.Context, resource r5.Linkage) (r5.Linkage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Linkage{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Linkage"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Linkage{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Linkage)
	if !ok {
		return r5.Linkage{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateList(ctx context.Context, resource r5.List) (r5.List, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.List{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "List"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.List{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.List)
	if !ok {
		return r5.List{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLocation(ctx context.Context, resource r5.Location) (r5.Location, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Location{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Location"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Location{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Location)
	if !ok {
		return r5.Location{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateManufacturedItemDefinition(ctx context.Context, resource r5.ManufacturedItemDefinition) (r5.ManufacturedItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ManufacturedItemDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ManufacturedItemDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ManufacturedItemDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ManufacturedItemDefinition)
	if !ok {
		return r5.ManufacturedItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ManufacturedItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMeasure(ctx context.Context, resource r5.Measure) (r5.Measure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Measure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Measure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Measure{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Measure)
	if !ok {
		return r5.Measure{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMeasureReport(ctx context.Context, resource r5.MeasureReport) (r5.MeasureReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MeasureReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MeasureReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MeasureReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MeasureReport)
	if !ok {
		return r5.MeasureReport{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedication(ctx context.Context, resource r5.Medication) (r5.Medication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Medication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Medication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Medication{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Medication)
	if !ok {
		return r5.Medication{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationAdministration(ctx context.Context, resource r5.MedicationAdministration) (r5.MedicationAdministration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MedicationAdministration{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MedicationAdministration{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationAdministration)
	if !ok {
		return r5.MedicationAdministration{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationDispense(ctx context.Context, resource r5.MedicationDispense) (r5.MedicationDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MedicationDispense{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationDispense"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MedicationDispense{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationDispense)
	if !ok {
		return r5.MedicationDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationKnowledge(ctx context.Context, resource r5.MedicationKnowledge) (r5.MedicationKnowledge, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MedicationKnowledge{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MedicationKnowledge{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationKnowledge)
	if !ok {
		return r5.MedicationKnowledge{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationRequest(ctx context.Context, resource r5.MedicationRequest) (r5.MedicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MedicationRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MedicationRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationRequest)
	if !ok {
		return r5.MedicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationStatement(ctx context.Context, resource r5.MedicationStatement) (r5.MedicationStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MedicationStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MedicationStatement{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationStatement)
	if !ok {
		return r5.MedicationStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductDefinition(ctx context.Context, resource r5.MedicinalProductDefinition) (r5.MedicinalProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MedicinalProductDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MedicinalProductDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicinalProductDefinition)
	if !ok {
		return r5.MedicinalProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMessageDefinition(ctx context.Context, resource r5.MessageDefinition) (r5.MessageDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MessageDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MessageDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MessageDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MessageDefinition)
	if !ok {
		return r5.MessageDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMessageHeader(ctx context.Context, resource r5.MessageHeader) (r5.MessageHeader, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MessageHeader{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MessageHeader"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MessageHeader{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MessageHeader)
	if !ok {
		return r5.MessageHeader{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMolecularSequence(ctx context.Context, resource r5.MolecularSequence) (r5.MolecularSequence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.MolecularSequence{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MolecularSequence"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.MolecularSequence{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MolecularSequence)
	if !ok {
		return r5.MolecularSequence{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNamingSystem(ctx context.Context, resource r5.NamingSystem) (r5.NamingSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.NamingSystem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NamingSystem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.NamingSystem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NamingSystem)
	if !ok {
		return r5.NamingSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNutritionIntake(ctx context.Context, resource r5.NutritionIntake) (r5.NutritionIntake, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.NutritionIntake{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NutritionIntake"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.NutritionIntake{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionIntake)
	if !ok {
		return r5.NutritionIntake{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionIntake", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNutritionOrder(ctx context.Context, resource r5.NutritionOrder) (r5.NutritionOrder, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.NutritionOrder{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NutritionOrder"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.NutritionOrder{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionOrder)
	if !ok {
		return r5.NutritionOrder{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNutritionProduct(ctx context.Context, resource r5.NutritionProduct) (r5.NutritionProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.NutritionProduct{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NutritionProduct"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.NutritionProduct{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionProduct)
	if !ok {
		return r5.NutritionProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateObservation(ctx context.Context, resource r5.Observation) (r5.Observation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Observation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Observation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Observation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Observation)
	if !ok {
		return r5.Observation{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateObservationDefinition(ctx context.Context, resource r5.ObservationDefinition) (r5.ObservationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ObservationDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ObservationDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ObservationDefinition)
	if !ok {
		return r5.ObservationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOperationDefinition(ctx context.Context, resource r5.OperationDefinition) (r5.OperationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.OperationDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OperationDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.OperationDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OperationDefinition)
	if !ok {
		return r5.OperationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOperationOutcome(ctx context.Context, resource r5.OperationOutcome) (r5.OperationOutcome, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.OperationOutcome{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OperationOutcome"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.OperationOutcome{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OperationOutcome)
	if !ok {
		return r5.OperationOutcome{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOrganization(ctx context.Context, resource r5.Organization) (r5.Organization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Organization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Organization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Organization{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Organization)
	if !ok {
		return r5.Organization{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOrganizationAffiliation(ctx context.Context, resource r5.OrganizationAffiliation) (r5.OrganizationAffiliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.OrganizationAffiliation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OrganizationAffiliation)
	if !ok {
		return r5.OrganizationAffiliation{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePackagedProductDefinition(ctx context.Context, resource r5.PackagedProductDefinition) (r5.PackagedProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.PackagedProductDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PackagedProductDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.PackagedProductDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PackagedProductDefinition)
	if !ok {
		return r5.PackagedProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PackagedProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateParameters(ctx context.Context, resource r5.Parameters) (r5.Parameters, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Parameters{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Parameters"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Parameters{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Parameters)
	if !ok {
		return r5.Parameters{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePatient(ctx context.Context, resource r5.Patient) (r5.Patient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Patient{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Patient"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Patient{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Patient)
	if !ok {
		return r5.Patient{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePaymentNotice(ctx context.Context, resource r5.PaymentNotice) (r5.PaymentNotice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.PaymentNotice{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PaymentNotice"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.PaymentNotice{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PaymentNotice)
	if !ok {
		return r5.PaymentNotice{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePaymentReconciliation(ctx context.Context, resource r5.PaymentReconciliation) (r5.PaymentReconciliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.PaymentReconciliation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.PaymentReconciliation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PaymentReconciliation)
	if !ok {
		return r5.PaymentReconciliation{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePermission(ctx context.Context, resource r5.Permission) (r5.Permission, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Permission{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Permission"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Permission{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Permission)
	if !ok {
		return r5.Permission{}, capabilities.UnexpectedResourceError{ExpectedType: "Permission", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePerson(ctx context.Context, resource r5.Person) (r5.Person, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Person{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Person"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Person{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Person)
	if !ok {
		return r5.Person{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePlanDefinition(ctx context.Context, resource r5.PlanDefinition) (r5.PlanDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.PlanDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PlanDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.PlanDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PlanDefinition)
	if !ok {
		return r5.PlanDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePractitioner(ctx context.Context, resource r5.Practitioner) (r5.Practitioner, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Practitioner{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Practitioner"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Practitioner{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Practitioner)
	if !ok {
		return r5.Practitioner{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePractitionerRole(ctx context.Context, resource r5.PractitionerRole) (r5.PractitionerRole, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.PractitionerRole{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PractitionerRole"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.PractitionerRole{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PractitionerRole)
	if !ok {
		return r5.PractitionerRole{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateProcedure(ctx context.Context, resource r5.Procedure) (r5.Procedure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Procedure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Procedure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Procedure{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Procedure)
	if !ok {
		return r5.Procedure{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateProvenance(ctx context.Context, resource r5.Provenance) (r5.Provenance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Provenance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Provenance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Provenance{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Provenance)
	if !ok {
		return r5.Provenance{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaire(ctx context.Context, resource r5.Questionnaire) (r5.Questionnaire, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Questionnaire{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Questionnaire"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Questionnaire{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Questionnaire)
	if !ok {
		return r5.Questionnaire{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaireResponse(ctx context.Context, resource r5.QuestionnaireResponse) (r5.QuestionnaireResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.QuestionnaireResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.QuestionnaireResponse)
	if !ok {
		return r5.QuestionnaireResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRegulatedAuthorization(ctx context.Context, resource r5.RegulatedAuthorization) (r5.RegulatedAuthorization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.RegulatedAuthorization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RegulatedAuthorization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.RegulatedAuthorization{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RegulatedAuthorization)
	if !ok {
		return r5.RegulatedAuthorization{}, capabilities.UnexpectedResourceError{ExpectedType: "RegulatedAuthorization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRelatedPerson(ctx context.Context, resource r5.RelatedPerson) (r5.RelatedPerson, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.RelatedPerson{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RelatedPerson"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.RelatedPerson{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RelatedPerson)
	if !ok {
		return r5.RelatedPerson{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRequestOrchestration(ctx context.Context, resource r5.RequestOrchestration) (r5.RequestOrchestration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.RequestOrchestration{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RequestOrchestration"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.RequestOrchestration{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RequestOrchestration)
	if !ok {
		return r5.RequestOrchestration{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestOrchestration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRequirements(ctx context.Context, resource r5.Requirements) (r5.Requirements, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Requirements{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Requirements"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Requirements{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Requirements)
	if !ok {
		return r5.Requirements{}, capabilities.UnexpectedResourceError{ExpectedType: "Requirements", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchStudy(ctx context.Context, resource r5.ResearchStudy) (r5.ResearchStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ResearchStudy{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchStudy"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ResearchStudy{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ResearchStudy)
	if !ok {
		return r5.ResearchStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchSubject(ctx context.Context, resource r5.ResearchSubject) (r5.ResearchSubject, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ResearchSubject{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchSubject"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ResearchSubject{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ResearchSubject)
	if !ok {
		return r5.ResearchSubject{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRiskAssessment(ctx context.Context, resource r5.RiskAssessment) (r5.RiskAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.RiskAssessment{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RiskAssessment"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.RiskAssessment{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RiskAssessment)
	if !ok {
		return r5.RiskAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSchedule(ctx context.Context, resource r5.Schedule) (r5.Schedule, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Schedule{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Schedule"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Schedule{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Schedule)
	if !ok {
		return r5.Schedule{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSearchParameter(ctx context.Context, resource r5.SearchParameter) (r5.SearchParameter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SearchParameter{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SearchParameter"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SearchParameter{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SearchParameter)
	if !ok {
		return r5.SearchParameter{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateServiceRequest(ctx context.Context, resource r5.ServiceRequest) (r5.ServiceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ServiceRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ServiceRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ServiceRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ServiceRequest)
	if !ok {
		return r5.ServiceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSlot(ctx context.Context, resource r5.Slot) (r5.Slot, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Slot{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Slot"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Slot{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Slot)
	if !ok {
		return r5.Slot{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSpecimen(ctx context.Context, resource r5.Specimen) (r5.Specimen, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Specimen{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Specimen"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Specimen{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Specimen)
	if !ok {
		return r5.Specimen{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSpecimenDefinition(ctx context.Context, resource r5.SpecimenDefinition) (r5.SpecimenDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SpecimenDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SpecimenDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SpecimenDefinition)
	if !ok {
		return r5.SpecimenDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateStructureDefinition(ctx context.Context, resource r5.StructureDefinition) (r5.StructureDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.StructureDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "StructureDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.StructureDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.StructureDefinition)
	if !ok {
		return r5.StructureDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateStructureMap(ctx context.Context, resource r5.StructureMap) (r5.StructureMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.StructureMap{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "StructureMap"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.StructureMap{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.StructureMap)
	if !ok {
		return r5.StructureMap{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubscription(ctx context.Context, resource r5.Subscription) (r5.Subscription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Subscription{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Subscription"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Subscription{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Subscription)
	if !ok {
		return r5.Subscription{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubscriptionStatus(ctx context.Context, resource r5.SubscriptionStatus) (r5.SubscriptionStatus, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubscriptionStatus{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubscriptionStatus"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubscriptionStatus{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubscriptionStatus)
	if !ok {
		return r5.SubscriptionStatus{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionStatus", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubscriptionTopic(ctx context.Context, resource r5.SubscriptionTopic) (r5.SubscriptionTopic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubscriptionTopic{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubscriptionTopic"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubscriptionTopic{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubscriptionTopic)
	if !ok {
		return r5.SubscriptionTopic{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionTopic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstance(ctx context.Context, resource r5.Substance) (r5.Substance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Substance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Substance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Substance{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Substance)
	if !ok {
		return r5.Substance{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceDefinition(ctx context.Context, resource r5.SubstanceDefinition) (r5.SubstanceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubstanceDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceDefinition)
	if !ok {
		return r5.SubstanceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceNucleicAcid(ctx context.Context, resource r5.SubstanceNucleicAcid) (r5.SubstanceNucleicAcid, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubstanceNucleicAcid{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceNucleicAcid"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceNucleicAcid{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceNucleicAcid)
	if !ok {
		return r5.SubstanceNucleicAcid{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceNucleicAcid", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstancePolymer(ctx context.Context, resource r5.SubstancePolymer) (r5.SubstancePolymer, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubstancePolymer{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstancePolymer"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubstancePolymer{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstancePolymer)
	if !ok {
		return r5.SubstancePolymer{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstancePolymer", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceProtein(ctx context.Context, resource r5.SubstanceProtein) (r5.SubstanceProtein, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubstanceProtein{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceProtein"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceProtein{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceProtein)
	if !ok {
		return r5.SubstanceProtein{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceProtein", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceReferenceInformation(ctx context.Context, resource r5.SubstanceReferenceInformation) (r5.SubstanceReferenceInformation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubstanceReferenceInformation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceReferenceInformation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceReferenceInformation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceReferenceInformation)
	if !ok {
		return r5.SubstanceReferenceInformation{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceReferenceInformation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceSourceMaterial(ctx context.Context, resource r5.SubstanceSourceMaterial) (r5.SubstanceSourceMaterial, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SubstanceSourceMaterial{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceSourceMaterial"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceSourceMaterial{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceSourceMaterial)
	if !ok {
		return r5.SubstanceSourceMaterial{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSourceMaterial", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSupplyDelivery(ctx context.Context, resource r5.SupplyDelivery) (r5.SupplyDelivery, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SupplyDelivery{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SupplyDelivery{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SupplyDelivery)
	if !ok {
		return r5.SupplyDelivery{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSupplyRequest(ctx context.Context, resource r5.SupplyRequest) (r5.SupplyRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.SupplyRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SupplyRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.SupplyRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SupplyRequest)
	if !ok {
		return r5.SupplyRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTask(ctx context.Context, resource r5.Task) (r5.Task, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Task{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Task"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Task{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Task)
	if !ok {
		return r5.Task{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTerminologyCapabilities(ctx context.Context, resource r5.TerminologyCapabilities) (r5.TerminologyCapabilities, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.TerminologyCapabilities{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TerminologyCapabilities)
	if !ok {
		return r5.TerminologyCapabilities{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTestPlan(ctx context.Context, resource r5.TestPlan) (r5.TestPlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.TestPlan{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TestPlan"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.TestPlan{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestPlan)
	if !ok {
		return r5.TestPlan{}, capabilities.UnexpectedResourceError{ExpectedType: "TestPlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTestReport(ctx context.Context, resource r5.TestReport) (r5.TestReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.TestReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TestReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.TestReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestReport)
	if !ok {
		return r5.TestReport{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTestScript(ctx context.Context, resource r5.TestScript) (r5.TestScript, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.TestScript{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TestScript"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.TestScript{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestScript)
	if !ok {
		return r5.TestScript{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTransport(ctx context.Context, resource r5.Transport) (r5.Transport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.Transport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Transport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.Transport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Transport)
	if !ok {
		return r5.Transport{}, capabilities.UnexpectedResourceError{ExpectedType: "Transport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateValueSet(ctx context.Context, resource r5.ValueSet) (r5.ValueSet, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.ValueSet{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ValueSet"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.ValueSet{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ValueSet)
	if !ok {
		return r5.ValueSet{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateVerificationResult(ctx context.Context, resource r5.VerificationResult) (r5.VerificationResult, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.VerificationResult{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "VerificationResult"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.VerificationResult{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.VerificationResult)
	if !ok {
		return r5.VerificationResult{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateVisionPrescription(ctx context.Context, resource r5.VisionPrescription) (r5.VisionPrescription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r5.VisionPrescription{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "VisionPrescription"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r5.VisionPrescription{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.VisionPrescription)
	if !ok {
		return r5.VisionPrescription{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAccount(ctx context.Context, id string) (r5.Account, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Account{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Account"}
	}
	v, err := g.Read(ctx, "Account", id)
	if err != nil {
		return r5.Account{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Account)
	if !ok {
		return r5.Account{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadActivityDefinition(ctx context.Context, id string) (r5.ActivityDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ActivityDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r5.ActivityDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ActivityDefinition)
	if !ok {
		return r5.ActivityDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadActorDefinition(ctx context.Context, id string) (r5.ActorDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ActorDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ActorDefinition"}
	}
	v, err := g.Read(ctx, "ActorDefinition", id)
	if err != nil {
		return r5.ActorDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ActorDefinition)
	if !ok {
		return r5.ActorDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActorDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAdministrableProductDefinition(ctx context.Context, id string) (r5.AdministrableProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.AdministrableProductDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AdministrableProductDefinition"}
	}
	v, err := g.Read(ctx, "AdministrableProductDefinition", id)
	if err != nil {
		return r5.AdministrableProductDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AdministrableProductDefinition)
	if !ok {
		return r5.AdministrableProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "AdministrableProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAdverseEvent(ctx context.Context, id string) (r5.AdverseEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.AdverseEvent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AdverseEvent"}
	}
	v, err := g.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r5.AdverseEvent{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AdverseEvent)
	if !ok {
		return r5.AdverseEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAllergyIntolerance(ctx context.Context, id string) (r5.AllergyIntolerance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.AllergyIntolerance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r5.AllergyIntolerance{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AllergyIntolerance)
	if !ok {
		return r5.AllergyIntolerance{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAppointment(ctx context.Context, id string) (r5.Appointment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Appointment{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Appointment"}
	}
	v, err := g.Read(ctx, "Appointment", id)
	if err != nil {
		return r5.Appointment{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Appointment)
	if !ok {
		return r5.Appointment{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAppointmentResponse(ctx context.Context, id string) (r5.AppointmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.AppointmentResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r5.AppointmentResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AppointmentResponse)
	if !ok {
		return r5.AppointmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadArtifactAssessment(ctx context.Context, id string) (r5.ArtifactAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ArtifactAssessment{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ArtifactAssessment"}
	}
	v, err := g.Read(ctx, "ArtifactAssessment", id)
	if err != nil {
		return r5.ArtifactAssessment{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ArtifactAssessment)
	if !ok {
		return r5.ArtifactAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "ArtifactAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAuditEvent(ctx context.Context, id string) (r5.AuditEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.AuditEvent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AuditEvent"}
	}
	v, err := g.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r5.AuditEvent{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AuditEvent)
	if !ok {
		return r5.AuditEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBasic(ctx context.Context, id string) (r5.Basic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Basic{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Basic"}
	}
	v, err := g.Read(ctx, "Basic", id)
	if err != nil {
		return r5.Basic{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Basic)
	if !ok {
		return r5.Basic{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBinary(ctx context.Context, id string) (r5.Binary, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Binary{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Binary"}
	}
	v, err := g.Read(ctx, "Binary", id)
	if err != nil {
		return r5.Binary{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Binary)
	if !ok {
		return r5.Binary{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r5.BiologicallyDerivedProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.BiologicallyDerivedProduct{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r5.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BiologicallyDerivedProduct)
	if !ok {
		return r5.BiologicallyDerivedProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBiologicallyDerivedProductDispense(ctx context.Context, id string) (r5.BiologicallyDerivedProductDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.BiologicallyDerivedProductDispense{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "BiologicallyDerivedProductDispense"}
	}
	v, err := g.Read(ctx, "BiologicallyDerivedProductDispense", id)
	if err != nil {
		return r5.BiologicallyDerivedProductDispense{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BiologicallyDerivedProductDispense)
	if !ok {
		return r5.BiologicallyDerivedProductDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProductDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBodyStructure(ctx context.Context, id string) (r5.BodyStructure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.BodyStructure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "BodyStructure"}
	}
	v, err := g.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r5.BodyStructure{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BodyStructure)
	if !ok {
		return r5.BodyStructure{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBundle(ctx context.Context, id string) (r5.Bundle, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Bundle{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Bundle"}
	}
	v, err := g.Read(ctx, "Bundle", id)
	if err != nil {
		return r5.Bundle{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Bundle)
	if !ok {
		return r5.Bundle{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCapabilityStatement(ctx context.Context, id string) (r5.CapabilityStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CapabilityStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r5.CapabilityStatement{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CapabilityStatement)
	if !ok {
		return r5.CapabilityStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCarePlan(ctx context.Context, id string) (r5.CarePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CarePlan{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CarePlan"}
	}
	v, err := g.Read(ctx, "CarePlan", id)
	if err != nil {
		return r5.CarePlan{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CarePlan)
	if !ok {
		return r5.CarePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCareTeam(ctx context.Context, id string) (r5.CareTeam, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CareTeam{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CareTeam"}
	}
	v, err := g.Read(ctx, "CareTeam", id)
	if err != nil {
		return r5.CareTeam{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CareTeam)
	if !ok {
		return r5.CareTeam{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadChargeItem(ctx context.Context, id string) (r5.ChargeItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ChargeItem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ChargeItem"}
	}
	v, err := g.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r5.ChargeItem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ChargeItem)
	if !ok {
		return r5.ChargeItem{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadChargeItemDefinition(ctx context.Context, id string) (r5.ChargeItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ChargeItemDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r5.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ChargeItemDefinition)
	if !ok {
		return r5.ChargeItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCitation(ctx context.Context, id string) (r5.Citation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Citation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Citation"}
	}
	v, err := g.Read(ctx, "Citation", id)
	if err != nil {
		return r5.Citation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Citation)
	if !ok {
		return r5.Citation{}, capabilities.UnexpectedResourceError{ExpectedType: "Citation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClaim(ctx context.Context, id string) (r5.Claim, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Claim{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Claim"}
	}
	v, err := g.Read(ctx, "Claim", id)
	if err != nil {
		return r5.Claim{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Claim)
	if !ok {
		return r5.Claim{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClaimResponse(ctx context.Context, id string) (r5.ClaimResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ClaimResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClaimResponse"}
	}
	v, err := g.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r5.ClaimResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClaimResponse)
	if !ok {
		return r5.ClaimResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClinicalImpression(ctx context.Context, id string) (r5.ClinicalImpression, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ClinicalImpression{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r5.ClinicalImpression{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClinicalImpression)
	if !ok {
		return r5.ClinicalImpression{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClinicalUseDefinition(ctx context.Context, id string) (r5.ClinicalUseDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ClinicalUseDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClinicalUseDefinition"}
	}
	v, err := g.Read(ctx, "ClinicalUseDefinition", id)
	if err != nil {
		return r5.ClinicalUseDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClinicalUseDefinition)
	if !ok {
		return r5.ClinicalUseDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalUseDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCodeSystem(ctx context.Context, id string) (r5.CodeSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CodeSystem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CodeSystem"}
	}
	v, err := g.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r5.CodeSystem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CodeSystem)
	if !ok {
		return r5.CodeSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCommunication(ctx context.Context, id string) (r5.Communication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Communication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Communication"}
	}
	v, err := g.Read(ctx, "Communication", id)
	if err != nil {
		return r5.Communication{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Communication)
	if !ok {
		return r5.Communication{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCommunicationRequest(ctx context.Context, id string) (r5.CommunicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CommunicationRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r5.CommunicationRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CommunicationRequest)
	if !ok {
		return r5.CommunicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCompartmentDefinition(ctx context.Context, id string) (r5.CompartmentDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CompartmentDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r5.CompartmentDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CompartmentDefinition)
	if !ok {
		return r5.CompartmentDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadComposition(ctx context.Context, id string) (r5.Composition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Composition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Composition"}
	}
	v, err := g.Read(ctx, "Composition", id)
	if err != nil {
		return r5.Composition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Composition)
	if !ok {
		return r5.Composition{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadConceptMap(ctx context.Context, id string) (r5.ConceptMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ConceptMap{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ConceptMap"}
	}
	v, err := g.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r5.ConceptMap{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ConceptMap)
	if !ok {
		return r5.ConceptMap{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCondition(ctx context.Context, id string) (r5.Condition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Condition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Condition"}
	}
	v, err := g.Read(ctx, "Condition", id)
	if err != nil {
		return r5.Condition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Condition)
	if !ok {
		return r5.Condition{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadConditionDefinition(ctx context.Context, id string) (r5.ConditionDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ConditionDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ConditionDefinition"}
	}
	v, err := g.Read(ctx, "ConditionDefinition", id)
	if err != nil {
		return r5.ConditionDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ConditionDefinition)
	if !ok {
		return r5.ConditionDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ConditionDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadConsent(ctx context.Context, id string) (r5.Consent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Consent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Consent"}
	}
	v, err := g.Read(ctx, "Consent", id)
	if err != nil {
		return r5.Consent{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Consent)
	if !ok {
		return r5.Consent{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadContract(ctx context.Context, id string) (r5.Contract, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Contract{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Contract"}
	}
	v, err := g.Read(ctx, "Contract", id)
	if err != nil {
		return r5.Contract{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Contract)
	if !ok {
		return r5.Contract{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverage(ctx context.Context, id string) (r5.Coverage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Coverage{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Coverage"}
	}
	v, err := g.Read(ctx, "Coverage", id)
	if err != nil {
		return r5.Coverage{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Coverage)
	if !ok {
		return r5.Coverage{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r5.CoverageEligibilityRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CoverageEligibilityRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r5.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CoverageEligibilityRequest)
	if !ok {
		return r5.CoverageEligibilityRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r5.CoverageEligibilityResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.CoverageEligibilityResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r5.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CoverageEligibilityResponse)
	if !ok {
		return r5.CoverageEligibilityResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDetectedIssue(ctx context.Context, id string) (r5.DetectedIssue, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DetectedIssue{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DetectedIssue"}
	}
	v, err := g.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r5.DetectedIssue{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DetectedIssue)
	if !ok {
		return r5.DetectedIssue{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDevice(ctx context.Context, id string) (r5.Device, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Device{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Device"}
	}
	v, err := g.Read(ctx, "Device", id)
	if err != nil {
		return r5.Device{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Device)
	if !ok {
		return r5.Device{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceAssociation(ctx context.Context, id string) (r5.DeviceAssociation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DeviceAssociation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceAssociation"}
	}
	v, err := g.Read(ctx, "DeviceAssociation", id)
	if err != nil {
		return r5.DeviceAssociation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceAssociation)
	if !ok {
		return r5.DeviceAssociation{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceAssociation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceDefinition(ctx context.Context, id string) (r5.DeviceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DeviceDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r5.DeviceDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceDefinition)
	if !ok {
		return r5.DeviceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceDispense(ctx context.Context, id string) (r5.DeviceDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DeviceDispense{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceDispense"}
	}
	v, err := g.Read(ctx, "DeviceDispense", id)
	if err != nil {
		return r5.DeviceDispense{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceDispense)
	if !ok {
		return r5.DeviceDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceMetric(ctx context.Context, id string) (r5.DeviceMetric, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DeviceMetric{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceMetric"}
	}
	v, err := g.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r5.DeviceMetric{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceMetric)
	if !ok {
		return r5.DeviceMetric{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceRequest(ctx context.Context, id string) (r5.DeviceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DeviceRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceRequest"}
	}
	v, err := g.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r5.DeviceRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceRequest)
	if !ok {
		return r5.DeviceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceUsage(ctx context.Context, id string) (r5.DeviceUsage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DeviceUsage{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceUsage"}
	}
	v, err := g.Read(ctx, "DeviceUsage", id)
	if err != nil {
		return r5.DeviceUsage{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceUsage)
	if !ok {
		return r5.DeviceUsage{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUsage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDiagnosticReport(ctx context.Context, id string) (r5.DiagnosticReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DiagnosticReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r5.DiagnosticReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DiagnosticReport)
	if !ok {
		return r5.DiagnosticReport{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDocumentReference(ctx context.Context, id string) (r5.DocumentReference, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.DocumentReference{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DocumentReference"}
	}
	v, err := g.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r5.DocumentReference{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DocumentReference)
	if !ok {
		return r5.DocumentReference{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEncounter(ctx context.Context, id string) (r5.Encounter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Encounter{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Encounter"}
	}
	v, err := g.Read(ctx, "Encounter", id)
	if err != nil {
		return r5.Encounter{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Encounter)
	if !ok {
		return r5.Encounter{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEncounterHistory(ctx context.Context, id string) (r5.EncounterHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.EncounterHistory{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EncounterHistory"}
	}
	v, err := g.Read(ctx, "EncounterHistory", id)
	if err != nil {
		return r5.EncounterHistory{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EncounterHistory)
	if !ok {
		return r5.EncounterHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "EncounterHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEndpoint(ctx context.Context, id string) (r5.Endpoint, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Endpoint{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Endpoint"}
	}
	v, err := g.Read(ctx, "Endpoint", id)
	if err != nil {
		return r5.Endpoint{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Endpoint)
	if !ok {
		return r5.Endpoint{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentRequest(ctx context.Context, id string) (r5.EnrollmentRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.EnrollmentRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r5.EnrollmentRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EnrollmentRequest)
	if !ok {
		return r5.EnrollmentRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentResponse(ctx context.Context, id string) (r5.EnrollmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.EnrollmentResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r5.EnrollmentResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EnrollmentResponse)
	if !ok {
		return r5.EnrollmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEpisodeOfCare(ctx context.Context, id string) (r5.EpisodeOfCare, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.EpisodeOfCare{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r5.EpisodeOfCare{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EpisodeOfCare)
	if !ok {
		return r5.EpisodeOfCare{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEventDefinition(ctx context.Context, id string) (r5.EventDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.EventDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EventDefinition"}
	}
	v, err := g.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r5.EventDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EventDefinition)
	if !ok {
		return r5.EventDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidence(ctx context.Context, id string) (r5.Evidence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Evidence{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Evidence"}
	}
	v, err := g.Read(ctx, "Evidence", id)
	if err != nil {
		return r5.Evidence{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Evidence)
	if !ok {
		return r5.Evidence{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceReport(ctx context.Context, id string) (r5.EvidenceReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.EvidenceReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EvidenceReport"}
	}
	v, err := g.Read(ctx, "EvidenceReport", id)
	if err != nil {
		return r5.EvidenceReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EvidenceReport)
	if !ok {
		return r5.EvidenceReport{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceVariable(ctx context.Context, id string) (r5.EvidenceVariable, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.EvidenceVariable{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r5.EvidenceVariable{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EvidenceVariable)
	if !ok {
		return r5.EvidenceVariable{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadExampleScenario(ctx context.Context, id string) (r5.ExampleScenario, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ExampleScenario{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ExampleScenario"}
	}
	v, err := g.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r5.ExampleScenario{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ExampleScenario)
	if !ok {
		return r5.ExampleScenario{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadExplanationOfBenefit(ctx context.Context, id string) (r5.ExplanationOfBenefit, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ExplanationOfBenefit{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r5.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ExplanationOfBenefit)
	if !ok {
		return r5.ExplanationOfBenefit{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadFamilyMemberHistory(ctx context.Context, id string) (r5.FamilyMemberHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.FamilyMemberHistory{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r5.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.FamilyMemberHistory)
	if !ok {
		return r5.FamilyMemberHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadFlag(ctx context.Context, id string) (r5.Flag, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Flag{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Flag"}
	}
	v, err := g.Read(ctx, "Flag", id)
	if err != nil {
		return r5.Flag{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Flag)
	if !ok {
		return r5.Flag{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadFormularyItem(ctx context.Context, id string) (r5.FormularyItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.FormularyItem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "FormularyItem"}
	}
	v, err := g.Read(ctx, "FormularyItem", id)
	if err != nil {
		return r5.FormularyItem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.FormularyItem)
	if !ok {
		return r5.FormularyItem{}, capabilities.UnexpectedResourceError{ExpectedType: "FormularyItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGenomicStudy(ctx context.Context, id string) (r5.GenomicStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.GenomicStudy{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "GenomicStudy"}
	}
	v, err := g.Read(ctx, "GenomicStudy", id)
	if err != nil {
		return r5.GenomicStudy{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GenomicStudy)
	if !ok {
		return r5.GenomicStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "GenomicStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGoal(ctx context.Context, id string) (r5.Goal, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Goal{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Goal"}
	}
	v, err := g.Read(ctx, "Goal", id)
	if err != nil {
		return r5.Goal{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Goal)
	if !ok {
		return r5.Goal{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGraphDefinition(ctx context.Context, id string) (r5.GraphDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.GraphDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "GraphDefinition"}
	}
	v, err := g.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r5.GraphDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GraphDefinition)
	if !ok {
		return r5.GraphDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGroup(ctx context.Context, id string) (r5.Group, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Group{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Group"}
	}
	v, err := g.Read(ctx, "Group", id)
	if err != nil {
		return r5.Group{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Group)
	if !ok {
		return r5.Group{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGuidanceResponse(ctx context.Context, id string) (r5.GuidanceResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.GuidanceResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r5.GuidanceResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GuidanceResponse)
	if !ok {
		return r5.GuidanceResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadHealthcareService(ctx context.Context, id string) (r5.HealthcareService, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.HealthcareService{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "HealthcareService"}
	}
	v, err := g.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r5.HealthcareService{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.HealthcareService)
	if !ok {
		return r5.HealthcareService{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImagingSelection(ctx context.Context, id string) (r5.ImagingSelection, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ImagingSelection{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImagingSelection"}
	}
	v, err := g.Read(ctx, "ImagingSelection", id)
	if err != nil {
		return r5.ImagingSelection{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImagingSelection)
	if !ok {
		return r5.ImagingSelection{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingSelection", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImagingStudy(ctx context.Context, id string) (r5.ImagingStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ImagingStudy{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImagingStudy"}
	}
	v, err := g.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r5.ImagingStudy{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImagingStudy)
	if !ok {
		return r5.ImagingStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunization(ctx context.Context, id string) (r5.Immunization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Immunization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Immunization"}
	}
	v, err := g.Read(ctx, "Immunization", id)
	if err != nil {
		return r5.Immunization{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Immunization)
	if !ok {
		return r5.Immunization{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationEvaluation(ctx context.Context, id string) (r5.ImmunizationEvaluation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ImmunizationEvaluation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r5.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImmunizationEvaluation)
	if !ok {
		return r5.ImmunizationEvaluation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationRecommendation(ctx context.Context, id string) (r5.ImmunizationRecommendation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ImmunizationRecommendation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r5.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImmunizationRecommendation)
	if !ok {
		return r5.ImmunizationRecommendation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImplementationGuide(ctx context.Context, id string) (r5.ImplementationGuide, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ImplementationGuide{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r5.ImplementationGuide{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImplementationGuide)
	if !ok {
		return r5.ImplementationGuide{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadIngredient(ctx context.Context, id string) (r5.Ingredient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Ingredient{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Ingredient"}
	}
	v, err := g.Read(ctx, "Ingredient", id)
	if err != nil {
		return r5.Ingredient{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Ingredient)
	if !ok {
		return r5.Ingredient{}, capabilities.UnexpectedResourceError{ExpectedType: "Ingredient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInsurancePlan(ctx context.Context, id string) (r5.InsurancePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.InsurancePlan{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "InsurancePlan"}
	}
	v, err := g.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r5.InsurancePlan{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InsurancePlan)
	if !ok {
		return r5.InsurancePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInventoryItem(ctx context.Context, id string) (r5.InventoryItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.InventoryItem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "InventoryItem"}
	}
	v, err := g.Read(ctx, "InventoryItem", id)
	if err != nil {
		return r5.InventoryItem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InventoryItem)
	if !ok {
		return r5.InventoryItem{}, capabilities.UnexpectedResourceError{ExpectedType: "InventoryItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInventoryReport(ctx context.Context, id string) (r5.InventoryReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.InventoryReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "InventoryReport"}
	}
	v, err := g.Read(ctx, "InventoryReport", id)
	if err != nil {
		return r5.InventoryReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InventoryReport)
	if !ok {
		return r5.InventoryReport{}, capabilities.UnexpectedResourceError{ExpectedType: "InventoryReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInvoice(ctx context.Context, id string) (r5.Invoice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Invoice{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Invoice"}
	}
	v, err := g.Read(ctx, "Invoice", id)
	if err != nil {
		return r5.Invoice{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Invoice)
	if !ok {
		return r5.Invoice{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLibrary(ctx context.Context, id string) (r5.Library, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Library{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Library"}
	}
	v, err := g.Read(ctx, "Library", id)
	if err != nil {
		return r5.Library{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Library)
	if !ok {
		return r5.Library{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLinkage(ctx context.Context, id string) (r5.Linkage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Linkage{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Linkage"}
	}
	v, err := g.Read(ctx, "Linkage", id)
	if err != nil {
		return r5.Linkage{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Linkage)
	if !ok {
		return r5.Linkage{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadList(ctx context.Context, id string) (r5.List, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.List{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "List"}
	}
	v, err := g.Read(ctx, "List", id)
	if err != nil {
		return r5.List{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.List)
	if !ok {
		return r5.List{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLocation(ctx context.Context, id string) (r5.Location, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Location{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Location"}
	}
	v, err := g.Read(ctx, "Location", id)
	if err != nil {
		return r5.Location{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Location)
	if !ok {
		return r5.Location{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadManufacturedItemDefinition(ctx context.Context, id string) (r5.ManufacturedItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ManufacturedItemDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ManufacturedItemDefinition"}
	}
	v, err := g.Read(ctx, "ManufacturedItemDefinition", id)
	if err != nil {
		return r5.ManufacturedItemDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ManufacturedItemDefinition)
	if !ok {
		return r5.ManufacturedItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ManufacturedItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMeasure(ctx context.Context, id string) (r5.Measure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Measure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Measure"}
	}
	v, err := g.Read(ctx, "Measure", id)
	if err != nil {
		return r5.Measure{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Measure)
	if !ok {
		return r5.Measure{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMeasureReport(ctx context.Context, id string) (r5.MeasureReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MeasureReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MeasureReport"}
	}
	v, err := g.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r5.MeasureReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MeasureReport)
	if !ok {
		return r5.MeasureReport{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedication(ctx context.Context, id string) (r5.Medication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Medication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Medication"}
	}
	v, err := g.Read(ctx, "Medication", id)
	if err != nil {
		return r5.Medication{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Medication)
	if !ok {
		return r5.Medication{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationAdministration(ctx context.Context, id string) (r5.MedicationAdministration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MedicationAdministration{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r5.MedicationAdministration{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationAdministration)
	if !ok {
		return r5.MedicationAdministration{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationDispense(ctx context.Context, id string) (r5.MedicationDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MedicationDispense{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationDispense"}
	}
	v, err := g.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r5.MedicationDispense{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationDispense)
	if !ok {
		return r5.MedicationDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationKnowledge(ctx context.Context, id string) (r5.MedicationKnowledge, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MedicationKnowledge{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r5.MedicationKnowledge{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationKnowledge)
	if !ok {
		return r5.MedicationKnowledge{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationRequest(ctx context.Context, id string) (r5.MedicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MedicationRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationRequest"}
	}
	v, err := g.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r5.MedicationRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationRequest)
	if !ok {
		return r5.MedicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationStatement(ctx context.Context, id string) (r5.MedicationStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MedicationStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationStatement"}
	}
	v, err := g.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r5.MedicationStatement{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationStatement)
	if !ok {
		return r5.MedicationStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductDefinition(ctx context.Context, id string) (r5.MedicinalProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MedicinalProductDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductDefinition"}
	}
	v, err := g.Read(ctx, "MedicinalProductDefinition", id)
	if err != nil {
		return r5.MedicinalProductDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicinalProductDefinition)
	if !ok {
		return r5.MedicinalProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMessageDefinition(ctx context.Context, id string) (r5.MessageDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MessageDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MessageDefinition"}
	}
	v, err := g.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r5.MessageDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MessageDefinition)
	if !ok {
		return r5.MessageDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMessageHeader(ctx context.Context, id string) (r5.MessageHeader, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MessageHeader{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MessageHeader"}
	}
	v, err := g.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r5.MessageHeader{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MessageHeader)
	if !ok {
		return r5.MessageHeader{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMolecularSequence(ctx context.Context, id string) (r5.MolecularSequence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.MolecularSequence{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MolecularSequence"}
	}
	v, err := g.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r5.MolecularSequence{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MolecularSequence)
	if !ok {
		return r5.MolecularSequence{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNamingSystem(ctx context.Context, id string) (r5.NamingSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.NamingSystem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NamingSystem"}
	}
	v, err := g.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r5.NamingSystem{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NamingSystem)
	if !ok {
		return r5.NamingSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNutritionIntake(ctx context.Context, id string) (r5.NutritionIntake, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.NutritionIntake{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NutritionIntake"}
	}
	v, err := g.Read(ctx, "NutritionIntake", id)
	if err != nil {
		return r5.NutritionIntake{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionIntake)
	if !ok {
		return r5.NutritionIntake{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionIntake", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNutritionOrder(ctx context.Context, id string) (r5.NutritionOrder, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.NutritionOrder{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NutritionOrder"}
	}
	v, err := g.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r5.NutritionOrder{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionOrder)
	if !ok {
		return r5.NutritionOrder{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNutritionProduct(ctx context.Context, id string) (r5.NutritionProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.NutritionProduct{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NutritionProduct"}
	}
	v, err := g.Read(ctx, "NutritionProduct", id)
	if err != nil {
		return r5.NutritionProduct{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionProduct)
	if !ok {
		return r5.NutritionProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadObservation(ctx context.Context, id string) (r5.Observation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Observation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Observation"}
	}
	v, err := g.Read(ctx, "Observation", id)
	if err != nil {
		return r5.Observation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Observation)
	if !ok {
		return r5.Observation{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadObservationDefinition(ctx context.Context, id string) (r5.ObservationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ObservationDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r5.ObservationDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ObservationDefinition)
	if !ok {
		return r5.ObservationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOperationDefinition(ctx context.Context, id string) (r5.OperationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.OperationDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OperationDefinition"}
	}
	v, err := g.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r5.OperationDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OperationDefinition)
	if !ok {
		return r5.OperationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOperationOutcome(ctx context.Context, id string) (r5.OperationOutcome, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.OperationOutcome{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OperationOutcome"}
	}
	v, err := g.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r5.OperationOutcome{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OperationOutcome)
	if !ok {
		return r5.OperationOutcome{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOrganization(ctx context.Context, id string) (r5.Organization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Organization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Organization"}
	}
	v, err := g.Read(ctx, "Organization", id)
	if err != nil {
		return r5.Organization{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Organization)
	if !ok {
		return r5.Organization{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOrganizationAffiliation(ctx context.Context, id string) (r5.OrganizationAffiliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.OrganizationAffiliation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r5.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OrganizationAffiliation)
	if !ok {
		return r5.OrganizationAffiliation{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPackagedProductDefinition(ctx context.Context, id string) (r5.PackagedProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.PackagedProductDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PackagedProductDefinition"}
	}
	v, err := g.Read(ctx, "PackagedProductDefinition", id)
	if err != nil {
		return r5.PackagedProductDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PackagedProductDefinition)
	if !ok {
		return r5.PackagedProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PackagedProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadParameters(ctx context.Context, id string) (r5.Parameters, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Parameters{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Parameters"}
	}
	v, err := g.Read(ctx, "Parameters", id)
	if err != nil {
		return r5.Parameters{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Parameters)
	if !ok {
		return r5.Parameters{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPatient(ctx context.Context, id string) (r5.Patient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Patient{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Patient"}
	}
	v, err := g.Read(ctx, "Patient", id)
	if err != nil {
		return r5.Patient{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Patient)
	if !ok {
		return r5.Patient{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPaymentNotice(ctx context.Context, id string) (r5.PaymentNotice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.PaymentNotice{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PaymentNotice"}
	}
	v, err := g.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r5.PaymentNotice{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PaymentNotice)
	if !ok {
		return r5.PaymentNotice{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPaymentReconciliation(ctx context.Context, id string) (r5.PaymentReconciliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.PaymentReconciliation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r5.PaymentReconciliation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PaymentReconciliation)
	if !ok {
		return r5.PaymentReconciliation{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPermission(ctx context.Context, id string) (r5.Permission, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Permission{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Permission"}
	}
	v, err := g.Read(ctx, "Permission", id)
	if err != nil {
		return r5.Permission{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Permission)
	if !ok {
		return r5.Permission{}, capabilities.UnexpectedResourceError{ExpectedType: "Permission", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPerson(ctx context.Context, id string) (r5.Person, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Person{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Person"}
	}
	v, err := g.Read(ctx, "Person", id)
	if err != nil {
		return r5.Person{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Person)
	if !ok {
		return r5.Person{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPlanDefinition(ctx context.Context, id string) (r5.PlanDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.PlanDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PlanDefinition"}
	}
	v, err := g.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r5.PlanDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PlanDefinition)
	if !ok {
		return r5.PlanDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPractitioner(ctx context.Context, id string) (r5.Practitioner, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Practitioner{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Practitioner"}
	}
	v, err := g.Read(ctx, "Practitioner", id)
	if err != nil {
		return r5.Practitioner{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Practitioner)
	if !ok {
		return r5.Practitioner{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPractitionerRole(ctx context.Context, id string) (r5.PractitionerRole, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.PractitionerRole{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PractitionerRole"}
	}
	v, err := g.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r5.PractitionerRole{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PractitionerRole)
	if !ok {
		return r5.PractitionerRole{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadProcedure(ctx context.Context, id string) (r5.Procedure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Procedure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Procedure"}
	}
	v, err := g.Read(ctx, "Procedure", id)
	if err != nil {
		return r5.Procedure{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Procedure)
	if !ok {
		return r5.Procedure{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadProvenance(ctx context.Context, id string) (r5.Provenance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Provenance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Provenance"}
	}
	v, err := g.Read(ctx, "Provenance", id)
	if err != nil {
		return r5.Provenance{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Provenance)
	if !ok {
		return r5.Provenance{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaire(ctx context.Context, id string) (r5.Questionnaire, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Questionnaire{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Questionnaire"}
	}
	v, err := g.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r5.Questionnaire{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Questionnaire)
	if !ok {
		return r5.Questionnaire{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaireResponse(ctx context.Context, id string) (r5.QuestionnaireResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.QuestionnaireResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r5.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.QuestionnaireResponse)
	if !ok {
		return r5.QuestionnaireResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRegulatedAuthorization(ctx context.Context, id string) (r5.RegulatedAuthorization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.RegulatedAuthorization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RegulatedAuthorization"}
	}
	v, err := g.Read(ctx, "RegulatedAuthorization", id)
	if err != nil {
		return r5.RegulatedAuthorization{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RegulatedAuthorization)
	if !ok {
		return r5.RegulatedAuthorization{}, capabilities.UnexpectedResourceError{ExpectedType: "RegulatedAuthorization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRelatedPerson(ctx context.Context, id string) (r5.RelatedPerson, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.RelatedPerson{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RelatedPerson"}
	}
	v, err := g.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r5.RelatedPerson{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RelatedPerson)
	if !ok {
		return r5.RelatedPerson{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRequestOrchestration(ctx context.Context, id string) (r5.RequestOrchestration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.RequestOrchestration{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RequestOrchestration"}
	}
	v, err := g.Read(ctx, "RequestOrchestration", id)
	if err != nil {
		return r5.RequestOrchestration{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RequestOrchestration)
	if !ok {
		return r5.RequestOrchestration{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestOrchestration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRequirements(ctx context.Context, id string) (r5.Requirements, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Requirements{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Requirements"}
	}
	v, err := g.Read(ctx, "Requirements", id)
	if err != nil {
		return r5.Requirements{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Requirements)
	if !ok {
		return r5.Requirements{}, capabilities.UnexpectedResourceError{ExpectedType: "Requirements", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchStudy(ctx context.Context, id string) (r5.ResearchStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ResearchStudy{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchStudy"}
	}
	v, err := g.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r5.ResearchStudy{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ResearchStudy)
	if !ok {
		return r5.ResearchStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchSubject(ctx context.Context, id string) (r5.ResearchSubject, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ResearchSubject{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchSubject"}
	}
	v, err := g.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r5.ResearchSubject{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ResearchSubject)
	if !ok {
		return r5.ResearchSubject{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRiskAssessment(ctx context.Context, id string) (r5.RiskAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.RiskAssessment{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RiskAssessment"}
	}
	v, err := g.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r5.RiskAssessment{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RiskAssessment)
	if !ok {
		return r5.RiskAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSchedule(ctx context.Context, id string) (r5.Schedule, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Schedule{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Schedule"}
	}
	v, err := g.Read(ctx, "Schedule", id)
	if err != nil {
		return r5.Schedule{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Schedule)
	if !ok {
		return r5.Schedule{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSearchParameter(ctx context.Context, id string) (r5.SearchParameter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SearchParameter{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SearchParameter"}
	}
	v, err := g.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r5.SearchParameter{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SearchParameter)
	if !ok {
		return r5.SearchParameter{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadServiceRequest(ctx context.Context, id string) (r5.ServiceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ServiceRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ServiceRequest"}
	}
	v, err := g.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r5.ServiceRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ServiceRequest)
	if !ok {
		return r5.ServiceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSlot(ctx context.Context, id string) (r5.Slot, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Slot{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Slot"}
	}
	v, err := g.Read(ctx, "Slot", id)
	if err != nil {
		return r5.Slot{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Slot)
	if !ok {
		return r5.Slot{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSpecimen(ctx context.Context, id string) (r5.Specimen, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Specimen{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Specimen"}
	}
	v, err := g.Read(ctx, "Specimen", id)
	if err != nil {
		return r5.Specimen{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Specimen)
	if !ok {
		return r5.Specimen{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSpecimenDefinition(ctx context.Context, id string) (r5.SpecimenDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SpecimenDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r5.SpecimenDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SpecimenDefinition)
	if !ok {
		return r5.SpecimenDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadStructureDefinition(ctx context.Context, id string) (r5.StructureDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.StructureDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "StructureDefinition"}
	}
	v, err := g.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r5.StructureDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.StructureDefinition)
	if !ok {
		return r5.StructureDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadStructureMap(ctx context.Context, id string) (r5.StructureMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.StructureMap{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "StructureMap"}
	}
	v, err := g.Read(ctx, "StructureMap", id)
	if err != nil {
		return r5.StructureMap{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.StructureMap)
	if !ok {
		return r5.StructureMap{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubscription(ctx context.Context, id string) (r5.Subscription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Subscription{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Subscription"}
	}
	v, err := g.Read(ctx, "Subscription", id)
	if err != nil {
		return r5.Subscription{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Subscription)
	if !ok {
		return r5.Subscription{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubscriptionStatus(ctx context.Context, id string) (r5.SubscriptionStatus, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubscriptionStatus{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubscriptionStatus"}
	}
	v, err := g.Read(ctx, "SubscriptionStatus", id)
	if err != nil {
		return r5.SubscriptionStatus{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubscriptionStatus)
	if !ok {
		return r5.SubscriptionStatus{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionStatus", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubscriptionTopic(ctx context.Context, id string) (r5.SubscriptionTopic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubscriptionTopic{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubscriptionTopic"}
	}
	v, err := g.Read(ctx, "SubscriptionTopic", id)
	if err != nil {
		return r5.SubscriptionTopic{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubscriptionTopic)
	if !ok {
		return r5.SubscriptionTopic{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionTopic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstance(ctx context.Context, id string) (r5.Substance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Substance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Substance"}
	}
	v, err := g.Read(ctx, "Substance", id)
	if err != nil {
		return r5.Substance{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Substance)
	if !ok {
		return r5.Substance{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceDefinition(ctx context.Context, id string) (r5.SubstanceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubstanceDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceDefinition"}
	}
	v, err := g.Read(ctx, "SubstanceDefinition", id)
	if err != nil {
		return r5.SubstanceDefinition{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceDefinition)
	if !ok {
		return r5.SubstanceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceNucleicAcid(ctx context.Context, id string) (r5.SubstanceNucleicAcid, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubstanceNucleicAcid{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceNucleicAcid"}
	}
	v, err := g.Read(ctx, "SubstanceNucleicAcid", id)
	if err != nil {
		return r5.SubstanceNucleicAcid{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceNucleicAcid)
	if !ok {
		return r5.SubstanceNucleicAcid{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceNucleicAcid", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstancePolymer(ctx context.Context, id string) (r5.SubstancePolymer, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubstancePolymer{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstancePolymer"}
	}
	v, err := g.Read(ctx, "SubstancePolymer", id)
	if err != nil {
		return r5.SubstancePolymer{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstancePolymer)
	if !ok {
		return r5.SubstancePolymer{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstancePolymer", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceProtein(ctx context.Context, id string) (r5.SubstanceProtein, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubstanceProtein{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceProtein"}
	}
	v, err := g.Read(ctx, "SubstanceProtein", id)
	if err != nil {
		return r5.SubstanceProtein{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceProtein)
	if !ok {
		return r5.SubstanceProtein{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceProtein", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceReferenceInformation(ctx context.Context, id string) (r5.SubstanceReferenceInformation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubstanceReferenceInformation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceReferenceInformation"}
	}
	v, err := g.Read(ctx, "SubstanceReferenceInformation", id)
	if err != nil {
		return r5.SubstanceReferenceInformation{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceReferenceInformation)
	if !ok {
		return r5.SubstanceReferenceInformation{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceReferenceInformation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceSourceMaterial(ctx context.Context, id string) (r5.SubstanceSourceMaterial, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SubstanceSourceMaterial{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceSourceMaterial"}
	}
	v, err := g.Read(ctx, "SubstanceSourceMaterial", id)
	if err != nil {
		return r5.SubstanceSourceMaterial{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceSourceMaterial)
	if !ok {
		return r5.SubstanceSourceMaterial{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSourceMaterial", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSupplyDelivery(ctx context.Context, id string) (r5.SupplyDelivery, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SupplyDelivery{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r5.SupplyDelivery{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SupplyDelivery)
	if !ok {
		return r5.SupplyDelivery{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSupplyRequest(ctx context.Context, id string) (r5.SupplyRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.SupplyRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SupplyRequest"}
	}
	v, err := g.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r5.SupplyRequest{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SupplyRequest)
	if !ok {
		return r5.SupplyRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTask(ctx context.Context, id string) (r5.Task, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Task{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Task"}
	}
	v, err := g.Read(ctx, "Task", id)
	if err != nil {
		return r5.Task{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Task)
	if !ok {
		return r5.Task{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTerminologyCapabilities(ctx context.Context, id string) (r5.TerminologyCapabilities, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.TerminologyCapabilities{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r5.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TerminologyCapabilities)
	if !ok {
		return r5.TerminologyCapabilities{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTestPlan(ctx context.Context, id string) (r5.TestPlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.TestPlan{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TestPlan"}
	}
	v, err := g.Read(ctx, "TestPlan", id)
	if err != nil {
		return r5.TestPlan{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestPlan)
	if !ok {
		return r5.TestPlan{}, capabilities.UnexpectedResourceError{ExpectedType: "TestPlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTestReport(ctx context.Context, id string) (r5.TestReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.TestReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TestReport"}
	}
	v, err := g.Read(ctx, "TestReport", id)
	if err != nil {
		return r5.TestReport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestReport)
	if !ok {
		return r5.TestReport{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTestScript(ctx context.Context, id string) (r5.TestScript, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.TestScript{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TestScript"}
	}
	v, err := g.Read(ctx, "TestScript", id)
	if err != nil {
		return r5.TestScript{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestScript)
	if !ok {
		return r5.TestScript{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTransport(ctx context.Context, id string) (r5.Transport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.Transport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Transport"}
	}
	v, err := g.Read(ctx, "Transport", id)
	if err != nil {
		return r5.Transport{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Transport)
	if !ok {
		return r5.Transport{}, capabilities.UnexpectedResourceError{ExpectedType: "Transport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadValueSet(ctx context.Context, id string) (r5.ValueSet, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.ValueSet{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ValueSet"}
	}
	v, err := g.Read(ctx, "ValueSet", id)
	if err != nil {
		return r5.ValueSet{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ValueSet)
	if !ok {
		return r5.ValueSet{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadVerificationResult(ctx context.Context, id string) (r5.VerificationResult, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.VerificationResult{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "VerificationResult"}
	}
	v, err := g.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r5.VerificationResult{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.VerificationResult)
	if !ok {
		return r5.VerificationResult{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadVisionPrescription(ctx context.Context, id string) (r5.VisionPrescription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r5.VisionPrescription{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "VisionPrescription"}
	}
	v, err := g.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r5.VisionPrescription{}, err
	}
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.VisionPrescription)
	if !ok {
		return r5.VisionPrescription{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) UpdateAccount(ctx context.Context, resource r5.Account) (capabilities.UpdateResult[r5.Account], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Account]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Account"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Account]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Account)
	if !ok {
		return capabilities.UpdateResult[r5.Account]{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Account]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateActivityDefinition(ctx context.Context, resource r5.ActivityDefinition) (capabilities.UpdateResult[r5.ActivityDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ActivityDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ActivityDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ActivityDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ActivityDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.ActivityDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ActivityDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateActorDefinition(ctx context.Context, resource r5.ActorDefinition) (capabilities.UpdateResult[r5.ActorDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ActorDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ActorDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ActorDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ActorDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.ActorDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ActorDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ActorDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAdministrableProductDefinition(ctx context.Context, resource r5.AdministrableProductDefinition) (capabilities.UpdateResult[r5.AdministrableProductDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.AdministrableProductDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AdministrableProductDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.AdministrableProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AdministrableProductDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.AdministrableProductDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "AdministrableProductDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.AdministrableProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAdverseEvent(ctx context.Context, resource r5.AdverseEvent) (capabilities.UpdateResult[r5.AdverseEvent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.AdverseEvent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AdverseEvent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.AdverseEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AdverseEvent)
	if !ok {
		return capabilities.UpdateResult[r5.AdverseEvent]{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.AdverseEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAllergyIntolerance(ctx context.Context, resource r5.AllergyIntolerance) (capabilities.UpdateResult[r5.AllergyIntolerance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.AllergyIntolerance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AllergyIntolerance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.AllergyIntolerance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AllergyIntolerance)
	if !ok {
		return capabilities.UpdateResult[r5.AllergyIntolerance]{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.AllergyIntolerance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointment(ctx context.Context, resource r5.Appointment) (capabilities.UpdateResult[r5.Appointment], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Appointment]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Appointment"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Appointment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Appointment)
	if !ok {
		return capabilities.UpdateResult[r5.Appointment]{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Appointment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointmentResponse(ctx context.Context, resource r5.AppointmentResponse) (capabilities.UpdateResult[r5.AppointmentResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.AppointmentResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AppointmentResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.AppointmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AppointmentResponse)
	if !ok {
		return capabilities.UpdateResult[r5.AppointmentResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.AppointmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateArtifactAssessment(ctx context.Context, resource r5.ArtifactAssessment) (capabilities.UpdateResult[r5.ArtifactAssessment], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ArtifactAssessment]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ArtifactAssessment"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ArtifactAssessment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ArtifactAssessment)
	if !ok {
		return capabilities.UpdateResult[r5.ArtifactAssessment]{}, capabilities.UnexpectedResourceError{ExpectedType: "ArtifactAssessment", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ArtifactAssessment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAuditEvent(ctx context.Context, resource r5.AuditEvent) (capabilities.UpdateResult[r5.AuditEvent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.AuditEvent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AuditEvent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.AuditEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.AuditEvent)
	if !ok {
		return capabilities.UpdateResult[r5.AuditEvent]{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.AuditEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBasic(ctx context.Context, resource r5.Basic) (capabilities.UpdateResult[r5.Basic], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Basic]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Basic"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Basic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Basic)
	if !ok {
		return capabilities.UpdateResult[r5.Basic]{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Basic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBinary(ctx context.Context, resource r5.Binary) (capabilities.UpdateResult[r5.Binary], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Binary]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Binary"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Binary]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Binary)
	if !ok {
		return capabilities.UpdateResult[r5.Binary]{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Binary]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r5.BiologicallyDerivedProduct) (capabilities.UpdateResult[r5.BiologicallyDerivedProduct], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.BiologicallyDerivedProduct]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "BiologicallyDerivedProduct"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.BiologicallyDerivedProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BiologicallyDerivedProduct)
	if !ok {
		return capabilities.UpdateResult[r5.BiologicallyDerivedProduct]{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.BiologicallyDerivedProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBiologicallyDerivedProductDispense(ctx context.Context, resource r5.BiologicallyDerivedProductDispense) (capabilities.UpdateResult[r5.BiologicallyDerivedProductDispense], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.BiologicallyDerivedProductDispense]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "BiologicallyDerivedProductDispense"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.BiologicallyDerivedProductDispense]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BiologicallyDerivedProductDispense)
	if !ok {
		return capabilities.UpdateResult[r5.BiologicallyDerivedProductDispense]{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProductDispense", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.BiologicallyDerivedProductDispense]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBodyStructure(ctx context.Context, resource r5.BodyStructure) (capabilities.UpdateResult[r5.BodyStructure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.BodyStructure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "BodyStructure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.BodyStructure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.BodyStructure)
	if !ok {
		return capabilities.UpdateResult[r5.BodyStructure]{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.BodyStructure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBundle(ctx context.Context, resource r5.Bundle) (capabilities.UpdateResult[r5.Bundle], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Bundle]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Bundle"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Bundle]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Bundle)
	if !ok {
		return capabilities.UpdateResult[r5.Bundle]{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Bundle]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilityStatement(ctx context.Context, resource r5.CapabilityStatement) (capabilities.UpdateResult[r5.CapabilityStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CapabilityStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CapabilityStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CapabilityStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CapabilityStatement)
	if !ok {
		return capabilities.UpdateResult[r5.CapabilityStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CapabilityStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCarePlan(ctx context.Context, resource r5.CarePlan) (capabilities.UpdateResult[r5.CarePlan], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CarePlan]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CarePlan"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CarePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CarePlan)
	if !ok {
		return capabilities.UpdateResult[r5.CarePlan]{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CarePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCareTeam(ctx context.Context, resource r5.CareTeam) (capabilities.UpdateResult[r5.CareTeam], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CareTeam]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CareTeam"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CareTeam]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CareTeam)
	if !ok {
		return capabilities.UpdateResult[r5.CareTeam]{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CareTeam]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItem(ctx context.Context, resource r5.ChargeItem) (capabilities.UpdateResult[r5.ChargeItem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ChargeItem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ChargeItem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ChargeItem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ChargeItem)
	if !ok {
		return capabilities.UpdateResult[r5.ChargeItem]{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ChargeItem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItemDefinition(ctx context.Context, resource r5.ChargeItemDefinition) (capabilities.UpdateResult[r5.ChargeItemDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ChargeItemDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ChargeItemDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ChargeItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ChargeItemDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.ChargeItemDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ChargeItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCitation(ctx context.Context, resource r5.Citation) (capabilities.UpdateResult[r5.Citation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Citation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Citation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Citation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Citation)
	if !ok {
		return capabilities.UpdateResult[r5.Citation]{}, capabilities.UnexpectedResourceError{ExpectedType: "Citation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Citation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaim(ctx context.Context, resource r5.Claim) (capabilities.UpdateResult[r5.Claim], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Claim]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Claim"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Claim]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Claim)
	if !ok {
		return capabilities.UpdateResult[r5.Claim]{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Claim]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaimResponse(ctx context.Context, resource r5.ClaimResponse) (capabilities.UpdateResult[r5.ClaimResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ClaimResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClaimResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ClaimResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClaimResponse)
	if !ok {
		return capabilities.UpdateResult[r5.ClaimResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ClaimResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClinicalImpression(ctx context.Context, resource r5.ClinicalImpression) (capabilities.UpdateResult[r5.ClinicalImpression], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ClinicalImpression]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClinicalImpression"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ClinicalImpression]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClinicalImpression)
	if !ok {
		return capabilities.UpdateResult[r5.ClinicalImpression]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ClinicalImpression]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClinicalUseDefinition(ctx context.Context, resource r5.ClinicalUseDefinition) (capabilities.UpdateResult[r5.ClinicalUseDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ClinicalUseDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClinicalUseDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ClinicalUseDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ClinicalUseDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.ClinicalUseDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalUseDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ClinicalUseDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCodeSystem(ctx context.Context, resource r5.CodeSystem) (capabilities.UpdateResult[r5.CodeSystem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CodeSystem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CodeSystem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CodeSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CodeSystem)
	if !ok {
		return capabilities.UpdateResult[r5.CodeSystem]{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CodeSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunication(ctx context.Context, resource r5.Communication) (capabilities.UpdateResult[r5.Communication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Communication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Communication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Communication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Communication)
	if !ok {
		return capabilities.UpdateResult[r5.Communication]{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Communication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunicationRequest(ctx context.Context, resource r5.CommunicationRequest) (capabilities.UpdateResult[r5.CommunicationRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CommunicationRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CommunicationRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CommunicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CommunicationRequest)
	if !ok {
		return capabilities.UpdateResult[r5.CommunicationRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CommunicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCompartmentDefinition(ctx context.Context, resource r5.CompartmentDefinition) (capabilities.UpdateResult[r5.CompartmentDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CompartmentDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CompartmentDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CompartmentDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CompartmentDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.CompartmentDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CompartmentDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateComposition(ctx context.Context, resource r5.Composition) (capabilities.UpdateResult[r5.Composition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Composition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Composition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Composition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Composition)
	if !ok {
		return capabilities.UpdateResult[r5.Composition]{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Composition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConceptMap(ctx context.Context, resource r5.ConceptMap) (capabilities.UpdateResult[r5.ConceptMap], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ConceptMap]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ConceptMap"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ConceptMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ConceptMap)
	if !ok {
		return capabilities.UpdateResult[r5.ConceptMap]{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ConceptMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCondition(ctx context.Context, resource r5.Condition) (capabilities.UpdateResult[r5.Condition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Condition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Condition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Condition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Condition)
	if !ok {
		return capabilities.UpdateResult[r5.Condition]{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Condition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConditionDefinition(ctx context.Context, resource r5.ConditionDefinition) (capabilities.UpdateResult[r5.ConditionDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ConditionDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ConditionDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ConditionDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ConditionDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.ConditionDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ConditionDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ConditionDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConsent(ctx context.Context, resource r5.Consent) (capabilities.UpdateResult[r5.Consent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Consent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Consent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Consent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Consent)
	if !ok {
		return capabilities.UpdateResult[r5.Consent]{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Consent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateContract(ctx context.Context, resource r5.Contract) (capabilities.UpdateResult[r5.Contract], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Contract]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Contract"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Contract]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Contract)
	if !ok {
		return capabilities.UpdateResult[r5.Contract]{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Contract]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverage(ctx context.Context, resource r5.Coverage) (capabilities.UpdateResult[r5.Coverage], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Coverage]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Coverage"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Coverage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Coverage)
	if !ok {
		return capabilities.UpdateResult[r5.Coverage]{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Coverage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityRequest(ctx context.Context, resource r5.CoverageEligibilityRequest) (capabilities.UpdateResult[r5.CoverageEligibilityRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CoverageEligibilityRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CoverageEligibilityRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CoverageEligibilityRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CoverageEligibilityRequest)
	if !ok {
		return capabilities.UpdateResult[r5.CoverageEligibilityRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CoverageEligibilityRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityResponse(ctx context.Context, resource r5.CoverageEligibilityResponse) (capabilities.UpdateResult[r5.CoverageEligibilityResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.CoverageEligibilityResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CoverageEligibilityResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.CoverageEligibilityResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.CoverageEligibilityResponse)
	if !ok {
		return capabilities.UpdateResult[r5.CoverageEligibilityResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.CoverageEligibilityResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDetectedIssue(ctx context.Context, resource r5.DetectedIssue) (capabilities.UpdateResult[r5.DetectedIssue], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DetectedIssue]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DetectedIssue"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DetectedIssue]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DetectedIssue)
	if !ok {
		return capabilities.UpdateResult[r5.DetectedIssue]{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DetectedIssue]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDevice(ctx context.Context, resource r5.Device) (capabilities.UpdateResult[r5.Device], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Device]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Device"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Device]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Device)
	if !ok {
		return capabilities.UpdateResult[r5.Device]{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Device]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceAssociation(ctx context.Context, resource r5.DeviceAssociation) (capabilities.UpdateResult[r5.DeviceAssociation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceAssociation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceAssociation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DeviceAssociation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceAssociation)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceAssociation]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceAssociation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DeviceAssociation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceDefinition(ctx context.Context, resource r5.DeviceDefinition) (capabilities.UpdateResult[r5.DeviceDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DeviceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DeviceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceDispense(ctx context.Context, resource r5.DeviceDispense) (capabilities.UpdateResult[r5.DeviceDispense], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceDispense]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceDispense"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DeviceDispense]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceDispense)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceDispense]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDispense", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DeviceDispense]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceMetric(ctx context.Context, resource r5.DeviceMetric) (capabilities.UpdateResult[r5.DeviceMetric], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceMetric]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceMetric"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DeviceMetric]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceMetric)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceMetric]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DeviceMetric]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceRequest(ctx context.Context, resource r5.DeviceRequest) (capabilities.UpdateResult[r5.DeviceRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DeviceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceRequest)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DeviceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceUsage(ctx context.Context, resource r5.DeviceUsage) (capabilities.UpdateResult[r5.DeviceUsage], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceUsage]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceUsage"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DeviceUsage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DeviceUsage)
	if !ok {
		return capabilities.UpdateResult[r5.DeviceUsage]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUsage", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DeviceUsage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDiagnosticReport(ctx context.Context, resource r5.DiagnosticReport) (capabilities.UpdateResult[r5.DiagnosticReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DiagnosticReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DiagnosticReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DiagnosticReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DiagnosticReport)
	if !ok {
		return capabilities.UpdateResult[r5.DiagnosticReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DiagnosticReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDocumentReference(ctx context.Context, resource r5.DocumentReference) (capabilities.UpdateResult[r5.DocumentReference], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.DocumentReference]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DocumentReference"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.DocumentReference]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.DocumentReference)
	if !ok {
		return capabilities.UpdateResult[r5.DocumentReference]{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.DocumentReference]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEncounter(ctx context.Context, resource r5.Encounter) (capabilities.UpdateResult[r5.Encounter], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Encounter]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Encounter"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Encounter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Encounter)
	if !ok {
		return capabilities.UpdateResult[r5.Encounter]{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Encounter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEncounterHistory(ctx context.Context, resource r5.EncounterHistory) (capabilities.UpdateResult[r5.EncounterHistory], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.EncounterHistory]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EncounterHistory"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.EncounterHistory]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EncounterHistory)
	if !ok {
		return capabilities.UpdateResult[r5.EncounterHistory]{}, capabilities.UnexpectedResourceError{ExpectedType: "EncounterHistory", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.EncounterHistory]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEndpoint(ctx context.Context, resource r5.Endpoint) (capabilities.UpdateResult[r5.Endpoint], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Endpoint]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Endpoint"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Endpoint]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Endpoint)
	if !ok {
		return capabilities.UpdateResult[r5.Endpoint]{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Endpoint]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentRequest(ctx context.Context, resource r5.EnrollmentRequest) (capabilities.UpdateResult[r5.EnrollmentRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.EnrollmentRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EnrollmentRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.EnrollmentRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EnrollmentRequest)
	if !ok {
		return capabilities.UpdateResult[r5.EnrollmentRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.EnrollmentRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentResponse(ctx context.Context, resource r5.EnrollmentResponse) (capabilities.UpdateResult[r5.EnrollmentResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.EnrollmentResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EnrollmentResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.EnrollmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EnrollmentResponse)
	if !ok {
		return capabilities.UpdateResult[r5.EnrollmentResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.EnrollmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEpisodeOfCare(ctx context.Context, resource r5.EpisodeOfCare) (capabilities.UpdateResult[r5.EpisodeOfCare], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.EpisodeOfCare]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EpisodeOfCare"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.EpisodeOfCare]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EpisodeOfCare)
	if !ok {
		return capabilities.UpdateResult[r5.EpisodeOfCare]{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.EpisodeOfCare]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEventDefinition(ctx context.Context, resource r5.EventDefinition) (capabilities.UpdateResult[r5.EventDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.EventDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EventDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.EventDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EventDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.EventDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.EventDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidence(ctx context.Context, resource r5.Evidence) (capabilities.UpdateResult[r5.Evidence], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Evidence]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Evidence"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Evidence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Evidence)
	if !ok {
		return capabilities.UpdateResult[r5.Evidence]{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Evidence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidenceReport(ctx context.Context, resource r5.EvidenceReport) (capabilities.UpdateResult[r5.EvidenceReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.EvidenceReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EvidenceReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.EvidenceReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EvidenceReport)
	if !ok {
		return capabilities.UpdateResult[r5.EvidenceReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.EvidenceReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidenceVariable(ctx context.Context, resource r5.EvidenceVariable) (capabilities.UpdateResult[r5.EvidenceVariable], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.EvidenceVariable]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EvidenceVariable"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.EvidenceVariable]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.EvidenceVariable)
	if !ok {
		return capabilities.UpdateResult[r5.EvidenceVariable]{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.EvidenceVariable]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExampleScenario(ctx context.Context, resource r5.ExampleScenario) (capabilities.UpdateResult[r5.ExampleScenario], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ExampleScenario]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ExampleScenario"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ExampleScenario]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ExampleScenario)
	if !ok {
		return capabilities.UpdateResult[r5.ExampleScenario]{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ExampleScenario]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExplanationOfBenefit(ctx context.Context, resource r5.ExplanationOfBenefit) (capabilities.UpdateResult[r5.ExplanationOfBenefit], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ExplanationOfBenefit]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ExplanationOfBenefit"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ExplanationOfBenefit]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ExplanationOfBenefit)
	if !ok {
		return capabilities.UpdateResult[r5.ExplanationOfBenefit]{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ExplanationOfBenefit]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFamilyMemberHistory(ctx context.Context, resource r5.FamilyMemberHistory) (capabilities.UpdateResult[r5.FamilyMemberHistory], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.FamilyMemberHistory]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "FamilyMemberHistory"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.FamilyMemberHistory]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.FamilyMemberHistory)
	if !ok {
		return capabilities.UpdateResult[r5.FamilyMemberHistory]{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.FamilyMemberHistory]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFlag(ctx context.Context, resource r5.Flag) (capabilities.UpdateResult[r5.Flag], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Flag]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Flag"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Flag]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Flag)
	if !ok {
		return capabilities.UpdateResult[r5.Flag]{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Flag]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFormularyItem(ctx context.Context, resource r5.FormularyItem) (capabilities.UpdateResult[r5.FormularyItem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.FormularyItem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "FormularyItem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.FormularyItem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.FormularyItem)
	if !ok {
		return capabilities.UpdateResult[r5.FormularyItem]{}, capabilities.UnexpectedResourceError{ExpectedType: "FormularyItem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.FormularyItem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGenomicStudy(ctx context.Context, resource r5.GenomicStudy) (capabilities.UpdateResult[r5.GenomicStudy], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.GenomicStudy]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "GenomicStudy"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.GenomicStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GenomicStudy)
	if !ok {
		return capabilities.UpdateResult[r5.GenomicStudy]{}, capabilities.UnexpectedResourceError{ExpectedType: "GenomicStudy", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.GenomicStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGoal(ctx context.Context, resource r5.Goal) (capabilities.UpdateResult[r5.Goal], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Goal]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Goal"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Goal]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Goal)
	if !ok {
		return capabilities.UpdateResult[r5.Goal]{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Goal]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGraphDefinition(ctx context.Context, resource r5.GraphDefinition) (capabilities.UpdateResult[r5.GraphDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.GraphDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "GraphDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.GraphDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GraphDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.GraphDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.GraphDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGroup(ctx context.Context, resource r5.Group) (capabilities.UpdateResult[r5.Group], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Group]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Group"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Group]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Group)
	if !ok {
		return capabilities.UpdateResult[r5.Group]{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Group]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGuidanceResponse(ctx context.Context, resource r5.GuidanceResponse) (capabilities.UpdateResult[r5.GuidanceResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.GuidanceResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "GuidanceResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.GuidanceResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.GuidanceResponse)
	if !ok {
		return capabilities.UpdateResult[r5.GuidanceResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.GuidanceResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateHealthcareService(ctx context.Context, resource r5.HealthcareService) (capabilities.UpdateResult[r5.HealthcareService], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.HealthcareService]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "HealthcareService"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.HealthcareService]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.HealthcareService)
	if !ok {
		return capabilities.UpdateResult[r5.HealthcareService]{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.HealthcareService]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImagingSelection(ctx context.Context, resource r5.ImagingSelection) (capabilities.UpdateResult[r5.ImagingSelection], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ImagingSelection]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImagingSelection"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ImagingSelection]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImagingSelection)
	if !ok {
		return capabilities.UpdateResult[r5.ImagingSelection]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingSelection", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ImagingSelection]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImagingStudy(ctx context.Context, resource r5.ImagingStudy) (capabilities.UpdateResult[r5.ImagingStudy], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ImagingStudy]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImagingStudy"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ImagingStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImagingStudy)
	if !ok {
		return capabilities.UpdateResult[r5.ImagingStudy]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ImagingStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunization(ctx context.Context, resource r5.Immunization) (capabilities.UpdateResult[r5.Immunization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Immunization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Immunization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Immunization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Immunization)
	if !ok {
		return capabilities.UpdateResult[r5.Immunization]{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Immunization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationEvaluation(ctx context.Context, resource r5.ImmunizationEvaluation) (capabilities.UpdateResult[r5.ImmunizationEvaluation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ImmunizationEvaluation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImmunizationEvaluation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ImmunizationEvaluation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImmunizationEvaluation)
	if !ok {
		return capabilities.UpdateResult[r5.ImmunizationEvaluation]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ImmunizationEvaluation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationRecommendation(ctx context.Context, resource r5.ImmunizationRecommendation) (capabilities.UpdateResult[r5.ImmunizationRecommendation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ImmunizationRecommendation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImmunizationRecommendation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ImmunizationRecommendation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImmunizationRecommendation)
	if !ok {
		return capabilities.UpdateResult[r5.ImmunizationRecommendation]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ImmunizationRecommendation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImplementationGuide(ctx context.Context, resource r5.ImplementationGuide) (capabilities.UpdateResult[r5.ImplementationGuide], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ImplementationGuide]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImplementationGuide"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ImplementationGuide]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ImplementationGuide)
	if !ok {
		return capabilities.UpdateResult[r5.ImplementationGuide]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ImplementationGuide]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateIngredient(ctx context.Context, resource r5.Ingredient) (capabilities.UpdateResult[r5.Ingredient], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Ingredient]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Ingredient"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Ingredient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Ingredient)
	if !ok {
		return capabilities.UpdateResult[r5.Ingredient]{}, capabilities.UnexpectedResourceError{ExpectedType: "Ingredient", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Ingredient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInsurancePlan(ctx context.Context, resource r5.InsurancePlan) (capabilities.UpdateResult[r5.InsurancePlan], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.InsurancePlan]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "InsurancePlan"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.InsurancePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InsurancePlan)
	if !ok {
		return capabilities.UpdateResult[r5.InsurancePlan]{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.InsurancePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInventoryItem(ctx context.Context, resource r5.InventoryItem) (capabilities.UpdateResult[r5.InventoryItem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.InventoryItem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "InventoryItem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.InventoryItem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InventoryItem)
	if !ok {
		return capabilities.UpdateResult[r5.InventoryItem]{}, capabilities.UnexpectedResourceError{ExpectedType: "InventoryItem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.InventoryItem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInventoryReport(ctx context.Context, resource r5.InventoryReport) (capabilities.UpdateResult[r5.InventoryReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.InventoryReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "InventoryReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.InventoryReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.InventoryReport)
	if !ok {
		return capabilities.UpdateResult[r5.InventoryReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "InventoryReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.InventoryReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInvoice(ctx context.Context, resource r5.Invoice) (capabilities.UpdateResult[r5.Invoice], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Invoice]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Invoice"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Invoice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Invoice)
	if !ok {
		return capabilities.UpdateResult[r5.Invoice]{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Invoice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLibrary(ctx context.Context, resource r5.Library) (capabilities.UpdateResult[r5.Library], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Library]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Library"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Library]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Library)
	if !ok {
		return capabilities.UpdateResult[r5.Library]{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Library]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLinkage(ctx context.Context, resource r5.Linkage) (capabilities.UpdateResult[r5.Linkage], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Linkage]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Linkage"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Linkage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Linkage)
	if !ok {
		return capabilities.UpdateResult[r5.Linkage]{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Linkage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateList(ctx context.Context, resource r5.List) (capabilities.UpdateResult[r5.List], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.List]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "List"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.List]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.List)
	if !ok {
		return capabilities.UpdateResult[r5.List]{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.List]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLocation(ctx context.Context, resource r5.Location) (capabilities.UpdateResult[r5.Location], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Location]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Location"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Location]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Location)
	if !ok {
		return capabilities.UpdateResult[r5.Location]{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Location]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateManufacturedItemDefinition(ctx context.Context, resource r5.ManufacturedItemDefinition) (capabilities.UpdateResult[r5.ManufacturedItemDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ManufacturedItemDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ManufacturedItemDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ManufacturedItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ManufacturedItemDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.ManufacturedItemDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ManufacturedItemDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ManufacturedItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasure(ctx context.Context, resource r5.Measure) (capabilities.UpdateResult[r5.Measure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Measure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Measure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Measure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Measure)
	if !ok {
		return capabilities.UpdateResult[r5.Measure]{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Measure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasureReport(ctx context.Context, resource r5.MeasureReport) (capabilities.UpdateResult[r5.MeasureReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MeasureReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MeasureReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MeasureReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MeasureReport)
	if !ok {
		return capabilities.UpdateResult[r5.MeasureReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MeasureReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedication(ctx context.Context, resource r5.Medication) (capabilities.UpdateResult[r5.Medication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Medication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Medication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Medication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Medication)
	if !ok {
		return capabilities.UpdateResult[r5.Medication]{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Medication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationAdministration(ctx context.Context, resource r5.MedicationAdministration) (capabilities.UpdateResult[r5.MedicationAdministration], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationAdministration]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationAdministration"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MedicationAdministration]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationAdministration)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationAdministration]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MedicationAdministration]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationDispense(ctx context.Context, resource r5.MedicationDispense) (capabilities.UpdateResult[r5.MedicationDispense], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationDispense]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationDispense"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MedicationDispense]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationDispense)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationDispense]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MedicationDispense]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationKnowledge(ctx context.Context, resource r5.MedicationKnowledge) (capabilities.UpdateResult[r5.MedicationKnowledge], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationKnowledge]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationKnowledge"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MedicationKnowledge]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationKnowledge)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationKnowledge]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MedicationKnowledge]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationRequest(ctx context.Context, resource r5.MedicationRequest) (capabilities.UpdateResult[r5.MedicationRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MedicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationRequest)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MedicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationStatement(ctx context.Context, resource r5.MedicationStatement) (capabilities.UpdateResult[r5.MedicationStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MedicationStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicationStatement)
	if !ok {
		return capabilities.UpdateResult[r5.MedicationStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MedicationStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductDefinition(ctx context.Context, resource r5.MedicinalProductDefinition) (capabilities.UpdateResult[r5.MedicinalProductDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MedicinalProductDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MedicinalProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MedicinalProductDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.MedicinalProductDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MedicinalProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageDefinition(ctx context.Context, resource r5.MessageDefinition) (capabilities.UpdateResult[r5.MessageDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MessageDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MessageDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MessageDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MessageDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.MessageDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MessageDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageHeader(ctx context.Context, resource r5.MessageHeader) (capabilities.UpdateResult[r5.MessageHeader], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MessageHeader]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MessageHeader"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MessageHeader]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MessageHeader)
	if !ok {
		return capabilities.UpdateResult[r5.MessageHeader]{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MessageHeader]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMolecularSequence(ctx context.Context, resource r5.MolecularSequence) (capabilities.UpdateResult[r5.MolecularSequence], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.MolecularSequence]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MolecularSequence"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.MolecularSequence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.MolecularSequence)
	if !ok {
		return capabilities.UpdateResult[r5.MolecularSequence]{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.MolecularSequence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNamingSystem(ctx context.Context, resource r5.NamingSystem) (capabilities.UpdateResult[r5.NamingSystem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.NamingSystem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NamingSystem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.NamingSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NamingSystem)
	if !ok {
		return capabilities.UpdateResult[r5.NamingSystem]{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.NamingSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNutritionIntake(ctx context.Context, resource r5.NutritionIntake) (capabilities.UpdateResult[r5.NutritionIntake], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.NutritionIntake]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NutritionIntake"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.NutritionIntake]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionIntake)
	if !ok {
		return capabilities.UpdateResult[r5.NutritionIntake]{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionIntake", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.NutritionIntake]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNutritionOrder(ctx context.Context, resource r5.NutritionOrder) (capabilities.UpdateResult[r5.NutritionOrder], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.NutritionOrder]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NutritionOrder"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.NutritionOrder]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionOrder)
	if !ok {
		return capabilities.UpdateResult[r5.NutritionOrder]{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.NutritionOrder]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNutritionProduct(ctx context.Context, resource r5.NutritionProduct) (capabilities.UpdateResult[r5.NutritionProduct], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.NutritionProduct]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NutritionProduct"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.NutritionProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.NutritionProduct)
	if !ok {
		return capabilities.UpdateResult[r5.NutritionProduct]{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionProduct", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.NutritionProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservation(ctx context.Context, resource r5.Observation) (capabilities.UpdateResult[r5.Observation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Observation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Observation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Observation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Observation)
	if !ok {
		return capabilities.UpdateResult[r5.Observation]{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Observation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservationDefinition(ctx context.Context, resource r5.ObservationDefinition) (capabilities.UpdateResult[r5.ObservationDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ObservationDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ObservationDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ObservationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ObservationDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.ObservationDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ObservationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationDefinition(ctx context.Context, resource r5.OperationDefinition) (capabilities.UpdateResult[r5.OperationDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.OperationDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OperationDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.OperationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OperationDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.OperationDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.OperationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationOutcome(ctx context.Context, resource r5.OperationOutcome) (capabilities.UpdateResult[r5.OperationOutcome], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.OperationOutcome]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OperationOutcome"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.OperationOutcome]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OperationOutcome)
	if !ok {
		return capabilities.UpdateResult[r5.OperationOutcome]{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.OperationOutcome]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganization(ctx context.Context, resource r5.Organization) (capabilities.UpdateResult[r5.Organization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Organization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Organization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Organization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Organization)
	if !ok {
		return capabilities.UpdateResult[r5.Organization]{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Organization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganizationAffiliation(ctx context.Context, resource r5.OrganizationAffiliation) (capabilities.UpdateResult[r5.OrganizationAffiliation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.OrganizationAffiliation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OrganizationAffiliation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.OrganizationAffiliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.OrganizationAffiliation)
	if !ok {
		return capabilities.UpdateResult[r5.OrganizationAffiliation]{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.OrganizationAffiliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePackagedProductDefinition(ctx context.Context, resource r5.PackagedProductDefinition) (capabilities.UpdateResult[r5.PackagedProductDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.PackagedProductDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PackagedProductDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.PackagedProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PackagedProductDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.PackagedProductDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "PackagedProductDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.PackagedProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateParameters(ctx context.Context, resource r5.Parameters) (capabilities.UpdateResult[r5.Parameters], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Parameters]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Parameters"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Parameters]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Parameters)
	if !ok {
		return capabilities.UpdateResult[r5.Parameters]{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Parameters]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePatient(ctx context.Context, resource r5.Patient) (capabilities.UpdateResult[r5.Patient], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Patient]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Patient"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Patient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Patient)
	if !ok {
		return capabilities.UpdateResult[r5.Patient]{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Patient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentNotice(ctx context.Context, resource r5.PaymentNotice) (capabilities.UpdateResult[r5.PaymentNotice], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.PaymentNotice]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PaymentNotice"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.PaymentNotice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PaymentNotice)
	if !ok {
		return capabilities.UpdateResult[r5.PaymentNotice]{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.PaymentNotice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentReconciliation(ctx context.Context, resource r5.PaymentReconciliation) (capabilities.UpdateResult[r5.PaymentReconciliation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.PaymentReconciliation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PaymentReconciliation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.PaymentReconciliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PaymentReconciliation)
	if !ok {
		return capabilities.UpdateResult[r5.PaymentReconciliation]{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.PaymentReconciliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePermission(ctx context.Context, resource r5.Permission) (capabilities.UpdateResult[r5.Permission], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Permission]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Permission"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Permission]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Permission)
	if !ok {
		return capabilities.UpdateResult[r5.Permission]{}, capabilities.UnexpectedResourceError{ExpectedType: "Permission", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Permission]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePerson(ctx context.Context, resource r5.Person) (capabilities.UpdateResult[r5.Person], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Person]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Person"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Person]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Person)
	if !ok {
		return capabilities.UpdateResult[r5.Person]{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Person]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePlanDefinition(ctx context.Context, resource r5.PlanDefinition) (capabilities.UpdateResult[r5.PlanDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.PlanDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PlanDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.PlanDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PlanDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.PlanDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.PlanDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitioner(ctx context.Context, resource r5.Practitioner) (capabilities.UpdateResult[r5.Practitioner], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Practitioner]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Practitioner"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Practitioner]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Practitioner)
	if !ok {
		return capabilities.UpdateResult[r5.Practitioner]{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Practitioner]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitionerRole(ctx context.Context, resource r5.PractitionerRole) (capabilities.UpdateResult[r5.PractitionerRole], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.PractitionerRole]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PractitionerRole"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.PractitionerRole]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.PractitionerRole)
	if !ok {
		return capabilities.UpdateResult[r5.PractitionerRole]{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.PractitionerRole]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProcedure(ctx context.Context, resource r5.Procedure) (capabilities.UpdateResult[r5.Procedure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Procedure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Procedure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Procedure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Procedure)
	if !ok {
		return capabilities.UpdateResult[r5.Procedure]{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Procedure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProvenance(ctx context.Context, resource r5.Provenance) (capabilities.UpdateResult[r5.Provenance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Provenance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Provenance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Provenance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Provenance)
	if !ok {
		return capabilities.UpdateResult[r5.Provenance]{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Provenance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaire(ctx context.Context, resource r5.Questionnaire) (capabilities.UpdateResult[r5.Questionnaire], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Questionnaire]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Questionnaire"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Questionnaire]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Questionnaire)
	if !ok {
		return capabilities.UpdateResult[r5.Questionnaire]{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Questionnaire]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaireResponse(ctx context.Context, resource r5.QuestionnaireResponse) (capabilities.UpdateResult[r5.QuestionnaireResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.QuestionnaireResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "QuestionnaireResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.QuestionnaireResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.QuestionnaireResponse)
	if !ok {
		return capabilities.UpdateResult[r5.QuestionnaireResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.QuestionnaireResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRegulatedAuthorization(ctx context.Context, resource r5.RegulatedAuthorization) (capabilities.UpdateResult[r5.RegulatedAuthorization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.RegulatedAuthorization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RegulatedAuthorization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.RegulatedAuthorization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RegulatedAuthorization)
	if !ok {
		return capabilities.UpdateResult[r5.RegulatedAuthorization]{}, capabilities.UnexpectedResourceError{ExpectedType: "RegulatedAuthorization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.RegulatedAuthorization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRelatedPerson(ctx context.Context, resource r5.RelatedPerson) (capabilities.UpdateResult[r5.RelatedPerson], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.RelatedPerson]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RelatedPerson"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.RelatedPerson]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RelatedPerson)
	if !ok {
		return capabilities.UpdateResult[r5.RelatedPerson]{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.RelatedPerson]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRequestOrchestration(ctx context.Context, resource r5.RequestOrchestration) (capabilities.UpdateResult[r5.RequestOrchestration], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.RequestOrchestration]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RequestOrchestration"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.RequestOrchestration]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RequestOrchestration)
	if !ok {
		return capabilities.UpdateResult[r5.RequestOrchestration]{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestOrchestration", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.RequestOrchestration]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRequirements(ctx context.Context, resource r5.Requirements) (capabilities.UpdateResult[r5.Requirements], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Requirements]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Requirements"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Requirements]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Requirements)
	if !ok {
		return capabilities.UpdateResult[r5.Requirements]{}, capabilities.UnexpectedResourceError{ExpectedType: "Requirements", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Requirements]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchStudy(ctx context.Context, resource r5.ResearchStudy) (capabilities.UpdateResult[r5.ResearchStudy], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ResearchStudy]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchStudy"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ResearchStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ResearchStudy)
	if !ok {
		return capabilities.UpdateResult[r5.ResearchStudy]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ResearchStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchSubject(ctx context.Context, resource r5.ResearchSubject) (capabilities.UpdateResult[r5.ResearchSubject], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ResearchSubject]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchSubject"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ResearchSubject]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ResearchSubject)
	if !ok {
		return capabilities.UpdateResult[r5.ResearchSubject]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ResearchSubject]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRiskAssessment(ctx context.Context, resource r5.RiskAssessment) (capabilities.UpdateResult[r5.RiskAssessment], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.RiskAssessment]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RiskAssessment"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.RiskAssessment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.RiskAssessment)
	if !ok {
		return capabilities.UpdateResult[r5.RiskAssessment]{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.RiskAssessment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSchedule(ctx context.Context, resource r5.Schedule) (capabilities.UpdateResult[r5.Schedule], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Schedule]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Schedule"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Schedule]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Schedule)
	if !ok {
		return capabilities.UpdateResult[r5.Schedule]{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Schedule]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSearchParameter(ctx context.Context, resource r5.SearchParameter) (capabilities.UpdateResult[r5.SearchParameter], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SearchParameter]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SearchParameter"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SearchParameter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SearchParameter)
	if !ok {
		return capabilities.UpdateResult[r5.SearchParameter]{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SearchParameter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateServiceRequest(ctx context.Context, resource r5.ServiceRequest) (capabilities.UpdateResult[r5.ServiceRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ServiceRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ServiceRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ServiceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ServiceRequest)
	if !ok {
		return capabilities.UpdateResult[r5.ServiceRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ServiceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSlot(ctx context.Context, resource r5.Slot) (capabilities.UpdateResult[r5.Slot], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Slot]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Slot"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Slot]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Slot)
	if !ok {
		return capabilities.UpdateResult[r5.Slot]{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Slot]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimen(ctx context.Context, resource r5.Specimen) (capabilities.UpdateResult[r5.Specimen], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Specimen]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Specimen"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Specimen]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Specimen)
	if !ok {
		return capabilities.UpdateResult[r5.Specimen]{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Specimen]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimenDefinition(ctx context.Context, resource r5.SpecimenDefinition) (capabilities.UpdateResult[r5.SpecimenDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SpecimenDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SpecimenDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SpecimenDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SpecimenDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.SpecimenDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SpecimenDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureDefinition(ctx context.Context, resource r5.StructureDefinition) (capabilities.UpdateResult[r5.StructureDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.StructureDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "StructureDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.StructureDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.StructureDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.StructureDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.StructureDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureMap(ctx context.Context, resource r5.StructureMap) (capabilities.UpdateResult[r5.StructureMap], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.StructureMap]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "StructureMap"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.StructureMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.StructureMap)
	if !ok {
		return capabilities.UpdateResult[r5.StructureMap]{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.StructureMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscription(ctx context.Context, resource r5.Subscription) (capabilities.UpdateResult[r5.Subscription], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Subscription]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Subscription"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Subscription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Subscription)
	if !ok {
		return capabilities.UpdateResult[r5.Subscription]{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Subscription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscriptionStatus(ctx context.Context, resource r5.SubscriptionStatus) (capabilities.UpdateResult[r5.SubscriptionStatus], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubscriptionStatus]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubscriptionStatus"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubscriptionStatus]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubscriptionStatus)
	if !ok {
		return capabilities.UpdateResult[r5.SubscriptionStatus]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionStatus", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubscriptionStatus]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscriptionTopic(ctx context.Context, resource r5.SubscriptionTopic) (capabilities.UpdateResult[r5.SubscriptionTopic], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubscriptionTopic]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubscriptionTopic"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubscriptionTopic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubscriptionTopic)
	if !ok {
		return capabilities.UpdateResult[r5.SubscriptionTopic]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionTopic", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubscriptionTopic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstance(ctx context.Context, resource r5.Substance) (capabilities.UpdateResult[r5.Substance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Substance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Substance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Substance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Substance)
	if !ok {
		return capabilities.UpdateResult[r5.Substance]{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Substance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceDefinition(ctx context.Context, resource r5.SubstanceDefinition) (capabilities.UpdateResult[r5.SubstanceDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubstanceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceDefinition)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubstanceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceNucleicAcid(ctx context.Context, resource r5.SubstanceNucleicAcid) (capabilities.UpdateResult[r5.SubstanceNucleicAcid], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceNucleicAcid]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceNucleicAcid"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubstanceNucleicAcid]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceNucleicAcid)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceNucleicAcid]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceNucleicAcid", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubstanceNucleicAcid]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstancePolymer(ctx context.Context, resource r5.SubstancePolymer) (capabilities.UpdateResult[r5.SubstancePolymer], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubstancePolymer]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstancePolymer"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubstancePolymer]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstancePolymer)
	if !ok {
		return capabilities.UpdateResult[r5.SubstancePolymer]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstancePolymer", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubstancePolymer]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceProtein(ctx context.Context, resource r5.SubstanceProtein) (capabilities.UpdateResult[r5.SubstanceProtein], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceProtein]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceProtein"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubstanceProtein]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceProtein)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceProtein]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceProtein", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubstanceProtein]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceReferenceInformation(ctx context.Context, resource r5.SubstanceReferenceInformation) (capabilities.UpdateResult[r5.SubstanceReferenceInformation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceReferenceInformation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceReferenceInformation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubstanceReferenceInformation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceReferenceInformation)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceReferenceInformation]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceReferenceInformation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubstanceReferenceInformation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceSourceMaterial(ctx context.Context, resource r5.SubstanceSourceMaterial) (capabilities.UpdateResult[r5.SubstanceSourceMaterial], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceSourceMaterial]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceSourceMaterial"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SubstanceSourceMaterial]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SubstanceSourceMaterial)
	if !ok {
		return capabilities.UpdateResult[r5.SubstanceSourceMaterial]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceSourceMaterial", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SubstanceSourceMaterial]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyDelivery(ctx context.Context, resource r5.SupplyDelivery) (capabilities.UpdateResult[r5.SupplyDelivery], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SupplyDelivery]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SupplyDelivery"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SupplyDelivery]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SupplyDelivery)
	if !ok {
		return capabilities.UpdateResult[r5.SupplyDelivery]{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SupplyDelivery]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyRequest(ctx context.Context, resource r5.SupplyRequest) (capabilities.UpdateResult[r5.SupplyRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.SupplyRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SupplyRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.SupplyRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.SupplyRequest)
	if !ok {
		return capabilities.UpdateResult[r5.SupplyRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.SupplyRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTask(ctx context.Context, resource r5.Task) (capabilities.UpdateResult[r5.Task], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Task]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Task"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Task]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Task)
	if !ok {
		return capabilities.UpdateResult[r5.Task]{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Task]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTerminologyCapabilities(ctx context.Context, resource r5.TerminologyCapabilities) (capabilities.UpdateResult[r5.TerminologyCapabilities], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.TerminologyCapabilities]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TerminologyCapabilities"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.TerminologyCapabilities]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TerminologyCapabilities)
	if !ok {
		return capabilities.UpdateResult[r5.TerminologyCapabilities]{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.TerminologyCapabilities]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestPlan(ctx context.Context, resource r5.TestPlan) (capabilities.UpdateResult[r5.TestPlan], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.TestPlan]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TestPlan"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.TestPlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestPlan)
	if !ok {
		return capabilities.UpdateResult[r5.TestPlan]{}, capabilities.UnexpectedResourceError{ExpectedType: "TestPlan", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.TestPlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestReport(ctx context.Context, resource r5.TestReport) (capabilities.UpdateResult[r5.TestReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.TestReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TestReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.TestReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestReport)
	if !ok {
		return capabilities.UpdateResult[r5.TestReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.TestReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestScript(ctx context.Context, resource r5.TestScript) (capabilities.UpdateResult[r5.TestScript], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.TestScript]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TestScript"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.TestScript]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.TestScript)
	if !ok {
		return capabilities.UpdateResult[r5.TestScript]{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.TestScript]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTransport(ctx context.Context, resource r5.Transport) (capabilities.UpdateResult[r5.Transport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.Transport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Transport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.Transport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.Transport)
	if !ok {
		return capabilities.UpdateResult[r5.Transport]{}, capabilities.UnexpectedResourceError{ExpectedType: "Transport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.Transport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateValueSet(ctx context.Context, resource r5.ValueSet) (capabilities.UpdateResult[r5.ValueSet], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.ValueSet]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ValueSet"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.ValueSet]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.ValueSet)
	if !ok {
		return capabilities.UpdateResult[r5.ValueSet]{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.ValueSet]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVerificationResult(ctx context.Context, resource r5.VerificationResult) (capabilities.UpdateResult[r5.VerificationResult], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.VerificationResult]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "VerificationResult"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.VerificationResult]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.VerificationResult)
	if !ok {
		return capabilities.UpdateResult[r5.VerificationResult]{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.VerificationResult]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVisionPrescription(ctx context.Context, resource r5.VisionPrescription) (capabilities.UpdateResult[r5.VisionPrescription], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r5.VisionPrescription]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "VisionPrescription"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r5.VisionPrescription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r5.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r5.VisionPrescription)
	if !ok {
		return capabilities.UpdateResult[r5.VisionPrescription]{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r5.VisionPrescription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) SearchCapabilitiesAccount(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Account"], err
}
func (w Concrete) SearchAccount(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Account"}
	}
	v, err := g.Search(ctx, "Account", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesActivityDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ActivityDefinition"], err
}
func (w Concrete) SearchActivityDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Search(ctx, "ActivityDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesActorDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ActorDefinition"], err
}
func (w Concrete) SearchActorDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ActorDefinition"}
	}
	v, err := g.Search(ctx, "ActorDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdministrableProductDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AdministrableProductDefinition"], err
}
func (w Concrete) SearchAdministrableProductDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AdministrableProductDefinition"}
	}
	v, err := g.Search(ctx, "AdministrableProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdverseEvent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AdverseEvent"], err
}
func (w Concrete) SearchAdverseEvent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AdverseEvent"}
	}
	v, err := g.Search(ctx, "AdverseEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAllergyIntolerance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AllergyIntolerance"], err
}
func (w Concrete) SearchAllergyIntolerance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Search(ctx, "AllergyIntolerance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointment(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Appointment"], err
}
func (w Concrete) SearchAppointment(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Appointment"}
	}
	v, err := g.Search(ctx, "Appointment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointmentResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AppointmentResponse"], err
}
func (w Concrete) SearchAppointmentResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Search(ctx, "AppointmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesArtifactAssessment(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ArtifactAssessment"], err
}
func (w Concrete) SearchArtifactAssessment(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ArtifactAssessment"}
	}
	v, err := g.Search(ctx, "ArtifactAssessment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAuditEvent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AuditEvent"], err
}
func (w Concrete) SearchAuditEvent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AuditEvent"}
	}
	v, err := g.Search(ctx, "AuditEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBasic(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Basic"], err
}
func (w Concrete) SearchBasic(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Basic"}
	}
	v, err := g.Search(ctx, "Basic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBinary(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Binary"], err
}
func (w Concrete) SearchBinary(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Binary"}
	}
	v, err := g.Search(ctx, "Binary", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBiologicallyDerivedProduct(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BiologicallyDerivedProduct"], err
}
func (w Concrete) SearchBiologicallyDerivedProduct(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Search(ctx, "BiologicallyDerivedProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBiologicallyDerivedProductDispense(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BiologicallyDerivedProductDispense"], err
}
func (w Concrete) SearchBiologicallyDerivedProductDispense(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "BiologicallyDerivedProductDispense"}
	}
	v, err := g.Search(ctx, "BiologicallyDerivedProductDispense", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBodyStructure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BodyStructure"], err
}
func (w Concrete) SearchBodyStructure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "BodyStructure"}
	}
	v, err := g.Search(ctx, "BodyStructure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBundle(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Bundle"], err
}
func (w Concrete) SearchBundle(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Bundle"}
	}
	v, err := g.Search(ctx, "Bundle", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCapabilityStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CapabilityStatement"], err
}
func (w Concrete) SearchCapabilityStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Search(ctx, "CapabilityStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCarePlan(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CarePlan"], err
}
func (w Concrete) SearchCarePlan(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CarePlan"}
	}
	v, err := g.Search(ctx, "CarePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCareTeam(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CareTeam"], err
}
func (w Concrete) SearchCareTeam(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CareTeam"}
	}
	v, err := g.Search(ctx, "CareTeam", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItem"], err
}
func (w Concrete) SearchChargeItem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ChargeItem"}
	}
	v, err := g.Search(ctx, "ChargeItem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItemDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItemDefinition"], err
}
func (w Concrete) SearchChargeItemDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Search(ctx, "ChargeItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCitation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Citation"], err
}
func (w Concrete) SearchCitation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Citation"}
	}
	v, err := g.Search(ctx, "Citation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaim(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Claim"], err
}
func (w Concrete) SearchClaim(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Claim"}
	}
	v, err := g.Search(ctx, "Claim", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaimResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClaimResponse"], err
}
func (w Concrete) SearchClaimResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClaimResponse"}
	}
	v, err := g.Search(ctx, "ClaimResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalImpression(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClinicalImpression"], err
}
func (w Concrete) SearchClinicalImpression(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Search(ctx, "ClinicalImpression", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalUseDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClinicalUseDefinition"], err
}
func (w Concrete) SearchClinicalUseDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClinicalUseDefinition"}
	}
	v, err := g.Search(ctx, "ClinicalUseDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCodeSystem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CodeSystem"], err
}
func (w Concrete) SearchCodeSystem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CodeSystem"}
	}
	v, err := g.Search(ctx, "CodeSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Communication"], err
}
func (w Concrete) SearchCommunication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Communication"}
	}
	v, err := g.Search(ctx, "Communication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunicationRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CommunicationRequest"], err
}
func (w Concrete) SearchCommunicationRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Search(ctx, "CommunicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCompartmentDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CompartmentDefinition"], err
}
func (w Concrete) SearchCompartmentDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Search(ctx, "CompartmentDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesComposition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Composition"], err
}
func (w Concrete) SearchComposition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Composition"}
	}
	v, err := g.Search(ctx, "Composition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConceptMap(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ConceptMap"], err
}
func (w Concrete) SearchConceptMap(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ConceptMap"}
	}
	v, err := g.Search(ctx, "ConceptMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCondition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Condition"], err
}
func (w Concrete) SearchCondition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Condition"}
	}
	v, err := g.Search(ctx, "Condition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConditionDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ConditionDefinition"], err
}
func (w Concrete) SearchConditionDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ConditionDefinition"}
	}
	v, err := g.Search(ctx, "ConditionDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConsent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Consent"], err
}
func (w Concrete) SearchConsent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Consent"}
	}
	v, err := g.Search(ctx, "Consent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesContract(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Contract"], err
}
func (w Concrete) SearchContract(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Contract"}
	}
	v, err := g.Search(ctx, "Contract", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverage(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Coverage"], err
}
func (w Concrete) SearchCoverage(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Coverage"}
	}
	v, err := g.Search(ctx, "Coverage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityRequest"], err
}
func (w Concrete) SearchCoverageEligibilityRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Search(ctx, "CoverageEligibilityRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityResponse"], err
}
func (w Concrete) SearchCoverageEligibilityResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Search(ctx, "CoverageEligibilityResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDetectedIssue(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DetectedIssue"], err
}
func (w Concrete) SearchDetectedIssue(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DetectedIssue"}
	}
	v, err := g.Search(ctx, "DetectedIssue", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDevice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Device"], err
}
func (w Concrete) SearchDevice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Device"}
	}
	v, err := g.Search(ctx, "Device", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceAssociation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceAssociation"], err
}
func (w Concrete) SearchDeviceAssociation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceAssociation"}
	}
	v, err := g.Search(ctx, "DeviceAssociation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceDefinition"], err
}
func (w Concrete) SearchDeviceDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Search(ctx, "DeviceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceDispense(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceDispense"], err
}
func (w Concrete) SearchDeviceDispense(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceDispense"}
	}
	v, err := g.Search(ctx, "DeviceDispense", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceMetric(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceMetric"], err
}
func (w Concrete) SearchDeviceMetric(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceMetric"}
	}
	v, err := g.Search(ctx, "DeviceMetric", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceRequest"], err
}
func (w Concrete) SearchDeviceRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceRequest"}
	}
	v, err := g.Search(ctx, "DeviceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceUsage(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceUsage"], err
}
func (w Concrete) SearchDeviceUsage(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceUsage"}
	}
	v, err := g.Search(ctx, "DeviceUsage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDiagnosticReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DiagnosticReport"], err
}
func (w Concrete) SearchDiagnosticReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Search(ctx, "DiagnosticReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentReference(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DocumentReference"], err
}
func (w Concrete) SearchDocumentReference(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DocumentReference"}
	}
	v, err := g.Search(ctx, "DocumentReference", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEncounter(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Encounter"], err
}
func (w Concrete) SearchEncounter(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Encounter"}
	}
	v, err := g.Search(ctx, "Encounter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEncounterHistory(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EncounterHistory"], err
}
func (w Concrete) SearchEncounterHistory(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EncounterHistory"}
	}
	v, err := g.Search(ctx, "EncounterHistory", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEndpoint(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Endpoint"], err
}
func (w Concrete) SearchEndpoint(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Endpoint"}
	}
	v, err := g.Search(ctx, "Endpoint", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentRequest"], err
}
func (w Concrete) SearchEnrollmentRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Search(ctx, "EnrollmentRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentResponse"], err
}
func (w Concrete) SearchEnrollmentResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Search(ctx, "EnrollmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEpisodeOfCare(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EpisodeOfCare"], err
}
func (w Concrete) SearchEpisodeOfCare(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Search(ctx, "EpisodeOfCare", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEventDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EventDefinition"], err
}
func (w Concrete) SearchEventDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EventDefinition"}
	}
	v, err := g.Search(ctx, "EventDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidence(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Evidence"], err
}
func (w Concrete) SearchEvidence(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Evidence"}
	}
	v, err := g.Search(ctx, "Evidence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EvidenceReport"], err
}
func (w Concrete) SearchEvidenceReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EvidenceReport"}
	}
	v, err := g.Search(ctx, "EvidenceReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceVariable(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EvidenceVariable"], err
}
func (w Concrete) SearchEvidenceVariable(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Search(ctx, "EvidenceVariable", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExampleScenario(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExampleScenario"], err
}
func (w Concrete) SearchExampleScenario(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ExampleScenario"}
	}
	v, err := g.Search(ctx, "ExampleScenario", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExplanationOfBenefit(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExplanationOfBenefit"], err
}
func (w Concrete) SearchExplanationOfBenefit(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Search(ctx, "ExplanationOfBenefit", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFamilyMemberHistory(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["FamilyMemberHistory"], err
}
func (w Concrete) SearchFamilyMemberHistory(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Search(ctx, "FamilyMemberHistory", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFlag(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Flag"], err
}
func (w Concrete) SearchFlag(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Flag"}
	}
	v, err := g.Search(ctx, "Flag", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFormularyItem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["FormularyItem"], err
}
func (w Concrete) SearchFormularyItem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "FormularyItem"}
	}
	v, err := g.Search(ctx, "FormularyItem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGenomicStudy(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GenomicStudy"], err
}
func (w Concrete) SearchGenomicStudy(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "GenomicStudy"}
	}
	v, err := g.Search(ctx, "GenomicStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGoal(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Goal"], err
}
func (w Concrete) SearchGoal(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Goal"}
	}
	v, err := g.Search(ctx, "Goal", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGraphDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GraphDefinition"], err
}
func (w Concrete) SearchGraphDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "GraphDefinition"}
	}
	v, err := g.Search(ctx, "GraphDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGroup(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Group"], err
}
func (w Concrete) SearchGroup(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Group"}
	}
	v, err := g.Search(ctx, "Group", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGuidanceResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GuidanceResponse"], err
}
func (w Concrete) SearchGuidanceResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Search(ctx, "GuidanceResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesHealthcareService(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["HealthcareService"], err
}
func (w Concrete) SearchHealthcareService(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "HealthcareService"}
	}
	v, err := g.Search(ctx, "HealthcareService", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImagingSelection(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImagingSelection"], err
}
func (w Concrete) SearchImagingSelection(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImagingSelection"}
	}
	v, err := g.Search(ctx, "ImagingSelection", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImagingStudy(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImagingStudy"], err
}
func (w Concrete) SearchImagingStudy(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImagingStudy"}
	}
	v, err := g.Search(ctx, "ImagingStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Immunization"], err
}
func (w Concrete) SearchImmunization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Immunization"}
	}
	v, err := g.Search(ctx, "Immunization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationEvaluation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationEvaluation"], err
}
func (w Concrete) SearchImmunizationEvaluation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Search(ctx, "ImmunizationEvaluation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationRecommendation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationRecommendation"], err
}
func (w Concrete) SearchImmunizationRecommendation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Search(ctx, "ImmunizationRecommendation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImplementationGuide(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImplementationGuide"], err
}
func (w Concrete) SearchImplementationGuide(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Search(ctx, "ImplementationGuide", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesIngredient(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Ingredient"], err
}
func (w Concrete) SearchIngredient(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Ingredient"}
	}
	v, err := g.Search(ctx, "Ingredient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInsurancePlan(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["InsurancePlan"], err
}
func (w Concrete) SearchInsurancePlan(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "InsurancePlan"}
	}
	v, err := g.Search(ctx, "InsurancePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInventoryItem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["InventoryItem"], err
}
func (w Concrete) SearchInventoryItem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "InventoryItem"}
	}
	v, err := g.Search(ctx, "InventoryItem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInventoryReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["InventoryReport"], err
}
func (w Concrete) SearchInventoryReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "InventoryReport"}
	}
	v, err := g.Search(ctx, "InventoryReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInvoice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Invoice"], err
}
func (w Concrete) SearchInvoice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Invoice"}
	}
	v, err := g.Search(ctx, "Invoice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLibrary(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Library"], err
}
func (w Concrete) SearchLibrary(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Library"}
	}
	v, err := g.Search(ctx, "Library", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLinkage(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Linkage"], err
}
func (w Concrete) SearchLinkage(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Linkage"}
	}
	v, err := g.Search(ctx, "Linkage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesList(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["List"], err
}
func (w Concrete) SearchList(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "List"}
	}
	v, err := g.Search(ctx, "List", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLocation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Location"], err
}
func (w Concrete) SearchLocation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Location"}
	}
	v, err := g.Search(ctx, "Location", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesManufacturedItemDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ManufacturedItemDefinition"], err
}
func (w Concrete) SearchManufacturedItemDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ManufacturedItemDefinition"}
	}
	v, err := g.Search(ctx, "ManufacturedItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Measure"], err
}
func (w Concrete) SearchMeasure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Measure"}
	}
	v, err := g.Search(ctx, "Measure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasureReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MeasureReport"], err
}
func (w Concrete) SearchMeasureReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MeasureReport"}
	}
	v, err := g.Search(ctx, "MeasureReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Medication"], err
}
func (w Concrete) SearchMedication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Medication"}
	}
	v, err := g.Search(ctx, "Medication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationAdministration(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationAdministration"], err
}
func (w Concrete) SearchMedicationAdministration(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Search(ctx, "MedicationAdministration", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationDispense(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationDispense"], err
}
func (w Concrete) SearchMedicationDispense(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationDispense"}
	}
	v, err := g.Search(ctx, "MedicationDispense", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationKnowledge(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationKnowledge"], err
}
func (w Concrete) SearchMedicationKnowledge(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Search(ctx, "MedicationKnowledge", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationRequest"], err
}
func (w Concrete) SearchMedicationRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationRequest"}
	}
	v, err := g.Search(ctx, "MedicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationStatement"], err
}
func (w Concrete) SearchMedicationStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationStatement"}
	}
	v, err := g.Search(ctx, "MedicationStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductDefinition"], err
}
func (w Concrete) SearchMedicinalProductDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductDefinition"}
	}
	v, err := g.Search(ctx, "MedicinalProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageDefinition"], err
}
func (w Concrete) SearchMessageDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MessageDefinition"}
	}
	v, err := g.Search(ctx, "MessageDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageHeader(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageHeader"], err
}
func (w Concrete) SearchMessageHeader(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MessageHeader"}
	}
	v, err := g.Search(ctx, "MessageHeader", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMolecularSequence(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MolecularSequence"], err
}
func (w Concrete) SearchMolecularSequence(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MolecularSequence"}
	}
	v, err := g.Search(ctx, "MolecularSequence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNamingSystem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NamingSystem"], err
}
func (w Concrete) SearchNamingSystem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NamingSystem"}
	}
	v, err := g.Search(ctx, "NamingSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionIntake(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NutritionIntake"], err
}
func (w Concrete) SearchNutritionIntake(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NutritionIntake"}
	}
	v, err := g.Search(ctx, "NutritionIntake", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionOrder(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NutritionOrder"], err
}
func (w Concrete) SearchNutritionOrder(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NutritionOrder"}
	}
	v, err := g.Search(ctx, "NutritionOrder", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionProduct(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NutritionProduct"], err
}
func (w Concrete) SearchNutritionProduct(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NutritionProduct"}
	}
	v, err := g.Search(ctx, "NutritionProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Observation"], err
}
func (w Concrete) SearchObservation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Observation"}
	}
	v, err := g.Search(ctx, "Observation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservationDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ObservationDefinition"], err
}
func (w Concrete) SearchObservationDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Search(ctx, "ObservationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationDefinition"], err
}
func (w Concrete) SearchOperationDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OperationDefinition"}
	}
	v, err := g.Search(ctx, "OperationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationOutcome(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationOutcome"], err
}
func (w Concrete) SearchOperationOutcome(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OperationOutcome"}
	}
	v, err := g.Search(ctx, "OperationOutcome", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Organization"], err
}
func (w Concrete) SearchOrganization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Organization"}
	}
	v, err := g.Search(ctx, "Organization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganizationAffiliation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OrganizationAffiliation"], err
}
func (w Concrete) SearchOrganizationAffiliation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Search(ctx, "OrganizationAffiliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPackagedProductDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PackagedProductDefinition"], err
}
func (w Concrete) SearchPackagedProductDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PackagedProductDefinition"}
	}
	v, err := g.Search(ctx, "PackagedProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesParameters(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Parameters"], err
}
func (w Concrete) SearchParameters(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Parameters"}
	}
	v, err := g.Search(ctx, "Parameters", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPatient(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Patient"], err
}
func (w Concrete) SearchPatient(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Patient"}
	}
	v, err := g.Search(ctx, "Patient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentNotice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentNotice"], err
}
func (w Concrete) SearchPaymentNotice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PaymentNotice"}
	}
	v, err := g.Search(ctx, "PaymentNotice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentReconciliation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentReconciliation"], err
}
func (w Concrete) SearchPaymentReconciliation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Search(ctx, "PaymentReconciliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPermission(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Permission"], err
}
func (w Concrete) SearchPermission(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Permission"}
	}
	v, err := g.Search(ctx, "Permission", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPerson(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Person"], err
}
func (w Concrete) SearchPerson(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Person"}
	}
	v, err := g.Search(ctx, "Person", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPlanDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PlanDefinition"], err
}
func (w Concrete) SearchPlanDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PlanDefinition"}
	}
	v, err := g.Search(ctx, "PlanDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitioner(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Practitioner"], err
}
func (w Concrete) SearchPractitioner(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Practitioner"}
	}
	v, err := g.Search(ctx, "Practitioner", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitionerRole(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PractitionerRole"], err
}
func (w Concrete) SearchPractitionerRole(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PractitionerRole"}
	}
	v, err := g.Search(ctx, "PractitionerRole", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProcedure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Procedure"], err
}
func (w Concrete) SearchProcedure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Procedure"}
	}
	v, err := g.Search(ctx, "Procedure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProvenance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Provenance"], err
}
func (w Concrete) SearchProvenance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Provenance"}
	}
	v, err := g.Search(ctx, "Provenance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaire(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Questionnaire"], err
}
func (w Concrete) SearchQuestionnaire(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Questionnaire"}
	}
	v, err := g.Search(ctx, "Questionnaire", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaireResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["QuestionnaireResponse"], err
}
func (w Concrete) SearchQuestionnaireResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Search(ctx, "QuestionnaireResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRegulatedAuthorization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RegulatedAuthorization"], err
}
func (w Concrete) SearchRegulatedAuthorization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RegulatedAuthorization"}
	}
	v, err := g.Search(ctx, "RegulatedAuthorization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRelatedPerson(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RelatedPerson"], err
}
func (w Concrete) SearchRelatedPerson(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RelatedPerson"}
	}
	v, err := g.Search(ctx, "RelatedPerson", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRequestOrchestration(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RequestOrchestration"], err
}
func (w Concrete) SearchRequestOrchestration(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RequestOrchestration"}
	}
	v, err := g.Search(ctx, "RequestOrchestration", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRequirements(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Requirements"], err
}
func (w Concrete) SearchRequirements(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Requirements"}
	}
	v, err := g.Search(ctx, "Requirements", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchStudy(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchStudy"], err
}
func (w Concrete) SearchResearchStudy(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchStudy"}
	}
	v, err := g.Search(ctx, "ResearchStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchSubject(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchSubject"], err
}
func (w Concrete) SearchResearchSubject(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchSubject"}
	}
	v, err := g.Search(ctx, "ResearchSubject", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRiskAssessment(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RiskAssessment"], err
}
func (w Concrete) SearchRiskAssessment(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RiskAssessment"}
	}
	v, err := g.Search(ctx, "RiskAssessment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSchedule(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Schedule"], err
}
func (w Concrete) SearchSchedule(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Schedule"}
	}
	v, err := g.Search(ctx, "Schedule", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSearchParameter(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SearchParameter"], err
}
func (w Concrete) SearchSearchParameter(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SearchParameter"}
	}
	v, err := g.Search(ctx, "SearchParameter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesServiceRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ServiceRequest"], err
}
func (w Concrete) SearchServiceRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ServiceRequest"}
	}
	v, err := g.Search(ctx, "ServiceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSlot(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Slot"], err
}
func (w Concrete) SearchSlot(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Slot"}
	}
	v, err := g.Search(ctx, "Slot", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimen(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Specimen"], err
}
func (w Concrete) SearchSpecimen(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Specimen"}
	}
	v, err := g.Search(ctx, "Specimen", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimenDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SpecimenDefinition"], err
}
func (w Concrete) SearchSpecimenDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Search(ctx, "SpecimenDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureDefinition"], err
}
func (w Concrete) SearchStructureDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "StructureDefinition"}
	}
	v, err := g.Search(ctx, "StructureDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureMap(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureMap"], err
}
func (w Concrete) SearchStructureMap(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "StructureMap"}
	}
	v, err := g.Search(ctx, "StructureMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscription(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Subscription"], err
}
func (w Concrete) SearchSubscription(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Subscription"}
	}
	v, err := g.Search(ctx, "Subscription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscriptionStatus(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubscriptionStatus"], err
}
func (w Concrete) SearchSubscriptionStatus(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubscriptionStatus"}
	}
	v, err := g.Search(ctx, "SubscriptionStatus", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscriptionTopic(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubscriptionTopic"], err
}
func (w Concrete) SearchSubscriptionTopic(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubscriptionTopic"}
	}
	v, err := g.Search(ctx, "SubscriptionTopic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Substance"], err
}
func (w Concrete) SearchSubstance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Substance"}
	}
	v, err := g.Search(ctx, "Substance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceDefinition"], err
}
func (w Concrete) SearchSubstanceDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceDefinition"}
	}
	v, err := g.Search(ctx, "SubstanceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceNucleicAcid(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceNucleicAcid"], err
}
func (w Concrete) SearchSubstanceNucleicAcid(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceNucleicAcid"}
	}
	v, err := g.Search(ctx, "SubstanceNucleicAcid", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstancePolymer(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstancePolymer"], err
}
func (w Concrete) SearchSubstancePolymer(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstancePolymer"}
	}
	v, err := g.Search(ctx, "SubstancePolymer", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceProtein(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceProtein"], err
}
func (w Concrete) SearchSubstanceProtein(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceProtein"}
	}
	v, err := g.Search(ctx, "SubstanceProtein", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceReferenceInformation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceReferenceInformation"], err
}
func (w Concrete) SearchSubstanceReferenceInformation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceReferenceInformation"}
	}
	v, err := g.Search(ctx, "SubstanceReferenceInformation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceSourceMaterial(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceSourceMaterial"], err
}
func (w Concrete) SearchSubstanceSourceMaterial(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceSourceMaterial"}
	}
	v, err := g.Search(ctx, "SubstanceSourceMaterial", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyDelivery(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyDelivery"], err
}
func (w Concrete) SearchSupplyDelivery(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Search(ctx, "SupplyDelivery", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyRequest"], err
}
func (w Concrete) SearchSupplyRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SupplyRequest"}
	}
	v, err := g.Search(ctx, "SupplyRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTask(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Task"], err
}
func (w Concrete) SearchTask(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Task"}
	}
	v, err := g.Search(ctx, "Task", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTerminologyCapabilities(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TerminologyCapabilities"], err
}
func (w Concrete) SearchTerminologyCapabilities(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Search(ctx, "TerminologyCapabilities", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestPlan(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestPlan"], err
}
func (w Concrete) SearchTestPlan(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TestPlan"}
	}
	v, err := g.Search(ctx, "TestPlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestReport"], err
}
func (w Concrete) SearchTestReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TestReport"}
	}
	v, err := g.Search(ctx, "TestReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestScript(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestScript"], err
}
func (w Concrete) SearchTestScript(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TestScript"}
	}
	v, err := g.Search(ctx, "TestScript", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTransport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Transport"], err
}
func (w Concrete) SearchTransport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Transport"}
	}
	v, err := g.Search(ctx, "Transport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesValueSet(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ValueSet"], err
}
func (w Concrete) SearchValueSet(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ValueSet"}
	}
	v, err := g.Search(ctx, "ValueSet", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVerificationResult(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VerificationResult"], err
}
func (w Concrete) SearchVerificationResult(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "VerificationResult"}
	}
	v, err := g.Search(ctx, "VerificationResult", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVisionPrescription(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VisionPrescription"], err
}
func (w Concrete) SearchVisionPrescription(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "VisionPrescription"}
	}
	v, err := g.Search(ctx, "VisionPrescription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
