// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4B

import (
	"context"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	model "github.com/DAMEDIC/fhir-toolbox-go/model"
	r4b "github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4b"
	utils "github.com/DAMEDIC/fhir-toolbox-go/utils"
)

type Generic struct {
	Concrete any
}

func (w Generic) AllCapabilities(ctx context.Context) (capabilities.Capabilities, error) {
	g, ok := w.Concrete.(capabilities.GenericCapabilities)
	if ok {
		// shortcut for the case that the underlying implementation already implements the generic API
		return g.AllCapabilities(ctx)
	}
	return AllCapabilities(ctx, w.Concrete)
}
func (w Generic) Create(ctx context.Context, resource model.Resource) (model.Resource, error) {
	g, ok := w.Concrete.(capabilities.GenericCreate)
	if ok {
		// shortcut for the case that the underlying implementation already implements the generic API
		return g.Create(ctx, resource)
	}
	switch r := resource.(type) {
	case r4b.Account:
		impl, ok := w.Concrete.(AccountCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Account")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateAccount(ctx, r)
	case r4b.ActivityDefinition:
		impl, ok := w.Concrete.(ActivityDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ActivityDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateActivityDefinition(ctx, r)
	case r4b.AdministrableProductDefinition:
		impl, ok := w.Concrete.(AdministrableProductDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for AdministrableProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateAdministrableProductDefinition(ctx, r)
	case r4b.AdverseEvent:
		impl, ok := w.Concrete.(AdverseEventCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for AdverseEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateAdverseEvent(ctx, r)
	case r4b.AllergyIntolerance:
		impl, ok := w.Concrete.(AllergyIntoleranceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for AllergyIntolerance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateAllergyIntolerance(ctx, r)
	case r4b.Appointment:
		impl, ok := w.Concrete.(AppointmentCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Appointment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateAppointment(ctx, r)
	case r4b.AppointmentResponse:
		impl, ok := w.Concrete.(AppointmentResponseCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for AppointmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateAppointmentResponse(ctx, r)
	case r4b.AuditEvent:
		impl, ok := w.Concrete.(AuditEventCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for AuditEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateAuditEvent(ctx, r)
	case r4b.Basic:
		impl, ok := w.Concrete.(BasicCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Basic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateBasic(ctx, r)
	case r4b.Binary:
		impl, ok := w.Concrete.(BinaryCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Binary")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateBinary(ctx, r)
	case r4b.BiologicallyDerivedProduct:
		impl, ok := w.Concrete.(BiologicallyDerivedProductCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for BiologicallyDerivedProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateBiologicallyDerivedProduct(ctx, r)
	case r4b.BodyStructure:
		impl, ok := w.Concrete.(BodyStructureCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for BodyStructure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateBodyStructure(ctx, r)
	case r4b.Bundle:
		impl, ok := w.Concrete.(BundleCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Bundle")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateBundle(ctx, r)
	case r4b.CapabilityStatement:
		impl, ok := w.Concrete.(CapabilityStatementCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CapabilityStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCapabilityStatement(ctx, r)
	case r4b.CarePlan:
		impl, ok := w.Concrete.(CarePlanCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CarePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCarePlan(ctx, r)
	case r4b.CareTeam:
		impl, ok := w.Concrete.(CareTeamCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CareTeam")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCareTeam(ctx, r)
	case r4b.CatalogEntry:
		impl, ok := w.Concrete.(CatalogEntryCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CatalogEntry")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCatalogEntry(ctx, r)
	case r4b.ChargeItem:
		impl, ok := w.Concrete.(ChargeItemCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ChargeItem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateChargeItem(ctx, r)
	case r4b.ChargeItemDefinition:
		impl, ok := w.Concrete.(ChargeItemDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ChargeItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateChargeItemDefinition(ctx, r)
	case r4b.Citation:
		impl, ok := w.Concrete.(CitationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Citation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCitation(ctx, r)
	case r4b.Claim:
		impl, ok := w.Concrete.(ClaimCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Claim")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateClaim(ctx, r)
	case r4b.ClaimResponse:
		impl, ok := w.Concrete.(ClaimResponseCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ClaimResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateClaimResponse(ctx, r)
	case r4b.ClinicalImpression:
		impl, ok := w.Concrete.(ClinicalImpressionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ClinicalImpression")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateClinicalImpression(ctx, r)
	case r4b.ClinicalUseDefinition:
		impl, ok := w.Concrete.(ClinicalUseDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ClinicalUseDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateClinicalUseDefinition(ctx, r)
	case r4b.CodeSystem:
		impl, ok := w.Concrete.(CodeSystemCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CodeSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCodeSystem(ctx, r)
	case r4b.Communication:
		impl, ok := w.Concrete.(CommunicationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Communication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCommunication(ctx, r)
	case r4b.CommunicationRequest:
		impl, ok := w.Concrete.(CommunicationRequestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CommunicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCommunicationRequest(ctx, r)
	case r4b.CompartmentDefinition:
		impl, ok := w.Concrete.(CompartmentDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CompartmentDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCompartmentDefinition(ctx, r)
	case r4b.Composition:
		impl, ok := w.Concrete.(CompositionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Composition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateComposition(ctx, r)
	case r4b.ConceptMap:
		impl, ok := w.Concrete.(ConceptMapCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ConceptMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateConceptMap(ctx, r)
	case r4b.Condition:
		impl, ok := w.Concrete.(ConditionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Condition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCondition(ctx, r)
	case r4b.Consent:
		impl, ok := w.Concrete.(ConsentCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Consent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateConsent(ctx, r)
	case r4b.Contract:
		impl, ok := w.Concrete.(ContractCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Contract")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateContract(ctx, r)
	case r4b.Coverage:
		impl, ok := w.Concrete.(CoverageCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Coverage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCoverage(ctx, r)
	case r4b.CoverageEligibilityRequest:
		impl, ok := w.Concrete.(CoverageEligibilityRequestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CoverageEligibilityRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCoverageEligibilityRequest(ctx, r)
	case r4b.CoverageEligibilityResponse:
		impl, ok := w.Concrete.(CoverageEligibilityResponseCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for CoverageEligibilityResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateCoverageEligibilityResponse(ctx, r)
	case r4b.DetectedIssue:
		impl, ok := w.Concrete.(DetectedIssueCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DetectedIssue")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDetectedIssue(ctx, r)
	case r4b.Device:
		impl, ok := w.Concrete.(DeviceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Device")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDevice(ctx, r)
	case r4b.DeviceDefinition:
		impl, ok := w.Concrete.(DeviceDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DeviceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDeviceDefinition(ctx, r)
	case r4b.DeviceMetric:
		impl, ok := w.Concrete.(DeviceMetricCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DeviceMetric")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDeviceMetric(ctx, r)
	case r4b.DeviceRequest:
		impl, ok := w.Concrete.(DeviceRequestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DeviceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDeviceRequest(ctx, r)
	case r4b.DeviceUseStatement:
		impl, ok := w.Concrete.(DeviceUseStatementCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DeviceUseStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDeviceUseStatement(ctx, r)
	case r4b.DiagnosticReport:
		impl, ok := w.Concrete.(DiagnosticReportCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DiagnosticReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDiagnosticReport(ctx, r)
	case r4b.DocumentManifest:
		impl, ok := w.Concrete.(DocumentManifestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DocumentManifest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDocumentManifest(ctx, r)
	case r4b.DocumentReference:
		impl, ok := w.Concrete.(DocumentReferenceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for DocumentReference")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateDocumentReference(ctx, r)
	case r4b.Encounter:
		impl, ok := w.Concrete.(EncounterCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Encounter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEncounter(ctx, r)
	case r4b.Endpoint:
		impl, ok := w.Concrete.(EndpointCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Endpoint")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEndpoint(ctx, r)
	case r4b.EnrollmentRequest:
		impl, ok := w.Concrete.(EnrollmentRequestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for EnrollmentRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEnrollmentRequest(ctx, r)
	case r4b.EnrollmentResponse:
		impl, ok := w.Concrete.(EnrollmentResponseCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for EnrollmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEnrollmentResponse(ctx, r)
	case r4b.EpisodeOfCare:
		impl, ok := w.Concrete.(EpisodeOfCareCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for EpisodeOfCare")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEpisodeOfCare(ctx, r)
	case r4b.EventDefinition:
		impl, ok := w.Concrete.(EventDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for EventDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEventDefinition(ctx, r)
	case r4b.Evidence:
		impl, ok := w.Concrete.(EvidenceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Evidence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEvidence(ctx, r)
	case r4b.EvidenceReport:
		impl, ok := w.Concrete.(EvidenceReportCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for EvidenceReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEvidenceReport(ctx, r)
	case r4b.EvidenceVariable:
		impl, ok := w.Concrete.(EvidenceVariableCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for EvidenceVariable")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateEvidenceVariable(ctx, r)
	case r4b.ExampleScenario:
		impl, ok := w.Concrete.(ExampleScenarioCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ExampleScenario")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateExampleScenario(ctx, r)
	case r4b.ExplanationOfBenefit:
		impl, ok := w.Concrete.(ExplanationOfBenefitCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ExplanationOfBenefit")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateExplanationOfBenefit(ctx, r)
	case r4b.FamilyMemberHistory:
		impl, ok := w.Concrete.(FamilyMemberHistoryCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for FamilyMemberHistory")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateFamilyMemberHistory(ctx, r)
	case r4b.Flag:
		impl, ok := w.Concrete.(FlagCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Flag")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateFlag(ctx, r)
	case r4b.Goal:
		impl, ok := w.Concrete.(GoalCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Goal")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateGoal(ctx, r)
	case r4b.GraphDefinition:
		impl, ok := w.Concrete.(GraphDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for GraphDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateGraphDefinition(ctx, r)
	case r4b.Group:
		impl, ok := w.Concrete.(GroupCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Group")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateGroup(ctx, r)
	case r4b.GuidanceResponse:
		impl, ok := w.Concrete.(GuidanceResponseCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for GuidanceResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateGuidanceResponse(ctx, r)
	case r4b.HealthcareService:
		impl, ok := w.Concrete.(HealthcareServiceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for HealthcareService")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateHealthcareService(ctx, r)
	case r4b.ImagingStudy:
		impl, ok := w.Concrete.(ImagingStudyCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ImagingStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateImagingStudy(ctx, r)
	case r4b.Immunization:
		impl, ok := w.Concrete.(ImmunizationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Immunization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateImmunization(ctx, r)
	case r4b.ImmunizationEvaluation:
		impl, ok := w.Concrete.(ImmunizationEvaluationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ImmunizationEvaluation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateImmunizationEvaluation(ctx, r)
	case r4b.ImmunizationRecommendation:
		impl, ok := w.Concrete.(ImmunizationRecommendationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ImmunizationRecommendation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateImmunizationRecommendation(ctx, r)
	case r4b.ImplementationGuide:
		impl, ok := w.Concrete.(ImplementationGuideCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ImplementationGuide")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateImplementationGuide(ctx, r)
	case r4b.Ingredient:
		impl, ok := w.Concrete.(IngredientCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Ingredient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateIngredient(ctx, r)
	case r4b.InsurancePlan:
		impl, ok := w.Concrete.(InsurancePlanCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for InsurancePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateInsurancePlan(ctx, r)
	case r4b.Invoice:
		impl, ok := w.Concrete.(InvoiceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Invoice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateInvoice(ctx, r)
	case r4b.Library:
		impl, ok := w.Concrete.(LibraryCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Library")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateLibrary(ctx, r)
	case r4b.Linkage:
		impl, ok := w.Concrete.(LinkageCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Linkage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateLinkage(ctx, r)
	case r4b.List:
		impl, ok := w.Concrete.(ListCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for List")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateList(ctx, r)
	case r4b.Location:
		impl, ok := w.Concrete.(LocationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Location")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateLocation(ctx, r)
	case r4b.ManufacturedItemDefinition:
		impl, ok := w.Concrete.(ManufacturedItemDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ManufacturedItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateManufacturedItemDefinition(ctx, r)
	case r4b.Measure:
		impl, ok := w.Concrete.(MeasureCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Measure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMeasure(ctx, r)
	case r4b.MeasureReport:
		impl, ok := w.Concrete.(MeasureReportCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MeasureReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMeasureReport(ctx, r)
	case r4b.Media:
		impl, ok := w.Concrete.(MediaCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Media")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedia(ctx, r)
	case r4b.Medication:
		impl, ok := w.Concrete.(MedicationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Medication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedication(ctx, r)
	case r4b.MedicationAdministration:
		impl, ok := w.Concrete.(MedicationAdministrationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MedicationAdministration")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedicationAdministration(ctx, r)
	case r4b.MedicationDispense:
		impl, ok := w.Concrete.(MedicationDispenseCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MedicationDispense")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedicationDispense(ctx, r)
	case r4b.MedicationKnowledge:
		impl, ok := w.Concrete.(MedicationKnowledgeCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MedicationKnowledge")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedicationKnowledge(ctx, r)
	case r4b.MedicationRequest:
		impl, ok := w.Concrete.(MedicationRequestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MedicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedicationRequest(ctx, r)
	case r4b.MedicationStatement:
		impl, ok := w.Concrete.(MedicationStatementCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MedicationStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedicationStatement(ctx, r)
	case r4b.MedicinalProductDefinition:
		impl, ok := w.Concrete.(MedicinalProductDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MedicinalProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMedicinalProductDefinition(ctx, r)
	case r4b.MessageDefinition:
		impl, ok := w.Concrete.(MessageDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MessageDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMessageDefinition(ctx, r)
	case r4b.MessageHeader:
		impl, ok := w.Concrete.(MessageHeaderCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MessageHeader")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMessageHeader(ctx, r)
	case r4b.MolecularSequence:
		impl, ok := w.Concrete.(MolecularSequenceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for MolecularSequence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateMolecularSequence(ctx, r)
	case r4b.NamingSystem:
		impl, ok := w.Concrete.(NamingSystemCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for NamingSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateNamingSystem(ctx, r)
	case r4b.NutritionOrder:
		impl, ok := w.Concrete.(NutritionOrderCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for NutritionOrder")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateNutritionOrder(ctx, r)
	case r4b.NutritionProduct:
		impl, ok := w.Concrete.(NutritionProductCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for NutritionProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateNutritionProduct(ctx, r)
	case r4b.Observation:
		impl, ok := w.Concrete.(ObservationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Observation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateObservation(ctx, r)
	case r4b.ObservationDefinition:
		impl, ok := w.Concrete.(ObservationDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ObservationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateObservationDefinition(ctx, r)
	case r4b.OperationDefinition:
		impl, ok := w.Concrete.(OperationDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for OperationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateOperationDefinition(ctx, r)
	case r4b.OperationOutcome:
		impl, ok := w.Concrete.(OperationOutcomeCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for OperationOutcome")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateOperationOutcome(ctx, r)
	case r4b.Organization:
		impl, ok := w.Concrete.(OrganizationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Organization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateOrganization(ctx, r)
	case r4b.OrganizationAffiliation:
		impl, ok := w.Concrete.(OrganizationAffiliationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for OrganizationAffiliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateOrganizationAffiliation(ctx, r)
	case r4b.PackagedProductDefinition:
		impl, ok := w.Concrete.(PackagedProductDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for PackagedProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePackagedProductDefinition(ctx, r)
	case r4b.Parameters:
		impl, ok := w.Concrete.(ParametersCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Parameters")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateParameters(ctx, r)
	case r4b.Patient:
		impl, ok := w.Concrete.(PatientCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Patient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePatient(ctx, r)
	case r4b.PaymentNotice:
		impl, ok := w.Concrete.(PaymentNoticeCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for PaymentNotice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePaymentNotice(ctx, r)
	case r4b.PaymentReconciliation:
		impl, ok := w.Concrete.(PaymentReconciliationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for PaymentReconciliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePaymentReconciliation(ctx, r)
	case r4b.Person:
		impl, ok := w.Concrete.(PersonCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Person")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePerson(ctx, r)
	case r4b.PlanDefinition:
		impl, ok := w.Concrete.(PlanDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for PlanDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePlanDefinition(ctx, r)
	case r4b.Practitioner:
		impl, ok := w.Concrete.(PractitionerCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Practitioner")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePractitioner(ctx, r)
	case r4b.PractitionerRole:
		impl, ok := w.Concrete.(PractitionerRoleCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for PractitionerRole")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreatePractitionerRole(ctx, r)
	case r4b.Procedure:
		impl, ok := w.Concrete.(ProcedureCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Procedure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateProcedure(ctx, r)
	case r4b.Provenance:
		impl, ok := w.Concrete.(ProvenanceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Provenance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateProvenance(ctx, r)
	case r4b.Questionnaire:
		impl, ok := w.Concrete.(QuestionnaireCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Questionnaire")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateQuestionnaire(ctx, r)
	case r4b.QuestionnaireResponse:
		impl, ok := w.Concrete.(QuestionnaireResponseCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for QuestionnaireResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateQuestionnaireResponse(ctx, r)
	case r4b.RegulatedAuthorization:
		impl, ok := w.Concrete.(RegulatedAuthorizationCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for RegulatedAuthorization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateRegulatedAuthorization(ctx, r)
	case r4b.RelatedPerson:
		impl, ok := w.Concrete.(RelatedPersonCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for RelatedPerson")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateRelatedPerson(ctx, r)
	case r4b.RequestGroup:
		impl, ok := w.Concrete.(RequestGroupCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for RequestGroup")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateRequestGroup(ctx, r)
	case r4b.ResearchDefinition:
		impl, ok := w.Concrete.(ResearchDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ResearchDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateResearchDefinition(ctx, r)
	case r4b.ResearchElementDefinition:
		impl, ok := w.Concrete.(ResearchElementDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ResearchElementDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateResearchElementDefinition(ctx, r)
	case r4b.ResearchStudy:
		impl, ok := w.Concrete.(ResearchStudyCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ResearchStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateResearchStudy(ctx, r)
	case r4b.ResearchSubject:
		impl, ok := w.Concrete.(ResearchSubjectCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ResearchSubject")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateResearchSubject(ctx, r)
	case r4b.RiskAssessment:
		impl, ok := w.Concrete.(RiskAssessmentCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for RiskAssessment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateRiskAssessment(ctx, r)
	case r4b.Schedule:
		impl, ok := w.Concrete.(ScheduleCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Schedule")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSchedule(ctx, r)
	case r4b.SearchParameter:
		impl, ok := w.Concrete.(SearchParameterCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for SearchParameter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSearchParameter(ctx, r)
	case r4b.ServiceRequest:
		impl, ok := w.Concrete.(ServiceRequestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ServiceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateServiceRequest(ctx, r)
	case r4b.Slot:
		impl, ok := w.Concrete.(SlotCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Slot")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSlot(ctx, r)
	case r4b.Specimen:
		impl, ok := w.Concrete.(SpecimenCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Specimen")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSpecimen(ctx, r)
	case r4b.SpecimenDefinition:
		impl, ok := w.Concrete.(SpecimenDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for SpecimenDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSpecimenDefinition(ctx, r)
	case r4b.StructureDefinition:
		impl, ok := w.Concrete.(StructureDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for StructureDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateStructureDefinition(ctx, r)
	case r4b.StructureMap:
		impl, ok := w.Concrete.(StructureMapCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for StructureMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateStructureMap(ctx, r)
	case r4b.Subscription:
		impl, ok := w.Concrete.(SubscriptionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Subscription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSubscription(ctx, r)
	case r4b.SubscriptionStatus:
		impl, ok := w.Concrete.(SubscriptionStatusCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for SubscriptionStatus")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSubscriptionStatus(ctx, r)
	case r4b.SubscriptionTopic:
		impl, ok := w.Concrete.(SubscriptionTopicCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for SubscriptionTopic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSubscriptionTopic(ctx, r)
	case r4b.Substance:
		impl, ok := w.Concrete.(SubstanceCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Substance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSubstance(ctx, r)
	case r4b.SubstanceDefinition:
		impl, ok := w.Concrete.(SubstanceDefinitionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for SubstanceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSubstanceDefinition(ctx, r)
	case r4b.SupplyDelivery:
		impl, ok := w.Concrete.(SupplyDeliveryCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for SupplyDelivery")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSupplyDelivery(ctx, r)
	case r4b.SupplyRequest:
		impl, ok := w.Concrete.(SupplyRequestCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for SupplyRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateSupplyRequest(ctx, r)
	case r4b.Task:
		impl, ok := w.Concrete.(TaskCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for Task")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateTask(ctx, r)
	case r4b.TerminologyCapabilities:
		impl, ok := w.Concrete.(TerminologyCapabilitiesCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for TerminologyCapabilities")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateTerminologyCapabilities(ctx, r)
	case r4b.TestReport:
		impl, ok := w.Concrete.(TestReportCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for TestReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateTestReport(ctx, r)
	case r4b.TestScript:
		impl, ok := w.Concrete.(TestScriptCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for TestScript")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateTestScript(ctx, r)
	case r4b.ValueSet:
		impl, ok := w.Concrete.(ValueSetCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for ValueSet")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateValueSet(ctx, r)
	case r4b.VerificationResult:
		impl, ok := w.Concrete.(VerificationResultCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for VerificationResult")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateVerificationResult(ctx, r)
	case r4b.VisionPrescription:
		impl, ok := w.Concrete.(VisionPrescriptionCreate)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("create not implemented for VisionPrescription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.CreateVisionPrescription(ctx, r)
	default:
		return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("invalid resource type: " + resource.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
}
func (w Generic) Read(ctx context.Context, resourceType string, id string) (model.Resource, error) {
	g, ok := w.Concrete.(capabilities.GenericRead)
	if ok {
		// shortcut for the case that the underlying implementation already implements the generic API
		return g.Read(ctx, resourceType, id)
	}
	switch resourceType {
	case "Account":
		impl, ok := w.Concrete.(AccountRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Account")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadAccount(ctx, id)
	case "ActivityDefinition":
		impl, ok := w.Concrete.(ActivityDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ActivityDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadActivityDefinition(ctx, id)
	case "AdministrableProductDefinition":
		impl, ok := w.Concrete.(AdministrableProductDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for AdministrableProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadAdministrableProductDefinition(ctx, id)
	case "AdverseEvent":
		impl, ok := w.Concrete.(AdverseEventRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for AdverseEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadAdverseEvent(ctx, id)
	case "AllergyIntolerance":
		impl, ok := w.Concrete.(AllergyIntoleranceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for AllergyIntolerance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadAllergyIntolerance(ctx, id)
	case "Appointment":
		impl, ok := w.Concrete.(AppointmentRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Appointment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadAppointment(ctx, id)
	case "AppointmentResponse":
		impl, ok := w.Concrete.(AppointmentResponseRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for AppointmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadAppointmentResponse(ctx, id)
	case "AuditEvent":
		impl, ok := w.Concrete.(AuditEventRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for AuditEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadAuditEvent(ctx, id)
	case "Basic":
		impl, ok := w.Concrete.(BasicRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Basic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadBasic(ctx, id)
	case "Binary":
		impl, ok := w.Concrete.(BinaryRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Binary")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadBinary(ctx, id)
	case "BiologicallyDerivedProduct":
		impl, ok := w.Concrete.(BiologicallyDerivedProductRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for BiologicallyDerivedProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadBiologicallyDerivedProduct(ctx, id)
	case "BodyStructure":
		impl, ok := w.Concrete.(BodyStructureRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for BodyStructure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadBodyStructure(ctx, id)
	case "Bundle":
		impl, ok := w.Concrete.(BundleRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Bundle")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadBundle(ctx, id)
	case "CapabilityStatement":
		impl, ok := w.Concrete.(CapabilityStatementRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CapabilityStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCapabilityStatement(ctx, id)
	case "CarePlan":
		impl, ok := w.Concrete.(CarePlanRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CarePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCarePlan(ctx, id)
	case "CareTeam":
		impl, ok := w.Concrete.(CareTeamRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CareTeam")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCareTeam(ctx, id)
	case "CatalogEntry":
		impl, ok := w.Concrete.(CatalogEntryRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CatalogEntry")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCatalogEntry(ctx, id)
	case "ChargeItem":
		impl, ok := w.Concrete.(ChargeItemRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ChargeItem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadChargeItem(ctx, id)
	case "ChargeItemDefinition":
		impl, ok := w.Concrete.(ChargeItemDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ChargeItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadChargeItemDefinition(ctx, id)
	case "Citation":
		impl, ok := w.Concrete.(CitationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Citation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCitation(ctx, id)
	case "Claim":
		impl, ok := w.Concrete.(ClaimRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Claim")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadClaim(ctx, id)
	case "ClaimResponse":
		impl, ok := w.Concrete.(ClaimResponseRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ClaimResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadClaimResponse(ctx, id)
	case "ClinicalImpression":
		impl, ok := w.Concrete.(ClinicalImpressionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ClinicalImpression")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadClinicalImpression(ctx, id)
	case "ClinicalUseDefinition":
		impl, ok := w.Concrete.(ClinicalUseDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ClinicalUseDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadClinicalUseDefinition(ctx, id)
	case "CodeSystem":
		impl, ok := w.Concrete.(CodeSystemRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CodeSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCodeSystem(ctx, id)
	case "Communication":
		impl, ok := w.Concrete.(CommunicationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Communication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCommunication(ctx, id)
	case "CommunicationRequest":
		impl, ok := w.Concrete.(CommunicationRequestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CommunicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCommunicationRequest(ctx, id)
	case "CompartmentDefinition":
		impl, ok := w.Concrete.(CompartmentDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CompartmentDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCompartmentDefinition(ctx, id)
	case "Composition":
		impl, ok := w.Concrete.(CompositionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Composition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadComposition(ctx, id)
	case "ConceptMap":
		impl, ok := w.Concrete.(ConceptMapRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ConceptMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadConceptMap(ctx, id)
	case "Condition":
		impl, ok := w.Concrete.(ConditionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Condition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCondition(ctx, id)
	case "Consent":
		impl, ok := w.Concrete.(ConsentRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Consent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadConsent(ctx, id)
	case "Contract":
		impl, ok := w.Concrete.(ContractRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Contract")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadContract(ctx, id)
	case "Coverage":
		impl, ok := w.Concrete.(CoverageRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Coverage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCoverage(ctx, id)
	case "CoverageEligibilityRequest":
		impl, ok := w.Concrete.(CoverageEligibilityRequestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CoverageEligibilityRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCoverageEligibilityRequest(ctx, id)
	case "CoverageEligibilityResponse":
		impl, ok := w.Concrete.(CoverageEligibilityResponseRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for CoverageEligibilityResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadCoverageEligibilityResponse(ctx, id)
	case "DetectedIssue":
		impl, ok := w.Concrete.(DetectedIssueRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DetectedIssue")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDetectedIssue(ctx, id)
	case "Device":
		impl, ok := w.Concrete.(DeviceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Device")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDevice(ctx, id)
	case "DeviceDefinition":
		impl, ok := w.Concrete.(DeviceDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DeviceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDeviceDefinition(ctx, id)
	case "DeviceMetric":
		impl, ok := w.Concrete.(DeviceMetricRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DeviceMetric")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDeviceMetric(ctx, id)
	case "DeviceRequest":
		impl, ok := w.Concrete.(DeviceRequestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DeviceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDeviceRequest(ctx, id)
	case "DeviceUseStatement":
		impl, ok := w.Concrete.(DeviceUseStatementRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DeviceUseStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDeviceUseStatement(ctx, id)
	case "DiagnosticReport":
		impl, ok := w.Concrete.(DiagnosticReportRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DiagnosticReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDiagnosticReport(ctx, id)
	case "DocumentManifest":
		impl, ok := w.Concrete.(DocumentManifestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DocumentManifest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDocumentManifest(ctx, id)
	case "DocumentReference":
		impl, ok := w.Concrete.(DocumentReferenceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for DocumentReference")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadDocumentReference(ctx, id)
	case "Encounter":
		impl, ok := w.Concrete.(EncounterRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Encounter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEncounter(ctx, id)
	case "Endpoint":
		impl, ok := w.Concrete.(EndpointRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Endpoint")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEndpoint(ctx, id)
	case "EnrollmentRequest":
		impl, ok := w.Concrete.(EnrollmentRequestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for EnrollmentRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEnrollmentRequest(ctx, id)
	case "EnrollmentResponse":
		impl, ok := w.Concrete.(EnrollmentResponseRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for EnrollmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEnrollmentResponse(ctx, id)
	case "EpisodeOfCare":
		impl, ok := w.Concrete.(EpisodeOfCareRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for EpisodeOfCare")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEpisodeOfCare(ctx, id)
	case "EventDefinition":
		impl, ok := w.Concrete.(EventDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for EventDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEventDefinition(ctx, id)
	case "Evidence":
		impl, ok := w.Concrete.(EvidenceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Evidence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEvidence(ctx, id)
	case "EvidenceReport":
		impl, ok := w.Concrete.(EvidenceReportRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for EvidenceReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEvidenceReport(ctx, id)
	case "EvidenceVariable":
		impl, ok := w.Concrete.(EvidenceVariableRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for EvidenceVariable")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadEvidenceVariable(ctx, id)
	case "ExampleScenario":
		impl, ok := w.Concrete.(ExampleScenarioRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ExampleScenario")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadExampleScenario(ctx, id)
	case "ExplanationOfBenefit":
		impl, ok := w.Concrete.(ExplanationOfBenefitRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ExplanationOfBenefit")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadExplanationOfBenefit(ctx, id)
	case "FamilyMemberHistory":
		impl, ok := w.Concrete.(FamilyMemberHistoryRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for FamilyMemberHistory")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadFamilyMemberHistory(ctx, id)
	case "Flag":
		impl, ok := w.Concrete.(FlagRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Flag")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadFlag(ctx, id)
	case "Goal":
		impl, ok := w.Concrete.(GoalRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Goal")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadGoal(ctx, id)
	case "GraphDefinition":
		impl, ok := w.Concrete.(GraphDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for GraphDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadGraphDefinition(ctx, id)
	case "Group":
		impl, ok := w.Concrete.(GroupRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Group")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadGroup(ctx, id)
	case "GuidanceResponse":
		impl, ok := w.Concrete.(GuidanceResponseRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for GuidanceResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadGuidanceResponse(ctx, id)
	case "HealthcareService":
		impl, ok := w.Concrete.(HealthcareServiceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for HealthcareService")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadHealthcareService(ctx, id)
	case "ImagingStudy":
		impl, ok := w.Concrete.(ImagingStudyRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ImagingStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadImagingStudy(ctx, id)
	case "Immunization":
		impl, ok := w.Concrete.(ImmunizationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Immunization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadImmunization(ctx, id)
	case "ImmunizationEvaluation":
		impl, ok := w.Concrete.(ImmunizationEvaluationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ImmunizationEvaluation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadImmunizationEvaluation(ctx, id)
	case "ImmunizationRecommendation":
		impl, ok := w.Concrete.(ImmunizationRecommendationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ImmunizationRecommendation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadImmunizationRecommendation(ctx, id)
	case "ImplementationGuide":
		impl, ok := w.Concrete.(ImplementationGuideRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ImplementationGuide")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadImplementationGuide(ctx, id)
	case "Ingredient":
		impl, ok := w.Concrete.(IngredientRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Ingredient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadIngredient(ctx, id)
	case "InsurancePlan":
		impl, ok := w.Concrete.(InsurancePlanRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for InsurancePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadInsurancePlan(ctx, id)
	case "Invoice":
		impl, ok := w.Concrete.(InvoiceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Invoice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadInvoice(ctx, id)
	case "Library":
		impl, ok := w.Concrete.(LibraryRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Library")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadLibrary(ctx, id)
	case "Linkage":
		impl, ok := w.Concrete.(LinkageRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Linkage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadLinkage(ctx, id)
	case "List":
		impl, ok := w.Concrete.(ListRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for List")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadList(ctx, id)
	case "Location":
		impl, ok := w.Concrete.(LocationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Location")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadLocation(ctx, id)
	case "ManufacturedItemDefinition":
		impl, ok := w.Concrete.(ManufacturedItemDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ManufacturedItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadManufacturedItemDefinition(ctx, id)
	case "Measure":
		impl, ok := w.Concrete.(MeasureRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Measure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMeasure(ctx, id)
	case "MeasureReport":
		impl, ok := w.Concrete.(MeasureReportRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MeasureReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMeasureReport(ctx, id)
	case "Media":
		impl, ok := w.Concrete.(MediaRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Media")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedia(ctx, id)
	case "Medication":
		impl, ok := w.Concrete.(MedicationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Medication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedication(ctx, id)
	case "MedicationAdministration":
		impl, ok := w.Concrete.(MedicationAdministrationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MedicationAdministration")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedicationAdministration(ctx, id)
	case "MedicationDispense":
		impl, ok := w.Concrete.(MedicationDispenseRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MedicationDispense")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedicationDispense(ctx, id)
	case "MedicationKnowledge":
		impl, ok := w.Concrete.(MedicationKnowledgeRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MedicationKnowledge")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedicationKnowledge(ctx, id)
	case "MedicationRequest":
		impl, ok := w.Concrete.(MedicationRequestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MedicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedicationRequest(ctx, id)
	case "MedicationStatement":
		impl, ok := w.Concrete.(MedicationStatementRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MedicationStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedicationStatement(ctx, id)
	case "MedicinalProductDefinition":
		impl, ok := w.Concrete.(MedicinalProductDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MedicinalProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMedicinalProductDefinition(ctx, id)
	case "MessageDefinition":
		impl, ok := w.Concrete.(MessageDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MessageDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMessageDefinition(ctx, id)
	case "MessageHeader":
		impl, ok := w.Concrete.(MessageHeaderRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MessageHeader")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMessageHeader(ctx, id)
	case "MolecularSequence":
		impl, ok := w.Concrete.(MolecularSequenceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for MolecularSequence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadMolecularSequence(ctx, id)
	case "NamingSystem":
		impl, ok := w.Concrete.(NamingSystemRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for NamingSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadNamingSystem(ctx, id)
	case "NutritionOrder":
		impl, ok := w.Concrete.(NutritionOrderRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for NutritionOrder")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadNutritionOrder(ctx, id)
	case "NutritionProduct":
		impl, ok := w.Concrete.(NutritionProductRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for NutritionProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadNutritionProduct(ctx, id)
	case "Observation":
		impl, ok := w.Concrete.(ObservationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Observation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadObservation(ctx, id)
	case "ObservationDefinition":
		impl, ok := w.Concrete.(ObservationDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ObservationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadObservationDefinition(ctx, id)
	case "OperationDefinition":
		impl, ok := w.Concrete.(OperationDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for OperationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadOperationDefinition(ctx, id)
	case "OperationOutcome":
		impl, ok := w.Concrete.(OperationOutcomeRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for OperationOutcome")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadOperationOutcome(ctx, id)
	case "Organization":
		impl, ok := w.Concrete.(OrganizationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Organization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadOrganization(ctx, id)
	case "OrganizationAffiliation":
		impl, ok := w.Concrete.(OrganizationAffiliationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for OrganizationAffiliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadOrganizationAffiliation(ctx, id)
	case "PackagedProductDefinition":
		impl, ok := w.Concrete.(PackagedProductDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for PackagedProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPackagedProductDefinition(ctx, id)
	case "Parameters":
		impl, ok := w.Concrete.(ParametersRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Parameters")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadParameters(ctx, id)
	case "Patient":
		impl, ok := w.Concrete.(PatientRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Patient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPatient(ctx, id)
	case "PaymentNotice":
		impl, ok := w.Concrete.(PaymentNoticeRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for PaymentNotice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPaymentNotice(ctx, id)
	case "PaymentReconciliation":
		impl, ok := w.Concrete.(PaymentReconciliationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for PaymentReconciliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPaymentReconciliation(ctx, id)
	case "Person":
		impl, ok := w.Concrete.(PersonRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Person")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPerson(ctx, id)
	case "PlanDefinition":
		impl, ok := w.Concrete.(PlanDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for PlanDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPlanDefinition(ctx, id)
	case "Practitioner":
		impl, ok := w.Concrete.(PractitionerRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Practitioner")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPractitioner(ctx, id)
	case "PractitionerRole":
		impl, ok := w.Concrete.(PractitionerRoleRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for PractitionerRole")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadPractitionerRole(ctx, id)
	case "Procedure":
		impl, ok := w.Concrete.(ProcedureRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Procedure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadProcedure(ctx, id)
	case "Provenance":
		impl, ok := w.Concrete.(ProvenanceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Provenance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadProvenance(ctx, id)
	case "Questionnaire":
		impl, ok := w.Concrete.(QuestionnaireRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Questionnaire")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadQuestionnaire(ctx, id)
	case "QuestionnaireResponse":
		impl, ok := w.Concrete.(QuestionnaireResponseRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for QuestionnaireResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadQuestionnaireResponse(ctx, id)
	case "RegulatedAuthorization":
		impl, ok := w.Concrete.(RegulatedAuthorizationRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for RegulatedAuthorization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadRegulatedAuthorization(ctx, id)
	case "RelatedPerson":
		impl, ok := w.Concrete.(RelatedPersonRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for RelatedPerson")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadRelatedPerson(ctx, id)
	case "RequestGroup":
		impl, ok := w.Concrete.(RequestGroupRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for RequestGroup")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadRequestGroup(ctx, id)
	case "ResearchDefinition":
		impl, ok := w.Concrete.(ResearchDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ResearchDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadResearchDefinition(ctx, id)
	case "ResearchElementDefinition":
		impl, ok := w.Concrete.(ResearchElementDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ResearchElementDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadResearchElementDefinition(ctx, id)
	case "ResearchStudy":
		impl, ok := w.Concrete.(ResearchStudyRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ResearchStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadResearchStudy(ctx, id)
	case "ResearchSubject":
		impl, ok := w.Concrete.(ResearchSubjectRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ResearchSubject")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadResearchSubject(ctx, id)
	case "RiskAssessment":
		impl, ok := w.Concrete.(RiskAssessmentRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for RiskAssessment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadRiskAssessment(ctx, id)
	case "Schedule":
		impl, ok := w.Concrete.(ScheduleRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Schedule")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSchedule(ctx, id)
	case "SearchParameter":
		impl, ok := w.Concrete.(SearchParameterRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for SearchParameter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSearchParameter(ctx, id)
	case "ServiceRequest":
		impl, ok := w.Concrete.(ServiceRequestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ServiceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadServiceRequest(ctx, id)
	case "Slot":
		impl, ok := w.Concrete.(SlotRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Slot")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSlot(ctx, id)
	case "Specimen":
		impl, ok := w.Concrete.(SpecimenRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Specimen")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSpecimen(ctx, id)
	case "SpecimenDefinition":
		impl, ok := w.Concrete.(SpecimenDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for SpecimenDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSpecimenDefinition(ctx, id)
	case "StructureDefinition":
		impl, ok := w.Concrete.(StructureDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for StructureDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadStructureDefinition(ctx, id)
	case "StructureMap":
		impl, ok := w.Concrete.(StructureMapRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for StructureMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadStructureMap(ctx, id)
	case "Subscription":
		impl, ok := w.Concrete.(SubscriptionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Subscription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSubscription(ctx, id)
	case "SubscriptionStatus":
		impl, ok := w.Concrete.(SubscriptionStatusRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for SubscriptionStatus")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSubscriptionStatus(ctx, id)
	case "SubscriptionTopic":
		impl, ok := w.Concrete.(SubscriptionTopicRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for SubscriptionTopic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSubscriptionTopic(ctx, id)
	case "Substance":
		impl, ok := w.Concrete.(SubstanceRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Substance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSubstance(ctx, id)
	case "SubstanceDefinition":
		impl, ok := w.Concrete.(SubstanceDefinitionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for SubstanceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSubstanceDefinition(ctx, id)
	case "SupplyDelivery":
		impl, ok := w.Concrete.(SupplyDeliveryRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for SupplyDelivery")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSupplyDelivery(ctx, id)
	case "SupplyRequest":
		impl, ok := w.Concrete.(SupplyRequestRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for SupplyRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadSupplyRequest(ctx, id)
	case "Task":
		impl, ok := w.Concrete.(TaskRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for Task")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadTask(ctx, id)
	case "TerminologyCapabilities":
		impl, ok := w.Concrete.(TerminologyCapabilitiesRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for TerminologyCapabilities")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadTerminologyCapabilities(ctx, id)
	case "TestReport":
		impl, ok := w.Concrete.(TestReportRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for TestReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadTestReport(ctx, id)
	case "TestScript":
		impl, ok := w.Concrete.(TestScriptRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for TestScript")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadTestScript(ctx, id)
	case "ValueSet":
		impl, ok := w.Concrete.(ValueSetRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for ValueSet")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadValueSet(ctx, id)
	case "VerificationResult":
		impl, ok := w.Concrete.(VerificationResultRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for VerificationResult")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadVerificationResult(ctx, id)
	case "VisionPrescription":
		impl, ok := w.Concrete.(VisionPrescriptionRead)
		if !ok {
			return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("read not implemented for VisionPrescription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.ReadVisionPrescription(ctx, id)
	default:
		return nil, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("invalid resource type: " + resourceType)},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
}
func (w Generic) Update(ctx context.Context, resource model.Resource) (capabilities.UpdateResult[model.Resource], error) {
	g, ok := w.Concrete.(capabilities.GenericUpdate)
	if ok {
		// shortcut for the case that the underlying implementation already implements the generic API
		return g.Update(ctx, resource)
	}
	switch r := resource.(type) {
	case r4b.Account:
		impl, ok := w.Concrete.(AccountUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Account")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateAccount(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ActivityDefinition:
		impl, ok := w.Concrete.(ActivityDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ActivityDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateActivityDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.AdministrableProductDefinition:
		impl, ok := w.Concrete.(AdministrableProductDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for AdministrableProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateAdministrableProductDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.AdverseEvent:
		impl, ok := w.Concrete.(AdverseEventUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for AdverseEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateAdverseEvent(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.AllergyIntolerance:
		impl, ok := w.Concrete.(AllergyIntoleranceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for AllergyIntolerance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateAllergyIntolerance(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Appointment:
		impl, ok := w.Concrete.(AppointmentUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Appointment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateAppointment(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.AppointmentResponse:
		impl, ok := w.Concrete.(AppointmentResponseUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for AppointmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateAppointmentResponse(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.AuditEvent:
		impl, ok := w.Concrete.(AuditEventUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for AuditEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateAuditEvent(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Basic:
		impl, ok := w.Concrete.(BasicUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Basic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateBasic(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Binary:
		impl, ok := w.Concrete.(BinaryUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Binary")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateBinary(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.BiologicallyDerivedProduct:
		impl, ok := w.Concrete.(BiologicallyDerivedProductUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for BiologicallyDerivedProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateBiologicallyDerivedProduct(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.BodyStructure:
		impl, ok := w.Concrete.(BodyStructureUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for BodyStructure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateBodyStructure(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Bundle:
		impl, ok := w.Concrete.(BundleUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Bundle")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateBundle(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CapabilityStatement:
		impl, ok := w.Concrete.(CapabilityStatementUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CapabilityStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCapabilityStatement(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CarePlan:
		impl, ok := w.Concrete.(CarePlanUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CarePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCarePlan(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CareTeam:
		impl, ok := w.Concrete.(CareTeamUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CareTeam")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCareTeam(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CatalogEntry:
		impl, ok := w.Concrete.(CatalogEntryUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CatalogEntry")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCatalogEntry(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ChargeItem:
		impl, ok := w.Concrete.(ChargeItemUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ChargeItem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateChargeItem(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ChargeItemDefinition:
		impl, ok := w.Concrete.(ChargeItemDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ChargeItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateChargeItemDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Citation:
		impl, ok := w.Concrete.(CitationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Citation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCitation(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Claim:
		impl, ok := w.Concrete.(ClaimUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Claim")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateClaim(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ClaimResponse:
		impl, ok := w.Concrete.(ClaimResponseUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ClaimResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateClaimResponse(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ClinicalImpression:
		impl, ok := w.Concrete.(ClinicalImpressionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ClinicalImpression")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateClinicalImpression(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ClinicalUseDefinition:
		impl, ok := w.Concrete.(ClinicalUseDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ClinicalUseDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateClinicalUseDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CodeSystem:
		impl, ok := w.Concrete.(CodeSystemUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CodeSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCodeSystem(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Communication:
		impl, ok := w.Concrete.(CommunicationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Communication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCommunication(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CommunicationRequest:
		impl, ok := w.Concrete.(CommunicationRequestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CommunicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCommunicationRequest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CompartmentDefinition:
		impl, ok := w.Concrete.(CompartmentDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CompartmentDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCompartmentDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Composition:
		impl, ok := w.Concrete.(CompositionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Composition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateComposition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ConceptMap:
		impl, ok := w.Concrete.(ConceptMapUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ConceptMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateConceptMap(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Condition:
		impl, ok := w.Concrete.(ConditionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Condition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCondition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Consent:
		impl, ok := w.Concrete.(ConsentUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Consent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateConsent(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Contract:
		impl, ok := w.Concrete.(ContractUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Contract")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateContract(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Coverage:
		impl, ok := w.Concrete.(CoverageUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Coverage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCoverage(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CoverageEligibilityRequest:
		impl, ok := w.Concrete.(CoverageEligibilityRequestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CoverageEligibilityRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCoverageEligibilityRequest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.CoverageEligibilityResponse:
		impl, ok := w.Concrete.(CoverageEligibilityResponseUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for CoverageEligibilityResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateCoverageEligibilityResponse(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DetectedIssue:
		impl, ok := w.Concrete.(DetectedIssueUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DetectedIssue")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDetectedIssue(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Device:
		impl, ok := w.Concrete.(DeviceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Device")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDevice(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DeviceDefinition:
		impl, ok := w.Concrete.(DeviceDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DeviceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDeviceDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DeviceMetric:
		impl, ok := w.Concrete.(DeviceMetricUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DeviceMetric")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDeviceMetric(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DeviceRequest:
		impl, ok := w.Concrete.(DeviceRequestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DeviceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDeviceRequest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DeviceUseStatement:
		impl, ok := w.Concrete.(DeviceUseStatementUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DeviceUseStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDeviceUseStatement(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DiagnosticReport:
		impl, ok := w.Concrete.(DiagnosticReportUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DiagnosticReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDiagnosticReport(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DocumentManifest:
		impl, ok := w.Concrete.(DocumentManifestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DocumentManifest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDocumentManifest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.DocumentReference:
		impl, ok := w.Concrete.(DocumentReferenceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for DocumentReference")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateDocumentReference(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Encounter:
		impl, ok := w.Concrete.(EncounterUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Encounter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEncounter(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Endpoint:
		impl, ok := w.Concrete.(EndpointUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Endpoint")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEndpoint(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.EnrollmentRequest:
		impl, ok := w.Concrete.(EnrollmentRequestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for EnrollmentRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEnrollmentRequest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.EnrollmentResponse:
		impl, ok := w.Concrete.(EnrollmentResponseUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for EnrollmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEnrollmentResponse(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.EpisodeOfCare:
		impl, ok := w.Concrete.(EpisodeOfCareUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for EpisodeOfCare")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEpisodeOfCare(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.EventDefinition:
		impl, ok := w.Concrete.(EventDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for EventDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEventDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Evidence:
		impl, ok := w.Concrete.(EvidenceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Evidence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEvidence(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.EvidenceReport:
		impl, ok := w.Concrete.(EvidenceReportUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for EvidenceReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEvidenceReport(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.EvidenceVariable:
		impl, ok := w.Concrete.(EvidenceVariableUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for EvidenceVariable")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateEvidenceVariable(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ExampleScenario:
		impl, ok := w.Concrete.(ExampleScenarioUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ExampleScenario")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateExampleScenario(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ExplanationOfBenefit:
		impl, ok := w.Concrete.(ExplanationOfBenefitUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ExplanationOfBenefit")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateExplanationOfBenefit(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.FamilyMemberHistory:
		impl, ok := w.Concrete.(FamilyMemberHistoryUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for FamilyMemberHistory")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateFamilyMemberHistory(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Flag:
		impl, ok := w.Concrete.(FlagUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Flag")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateFlag(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Goal:
		impl, ok := w.Concrete.(GoalUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Goal")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateGoal(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.GraphDefinition:
		impl, ok := w.Concrete.(GraphDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for GraphDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateGraphDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Group:
		impl, ok := w.Concrete.(GroupUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Group")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateGroup(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.GuidanceResponse:
		impl, ok := w.Concrete.(GuidanceResponseUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for GuidanceResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateGuidanceResponse(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.HealthcareService:
		impl, ok := w.Concrete.(HealthcareServiceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for HealthcareService")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateHealthcareService(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ImagingStudy:
		impl, ok := w.Concrete.(ImagingStudyUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ImagingStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateImagingStudy(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Immunization:
		impl, ok := w.Concrete.(ImmunizationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Immunization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateImmunization(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ImmunizationEvaluation:
		impl, ok := w.Concrete.(ImmunizationEvaluationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ImmunizationEvaluation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateImmunizationEvaluation(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ImmunizationRecommendation:
		impl, ok := w.Concrete.(ImmunizationRecommendationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ImmunizationRecommendation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateImmunizationRecommendation(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ImplementationGuide:
		impl, ok := w.Concrete.(ImplementationGuideUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ImplementationGuide")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateImplementationGuide(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Ingredient:
		impl, ok := w.Concrete.(IngredientUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Ingredient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateIngredient(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.InsurancePlan:
		impl, ok := w.Concrete.(InsurancePlanUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for InsurancePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateInsurancePlan(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Invoice:
		impl, ok := w.Concrete.(InvoiceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Invoice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateInvoice(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Library:
		impl, ok := w.Concrete.(LibraryUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Library")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateLibrary(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Linkage:
		impl, ok := w.Concrete.(LinkageUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Linkage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateLinkage(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.List:
		impl, ok := w.Concrete.(ListUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for List")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateList(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Location:
		impl, ok := w.Concrete.(LocationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Location")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateLocation(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ManufacturedItemDefinition:
		impl, ok := w.Concrete.(ManufacturedItemDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ManufacturedItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateManufacturedItemDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Measure:
		impl, ok := w.Concrete.(MeasureUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Measure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMeasure(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MeasureReport:
		impl, ok := w.Concrete.(MeasureReportUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MeasureReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMeasureReport(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Media:
		impl, ok := w.Concrete.(MediaUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Media")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedia(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Medication:
		impl, ok := w.Concrete.(MedicationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Medication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedication(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MedicationAdministration:
		impl, ok := w.Concrete.(MedicationAdministrationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MedicationAdministration")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedicationAdministration(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MedicationDispense:
		impl, ok := w.Concrete.(MedicationDispenseUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MedicationDispense")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedicationDispense(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MedicationKnowledge:
		impl, ok := w.Concrete.(MedicationKnowledgeUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MedicationKnowledge")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedicationKnowledge(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MedicationRequest:
		impl, ok := w.Concrete.(MedicationRequestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MedicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedicationRequest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MedicationStatement:
		impl, ok := w.Concrete.(MedicationStatementUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MedicationStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedicationStatement(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MedicinalProductDefinition:
		impl, ok := w.Concrete.(MedicinalProductDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MedicinalProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMedicinalProductDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MessageDefinition:
		impl, ok := w.Concrete.(MessageDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MessageDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMessageDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MessageHeader:
		impl, ok := w.Concrete.(MessageHeaderUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MessageHeader")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMessageHeader(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.MolecularSequence:
		impl, ok := w.Concrete.(MolecularSequenceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for MolecularSequence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateMolecularSequence(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.NamingSystem:
		impl, ok := w.Concrete.(NamingSystemUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for NamingSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateNamingSystem(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.NutritionOrder:
		impl, ok := w.Concrete.(NutritionOrderUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for NutritionOrder")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateNutritionOrder(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.NutritionProduct:
		impl, ok := w.Concrete.(NutritionProductUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for NutritionProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateNutritionProduct(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Observation:
		impl, ok := w.Concrete.(ObservationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Observation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateObservation(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ObservationDefinition:
		impl, ok := w.Concrete.(ObservationDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ObservationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateObservationDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.OperationDefinition:
		impl, ok := w.Concrete.(OperationDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for OperationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateOperationDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.OperationOutcome:
		impl, ok := w.Concrete.(OperationOutcomeUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for OperationOutcome")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateOperationOutcome(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Organization:
		impl, ok := w.Concrete.(OrganizationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Organization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateOrganization(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.OrganizationAffiliation:
		impl, ok := w.Concrete.(OrganizationAffiliationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for OrganizationAffiliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateOrganizationAffiliation(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.PackagedProductDefinition:
		impl, ok := w.Concrete.(PackagedProductDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for PackagedProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePackagedProductDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Parameters:
		impl, ok := w.Concrete.(ParametersUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Parameters")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateParameters(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Patient:
		impl, ok := w.Concrete.(PatientUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Patient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePatient(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.PaymentNotice:
		impl, ok := w.Concrete.(PaymentNoticeUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for PaymentNotice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePaymentNotice(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.PaymentReconciliation:
		impl, ok := w.Concrete.(PaymentReconciliationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for PaymentReconciliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePaymentReconciliation(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Person:
		impl, ok := w.Concrete.(PersonUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Person")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePerson(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.PlanDefinition:
		impl, ok := w.Concrete.(PlanDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for PlanDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePlanDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Practitioner:
		impl, ok := w.Concrete.(PractitionerUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Practitioner")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePractitioner(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.PractitionerRole:
		impl, ok := w.Concrete.(PractitionerRoleUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for PractitionerRole")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdatePractitionerRole(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Procedure:
		impl, ok := w.Concrete.(ProcedureUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Procedure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateProcedure(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Provenance:
		impl, ok := w.Concrete.(ProvenanceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Provenance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateProvenance(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Questionnaire:
		impl, ok := w.Concrete.(QuestionnaireUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Questionnaire")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateQuestionnaire(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.QuestionnaireResponse:
		impl, ok := w.Concrete.(QuestionnaireResponseUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for QuestionnaireResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateQuestionnaireResponse(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.RegulatedAuthorization:
		impl, ok := w.Concrete.(RegulatedAuthorizationUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for RegulatedAuthorization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateRegulatedAuthorization(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.RelatedPerson:
		impl, ok := w.Concrete.(RelatedPersonUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for RelatedPerson")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateRelatedPerson(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.RequestGroup:
		impl, ok := w.Concrete.(RequestGroupUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for RequestGroup")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateRequestGroup(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ResearchDefinition:
		impl, ok := w.Concrete.(ResearchDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ResearchDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateResearchDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ResearchElementDefinition:
		impl, ok := w.Concrete.(ResearchElementDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ResearchElementDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateResearchElementDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ResearchStudy:
		impl, ok := w.Concrete.(ResearchStudyUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ResearchStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateResearchStudy(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ResearchSubject:
		impl, ok := w.Concrete.(ResearchSubjectUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ResearchSubject")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateResearchSubject(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.RiskAssessment:
		impl, ok := w.Concrete.(RiskAssessmentUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for RiskAssessment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateRiskAssessment(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Schedule:
		impl, ok := w.Concrete.(ScheduleUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Schedule")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSchedule(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.SearchParameter:
		impl, ok := w.Concrete.(SearchParameterUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for SearchParameter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSearchParameter(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ServiceRequest:
		impl, ok := w.Concrete.(ServiceRequestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ServiceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateServiceRequest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Slot:
		impl, ok := w.Concrete.(SlotUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Slot")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSlot(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Specimen:
		impl, ok := w.Concrete.(SpecimenUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Specimen")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSpecimen(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.SpecimenDefinition:
		impl, ok := w.Concrete.(SpecimenDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for SpecimenDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSpecimenDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.StructureDefinition:
		impl, ok := w.Concrete.(StructureDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for StructureDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateStructureDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.StructureMap:
		impl, ok := w.Concrete.(StructureMapUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for StructureMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateStructureMap(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Subscription:
		impl, ok := w.Concrete.(SubscriptionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Subscription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSubscription(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.SubscriptionStatus:
		impl, ok := w.Concrete.(SubscriptionStatusUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for SubscriptionStatus")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSubscriptionStatus(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.SubscriptionTopic:
		impl, ok := w.Concrete.(SubscriptionTopicUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for SubscriptionTopic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSubscriptionTopic(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Substance:
		impl, ok := w.Concrete.(SubstanceUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Substance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSubstance(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.SubstanceDefinition:
		impl, ok := w.Concrete.(SubstanceDefinitionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for SubstanceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSubstanceDefinition(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.SupplyDelivery:
		impl, ok := w.Concrete.(SupplyDeliveryUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for SupplyDelivery")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSupplyDelivery(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.SupplyRequest:
		impl, ok := w.Concrete.(SupplyRequestUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for SupplyRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateSupplyRequest(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.Task:
		impl, ok := w.Concrete.(TaskUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for Task")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateTask(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.TerminologyCapabilities:
		impl, ok := w.Concrete.(TerminologyCapabilitiesUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for TerminologyCapabilities")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateTerminologyCapabilities(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.TestReport:
		impl, ok := w.Concrete.(TestReportUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for TestReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateTestReport(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.TestScript:
		impl, ok := w.Concrete.(TestScriptUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for TestScript")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateTestScript(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.ValueSet:
		impl, ok := w.Concrete.(ValueSetUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for ValueSet")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateValueSet(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.VerificationResult:
		impl, ok := w.Concrete.(VerificationResultUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for VerificationResult")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateVerificationResult(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	case r4b.VisionPrescription:
		impl, ok := w.Concrete.(VisionPrescriptionUpdate)
		if !ok {
			return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("update not implemented for VisionPrescription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		result, err := impl.UpdateVisionPrescription(ctx, r)
		if err != nil {
			return capabilities.UpdateResult[model.Resource]{}, err
		}
		return capabilities.UpdateResult[model.Resource]{

			Created:  result.Created,
			Resource: result.Resource,
		}, nil
	default:
		return capabilities.UpdateResult[model.Resource]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("invalid resource type: " + resource.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
}
func (w Generic) SearchCapabilities(ctx context.Context, resourceType string) (search.Capabilities, error) {
	switch resourceType {
	case "Account":
		impl, ok := w.Concrete.(AccountSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Account")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesAccount(ctx)
	case "ActivityDefinition":
		impl, ok := w.Concrete.(ActivityDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ActivityDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesActivityDefinition(ctx)
	case "AdministrableProductDefinition":
		impl, ok := w.Concrete.(AdministrableProductDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AdministrableProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesAdministrableProductDefinition(ctx)
	case "AdverseEvent":
		impl, ok := w.Concrete.(AdverseEventSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AdverseEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesAdverseEvent(ctx)
	case "AllergyIntolerance":
		impl, ok := w.Concrete.(AllergyIntoleranceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AllergyIntolerance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesAllergyIntolerance(ctx)
	case "Appointment":
		impl, ok := w.Concrete.(AppointmentSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Appointment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesAppointment(ctx)
	case "AppointmentResponse":
		impl, ok := w.Concrete.(AppointmentResponseSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AppointmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesAppointmentResponse(ctx)
	case "AuditEvent":
		impl, ok := w.Concrete.(AuditEventSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AuditEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesAuditEvent(ctx)
	case "Basic":
		impl, ok := w.Concrete.(BasicSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Basic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesBasic(ctx)
	case "Binary":
		impl, ok := w.Concrete.(BinarySearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Binary")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesBinary(ctx)
	case "BiologicallyDerivedProduct":
		impl, ok := w.Concrete.(BiologicallyDerivedProductSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for BiologicallyDerivedProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesBiologicallyDerivedProduct(ctx)
	case "BodyStructure":
		impl, ok := w.Concrete.(BodyStructureSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for BodyStructure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesBodyStructure(ctx)
	case "Bundle":
		impl, ok := w.Concrete.(BundleSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Bundle")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesBundle(ctx)
	case "CapabilityStatement":
		impl, ok := w.Concrete.(CapabilityStatementSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CapabilityStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCapabilityStatement(ctx)
	case "CarePlan":
		impl, ok := w.Concrete.(CarePlanSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CarePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCarePlan(ctx)
	case "CareTeam":
		impl, ok := w.Concrete.(CareTeamSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CareTeam")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCareTeam(ctx)
	case "CatalogEntry":
		impl, ok := w.Concrete.(CatalogEntrySearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CatalogEntry")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCatalogEntry(ctx)
	case "ChargeItem":
		impl, ok := w.Concrete.(ChargeItemSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ChargeItem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesChargeItem(ctx)
	case "ChargeItemDefinition":
		impl, ok := w.Concrete.(ChargeItemDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ChargeItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesChargeItemDefinition(ctx)
	case "Citation":
		impl, ok := w.Concrete.(CitationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Citation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCitation(ctx)
	case "Claim":
		impl, ok := w.Concrete.(ClaimSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Claim")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesClaim(ctx)
	case "ClaimResponse":
		impl, ok := w.Concrete.(ClaimResponseSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ClaimResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesClaimResponse(ctx)
	case "ClinicalImpression":
		impl, ok := w.Concrete.(ClinicalImpressionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ClinicalImpression")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesClinicalImpression(ctx)
	case "ClinicalUseDefinition":
		impl, ok := w.Concrete.(ClinicalUseDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ClinicalUseDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesClinicalUseDefinition(ctx)
	case "CodeSystem":
		impl, ok := w.Concrete.(CodeSystemSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CodeSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCodeSystem(ctx)
	case "Communication":
		impl, ok := w.Concrete.(CommunicationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Communication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCommunication(ctx)
	case "CommunicationRequest":
		impl, ok := w.Concrete.(CommunicationRequestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CommunicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCommunicationRequest(ctx)
	case "CompartmentDefinition":
		impl, ok := w.Concrete.(CompartmentDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CompartmentDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCompartmentDefinition(ctx)
	case "Composition":
		impl, ok := w.Concrete.(CompositionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Composition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesComposition(ctx)
	case "ConceptMap":
		impl, ok := w.Concrete.(ConceptMapSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ConceptMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesConceptMap(ctx)
	case "Condition":
		impl, ok := w.Concrete.(ConditionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Condition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCondition(ctx)
	case "Consent":
		impl, ok := w.Concrete.(ConsentSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Consent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesConsent(ctx)
	case "Contract":
		impl, ok := w.Concrete.(ContractSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Contract")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesContract(ctx)
	case "Coverage":
		impl, ok := w.Concrete.(CoverageSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Coverage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCoverage(ctx)
	case "CoverageEligibilityRequest":
		impl, ok := w.Concrete.(CoverageEligibilityRequestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CoverageEligibilityRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCoverageEligibilityRequest(ctx)
	case "CoverageEligibilityResponse":
		impl, ok := w.Concrete.(CoverageEligibilityResponseSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CoverageEligibilityResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesCoverageEligibilityResponse(ctx)
	case "DetectedIssue":
		impl, ok := w.Concrete.(DetectedIssueSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DetectedIssue")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDetectedIssue(ctx)
	case "Device":
		impl, ok := w.Concrete.(DeviceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Device")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDevice(ctx)
	case "DeviceDefinition":
		impl, ok := w.Concrete.(DeviceDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDeviceDefinition(ctx)
	case "DeviceMetric":
		impl, ok := w.Concrete.(DeviceMetricSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceMetric")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDeviceMetric(ctx)
	case "DeviceRequest":
		impl, ok := w.Concrete.(DeviceRequestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDeviceRequest(ctx)
	case "DeviceUseStatement":
		impl, ok := w.Concrete.(DeviceUseStatementSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceUseStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDeviceUseStatement(ctx)
	case "DiagnosticReport":
		impl, ok := w.Concrete.(DiagnosticReportSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DiagnosticReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDiagnosticReport(ctx)
	case "DocumentManifest":
		impl, ok := w.Concrete.(DocumentManifestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DocumentManifest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDocumentManifest(ctx)
	case "DocumentReference":
		impl, ok := w.Concrete.(DocumentReferenceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DocumentReference")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesDocumentReference(ctx)
	case "Encounter":
		impl, ok := w.Concrete.(EncounterSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Encounter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEncounter(ctx)
	case "Endpoint":
		impl, ok := w.Concrete.(EndpointSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Endpoint")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEndpoint(ctx)
	case "EnrollmentRequest":
		impl, ok := w.Concrete.(EnrollmentRequestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EnrollmentRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEnrollmentRequest(ctx)
	case "EnrollmentResponse":
		impl, ok := w.Concrete.(EnrollmentResponseSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EnrollmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEnrollmentResponse(ctx)
	case "EpisodeOfCare":
		impl, ok := w.Concrete.(EpisodeOfCareSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EpisodeOfCare")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEpisodeOfCare(ctx)
	case "EventDefinition":
		impl, ok := w.Concrete.(EventDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EventDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEventDefinition(ctx)
	case "Evidence":
		impl, ok := w.Concrete.(EvidenceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Evidence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEvidence(ctx)
	case "EvidenceReport":
		impl, ok := w.Concrete.(EvidenceReportSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EvidenceReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEvidenceReport(ctx)
	case "EvidenceVariable":
		impl, ok := w.Concrete.(EvidenceVariableSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EvidenceVariable")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesEvidenceVariable(ctx)
	case "ExampleScenario":
		impl, ok := w.Concrete.(ExampleScenarioSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ExampleScenario")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesExampleScenario(ctx)
	case "ExplanationOfBenefit":
		impl, ok := w.Concrete.(ExplanationOfBenefitSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ExplanationOfBenefit")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesExplanationOfBenefit(ctx)
	case "FamilyMemberHistory":
		impl, ok := w.Concrete.(FamilyMemberHistorySearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for FamilyMemberHistory")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesFamilyMemberHistory(ctx)
	case "Flag":
		impl, ok := w.Concrete.(FlagSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Flag")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesFlag(ctx)
	case "Goal":
		impl, ok := w.Concrete.(GoalSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Goal")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesGoal(ctx)
	case "GraphDefinition":
		impl, ok := w.Concrete.(GraphDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for GraphDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesGraphDefinition(ctx)
	case "Group":
		impl, ok := w.Concrete.(GroupSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Group")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesGroup(ctx)
	case "GuidanceResponse":
		impl, ok := w.Concrete.(GuidanceResponseSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for GuidanceResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesGuidanceResponse(ctx)
	case "HealthcareService":
		impl, ok := w.Concrete.(HealthcareServiceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for HealthcareService")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesHealthcareService(ctx)
	case "ImagingStudy":
		impl, ok := w.Concrete.(ImagingStudySearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImagingStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesImagingStudy(ctx)
	case "Immunization":
		impl, ok := w.Concrete.(ImmunizationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Immunization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesImmunization(ctx)
	case "ImmunizationEvaluation":
		impl, ok := w.Concrete.(ImmunizationEvaluationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImmunizationEvaluation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesImmunizationEvaluation(ctx)
	case "ImmunizationRecommendation":
		impl, ok := w.Concrete.(ImmunizationRecommendationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImmunizationRecommendation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesImmunizationRecommendation(ctx)
	case "ImplementationGuide":
		impl, ok := w.Concrete.(ImplementationGuideSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImplementationGuide")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesImplementationGuide(ctx)
	case "Ingredient":
		impl, ok := w.Concrete.(IngredientSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Ingredient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesIngredient(ctx)
	case "InsurancePlan":
		impl, ok := w.Concrete.(InsurancePlanSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for InsurancePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesInsurancePlan(ctx)
	case "Invoice":
		impl, ok := w.Concrete.(InvoiceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Invoice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesInvoice(ctx)
	case "Library":
		impl, ok := w.Concrete.(LibrarySearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Library")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesLibrary(ctx)
	case "Linkage":
		impl, ok := w.Concrete.(LinkageSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Linkage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesLinkage(ctx)
	case "List":
		impl, ok := w.Concrete.(ListSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for List")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesList(ctx)
	case "Location":
		impl, ok := w.Concrete.(LocationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Location")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesLocation(ctx)
	case "ManufacturedItemDefinition":
		impl, ok := w.Concrete.(ManufacturedItemDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ManufacturedItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesManufacturedItemDefinition(ctx)
	case "Measure":
		impl, ok := w.Concrete.(MeasureSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Measure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMeasure(ctx)
	case "MeasureReport":
		impl, ok := w.Concrete.(MeasureReportSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MeasureReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMeasureReport(ctx)
	case "Media":
		impl, ok := w.Concrete.(MediaSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Media")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedia(ctx)
	case "Medication":
		impl, ok := w.Concrete.(MedicationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Medication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedication(ctx)
	case "MedicationAdministration":
		impl, ok := w.Concrete.(MedicationAdministrationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationAdministration")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedicationAdministration(ctx)
	case "MedicationDispense":
		impl, ok := w.Concrete.(MedicationDispenseSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationDispense")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedicationDispense(ctx)
	case "MedicationKnowledge":
		impl, ok := w.Concrete.(MedicationKnowledgeSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationKnowledge")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedicationKnowledge(ctx)
	case "MedicationRequest":
		impl, ok := w.Concrete.(MedicationRequestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedicationRequest(ctx)
	case "MedicationStatement":
		impl, ok := w.Concrete.(MedicationStatementSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedicationStatement(ctx)
	case "MedicinalProductDefinition":
		impl, ok := w.Concrete.(MedicinalProductDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicinalProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMedicinalProductDefinition(ctx)
	case "MessageDefinition":
		impl, ok := w.Concrete.(MessageDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MessageDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMessageDefinition(ctx)
	case "MessageHeader":
		impl, ok := w.Concrete.(MessageHeaderSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MessageHeader")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMessageHeader(ctx)
	case "MolecularSequence":
		impl, ok := w.Concrete.(MolecularSequenceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MolecularSequence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesMolecularSequence(ctx)
	case "NamingSystem":
		impl, ok := w.Concrete.(NamingSystemSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for NamingSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesNamingSystem(ctx)
	case "NutritionOrder":
		impl, ok := w.Concrete.(NutritionOrderSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for NutritionOrder")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesNutritionOrder(ctx)
	case "NutritionProduct":
		impl, ok := w.Concrete.(NutritionProductSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for NutritionProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesNutritionProduct(ctx)
	case "Observation":
		impl, ok := w.Concrete.(ObservationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Observation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesObservation(ctx)
	case "ObservationDefinition":
		impl, ok := w.Concrete.(ObservationDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ObservationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesObservationDefinition(ctx)
	case "OperationDefinition":
		impl, ok := w.Concrete.(OperationDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for OperationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesOperationDefinition(ctx)
	case "OperationOutcome":
		impl, ok := w.Concrete.(OperationOutcomeSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for OperationOutcome")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesOperationOutcome(ctx)
	case "Organization":
		impl, ok := w.Concrete.(OrganizationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Organization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesOrganization(ctx)
	case "OrganizationAffiliation":
		impl, ok := w.Concrete.(OrganizationAffiliationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for OrganizationAffiliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesOrganizationAffiliation(ctx)
	case "PackagedProductDefinition":
		impl, ok := w.Concrete.(PackagedProductDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PackagedProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPackagedProductDefinition(ctx)
	case "Parameters":
		impl, ok := w.Concrete.(ParametersSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Parameters")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesParameters(ctx)
	case "Patient":
		impl, ok := w.Concrete.(PatientSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Patient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPatient(ctx)
	case "PaymentNotice":
		impl, ok := w.Concrete.(PaymentNoticeSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PaymentNotice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPaymentNotice(ctx)
	case "PaymentReconciliation":
		impl, ok := w.Concrete.(PaymentReconciliationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PaymentReconciliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPaymentReconciliation(ctx)
	case "Person":
		impl, ok := w.Concrete.(PersonSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Person")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPerson(ctx)
	case "PlanDefinition":
		impl, ok := w.Concrete.(PlanDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PlanDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPlanDefinition(ctx)
	case "Practitioner":
		impl, ok := w.Concrete.(PractitionerSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Practitioner")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPractitioner(ctx)
	case "PractitionerRole":
		impl, ok := w.Concrete.(PractitionerRoleSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PractitionerRole")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesPractitionerRole(ctx)
	case "Procedure":
		impl, ok := w.Concrete.(ProcedureSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Procedure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesProcedure(ctx)
	case "Provenance":
		impl, ok := w.Concrete.(ProvenanceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Provenance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesProvenance(ctx)
	case "Questionnaire":
		impl, ok := w.Concrete.(QuestionnaireSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Questionnaire")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesQuestionnaire(ctx)
	case "QuestionnaireResponse":
		impl, ok := w.Concrete.(QuestionnaireResponseSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for QuestionnaireResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesQuestionnaireResponse(ctx)
	case "RegulatedAuthorization":
		impl, ok := w.Concrete.(RegulatedAuthorizationSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RegulatedAuthorization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesRegulatedAuthorization(ctx)
	case "RelatedPerson":
		impl, ok := w.Concrete.(RelatedPersonSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RelatedPerson")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesRelatedPerson(ctx)
	case "RequestGroup":
		impl, ok := w.Concrete.(RequestGroupSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RequestGroup")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesRequestGroup(ctx)
	case "ResearchDefinition":
		impl, ok := w.Concrete.(ResearchDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesResearchDefinition(ctx)
	case "ResearchElementDefinition":
		impl, ok := w.Concrete.(ResearchElementDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchElementDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesResearchElementDefinition(ctx)
	case "ResearchStudy":
		impl, ok := w.Concrete.(ResearchStudySearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesResearchStudy(ctx)
	case "ResearchSubject":
		impl, ok := w.Concrete.(ResearchSubjectSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchSubject")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesResearchSubject(ctx)
	case "RiskAssessment":
		impl, ok := w.Concrete.(RiskAssessmentSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RiskAssessment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesRiskAssessment(ctx)
	case "Schedule":
		impl, ok := w.Concrete.(ScheduleSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Schedule")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSchedule(ctx)
	case "SearchParameter":
		impl, ok := w.Concrete.(SearchParameterSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SearchParameter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSearchParameter(ctx)
	case "ServiceRequest":
		impl, ok := w.Concrete.(ServiceRequestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ServiceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesServiceRequest(ctx)
	case "Slot":
		impl, ok := w.Concrete.(SlotSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Slot")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSlot(ctx)
	case "Specimen":
		impl, ok := w.Concrete.(SpecimenSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Specimen")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSpecimen(ctx)
	case "SpecimenDefinition":
		impl, ok := w.Concrete.(SpecimenDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SpecimenDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSpecimenDefinition(ctx)
	case "StructureDefinition":
		impl, ok := w.Concrete.(StructureDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for StructureDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesStructureDefinition(ctx)
	case "StructureMap":
		impl, ok := w.Concrete.(StructureMapSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for StructureMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesStructureMap(ctx)
	case "Subscription":
		impl, ok := w.Concrete.(SubscriptionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Subscription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSubscription(ctx)
	case "SubscriptionStatus":
		impl, ok := w.Concrete.(SubscriptionStatusSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SubscriptionStatus")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSubscriptionStatus(ctx)
	case "SubscriptionTopic":
		impl, ok := w.Concrete.(SubscriptionTopicSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SubscriptionTopic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSubscriptionTopic(ctx)
	case "Substance":
		impl, ok := w.Concrete.(SubstanceSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Substance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSubstance(ctx)
	case "SubstanceDefinition":
		impl, ok := w.Concrete.(SubstanceDefinitionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SubstanceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSubstanceDefinition(ctx)
	case "SupplyDelivery":
		impl, ok := w.Concrete.(SupplyDeliverySearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SupplyDelivery")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSupplyDelivery(ctx)
	case "SupplyRequest":
		impl, ok := w.Concrete.(SupplyRequestSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SupplyRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesSupplyRequest(ctx)
	case "Task":
		impl, ok := w.Concrete.(TaskSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Task")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesTask(ctx)
	case "TerminologyCapabilities":
		impl, ok := w.Concrete.(TerminologyCapabilitiesSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for TerminologyCapabilities")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesTerminologyCapabilities(ctx)
	case "TestReport":
		impl, ok := w.Concrete.(TestReportSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for TestReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesTestReport(ctx)
	case "TestScript":
		impl, ok := w.Concrete.(TestScriptSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for TestScript")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesTestScript(ctx)
	case "ValueSet":
		impl, ok := w.Concrete.(ValueSetSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ValueSet")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesValueSet(ctx)
	case "VerificationResult":
		impl, ok := w.Concrete.(VerificationResultSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for VerificationResult")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesVerificationResult(ctx)
	case "VisionPrescription":
		impl, ok := w.Concrete.(VisionPrescriptionSearch)
		if !ok {
			return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for VisionPrescription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilitiesVisionPrescription(ctx)
	default:
		return search.Capabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("invalid resource type: " + resourceType)},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
}
func (w Generic) Search(ctx context.Context, resourceType string, options search.Options) (search.Result, error) {
	g, ok := w.Concrete.(capabilities.GenericSearch)
	if ok {
		// shortcut for the case that the underlying implementation already implements the generic API
		return g.Search(ctx, resourceType, options)
	}
	switch resourceType {
	case "Account":
		impl, ok := w.Concrete.(AccountSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Account")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchAccount(ctx, options)
	case "ActivityDefinition":
		impl, ok := w.Concrete.(ActivityDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ActivityDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchActivityDefinition(ctx, options)
	case "AdministrableProductDefinition":
		impl, ok := w.Concrete.(AdministrableProductDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AdministrableProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchAdministrableProductDefinition(ctx, options)
	case "AdverseEvent":
		impl, ok := w.Concrete.(AdverseEventSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AdverseEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchAdverseEvent(ctx, options)
	case "AllergyIntolerance":
		impl, ok := w.Concrete.(AllergyIntoleranceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AllergyIntolerance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchAllergyIntolerance(ctx, options)
	case "Appointment":
		impl, ok := w.Concrete.(AppointmentSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Appointment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchAppointment(ctx, options)
	case "AppointmentResponse":
		impl, ok := w.Concrete.(AppointmentResponseSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AppointmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchAppointmentResponse(ctx, options)
	case "AuditEvent":
		impl, ok := w.Concrete.(AuditEventSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for AuditEvent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchAuditEvent(ctx, options)
	case "Basic":
		impl, ok := w.Concrete.(BasicSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Basic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchBasic(ctx, options)
	case "Binary":
		impl, ok := w.Concrete.(BinarySearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Binary")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchBinary(ctx, options)
	case "BiologicallyDerivedProduct":
		impl, ok := w.Concrete.(BiologicallyDerivedProductSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for BiologicallyDerivedProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchBiologicallyDerivedProduct(ctx, options)
	case "BodyStructure":
		impl, ok := w.Concrete.(BodyStructureSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for BodyStructure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchBodyStructure(ctx, options)
	case "Bundle":
		impl, ok := w.Concrete.(BundleSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Bundle")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchBundle(ctx, options)
	case "CapabilityStatement":
		impl, ok := w.Concrete.(CapabilityStatementSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CapabilityStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCapabilityStatement(ctx, options)
	case "CarePlan":
		impl, ok := w.Concrete.(CarePlanSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CarePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCarePlan(ctx, options)
	case "CareTeam":
		impl, ok := w.Concrete.(CareTeamSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CareTeam")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCareTeam(ctx, options)
	case "CatalogEntry":
		impl, ok := w.Concrete.(CatalogEntrySearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CatalogEntry")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCatalogEntry(ctx, options)
	case "ChargeItem":
		impl, ok := w.Concrete.(ChargeItemSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ChargeItem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchChargeItem(ctx, options)
	case "ChargeItemDefinition":
		impl, ok := w.Concrete.(ChargeItemDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ChargeItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchChargeItemDefinition(ctx, options)
	case "Citation":
		impl, ok := w.Concrete.(CitationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Citation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCitation(ctx, options)
	case "Claim":
		impl, ok := w.Concrete.(ClaimSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Claim")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchClaim(ctx, options)
	case "ClaimResponse":
		impl, ok := w.Concrete.(ClaimResponseSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ClaimResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchClaimResponse(ctx, options)
	case "ClinicalImpression":
		impl, ok := w.Concrete.(ClinicalImpressionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ClinicalImpression")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchClinicalImpression(ctx, options)
	case "ClinicalUseDefinition":
		impl, ok := w.Concrete.(ClinicalUseDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ClinicalUseDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchClinicalUseDefinition(ctx, options)
	case "CodeSystem":
		impl, ok := w.Concrete.(CodeSystemSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CodeSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCodeSystem(ctx, options)
	case "Communication":
		impl, ok := w.Concrete.(CommunicationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Communication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCommunication(ctx, options)
	case "CommunicationRequest":
		impl, ok := w.Concrete.(CommunicationRequestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CommunicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCommunicationRequest(ctx, options)
	case "CompartmentDefinition":
		impl, ok := w.Concrete.(CompartmentDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CompartmentDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCompartmentDefinition(ctx, options)
	case "Composition":
		impl, ok := w.Concrete.(CompositionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Composition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchComposition(ctx, options)
	case "ConceptMap":
		impl, ok := w.Concrete.(ConceptMapSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ConceptMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchConceptMap(ctx, options)
	case "Condition":
		impl, ok := w.Concrete.(ConditionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Condition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCondition(ctx, options)
	case "Consent":
		impl, ok := w.Concrete.(ConsentSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Consent")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchConsent(ctx, options)
	case "Contract":
		impl, ok := w.Concrete.(ContractSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Contract")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchContract(ctx, options)
	case "Coverage":
		impl, ok := w.Concrete.(CoverageSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Coverage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCoverage(ctx, options)
	case "CoverageEligibilityRequest":
		impl, ok := w.Concrete.(CoverageEligibilityRequestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CoverageEligibilityRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCoverageEligibilityRequest(ctx, options)
	case "CoverageEligibilityResponse":
		impl, ok := w.Concrete.(CoverageEligibilityResponseSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for CoverageEligibilityResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchCoverageEligibilityResponse(ctx, options)
	case "DetectedIssue":
		impl, ok := w.Concrete.(DetectedIssueSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DetectedIssue")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDetectedIssue(ctx, options)
	case "Device":
		impl, ok := w.Concrete.(DeviceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Device")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDevice(ctx, options)
	case "DeviceDefinition":
		impl, ok := w.Concrete.(DeviceDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDeviceDefinition(ctx, options)
	case "DeviceMetric":
		impl, ok := w.Concrete.(DeviceMetricSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceMetric")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDeviceMetric(ctx, options)
	case "DeviceRequest":
		impl, ok := w.Concrete.(DeviceRequestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDeviceRequest(ctx, options)
	case "DeviceUseStatement":
		impl, ok := w.Concrete.(DeviceUseStatementSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DeviceUseStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDeviceUseStatement(ctx, options)
	case "DiagnosticReport":
		impl, ok := w.Concrete.(DiagnosticReportSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DiagnosticReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDiagnosticReport(ctx, options)
	case "DocumentManifest":
		impl, ok := w.Concrete.(DocumentManifestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DocumentManifest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDocumentManifest(ctx, options)
	case "DocumentReference":
		impl, ok := w.Concrete.(DocumentReferenceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for DocumentReference")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchDocumentReference(ctx, options)
	case "Encounter":
		impl, ok := w.Concrete.(EncounterSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Encounter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEncounter(ctx, options)
	case "Endpoint":
		impl, ok := w.Concrete.(EndpointSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Endpoint")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEndpoint(ctx, options)
	case "EnrollmentRequest":
		impl, ok := w.Concrete.(EnrollmentRequestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EnrollmentRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEnrollmentRequest(ctx, options)
	case "EnrollmentResponse":
		impl, ok := w.Concrete.(EnrollmentResponseSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EnrollmentResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEnrollmentResponse(ctx, options)
	case "EpisodeOfCare":
		impl, ok := w.Concrete.(EpisodeOfCareSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EpisodeOfCare")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEpisodeOfCare(ctx, options)
	case "EventDefinition":
		impl, ok := w.Concrete.(EventDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EventDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEventDefinition(ctx, options)
	case "Evidence":
		impl, ok := w.Concrete.(EvidenceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Evidence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEvidence(ctx, options)
	case "EvidenceReport":
		impl, ok := w.Concrete.(EvidenceReportSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EvidenceReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEvidenceReport(ctx, options)
	case "EvidenceVariable":
		impl, ok := w.Concrete.(EvidenceVariableSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for EvidenceVariable")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchEvidenceVariable(ctx, options)
	case "ExampleScenario":
		impl, ok := w.Concrete.(ExampleScenarioSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ExampleScenario")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchExampleScenario(ctx, options)
	case "ExplanationOfBenefit":
		impl, ok := w.Concrete.(ExplanationOfBenefitSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ExplanationOfBenefit")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchExplanationOfBenefit(ctx, options)
	case "FamilyMemberHistory":
		impl, ok := w.Concrete.(FamilyMemberHistorySearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for FamilyMemberHistory")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchFamilyMemberHistory(ctx, options)
	case "Flag":
		impl, ok := w.Concrete.(FlagSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Flag")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchFlag(ctx, options)
	case "Goal":
		impl, ok := w.Concrete.(GoalSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Goal")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchGoal(ctx, options)
	case "GraphDefinition":
		impl, ok := w.Concrete.(GraphDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for GraphDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchGraphDefinition(ctx, options)
	case "Group":
		impl, ok := w.Concrete.(GroupSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Group")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchGroup(ctx, options)
	case "GuidanceResponse":
		impl, ok := w.Concrete.(GuidanceResponseSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for GuidanceResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchGuidanceResponse(ctx, options)
	case "HealthcareService":
		impl, ok := w.Concrete.(HealthcareServiceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for HealthcareService")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchHealthcareService(ctx, options)
	case "ImagingStudy":
		impl, ok := w.Concrete.(ImagingStudySearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImagingStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchImagingStudy(ctx, options)
	case "Immunization":
		impl, ok := w.Concrete.(ImmunizationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Immunization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchImmunization(ctx, options)
	case "ImmunizationEvaluation":
		impl, ok := w.Concrete.(ImmunizationEvaluationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImmunizationEvaluation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchImmunizationEvaluation(ctx, options)
	case "ImmunizationRecommendation":
		impl, ok := w.Concrete.(ImmunizationRecommendationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImmunizationRecommendation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchImmunizationRecommendation(ctx, options)
	case "ImplementationGuide":
		impl, ok := w.Concrete.(ImplementationGuideSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ImplementationGuide")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchImplementationGuide(ctx, options)
	case "Ingredient":
		impl, ok := w.Concrete.(IngredientSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Ingredient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchIngredient(ctx, options)
	case "InsurancePlan":
		impl, ok := w.Concrete.(InsurancePlanSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for InsurancePlan")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchInsurancePlan(ctx, options)
	case "Invoice":
		impl, ok := w.Concrete.(InvoiceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Invoice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchInvoice(ctx, options)
	case "Library":
		impl, ok := w.Concrete.(LibrarySearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Library")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchLibrary(ctx, options)
	case "Linkage":
		impl, ok := w.Concrete.(LinkageSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Linkage")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchLinkage(ctx, options)
	case "List":
		impl, ok := w.Concrete.(ListSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for List")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchList(ctx, options)
	case "Location":
		impl, ok := w.Concrete.(LocationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Location")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchLocation(ctx, options)
	case "ManufacturedItemDefinition":
		impl, ok := w.Concrete.(ManufacturedItemDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ManufacturedItemDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchManufacturedItemDefinition(ctx, options)
	case "Measure":
		impl, ok := w.Concrete.(MeasureSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Measure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMeasure(ctx, options)
	case "MeasureReport":
		impl, ok := w.Concrete.(MeasureReportSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MeasureReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMeasureReport(ctx, options)
	case "Media":
		impl, ok := w.Concrete.(MediaSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Media")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedia(ctx, options)
	case "Medication":
		impl, ok := w.Concrete.(MedicationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Medication")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedication(ctx, options)
	case "MedicationAdministration":
		impl, ok := w.Concrete.(MedicationAdministrationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationAdministration")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedicationAdministration(ctx, options)
	case "MedicationDispense":
		impl, ok := w.Concrete.(MedicationDispenseSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationDispense")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedicationDispense(ctx, options)
	case "MedicationKnowledge":
		impl, ok := w.Concrete.(MedicationKnowledgeSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationKnowledge")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedicationKnowledge(ctx, options)
	case "MedicationRequest":
		impl, ok := w.Concrete.(MedicationRequestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedicationRequest(ctx, options)
	case "MedicationStatement":
		impl, ok := w.Concrete.(MedicationStatementSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicationStatement")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedicationStatement(ctx, options)
	case "MedicinalProductDefinition":
		impl, ok := w.Concrete.(MedicinalProductDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MedicinalProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMedicinalProductDefinition(ctx, options)
	case "MessageDefinition":
		impl, ok := w.Concrete.(MessageDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MessageDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMessageDefinition(ctx, options)
	case "MessageHeader":
		impl, ok := w.Concrete.(MessageHeaderSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MessageHeader")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMessageHeader(ctx, options)
	case "MolecularSequence":
		impl, ok := w.Concrete.(MolecularSequenceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for MolecularSequence")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchMolecularSequence(ctx, options)
	case "NamingSystem":
		impl, ok := w.Concrete.(NamingSystemSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for NamingSystem")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchNamingSystem(ctx, options)
	case "NutritionOrder":
		impl, ok := w.Concrete.(NutritionOrderSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for NutritionOrder")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchNutritionOrder(ctx, options)
	case "NutritionProduct":
		impl, ok := w.Concrete.(NutritionProductSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for NutritionProduct")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchNutritionProduct(ctx, options)
	case "Observation":
		impl, ok := w.Concrete.(ObservationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Observation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchObservation(ctx, options)
	case "ObservationDefinition":
		impl, ok := w.Concrete.(ObservationDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ObservationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchObservationDefinition(ctx, options)
	case "OperationDefinition":
		impl, ok := w.Concrete.(OperationDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for OperationDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchOperationDefinition(ctx, options)
	case "OperationOutcome":
		impl, ok := w.Concrete.(OperationOutcomeSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for OperationOutcome")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchOperationOutcome(ctx, options)
	case "Organization":
		impl, ok := w.Concrete.(OrganizationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Organization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchOrganization(ctx, options)
	case "OrganizationAffiliation":
		impl, ok := w.Concrete.(OrganizationAffiliationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for OrganizationAffiliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchOrganizationAffiliation(ctx, options)
	case "PackagedProductDefinition":
		impl, ok := w.Concrete.(PackagedProductDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PackagedProductDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPackagedProductDefinition(ctx, options)
	case "Parameters":
		impl, ok := w.Concrete.(ParametersSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Parameters")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchParameters(ctx, options)
	case "Patient":
		impl, ok := w.Concrete.(PatientSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Patient")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPatient(ctx, options)
	case "PaymentNotice":
		impl, ok := w.Concrete.(PaymentNoticeSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PaymentNotice")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPaymentNotice(ctx, options)
	case "PaymentReconciliation":
		impl, ok := w.Concrete.(PaymentReconciliationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PaymentReconciliation")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPaymentReconciliation(ctx, options)
	case "Person":
		impl, ok := w.Concrete.(PersonSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Person")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPerson(ctx, options)
	case "PlanDefinition":
		impl, ok := w.Concrete.(PlanDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PlanDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPlanDefinition(ctx, options)
	case "Practitioner":
		impl, ok := w.Concrete.(PractitionerSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Practitioner")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPractitioner(ctx, options)
	case "PractitionerRole":
		impl, ok := w.Concrete.(PractitionerRoleSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for PractitionerRole")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchPractitionerRole(ctx, options)
	case "Procedure":
		impl, ok := w.Concrete.(ProcedureSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Procedure")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchProcedure(ctx, options)
	case "Provenance":
		impl, ok := w.Concrete.(ProvenanceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Provenance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchProvenance(ctx, options)
	case "Questionnaire":
		impl, ok := w.Concrete.(QuestionnaireSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Questionnaire")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchQuestionnaire(ctx, options)
	case "QuestionnaireResponse":
		impl, ok := w.Concrete.(QuestionnaireResponseSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for QuestionnaireResponse")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchQuestionnaireResponse(ctx, options)
	case "RegulatedAuthorization":
		impl, ok := w.Concrete.(RegulatedAuthorizationSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RegulatedAuthorization")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchRegulatedAuthorization(ctx, options)
	case "RelatedPerson":
		impl, ok := w.Concrete.(RelatedPersonSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RelatedPerson")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchRelatedPerson(ctx, options)
	case "RequestGroup":
		impl, ok := w.Concrete.(RequestGroupSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RequestGroup")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchRequestGroup(ctx, options)
	case "ResearchDefinition":
		impl, ok := w.Concrete.(ResearchDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchResearchDefinition(ctx, options)
	case "ResearchElementDefinition":
		impl, ok := w.Concrete.(ResearchElementDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchElementDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchResearchElementDefinition(ctx, options)
	case "ResearchStudy":
		impl, ok := w.Concrete.(ResearchStudySearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchStudy")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchResearchStudy(ctx, options)
	case "ResearchSubject":
		impl, ok := w.Concrete.(ResearchSubjectSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ResearchSubject")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchResearchSubject(ctx, options)
	case "RiskAssessment":
		impl, ok := w.Concrete.(RiskAssessmentSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for RiskAssessment")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchRiskAssessment(ctx, options)
	case "Schedule":
		impl, ok := w.Concrete.(ScheduleSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Schedule")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSchedule(ctx, options)
	case "SearchParameter":
		impl, ok := w.Concrete.(SearchParameterSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SearchParameter")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSearchParameter(ctx, options)
	case "ServiceRequest":
		impl, ok := w.Concrete.(ServiceRequestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ServiceRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchServiceRequest(ctx, options)
	case "Slot":
		impl, ok := w.Concrete.(SlotSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Slot")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSlot(ctx, options)
	case "Specimen":
		impl, ok := w.Concrete.(SpecimenSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Specimen")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSpecimen(ctx, options)
	case "SpecimenDefinition":
		impl, ok := w.Concrete.(SpecimenDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SpecimenDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSpecimenDefinition(ctx, options)
	case "StructureDefinition":
		impl, ok := w.Concrete.(StructureDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for StructureDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchStructureDefinition(ctx, options)
	case "StructureMap":
		impl, ok := w.Concrete.(StructureMapSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for StructureMap")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchStructureMap(ctx, options)
	case "Subscription":
		impl, ok := w.Concrete.(SubscriptionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Subscription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSubscription(ctx, options)
	case "SubscriptionStatus":
		impl, ok := w.Concrete.(SubscriptionStatusSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SubscriptionStatus")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSubscriptionStatus(ctx, options)
	case "SubscriptionTopic":
		impl, ok := w.Concrete.(SubscriptionTopicSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SubscriptionTopic")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSubscriptionTopic(ctx, options)
	case "Substance":
		impl, ok := w.Concrete.(SubstanceSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Substance")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSubstance(ctx, options)
	case "SubstanceDefinition":
		impl, ok := w.Concrete.(SubstanceDefinitionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SubstanceDefinition")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSubstanceDefinition(ctx, options)
	case "SupplyDelivery":
		impl, ok := w.Concrete.(SupplyDeliverySearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SupplyDelivery")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSupplyDelivery(ctx, options)
	case "SupplyRequest":
		impl, ok := w.Concrete.(SupplyRequestSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for SupplyRequest")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchSupplyRequest(ctx, options)
	case "Task":
		impl, ok := w.Concrete.(TaskSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for Task")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchTask(ctx, options)
	case "TerminologyCapabilities":
		impl, ok := w.Concrete.(TerminologyCapabilitiesSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for TerminologyCapabilities")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchTerminologyCapabilities(ctx, options)
	case "TestReport":
		impl, ok := w.Concrete.(TestReportSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for TestReport")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchTestReport(ctx, options)
	case "TestScript":
		impl, ok := w.Concrete.(TestScriptSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for TestScript")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchTestScript(ctx, options)
	case "ValueSet":
		impl, ok := w.Concrete.(ValueSetSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for ValueSet")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchValueSet(ctx, options)
	case "VerificationResult":
		impl, ok := w.Concrete.(VerificationResultSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for VerificationResult")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchVerificationResult(ctx, options)
	case "VisionPrescription":
		impl, ok := w.Concrete.(VisionPrescriptionSearch)
		if !ok {
			return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
				Code:        r4b.Code{Value: utils.Ptr("not-supported")},
				Diagnostics: &r4b.String{Value: utils.Ptr("search not implemented for VisionPrescription")},
				Severity:    r4b.Code{Value: utils.Ptr("fatal")},
			}}}
		}
		return impl.SearchVisionPrescription(ctx, options)
	default:
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("invalid resource type: " + resourceType)},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
}
