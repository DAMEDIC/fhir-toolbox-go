// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4B

import (
	"context"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	r4b "github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4b"
)

type Concrete struct {
	Generic capabilities.GenericCapabilities
}

func (w Concrete) CreateAccount(ctx context.Context, resource r4b.Account) (r4b.Account, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Account{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Account"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Account{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Account)
	if !ok {
		return r4b.Account{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateActivityDefinition(ctx context.Context, resource r4b.ActivityDefinition) (r4b.ActivityDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ActivityDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ActivityDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ActivityDefinition)
	if !ok {
		return r4b.ActivityDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAdministrableProductDefinition(ctx context.Context, resource r4b.AdministrableProductDefinition) (r4b.AdministrableProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AdministrableProductDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AdministrableProductDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AdministrableProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdministrableProductDefinition)
	if !ok {
		return r4b.AdministrableProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "AdministrableProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAdverseEvent(ctx context.Context, resource r4b.AdverseEvent) (r4b.AdverseEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AdverseEvent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AdverseEvent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AdverseEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdverseEvent)
	if !ok {
		return r4b.AdverseEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAllergyIntolerance(ctx context.Context, resource r4b.AllergyIntolerance) (r4b.AllergyIntolerance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AllergyIntolerance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AllergyIntolerance)
	if !ok {
		return r4b.AllergyIntolerance{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAppointment(ctx context.Context, resource r4b.Appointment) (r4b.Appointment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Appointment{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Appointment"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Appointment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Appointment)
	if !ok {
		return r4b.Appointment{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAppointmentResponse(ctx context.Context, resource r4b.AppointmentResponse) (r4b.AppointmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AppointmentResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AppointmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AppointmentResponse)
	if !ok {
		return r4b.AppointmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateAuditEvent(ctx context.Context, resource r4b.AuditEvent) (r4b.AuditEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AuditEvent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "AuditEvent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AuditEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AuditEvent)
	if !ok {
		return r4b.AuditEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBasic(ctx context.Context, resource r4b.Basic) (r4b.Basic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Basic{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Basic"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Basic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Basic)
	if !ok {
		return r4b.Basic{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBinary(ctx context.Context, resource r4b.Binary) (r4b.Binary, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Binary{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Binary"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Binary{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Binary)
	if !ok {
		return r4b.Binary{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBiologicallyDerivedProduct(ctx context.Context, resource r4b.BiologicallyDerivedProduct) (r4b.BiologicallyDerivedProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBodyStructure(ctx context.Context, resource r4b.BodyStructure) (r4b.BodyStructure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.BodyStructure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "BodyStructure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.BodyStructure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BodyStructure)
	if !ok {
		return r4b.BodyStructure{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateBundle(ctx context.Context, resource r4b.Bundle) (r4b.Bundle, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Bundle{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Bundle"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Bundle{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Bundle)
	if !ok {
		return r4b.Bundle{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCapabilityStatement(ctx context.Context, resource r4b.CapabilityStatement) (r4b.CapabilityStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CapabilityStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CapabilityStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CapabilityStatement)
	if !ok {
		return r4b.CapabilityStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCarePlan(ctx context.Context, resource r4b.CarePlan) (r4b.CarePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CarePlan{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CarePlan"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CarePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CarePlan)
	if !ok {
		return r4b.CarePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCareTeam(ctx context.Context, resource r4b.CareTeam) (r4b.CareTeam, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CareTeam{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CareTeam"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CareTeam{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CareTeam)
	if !ok {
		return r4b.CareTeam{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCatalogEntry(ctx context.Context, resource r4b.CatalogEntry) (r4b.CatalogEntry, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CatalogEntry{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CatalogEntry"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CatalogEntry{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CatalogEntry)
	if !ok {
		return r4b.CatalogEntry{}, capabilities.UnexpectedResourceError{ExpectedType: "CatalogEntry", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateChargeItem(ctx context.Context, resource r4b.ChargeItem) (r4b.ChargeItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ChargeItem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ChargeItem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ChargeItem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItem)
	if !ok {
		return r4b.ChargeItem{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateChargeItemDefinition(ctx context.Context, resource r4b.ChargeItemDefinition) (r4b.ChargeItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ChargeItemDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItemDefinition)
	if !ok {
		return r4b.ChargeItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCitation(ctx context.Context, resource r4b.Citation) (r4b.Citation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Citation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Citation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Citation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Citation)
	if !ok {
		return r4b.Citation{}, capabilities.UnexpectedResourceError{ExpectedType: "Citation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClaim(ctx context.Context, resource r4b.Claim) (r4b.Claim, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Claim{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Claim"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Claim{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Claim)
	if !ok {
		return r4b.Claim{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClaimResponse(ctx context.Context, resource r4b.ClaimResponse) (r4b.ClaimResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ClaimResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClaimResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ClaimResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClaimResponse)
	if !ok {
		return r4b.ClaimResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClinicalImpression(ctx context.Context, resource r4b.ClinicalImpression) (r4b.ClinicalImpression, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ClinicalImpression{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ClinicalImpression{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalImpression)
	if !ok {
		return r4b.ClinicalImpression{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateClinicalUseDefinition(ctx context.Context, resource r4b.ClinicalUseDefinition) (r4b.ClinicalUseDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ClinicalUseDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ClinicalUseDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ClinicalUseDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalUseDefinition)
	if !ok {
		return r4b.ClinicalUseDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalUseDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCodeSystem(ctx context.Context, resource r4b.CodeSystem) (r4b.CodeSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CodeSystem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CodeSystem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CodeSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CodeSystem)
	if !ok {
		return r4b.CodeSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCommunication(ctx context.Context, resource r4b.Communication) (r4b.Communication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Communication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Communication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Communication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Communication)
	if !ok {
		return r4b.Communication{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCommunicationRequest(ctx context.Context, resource r4b.CommunicationRequest) (r4b.CommunicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CommunicationRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CommunicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CommunicationRequest)
	if !ok {
		return r4b.CommunicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCompartmentDefinition(ctx context.Context, resource r4b.CompartmentDefinition) (r4b.CompartmentDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CompartmentDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CompartmentDefinition)
	if !ok {
		return r4b.CompartmentDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateComposition(ctx context.Context, resource r4b.Composition) (r4b.Composition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Composition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Composition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Composition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Composition)
	if !ok {
		return r4b.Composition{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateConceptMap(ctx context.Context, resource r4b.ConceptMap) (r4b.ConceptMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ConceptMap{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ConceptMap"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ConceptMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ConceptMap)
	if !ok {
		return r4b.ConceptMap{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCondition(ctx context.Context, resource r4b.Condition) (r4b.Condition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Condition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Condition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Condition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Condition)
	if !ok {
		return r4b.Condition{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateConsent(ctx context.Context, resource r4b.Consent) (r4b.Consent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Consent{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Consent"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Consent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Consent)
	if !ok {
		return r4b.Consent{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateContract(ctx context.Context, resource r4b.Contract) (r4b.Contract, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Contract{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Contract"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Contract{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Contract)
	if !ok {
		return r4b.Contract{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverage(ctx context.Context, resource r4b.Coverage) (r4b.Coverage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Coverage{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Coverage"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Coverage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Coverage)
	if !ok {
		return r4b.Coverage{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityRequest(ctx context.Context, resource r4b.CoverageEligibilityRequest) (r4b.CoverageEligibilityRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityRequest)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityResponse(ctx context.Context, resource r4b.CoverageEligibilityResponse) (r4b.CoverageEligibilityResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityResponse)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDetectedIssue(ctx context.Context, resource r4b.DetectedIssue) (r4b.DetectedIssue, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DetectedIssue{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DetectedIssue"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DetectedIssue{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DetectedIssue)
	if !ok {
		return r4b.DetectedIssue{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDevice(ctx context.Context, resource r4b.Device) (r4b.Device, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Device{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Device"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Device{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Device)
	if !ok {
		return r4b.Device{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceDefinition(ctx context.Context, resource r4b.DeviceDefinition) (r4b.DeviceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceDefinition)
	if !ok {
		return r4b.DeviceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceMetric(ctx context.Context, resource r4b.DeviceMetric) (r4b.DeviceMetric, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceMetric{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceMetric"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceMetric{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceMetric)
	if !ok {
		return r4b.DeviceMetric{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceRequest(ctx context.Context, resource r4b.DeviceRequest) (r4b.DeviceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceRequest)
	if !ok {
		return r4b.DeviceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDeviceUseStatement(ctx context.Context, resource r4b.DeviceUseStatement) (r4b.DeviceUseStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceUseStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DeviceUseStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceUseStatement)
	if !ok {
		return r4b.DeviceUseStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUseStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDiagnosticReport(ctx context.Context, resource r4b.DiagnosticReport) (r4b.DiagnosticReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DiagnosticReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DiagnosticReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DiagnosticReport)
	if !ok {
		return r4b.DiagnosticReport{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDocumentManifest(ctx context.Context, resource r4b.DocumentManifest) (r4b.DocumentManifest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DocumentManifest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DocumentManifest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DocumentManifest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentManifest)
	if !ok {
		return r4b.DocumentManifest{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentManifest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateDocumentReference(ctx context.Context, resource r4b.DocumentReference) (r4b.DocumentReference, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DocumentReference{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "DocumentReference"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DocumentReference{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentReference)
	if !ok {
		return r4b.DocumentReference{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEncounter(ctx context.Context, resource r4b.Encounter) (r4b.Encounter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Encounter{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Encounter"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Encounter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Encounter)
	if !ok {
		return r4b.Encounter{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEndpoint(ctx context.Context, resource r4b.Endpoint) (r4b.Endpoint, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Endpoint{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Endpoint"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Endpoint{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Endpoint)
	if !ok {
		return r4b.Endpoint{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentRequest(ctx context.Context, resource r4b.EnrollmentRequest) (r4b.EnrollmentRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EnrollmentRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentRequest)
	if !ok {
		return r4b.EnrollmentRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentResponse(ctx context.Context, resource r4b.EnrollmentResponse) (r4b.EnrollmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EnrollmentResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentResponse)
	if !ok {
		return r4b.EnrollmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEpisodeOfCare(ctx context.Context, resource r4b.EpisodeOfCare) (r4b.EpisodeOfCare, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EpisodeOfCare{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EpisodeOfCare)
	if !ok {
		return r4b.EpisodeOfCare{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEventDefinition(ctx context.Context, resource r4b.EventDefinition) (r4b.EventDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EventDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EventDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EventDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EventDefinition)
	if !ok {
		return r4b.EventDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidence(ctx context.Context, resource r4b.Evidence) (r4b.Evidence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Evidence{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Evidence"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Evidence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Evidence)
	if !ok {
		return r4b.Evidence{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceReport(ctx context.Context, resource r4b.EvidenceReport) (r4b.EvidenceReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EvidenceReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EvidenceReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EvidenceReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceReport)
	if !ok {
		return r4b.EvidenceReport{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceVariable(ctx context.Context, resource r4b.EvidenceVariable) (r4b.EvidenceVariable, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EvidenceVariable{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EvidenceVariable{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceVariable)
	if !ok {
		return r4b.EvidenceVariable{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateExampleScenario(ctx context.Context, resource r4b.ExampleScenario) (r4b.ExampleScenario, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ExampleScenario{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ExampleScenario"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ExampleScenario{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExampleScenario)
	if !ok {
		return r4b.ExampleScenario{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateExplanationOfBenefit(ctx context.Context, resource r4b.ExplanationOfBenefit) (r4b.ExplanationOfBenefit, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ExplanationOfBenefit{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExplanationOfBenefit)
	if !ok {
		return r4b.ExplanationOfBenefit{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateFamilyMemberHistory(ctx context.Context, resource r4b.FamilyMemberHistory) (r4b.FamilyMemberHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.FamilyMemberHistory{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.FamilyMemberHistory)
	if !ok {
		return r4b.FamilyMemberHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateFlag(ctx context.Context, resource r4b.Flag) (r4b.Flag, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Flag{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Flag"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Flag{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Flag)
	if !ok {
		return r4b.Flag{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGoal(ctx context.Context, resource r4b.Goal) (r4b.Goal, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Goal{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Goal"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Goal{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Goal)
	if !ok {
		return r4b.Goal{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGraphDefinition(ctx context.Context, resource r4b.GraphDefinition) (r4b.GraphDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.GraphDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "GraphDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.GraphDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GraphDefinition)
	if !ok {
		return r4b.GraphDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGroup(ctx context.Context, resource r4b.Group) (r4b.Group, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Group{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Group"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Group{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Group)
	if !ok {
		return r4b.Group{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateGuidanceResponse(ctx context.Context, resource r4b.GuidanceResponse) (r4b.GuidanceResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.GuidanceResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.GuidanceResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GuidanceResponse)
	if !ok {
		return r4b.GuidanceResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateHealthcareService(ctx context.Context, resource r4b.HealthcareService) (r4b.HealthcareService, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.HealthcareService{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "HealthcareService"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.HealthcareService{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.HealthcareService)
	if !ok {
		return r4b.HealthcareService{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImagingStudy(ctx context.Context, resource r4b.ImagingStudy) (r4b.ImagingStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImagingStudy{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImagingStudy"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImagingStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImagingStudy)
	if !ok {
		return r4b.ImagingStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunization(ctx context.Context, resource r4b.Immunization) (r4b.Immunization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Immunization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Immunization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Immunization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Immunization)
	if !ok {
		return r4b.Immunization{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationEvaluation(ctx context.Context, resource r4b.ImmunizationEvaluation) (r4b.ImmunizationEvaluation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImmunizationEvaluation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationEvaluation)
	if !ok {
		return r4b.ImmunizationEvaluation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationRecommendation(ctx context.Context, resource r4b.ImmunizationRecommendation) (r4b.ImmunizationRecommendation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImmunizationRecommendation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationRecommendation)
	if !ok {
		return r4b.ImmunizationRecommendation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateImplementationGuide(ctx context.Context, resource r4b.ImplementationGuide) (r4b.ImplementationGuide, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImplementationGuide{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImplementationGuide{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImplementationGuide)
	if !ok {
		return r4b.ImplementationGuide{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateIngredient(ctx context.Context, resource r4b.Ingredient) (r4b.Ingredient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Ingredient{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Ingredient"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Ingredient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Ingredient)
	if !ok {
		return r4b.Ingredient{}, capabilities.UnexpectedResourceError{ExpectedType: "Ingredient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInsurancePlan(ctx context.Context, resource r4b.InsurancePlan) (r4b.InsurancePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.InsurancePlan{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "InsurancePlan"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.InsurancePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.InsurancePlan)
	if !ok {
		return r4b.InsurancePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateInvoice(ctx context.Context, resource r4b.Invoice) (r4b.Invoice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Invoice{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Invoice"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Invoice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Invoice)
	if !ok {
		return r4b.Invoice{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLibrary(ctx context.Context, resource r4b.Library) (r4b.Library, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Library{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Library"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Library{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Library)
	if !ok {
		return r4b.Library{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLinkage(ctx context.Context, resource r4b.Linkage) (r4b.Linkage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Linkage{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Linkage"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Linkage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Linkage)
	if !ok {
		return r4b.Linkage{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateList(ctx context.Context, resource r4b.List) (r4b.List, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.List{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "List"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.List{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.List)
	if !ok {
		return r4b.List{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateLocation(ctx context.Context, resource r4b.Location) (r4b.Location, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Location{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Location"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Location{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Location)
	if !ok {
		return r4b.Location{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateManufacturedItemDefinition(ctx context.Context, resource r4b.ManufacturedItemDefinition) (r4b.ManufacturedItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ManufacturedItemDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ManufacturedItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ManufacturedItemDefinition)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ManufacturedItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMeasure(ctx context.Context, resource r4b.Measure) (r4b.Measure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Measure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Measure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Measure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Measure)
	if !ok {
		return r4b.Measure{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMeasureReport(ctx context.Context, resource r4b.MeasureReport) (r4b.MeasureReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MeasureReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MeasureReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MeasureReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MeasureReport)
	if !ok {
		return r4b.MeasureReport{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedia(ctx context.Context, resource r4b.Media) (r4b.Media, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Media{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Media"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Media{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Media)
	if !ok {
		return r4b.Media{}, capabilities.UnexpectedResourceError{ExpectedType: "Media", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedication(ctx context.Context, resource r4b.Medication) (r4b.Medication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Medication{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Medication"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Medication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Medication)
	if !ok {
		return r4b.Medication{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationAdministration(ctx context.Context, resource r4b.MedicationAdministration) (r4b.MedicationAdministration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationAdministration{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationAdministration{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationAdministration)
	if !ok {
		return r4b.MedicationAdministration{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationDispense(ctx context.Context, resource r4b.MedicationDispense) (r4b.MedicationDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationDispense{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationDispense"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationDispense{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationDispense)
	if !ok {
		return r4b.MedicationDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationKnowledge(ctx context.Context, resource r4b.MedicationKnowledge) (r4b.MedicationKnowledge, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationKnowledge{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationKnowledge)
	if !ok {
		return r4b.MedicationKnowledge{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationRequest(ctx context.Context, resource r4b.MedicationRequest) (r4b.MedicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationRequest)
	if !ok {
		return r4b.MedicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicationStatement(ctx context.Context, resource r4b.MedicationStatement) (r4b.MedicationStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationStatement{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicationStatement"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationStatement)
	if !ok {
		return r4b.MedicationStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductDefinition(ctx context.Context, resource r4b.MedicinalProductDefinition) (r4b.MedicinalProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicinalProductDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MedicinalProductDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicinalProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicinalProductDefinition)
	if !ok {
		return r4b.MedicinalProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMessageDefinition(ctx context.Context, resource r4b.MessageDefinition) (r4b.MessageDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MessageDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MessageDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MessageDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageDefinition)
	if !ok {
		return r4b.MessageDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMessageHeader(ctx context.Context, resource r4b.MessageHeader) (r4b.MessageHeader, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MessageHeader{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MessageHeader"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MessageHeader{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageHeader)
	if !ok {
		return r4b.MessageHeader{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateMolecularSequence(ctx context.Context, resource r4b.MolecularSequence) (r4b.MolecularSequence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MolecularSequence{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "MolecularSequence"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MolecularSequence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MolecularSequence)
	if !ok {
		return r4b.MolecularSequence{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNamingSystem(ctx context.Context, resource r4b.NamingSystem) (r4b.NamingSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.NamingSystem{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NamingSystem"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.NamingSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NamingSystem)
	if !ok {
		return r4b.NamingSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNutritionOrder(ctx context.Context, resource r4b.NutritionOrder) (r4b.NutritionOrder, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.NutritionOrder{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NutritionOrder"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.NutritionOrder{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionOrder)
	if !ok {
		return r4b.NutritionOrder{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateNutritionProduct(ctx context.Context, resource r4b.NutritionProduct) (r4b.NutritionProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.NutritionProduct{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "NutritionProduct"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.NutritionProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionProduct)
	if !ok {
		return r4b.NutritionProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateObservation(ctx context.Context, resource r4b.Observation) (r4b.Observation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Observation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Observation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Observation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Observation)
	if !ok {
		return r4b.Observation{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateObservationDefinition(ctx context.Context, resource r4b.ObservationDefinition) (r4b.ObservationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ObservationDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ObservationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ObservationDefinition)
	if !ok {
		return r4b.ObservationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOperationDefinition(ctx context.Context, resource r4b.OperationDefinition) (r4b.OperationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.OperationDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OperationDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.OperationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationDefinition)
	if !ok {
		return r4b.OperationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOperationOutcome(ctx context.Context, resource r4b.OperationOutcome) (r4b.OperationOutcome, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.OperationOutcome{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OperationOutcome"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.OperationOutcome{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationOutcome)
	if !ok {
		return r4b.OperationOutcome{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOrganization(ctx context.Context, resource r4b.Organization) (r4b.Organization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Organization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Organization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Organization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Organization)
	if !ok {
		return r4b.Organization{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateOrganizationAffiliation(ctx context.Context, resource r4b.OrganizationAffiliation) (r4b.OrganizationAffiliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.OrganizationAffiliation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OrganizationAffiliation)
	if !ok {
		return r4b.OrganizationAffiliation{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePackagedProductDefinition(ctx context.Context, resource r4b.PackagedProductDefinition) (r4b.PackagedProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PackagedProductDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PackagedProductDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PackagedProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PackagedProductDefinition)
	if !ok {
		return r4b.PackagedProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PackagedProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateParameters(ctx context.Context, resource r4b.Parameters) (r4b.Parameters, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Parameters{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Parameters"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Parameters{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Parameters)
	if !ok {
		return r4b.Parameters{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePatient(ctx context.Context, resource r4b.Patient) (r4b.Patient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Patient{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Patient"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Patient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Patient)
	if !ok {
		return r4b.Patient{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePaymentNotice(ctx context.Context, resource r4b.PaymentNotice) (r4b.PaymentNotice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PaymentNotice{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PaymentNotice"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PaymentNotice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentNotice)
	if !ok {
		return r4b.PaymentNotice{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePaymentReconciliation(ctx context.Context, resource r4b.PaymentReconciliation) (r4b.PaymentReconciliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PaymentReconciliation{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentReconciliation)
	if !ok {
		return r4b.PaymentReconciliation{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePerson(ctx context.Context, resource r4b.Person) (r4b.Person, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Person{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Person"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Person{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Person)
	if !ok {
		return r4b.Person{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePlanDefinition(ctx context.Context, resource r4b.PlanDefinition) (r4b.PlanDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PlanDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PlanDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PlanDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PlanDefinition)
	if !ok {
		return r4b.PlanDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePractitioner(ctx context.Context, resource r4b.Practitioner) (r4b.Practitioner, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Practitioner{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Practitioner"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Practitioner{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Practitioner)
	if !ok {
		return r4b.Practitioner{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreatePractitionerRole(ctx context.Context, resource r4b.PractitionerRole) (r4b.PractitionerRole, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PractitionerRole{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "PractitionerRole"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PractitionerRole{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PractitionerRole)
	if !ok {
		return r4b.PractitionerRole{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateProcedure(ctx context.Context, resource r4b.Procedure) (r4b.Procedure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Procedure{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Procedure"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Procedure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Procedure)
	if !ok {
		return r4b.Procedure{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateProvenance(ctx context.Context, resource r4b.Provenance) (r4b.Provenance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Provenance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Provenance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Provenance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Provenance)
	if !ok {
		return r4b.Provenance{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaire(ctx context.Context, resource r4b.Questionnaire) (r4b.Questionnaire, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Questionnaire{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Questionnaire"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Questionnaire{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Questionnaire)
	if !ok {
		return r4b.Questionnaire{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaireResponse(ctx context.Context, resource r4b.QuestionnaireResponse) (r4b.QuestionnaireResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.QuestionnaireResponse{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.QuestionnaireResponse)
	if !ok {
		return r4b.QuestionnaireResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRegulatedAuthorization(ctx context.Context, resource r4b.RegulatedAuthorization) (r4b.RegulatedAuthorization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RegulatedAuthorization{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RegulatedAuthorization"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RegulatedAuthorization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RegulatedAuthorization)
	if !ok {
		return r4b.RegulatedAuthorization{}, capabilities.UnexpectedResourceError{ExpectedType: "RegulatedAuthorization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRelatedPerson(ctx context.Context, resource r4b.RelatedPerson) (r4b.RelatedPerson, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RelatedPerson{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RelatedPerson"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RelatedPerson{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RelatedPerson)
	if !ok {
		return r4b.RelatedPerson{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRequestGroup(ctx context.Context, resource r4b.RequestGroup) (r4b.RequestGroup, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RequestGroup{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RequestGroup"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RequestGroup{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RequestGroup)
	if !ok {
		return r4b.RequestGroup{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestGroup", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchDefinition(ctx context.Context, resource r4b.ResearchDefinition) (r4b.ResearchDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchDefinition)
	if !ok {
		return r4b.ResearchDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchElementDefinition(ctx context.Context, resource r4b.ResearchElementDefinition) (r4b.ResearchElementDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchElementDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchElementDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchElementDefinition)
	if !ok {
		return r4b.ResearchElementDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchElementDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchStudy(ctx context.Context, resource r4b.ResearchStudy) (r4b.ResearchStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchStudy{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchStudy"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchStudy)
	if !ok {
		return r4b.ResearchStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateResearchSubject(ctx context.Context, resource r4b.ResearchSubject) (r4b.ResearchSubject, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchSubject{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ResearchSubject"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchSubject{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchSubject)
	if !ok {
		return r4b.ResearchSubject{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateRiskAssessment(ctx context.Context, resource r4b.RiskAssessment) (r4b.RiskAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RiskAssessment{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "RiskAssessment"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RiskAssessment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RiskAssessment)
	if !ok {
		return r4b.RiskAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSchedule(ctx context.Context, resource r4b.Schedule) (r4b.Schedule, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Schedule{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Schedule"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Schedule{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Schedule)
	if !ok {
		return r4b.Schedule{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSearchParameter(ctx context.Context, resource r4b.SearchParameter) (r4b.SearchParameter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SearchParameter{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SearchParameter"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SearchParameter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SearchParameter)
	if !ok {
		return r4b.SearchParameter{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateServiceRequest(ctx context.Context, resource r4b.ServiceRequest) (r4b.ServiceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ServiceRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ServiceRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ServiceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ServiceRequest)
	if !ok {
		return r4b.ServiceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSlot(ctx context.Context, resource r4b.Slot) (r4b.Slot, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Slot{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Slot"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Slot{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Slot)
	if !ok {
		return r4b.Slot{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSpecimen(ctx context.Context, resource r4b.Specimen) (r4b.Specimen, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Specimen{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Specimen"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Specimen{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Specimen)
	if !ok {
		return r4b.Specimen{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSpecimenDefinition(ctx context.Context, resource r4b.SpecimenDefinition) (r4b.SpecimenDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SpecimenDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SpecimenDefinition)
	if !ok {
		return r4b.SpecimenDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateStructureDefinition(ctx context.Context, resource r4b.StructureDefinition) (r4b.StructureDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.StructureDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "StructureDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.StructureDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureDefinition)
	if !ok {
		return r4b.StructureDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateStructureMap(ctx context.Context, resource r4b.StructureMap) (r4b.StructureMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.StructureMap{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "StructureMap"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.StructureMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureMap)
	if !ok {
		return r4b.StructureMap{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubscription(ctx context.Context, resource r4b.Subscription) (r4b.Subscription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Subscription{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Subscription"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Subscription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Subscription)
	if !ok {
		return r4b.Subscription{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubscriptionStatus(ctx context.Context, resource r4b.SubscriptionStatus) (r4b.SubscriptionStatus, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SubscriptionStatus{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubscriptionStatus"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SubscriptionStatus{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionStatus)
	if !ok {
		return r4b.SubscriptionStatus{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionStatus", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubscriptionTopic(ctx context.Context, resource r4b.SubscriptionTopic) (r4b.SubscriptionTopic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SubscriptionTopic{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubscriptionTopic"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SubscriptionTopic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionTopic)
	if !ok {
		return r4b.SubscriptionTopic{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionTopic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstance(ctx context.Context, resource r4b.Substance) (r4b.Substance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Substance{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Substance"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Substance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Substance)
	if !ok {
		return r4b.Substance{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceDefinition(ctx context.Context, resource r4b.SubstanceDefinition) (r4b.SubstanceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SubstanceDefinition{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SubstanceDefinition"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SubstanceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubstanceDefinition)
	if !ok {
		return r4b.SubstanceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSupplyDelivery(ctx context.Context, resource r4b.SupplyDelivery) (r4b.SupplyDelivery, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SupplyDelivery{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SupplyDelivery{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyDelivery)
	if !ok {
		return r4b.SupplyDelivery{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateSupplyRequest(ctx context.Context, resource r4b.SupplyRequest) (r4b.SupplyRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SupplyRequest{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "SupplyRequest"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SupplyRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyRequest)
	if !ok {
		return r4b.SupplyRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTask(ctx context.Context, resource r4b.Task) (r4b.Task, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Task{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "Task"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Task{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Task)
	if !ok {
		return r4b.Task{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTerminologyCapabilities(ctx context.Context, resource r4b.TerminologyCapabilities) (r4b.TerminologyCapabilities, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.TerminologyCapabilities{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TerminologyCapabilities)
	if !ok {
		return r4b.TerminologyCapabilities{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTestReport(ctx context.Context, resource r4b.TestReport) (r4b.TestReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.TestReport{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TestReport"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.TestReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestReport)
	if !ok {
		return r4b.TestReport{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateTestScript(ctx context.Context, resource r4b.TestScript) (r4b.TestScript, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.TestScript{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "TestScript"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.TestScript{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestScript)
	if !ok {
		return r4b.TestScript{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateValueSet(ctx context.Context, resource r4b.ValueSet) (r4b.ValueSet, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ValueSet{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "ValueSet"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ValueSet{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ValueSet)
	if !ok {
		return r4b.ValueSet{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateVerificationResult(ctx context.Context, resource r4b.VerificationResult) (r4b.VerificationResult, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.VerificationResult{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "VerificationResult"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.VerificationResult{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VerificationResult)
	if !ok {
		return r4b.VerificationResult{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) CreateVisionPrescription(ctx context.Context, resource r4b.VisionPrescription) (r4b.VisionPrescription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.VisionPrescription{}, capabilities.NotImplementedError{Interaction: "create", ResourceType: "VisionPrescription"}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.VisionPrescription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VisionPrescription)
	if !ok {
		return r4b.VisionPrescription{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAccount(ctx context.Context, id string) (r4b.Account, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Account{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Account"}
	}
	v, err := g.Read(ctx, "Account", id)
	if err != nil {
		return r4b.Account{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Account)
	if !ok {
		return r4b.Account{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadActivityDefinition(ctx context.Context, id string) (r4b.ActivityDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ActivityDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r4b.ActivityDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ActivityDefinition)
	if !ok {
		return r4b.ActivityDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAdministrableProductDefinition(ctx context.Context, id string) (r4b.AdministrableProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AdministrableProductDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AdministrableProductDefinition"}
	}
	v, err := g.Read(ctx, "AdministrableProductDefinition", id)
	if err != nil {
		return r4b.AdministrableProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdministrableProductDefinition)
	if !ok {
		return r4b.AdministrableProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "AdministrableProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAdverseEvent(ctx context.Context, id string) (r4b.AdverseEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AdverseEvent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AdverseEvent"}
	}
	v, err := g.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r4b.AdverseEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdverseEvent)
	if !ok {
		return r4b.AdverseEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAllergyIntolerance(ctx context.Context, id string) (r4b.AllergyIntolerance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AllergyIntolerance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r4b.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AllergyIntolerance)
	if !ok {
		return r4b.AllergyIntolerance{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAppointment(ctx context.Context, id string) (r4b.Appointment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Appointment{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Appointment"}
	}
	v, err := g.Read(ctx, "Appointment", id)
	if err != nil {
		return r4b.Appointment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Appointment)
	if !ok {
		return r4b.Appointment{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAppointmentResponse(ctx context.Context, id string) (r4b.AppointmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AppointmentResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r4b.AppointmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AppointmentResponse)
	if !ok {
		return r4b.AppointmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadAuditEvent(ctx context.Context, id string) (r4b.AuditEvent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AuditEvent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "AuditEvent"}
	}
	v, err := g.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r4b.AuditEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AuditEvent)
	if !ok {
		return r4b.AuditEvent{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBasic(ctx context.Context, id string) (r4b.Basic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Basic{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Basic"}
	}
	v, err := g.Read(ctx, "Basic", id)
	if err != nil {
		return r4b.Basic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Basic)
	if !ok {
		return r4b.Basic{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBinary(ctx context.Context, id string) (r4b.Binary, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Binary{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Binary"}
	}
	v, err := g.Read(ctx, "Binary", id)
	if err != nil {
		return r4b.Binary{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Binary)
	if !ok {
		return r4b.Binary{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r4b.BiologicallyDerivedProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r4b.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBodyStructure(ctx context.Context, id string) (r4b.BodyStructure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.BodyStructure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "BodyStructure"}
	}
	v, err := g.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r4b.BodyStructure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BodyStructure)
	if !ok {
		return r4b.BodyStructure{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadBundle(ctx context.Context, id string) (r4b.Bundle, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Bundle{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Bundle"}
	}
	v, err := g.Read(ctx, "Bundle", id)
	if err != nil {
		return r4b.Bundle{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Bundle)
	if !ok {
		return r4b.Bundle{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCapabilityStatement(ctx context.Context, id string) (r4b.CapabilityStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CapabilityStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r4b.CapabilityStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CapabilityStatement)
	if !ok {
		return r4b.CapabilityStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCarePlan(ctx context.Context, id string) (r4b.CarePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CarePlan{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CarePlan"}
	}
	v, err := g.Read(ctx, "CarePlan", id)
	if err != nil {
		return r4b.CarePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CarePlan)
	if !ok {
		return r4b.CarePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCareTeam(ctx context.Context, id string) (r4b.CareTeam, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CareTeam{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CareTeam"}
	}
	v, err := g.Read(ctx, "CareTeam", id)
	if err != nil {
		return r4b.CareTeam{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CareTeam)
	if !ok {
		return r4b.CareTeam{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCatalogEntry(ctx context.Context, id string) (r4b.CatalogEntry, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CatalogEntry{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CatalogEntry"}
	}
	v, err := g.Read(ctx, "CatalogEntry", id)
	if err != nil {
		return r4b.CatalogEntry{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CatalogEntry)
	if !ok {
		return r4b.CatalogEntry{}, capabilities.UnexpectedResourceError{ExpectedType: "CatalogEntry", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadChargeItem(ctx context.Context, id string) (r4b.ChargeItem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ChargeItem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ChargeItem"}
	}
	v, err := g.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r4b.ChargeItem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItem)
	if !ok {
		return r4b.ChargeItem{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadChargeItemDefinition(ctx context.Context, id string) (r4b.ChargeItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ChargeItemDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r4b.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItemDefinition)
	if !ok {
		return r4b.ChargeItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCitation(ctx context.Context, id string) (r4b.Citation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Citation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Citation"}
	}
	v, err := g.Read(ctx, "Citation", id)
	if err != nil {
		return r4b.Citation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Citation)
	if !ok {
		return r4b.Citation{}, capabilities.UnexpectedResourceError{ExpectedType: "Citation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClaim(ctx context.Context, id string) (r4b.Claim, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Claim{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Claim"}
	}
	v, err := g.Read(ctx, "Claim", id)
	if err != nil {
		return r4b.Claim{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Claim)
	if !ok {
		return r4b.Claim{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClaimResponse(ctx context.Context, id string) (r4b.ClaimResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ClaimResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClaimResponse"}
	}
	v, err := g.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r4b.ClaimResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClaimResponse)
	if !ok {
		return r4b.ClaimResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClinicalImpression(ctx context.Context, id string) (r4b.ClinicalImpression, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ClinicalImpression{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r4b.ClinicalImpression{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalImpression)
	if !ok {
		return r4b.ClinicalImpression{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadClinicalUseDefinition(ctx context.Context, id string) (r4b.ClinicalUseDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ClinicalUseDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ClinicalUseDefinition"}
	}
	v, err := g.Read(ctx, "ClinicalUseDefinition", id)
	if err != nil {
		return r4b.ClinicalUseDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalUseDefinition)
	if !ok {
		return r4b.ClinicalUseDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalUseDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCodeSystem(ctx context.Context, id string) (r4b.CodeSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CodeSystem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CodeSystem"}
	}
	v, err := g.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r4b.CodeSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CodeSystem)
	if !ok {
		return r4b.CodeSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCommunication(ctx context.Context, id string) (r4b.Communication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Communication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Communication"}
	}
	v, err := g.Read(ctx, "Communication", id)
	if err != nil {
		return r4b.Communication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Communication)
	if !ok {
		return r4b.Communication{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCommunicationRequest(ctx context.Context, id string) (r4b.CommunicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CommunicationRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r4b.CommunicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CommunicationRequest)
	if !ok {
		return r4b.CommunicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCompartmentDefinition(ctx context.Context, id string) (r4b.CompartmentDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CompartmentDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r4b.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CompartmentDefinition)
	if !ok {
		return r4b.CompartmentDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadComposition(ctx context.Context, id string) (r4b.Composition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Composition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Composition"}
	}
	v, err := g.Read(ctx, "Composition", id)
	if err != nil {
		return r4b.Composition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Composition)
	if !ok {
		return r4b.Composition{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadConceptMap(ctx context.Context, id string) (r4b.ConceptMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ConceptMap{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ConceptMap"}
	}
	v, err := g.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r4b.ConceptMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ConceptMap)
	if !ok {
		return r4b.ConceptMap{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCondition(ctx context.Context, id string) (r4b.Condition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Condition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Condition"}
	}
	v, err := g.Read(ctx, "Condition", id)
	if err != nil {
		return r4b.Condition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Condition)
	if !ok {
		return r4b.Condition{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadConsent(ctx context.Context, id string) (r4b.Consent, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Consent{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Consent"}
	}
	v, err := g.Read(ctx, "Consent", id)
	if err != nil {
		return r4b.Consent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Consent)
	if !ok {
		return r4b.Consent{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadContract(ctx context.Context, id string) (r4b.Contract, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Contract{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Contract"}
	}
	v, err := g.Read(ctx, "Contract", id)
	if err != nil {
		return r4b.Contract{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Contract)
	if !ok {
		return r4b.Contract{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverage(ctx context.Context, id string) (r4b.Coverage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Coverage{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Coverage"}
	}
	v, err := g.Read(ctx, "Coverage", id)
	if err != nil {
		return r4b.Coverage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Coverage)
	if !ok {
		return r4b.Coverage{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r4b.CoverageEligibilityRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r4b.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityRequest)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r4b.CoverageEligibilityResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r4b.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityResponse)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDetectedIssue(ctx context.Context, id string) (r4b.DetectedIssue, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DetectedIssue{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DetectedIssue"}
	}
	v, err := g.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r4b.DetectedIssue{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DetectedIssue)
	if !ok {
		return r4b.DetectedIssue{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDevice(ctx context.Context, id string) (r4b.Device, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Device{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Device"}
	}
	v, err := g.Read(ctx, "Device", id)
	if err != nil {
		return r4b.Device{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Device)
	if !ok {
		return r4b.Device{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceDefinition(ctx context.Context, id string) (r4b.DeviceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r4b.DeviceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceDefinition)
	if !ok {
		return r4b.DeviceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceMetric(ctx context.Context, id string) (r4b.DeviceMetric, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceMetric{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceMetric"}
	}
	v, err := g.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r4b.DeviceMetric{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceMetric)
	if !ok {
		return r4b.DeviceMetric{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceRequest(ctx context.Context, id string) (r4b.DeviceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceRequest"}
	}
	v, err := g.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r4b.DeviceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceRequest)
	if !ok {
		return r4b.DeviceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDeviceUseStatement(ctx context.Context, id string) (r4b.DeviceUseStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceUseStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DeviceUseStatement"}
	}
	v, err := g.Read(ctx, "DeviceUseStatement", id)
	if err != nil {
		return r4b.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceUseStatement)
	if !ok {
		return r4b.DeviceUseStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUseStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDiagnosticReport(ctx context.Context, id string) (r4b.DiagnosticReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DiagnosticReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r4b.DiagnosticReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DiagnosticReport)
	if !ok {
		return r4b.DiagnosticReport{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDocumentManifest(ctx context.Context, id string) (r4b.DocumentManifest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DocumentManifest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DocumentManifest"}
	}
	v, err := g.Read(ctx, "DocumentManifest", id)
	if err != nil {
		return r4b.DocumentManifest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentManifest)
	if !ok {
		return r4b.DocumentManifest{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentManifest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadDocumentReference(ctx context.Context, id string) (r4b.DocumentReference, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DocumentReference{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "DocumentReference"}
	}
	v, err := g.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r4b.DocumentReference{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentReference)
	if !ok {
		return r4b.DocumentReference{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEncounter(ctx context.Context, id string) (r4b.Encounter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Encounter{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Encounter"}
	}
	v, err := g.Read(ctx, "Encounter", id)
	if err != nil {
		return r4b.Encounter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Encounter)
	if !ok {
		return r4b.Encounter{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEndpoint(ctx context.Context, id string) (r4b.Endpoint, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Endpoint{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Endpoint"}
	}
	v, err := g.Read(ctx, "Endpoint", id)
	if err != nil {
		return r4b.Endpoint{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Endpoint)
	if !ok {
		return r4b.Endpoint{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentRequest(ctx context.Context, id string) (r4b.EnrollmentRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EnrollmentRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r4b.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentRequest)
	if !ok {
		return r4b.EnrollmentRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentResponse(ctx context.Context, id string) (r4b.EnrollmentResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EnrollmentResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r4b.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentResponse)
	if !ok {
		return r4b.EnrollmentResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEpisodeOfCare(ctx context.Context, id string) (r4b.EpisodeOfCare, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EpisodeOfCare{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r4b.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EpisodeOfCare)
	if !ok {
		return r4b.EpisodeOfCare{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEventDefinition(ctx context.Context, id string) (r4b.EventDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EventDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EventDefinition"}
	}
	v, err := g.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r4b.EventDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EventDefinition)
	if !ok {
		return r4b.EventDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidence(ctx context.Context, id string) (r4b.Evidence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Evidence{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Evidence"}
	}
	v, err := g.Read(ctx, "Evidence", id)
	if err != nil {
		return r4b.Evidence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Evidence)
	if !ok {
		return r4b.Evidence{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceReport(ctx context.Context, id string) (r4b.EvidenceReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EvidenceReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EvidenceReport"}
	}
	v, err := g.Read(ctx, "EvidenceReport", id)
	if err != nil {
		return r4b.EvidenceReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceReport)
	if !ok {
		return r4b.EvidenceReport{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceVariable(ctx context.Context, id string) (r4b.EvidenceVariable, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EvidenceVariable{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r4b.EvidenceVariable{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceVariable)
	if !ok {
		return r4b.EvidenceVariable{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadExampleScenario(ctx context.Context, id string) (r4b.ExampleScenario, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ExampleScenario{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ExampleScenario"}
	}
	v, err := g.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r4b.ExampleScenario{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExampleScenario)
	if !ok {
		return r4b.ExampleScenario{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadExplanationOfBenefit(ctx context.Context, id string) (r4b.ExplanationOfBenefit, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ExplanationOfBenefit{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r4b.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExplanationOfBenefit)
	if !ok {
		return r4b.ExplanationOfBenefit{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadFamilyMemberHistory(ctx context.Context, id string) (r4b.FamilyMemberHistory, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.FamilyMemberHistory{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r4b.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.FamilyMemberHistory)
	if !ok {
		return r4b.FamilyMemberHistory{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadFlag(ctx context.Context, id string) (r4b.Flag, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Flag{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Flag"}
	}
	v, err := g.Read(ctx, "Flag", id)
	if err != nil {
		return r4b.Flag{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Flag)
	if !ok {
		return r4b.Flag{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGoal(ctx context.Context, id string) (r4b.Goal, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Goal{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Goal"}
	}
	v, err := g.Read(ctx, "Goal", id)
	if err != nil {
		return r4b.Goal{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Goal)
	if !ok {
		return r4b.Goal{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGraphDefinition(ctx context.Context, id string) (r4b.GraphDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.GraphDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "GraphDefinition"}
	}
	v, err := g.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r4b.GraphDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GraphDefinition)
	if !ok {
		return r4b.GraphDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGroup(ctx context.Context, id string) (r4b.Group, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Group{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Group"}
	}
	v, err := g.Read(ctx, "Group", id)
	if err != nil {
		return r4b.Group{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Group)
	if !ok {
		return r4b.Group{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadGuidanceResponse(ctx context.Context, id string) (r4b.GuidanceResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.GuidanceResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r4b.GuidanceResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GuidanceResponse)
	if !ok {
		return r4b.GuidanceResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadHealthcareService(ctx context.Context, id string) (r4b.HealthcareService, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.HealthcareService{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "HealthcareService"}
	}
	v, err := g.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r4b.HealthcareService{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.HealthcareService)
	if !ok {
		return r4b.HealthcareService{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImagingStudy(ctx context.Context, id string) (r4b.ImagingStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImagingStudy{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImagingStudy"}
	}
	v, err := g.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r4b.ImagingStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImagingStudy)
	if !ok {
		return r4b.ImagingStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunization(ctx context.Context, id string) (r4b.Immunization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Immunization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Immunization"}
	}
	v, err := g.Read(ctx, "Immunization", id)
	if err != nil {
		return r4b.Immunization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Immunization)
	if !ok {
		return r4b.Immunization{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationEvaluation(ctx context.Context, id string) (r4b.ImmunizationEvaluation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImmunizationEvaluation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r4b.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationEvaluation)
	if !ok {
		return r4b.ImmunizationEvaluation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationRecommendation(ctx context.Context, id string) (r4b.ImmunizationRecommendation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImmunizationRecommendation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r4b.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationRecommendation)
	if !ok {
		return r4b.ImmunizationRecommendation{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadImplementationGuide(ctx context.Context, id string) (r4b.ImplementationGuide, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImplementationGuide{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r4b.ImplementationGuide{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImplementationGuide)
	if !ok {
		return r4b.ImplementationGuide{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadIngredient(ctx context.Context, id string) (r4b.Ingredient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Ingredient{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Ingredient"}
	}
	v, err := g.Read(ctx, "Ingredient", id)
	if err != nil {
		return r4b.Ingredient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Ingredient)
	if !ok {
		return r4b.Ingredient{}, capabilities.UnexpectedResourceError{ExpectedType: "Ingredient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInsurancePlan(ctx context.Context, id string) (r4b.InsurancePlan, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.InsurancePlan{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "InsurancePlan"}
	}
	v, err := g.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r4b.InsurancePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.InsurancePlan)
	if !ok {
		return r4b.InsurancePlan{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadInvoice(ctx context.Context, id string) (r4b.Invoice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Invoice{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Invoice"}
	}
	v, err := g.Read(ctx, "Invoice", id)
	if err != nil {
		return r4b.Invoice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Invoice)
	if !ok {
		return r4b.Invoice{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLibrary(ctx context.Context, id string) (r4b.Library, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Library{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Library"}
	}
	v, err := g.Read(ctx, "Library", id)
	if err != nil {
		return r4b.Library{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Library)
	if !ok {
		return r4b.Library{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLinkage(ctx context.Context, id string) (r4b.Linkage, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Linkage{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Linkage"}
	}
	v, err := g.Read(ctx, "Linkage", id)
	if err != nil {
		return r4b.Linkage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Linkage)
	if !ok {
		return r4b.Linkage{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadList(ctx context.Context, id string) (r4b.List, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.List{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "List"}
	}
	v, err := g.Read(ctx, "List", id)
	if err != nil {
		return r4b.List{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.List)
	if !ok {
		return r4b.List{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadLocation(ctx context.Context, id string) (r4b.Location, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Location{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Location"}
	}
	v, err := g.Read(ctx, "Location", id)
	if err != nil {
		return r4b.Location{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Location)
	if !ok {
		return r4b.Location{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadManufacturedItemDefinition(ctx context.Context, id string) (r4b.ManufacturedItemDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ManufacturedItemDefinition"}
	}
	v, err := g.Read(ctx, "ManufacturedItemDefinition", id)
	if err != nil {
		return r4b.ManufacturedItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ManufacturedItemDefinition)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ManufacturedItemDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMeasure(ctx context.Context, id string) (r4b.Measure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Measure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Measure"}
	}
	v, err := g.Read(ctx, "Measure", id)
	if err != nil {
		return r4b.Measure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Measure)
	if !ok {
		return r4b.Measure{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMeasureReport(ctx context.Context, id string) (r4b.MeasureReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MeasureReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MeasureReport"}
	}
	v, err := g.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r4b.MeasureReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MeasureReport)
	if !ok {
		return r4b.MeasureReport{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedia(ctx context.Context, id string) (r4b.Media, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Media{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Media"}
	}
	v, err := g.Read(ctx, "Media", id)
	if err != nil {
		return r4b.Media{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Media)
	if !ok {
		return r4b.Media{}, capabilities.UnexpectedResourceError{ExpectedType: "Media", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedication(ctx context.Context, id string) (r4b.Medication, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Medication{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Medication"}
	}
	v, err := g.Read(ctx, "Medication", id)
	if err != nil {
		return r4b.Medication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Medication)
	if !ok {
		return r4b.Medication{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationAdministration(ctx context.Context, id string) (r4b.MedicationAdministration, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationAdministration{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r4b.MedicationAdministration{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationAdministration)
	if !ok {
		return r4b.MedicationAdministration{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationDispense(ctx context.Context, id string) (r4b.MedicationDispense, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationDispense{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationDispense"}
	}
	v, err := g.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r4b.MedicationDispense{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationDispense)
	if !ok {
		return r4b.MedicationDispense{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationKnowledge(ctx context.Context, id string) (r4b.MedicationKnowledge, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationKnowledge{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r4b.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationKnowledge)
	if !ok {
		return r4b.MedicationKnowledge{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationRequest(ctx context.Context, id string) (r4b.MedicationRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationRequest"}
	}
	v, err := g.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r4b.MedicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationRequest)
	if !ok {
		return r4b.MedicationRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicationStatement(ctx context.Context, id string) (r4b.MedicationStatement, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationStatement{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicationStatement"}
	}
	v, err := g.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r4b.MedicationStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationStatement)
	if !ok {
		return r4b.MedicationStatement{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductDefinition(ctx context.Context, id string) (r4b.MedicinalProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicinalProductDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MedicinalProductDefinition"}
	}
	v, err := g.Read(ctx, "MedicinalProductDefinition", id)
	if err != nil {
		return r4b.MedicinalProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicinalProductDefinition)
	if !ok {
		return r4b.MedicinalProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMessageDefinition(ctx context.Context, id string) (r4b.MessageDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MessageDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MessageDefinition"}
	}
	v, err := g.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r4b.MessageDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageDefinition)
	if !ok {
		return r4b.MessageDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMessageHeader(ctx context.Context, id string) (r4b.MessageHeader, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MessageHeader{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MessageHeader"}
	}
	v, err := g.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r4b.MessageHeader{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageHeader)
	if !ok {
		return r4b.MessageHeader{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadMolecularSequence(ctx context.Context, id string) (r4b.MolecularSequence, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MolecularSequence{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "MolecularSequence"}
	}
	v, err := g.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r4b.MolecularSequence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MolecularSequence)
	if !ok {
		return r4b.MolecularSequence{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNamingSystem(ctx context.Context, id string) (r4b.NamingSystem, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.NamingSystem{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NamingSystem"}
	}
	v, err := g.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r4b.NamingSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NamingSystem)
	if !ok {
		return r4b.NamingSystem{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNutritionOrder(ctx context.Context, id string) (r4b.NutritionOrder, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.NutritionOrder{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NutritionOrder"}
	}
	v, err := g.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r4b.NutritionOrder{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionOrder)
	if !ok {
		return r4b.NutritionOrder{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadNutritionProduct(ctx context.Context, id string) (r4b.NutritionProduct, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.NutritionProduct{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "NutritionProduct"}
	}
	v, err := g.Read(ctx, "NutritionProduct", id)
	if err != nil {
		return r4b.NutritionProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionProduct)
	if !ok {
		return r4b.NutritionProduct{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionProduct", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadObservation(ctx context.Context, id string) (r4b.Observation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Observation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Observation"}
	}
	v, err := g.Read(ctx, "Observation", id)
	if err != nil {
		return r4b.Observation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Observation)
	if !ok {
		return r4b.Observation{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadObservationDefinition(ctx context.Context, id string) (r4b.ObservationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ObservationDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r4b.ObservationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ObservationDefinition)
	if !ok {
		return r4b.ObservationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOperationDefinition(ctx context.Context, id string) (r4b.OperationDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.OperationDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OperationDefinition"}
	}
	v, err := g.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r4b.OperationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationDefinition)
	if !ok {
		return r4b.OperationDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOperationOutcome(ctx context.Context, id string) (r4b.OperationOutcome, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.OperationOutcome{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OperationOutcome"}
	}
	v, err := g.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r4b.OperationOutcome{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationOutcome)
	if !ok {
		return r4b.OperationOutcome{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOrganization(ctx context.Context, id string) (r4b.Organization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Organization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Organization"}
	}
	v, err := g.Read(ctx, "Organization", id)
	if err != nil {
		return r4b.Organization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Organization)
	if !ok {
		return r4b.Organization{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadOrganizationAffiliation(ctx context.Context, id string) (r4b.OrganizationAffiliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.OrganizationAffiliation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r4b.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OrganizationAffiliation)
	if !ok {
		return r4b.OrganizationAffiliation{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPackagedProductDefinition(ctx context.Context, id string) (r4b.PackagedProductDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PackagedProductDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PackagedProductDefinition"}
	}
	v, err := g.Read(ctx, "PackagedProductDefinition", id)
	if err != nil {
		return r4b.PackagedProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PackagedProductDefinition)
	if !ok {
		return r4b.PackagedProductDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PackagedProductDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadParameters(ctx context.Context, id string) (r4b.Parameters, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Parameters{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Parameters"}
	}
	v, err := g.Read(ctx, "Parameters", id)
	if err != nil {
		return r4b.Parameters{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Parameters)
	if !ok {
		return r4b.Parameters{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPatient(ctx context.Context, id string) (r4b.Patient, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Patient{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Patient"}
	}
	v, err := g.Read(ctx, "Patient", id)
	if err != nil {
		return r4b.Patient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Patient)
	if !ok {
		return r4b.Patient{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPaymentNotice(ctx context.Context, id string) (r4b.PaymentNotice, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PaymentNotice{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PaymentNotice"}
	}
	v, err := g.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r4b.PaymentNotice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentNotice)
	if !ok {
		return r4b.PaymentNotice{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPaymentReconciliation(ctx context.Context, id string) (r4b.PaymentReconciliation, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PaymentReconciliation{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r4b.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentReconciliation)
	if !ok {
		return r4b.PaymentReconciliation{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPerson(ctx context.Context, id string) (r4b.Person, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Person{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Person"}
	}
	v, err := g.Read(ctx, "Person", id)
	if err != nil {
		return r4b.Person{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Person)
	if !ok {
		return r4b.Person{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPlanDefinition(ctx context.Context, id string) (r4b.PlanDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PlanDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PlanDefinition"}
	}
	v, err := g.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r4b.PlanDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PlanDefinition)
	if !ok {
		return r4b.PlanDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPractitioner(ctx context.Context, id string) (r4b.Practitioner, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Practitioner{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Practitioner"}
	}
	v, err := g.Read(ctx, "Practitioner", id)
	if err != nil {
		return r4b.Practitioner{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Practitioner)
	if !ok {
		return r4b.Practitioner{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadPractitionerRole(ctx context.Context, id string) (r4b.PractitionerRole, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PractitionerRole{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "PractitionerRole"}
	}
	v, err := g.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r4b.PractitionerRole{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PractitionerRole)
	if !ok {
		return r4b.PractitionerRole{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadProcedure(ctx context.Context, id string) (r4b.Procedure, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Procedure{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Procedure"}
	}
	v, err := g.Read(ctx, "Procedure", id)
	if err != nil {
		return r4b.Procedure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Procedure)
	if !ok {
		return r4b.Procedure{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadProvenance(ctx context.Context, id string) (r4b.Provenance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Provenance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Provenance"}
	}
	v, err := g.Read(ctx, "Provenance", id)
	if err != nil {
		return r4b.Provenance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Provenance)
	if !ok {
		return r4b.Provenance{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaire(ctx context.Context, id string) (r4b.Questionnaire, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Questionnaire{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Questionnaire"}
	}
	v, err := g.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r4b.Questionnaire{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Questionnaire)
	if !ok {
		return r4b.Questionnaire{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaireResponse(ctx context.Context, id string) (r4b.QuestionnaireResponse, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.QuestionnaireResponse{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r4b.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.QuestionnaireResponse)
	if !ok {
		return r4b.QuestionnaireResponse{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRegulatedAuthorization(ctx context.Context, id string) (r4b.RegulatedAuthorization, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RegulatedAuthorization{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RegulatedAuthorization"}
	}
	v, err := g.Read(ctx, "RegulatedAuthorization", id)
	if err != nil {
		return r4b.RegulatedAuthorization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RegulatedAuthorization)
	if !ok {
		return r4b.RegulatedAuthorization{}, capabilities.UnexpectedResourceError{ExpectedType: "RegulatedAuthorization", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRelatedPerson(ctx context.Context, id string) (r4b.RelatedPerson, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RelatedPerson{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RelatedPerson"}
	}
	v, err := g.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r4b.RelatedPerson{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RelatedPerson)
	if !ok {
		return r4b.RelatedPerson{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRequestGroup(ctx context.Context, id string) (r4b.RequestGroup, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RequestGroup{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RequestGroup"}
	}
	v, err := g.Read(ctx, "RequestGroup", id)
	if err != nil {
		return r4b.RequestGroup{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RequestGroup)
	if !ok {
		return r4b.RequestGroup{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestGroup", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchDefinition(ctx context.Context, id string) (r4b.ResearchDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchDefinition"}
	}
	v, err := g.Read(ctx, "ResearchDefinition", id)
	if err != nil {
		return r4b.ResearchDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchDefinition)
	if !ok {
		return r4b.ResearchDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchElementDefinition(ctx context.Context, id string) (r4b.ResearchElementDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchElementDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchElementDefinition"}
	}
	v, err := g.Read(ctx, "ResearchElementDefinition", id)
	if err != nil {
		return r4b.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchElementDefinition)
	if !ok {
		return r4b.ResearchElementDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchElementDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchStudy(ctx context.Context, id string) (r4b.ResearchStudy, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchStudy{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchStudy"}
	}
	v, err := g.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r4b.ResearchStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchStudy)
	if !ok {
		return r4b.ResearchStudy{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadResearchSubject(ctx context.Context, id string) (r4b.ResearchSubject, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchSubject{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ResearchSubject"}
	}
	v, err := g.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r4b.ResearchSubject{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchSubject)
	if !ok {
		return r4b.ResearchSubject{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadRiskAssessment(ctx context.Context, id string) (r4b.RiskAssessment, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RiskAssessment{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "RiskAssessment"}
	}
	v, err := g.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r4b.RiskAssessment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RiskAssessment)
	if !ok {
		return r4b.RiskAssessment{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSchedule(ctx context.Context, id string) (r4b.Schedule, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Schedule{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Schedule"}
	}
	v, err := g.Read(ctx, "Schedule", id)
	if err != nil {
		return r4b.Schedule{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Schedule)
	if !ok {
		return r4b.Schedule{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSearchParameter(ctx context.Context, id string) (r4b.SearchParameter, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SearchParameter{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SearchParameter"}
	}
	v, err := g.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r4b.SearchParameter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SearchParameter)
	if !ok {
		return r4b.SearchParameter{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadServiceRequest(ctx context.Context, id string) (r4b.ServiceRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ServiceRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ServiceRequest"}
	}
	v, err := g.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r4b.ServiceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ServiceRequest)
	if !ok {
		return r4b.ServiceRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSlot(ctx context.Context, id string) (r4b.Slot, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Slot{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Slot"}
	}
	v, err := g.Read(ctx, "Slot", id)
	if err != nil {
		return r4b.Slot{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Slot)
	if !ok {
		return r4b.Slot{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSpecimen(ctx context.Context, id string) (r4b.Specimen, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Specimen{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Specimen"}
	}
	v, err := g.Read(ctx, "Specimen", id)
	if err != nil {
		return r4b.Specimen{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Specimen)
	if !ok {
		return r4b.Specimen{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSpecimenDefinition(ctx context.Context, id string) (r4b.SpecimenDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SpecimenDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r4b.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SpecimenDefinition)
	if !ok {
		return r4b.SpecimenDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadStructureDefinition(ctx context.Context, id string) (r4b.StructureDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.StructureDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "StructureDefinition"}
	}
	v, err := g.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r4b.StructureDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureDefinition)
	if !ok {
		return r4b.StructureDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadStructureMap(ctx context.Context, id string) (r4b.StructureMap, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.StructureMap{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "StructureMap"}
	}
	v, err := g.Read(ctx, "StructureMap", id)
	if err != nil {
		return r4b.StructureMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureMap)
	if !ok {
		return r4b.StructureMap{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubscription(ctx context.Context, id string) (r4b.Subscription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Subscription{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Subscription"}
	}
	v, err := g.Read(ctx, "Subscription", id)
	if err != nil {
		return r4b.Subscription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Subscription)
	if !ok {
		return r4b.Subscription{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubscriptionStatus(ctx context.Context, id string) (r4b.SubscriptionStatus, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SubscriptionStatus{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubscriptionStatus"}
	}
	v, err := g.Read(ctx, "SubscriptionStatus", id)
	if err != nil {
		return r4b.SubscriptionStatus{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionStatus)
	if !ok {
		return r4b.SubscriptionStatus{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionStatus", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubscriptionTopic(ctx context.Context, id string) (r4b.SubscriptionTopic, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SubscriptionTopic{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubscriptionTopic"}
	}
	v, err := g.Read(ctx, "SubscriptionTopic", id)
	if err != nil {
		return r4b.SubscriptionTopic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionTopic)
	if !ok {
		return r4b.SubscriptionTopic{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionTopic", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstance(ctx context.Context, id string) (r4b.Substance, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Substance{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Substance"}
	}
	v, err := g.Read(ctx, "Substance", id)
	if err != nil {
		return r4b.Substance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Substance)
	if !ok {
		return r4b.Substance{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceDefinition(ctx context.Context, id string) (r4b.SubstanceDefinition, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SubstanceDefinition{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SubstanceDefinition"}
	}
	v, err := g.Read(ctx, "SubstanceDefinition", id)
	if err != nil {
		return r4b.SubstanceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubstanceDefinition)
	if !ok {
		return r4b.SubstanceDefinition{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceDefinition", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSupplyDelivery(ctx context.Context, id string) (r4b.SupplyDelivery, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SupplyDelivery{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r4b.SupplyDelivery{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyDelivery)
	if !ok {
		return r4b.SupplyDelivery{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadSupplyRequest(ctx context.Context, id string) (r4b.SupplyRequest, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SupplyRequest{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "SupplyRequest"}
	}
	v, err := g.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r4b.SupplyRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyRequest)
	if !ok {
		return r4b.SupplyRequest{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTask(ctx context.Context, id string) (r4b.Task, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Task{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "Task"}
	}
	v, err := g.Read(ctx, "Task", id)
	if err != nil {
		return r4b.Task{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Task)
	if !ok {
		return r4b.Task{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTerminologyCapabilities(ctx context.Context, id string) (r4b.TerminologyCapabilities, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.TerminologyCapabilities{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r4b.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TerminologyCapabilities)
	if !ok {
		return r4b.TerminologyCapabilities{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTestReport(ctx context.Context, id string) (r4b.TestReport, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.TestReport{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TestReport"}
	}
	v, err := g.Read(ctx, "TestReport", id)
	if err != nil {
		return r4b.TestReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestReport)
	if !ok {
		return r4b.TestReport{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadTestScript(ctx context.Context, id string) (r4b.TestScript, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.TestScript{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "TestScript"}
	}
	v, err := g.Read(ctx, "TestScript", id)
	if err != nil {
		return r4b.TestScript{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestScript)
	if !ok {
		return r4b.TestScript{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadValueSet(ctx context.Context, id string) (r4b.ValueSet, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ValueSet{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "ValueSet"}
	}
	v, err := g.Read(ctx, "ValueSet", id)
	if err != nil {
		return r4b.ValueSet{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ValueSet)
	if !ok {
		return r4b.ValueSet{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadVerificationResult(ctx context.Context, id string) (r4b.VerificationResult, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.VerificationResult{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "VerificationResult"}
	}
	v, err := g.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r4b.VerificationResult{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VerificationResult)
	if !ok {
		return r4b.VerificationResult{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) ReadVisionPrescription(ctx context.Context, id string) (r4b.VisionPrescription, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.VisionPrescription{}, capabilities.NotImplementedError{Interaction: "read", ResourceType: "VisionPrescription"}
	}
	v, err := g.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r4b.VisionPrescription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VisionPrescription)
	if !ok {
		return r4b.VisionPrescription{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return r, nil
}
func (w Concrete) UpdateAccount(ctx context.Context, resource r4b.Account) (capabilities.UpdateResult[r4b.Account], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Account]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Account"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Account]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Account)
	if !ok {
		return capabilities.UpdateResult[r4b.Account]{}, capabilities.UnexpectedResourceError{ExpectedType: "Account", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Account]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateActivityDefinition(ctx context.Context, resource r4b.ActivityDefinition) (capabilities.UpdateResult[r4b.ActivityDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ActivityDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ActivityDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ActivityDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ActivityDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.ActivityDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ActivityDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ActivityDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAdministrableProductDefinition(ctx context.Context, resource r4b.AdministrableProductDefinition) (capabilities.UpdateResult[r4b.AdministrableProductDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.AdministrableProductDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AdministrableProductDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.AdministrableProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdministrableProductDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.AdministrableProductDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "AdministrableProductDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.AdministrableProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAdverseEvent(ctx context.Context, resource r4b.AdverseEvent) (capabilities.UpdateResult[r4b.AdverseEvent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.AdverseEvent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AdverseEvent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.AdverseEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdverseEvent)
	if !ok {
		return capabilities.UpdateResult[r4b.AdverseEvent]{}, capabilities.UnexpectedResourceError{ExpectedType: "AdverseEvent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.AdverseEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAllergyIntolerance(ctx context.Context, resource r4b.AllergyIntolerance) (capabilities.UpdateResult[r4b.AllergyIntolerance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.AllergyIntolerance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AllergyIntolerance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.AllergyIntolerance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AllergyIntolerance)
	if !ok {
		return capabilities.UpdateResult[r4b.AllergyIntolerance]{}, capabilities.UnexpectedResourceError{ExpectedType: "AllergyIntolerance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.AllergyIntolerance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointment(ctx context.Context, resource r4b.Appointment) (capabilities.UpdateResult[r4b.Appointment], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Appointment]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Appointment"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Appointment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Appointment)
	if !ok {
		return capabilities.UpdateResult[r4b.Appointment]{}, capabilities.UnexpectedResourceError{ExpectedType: "Appointment", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Appointment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAppointmentResponse(ctx context.Context, resource r4b.AppointmentResponse) (capabilities.UpdateResult[r4b.AppointmentResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.AppointmentResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AppointmentResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.AppointmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AppointmentResponse)
	if !ok {
		return capabilities.UpdateResult[r4b.AppointmentResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "AppointmentResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.AppointmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateAuditEvent(ctx context.Context, resource r4b.AuditEvent) (capabilities.UpdateResult[r4b.AuditEvent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.AuditEvent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "AuditEvent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.AuditEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AuditEvent)
	if !ok {
		return capabilities.UpdateResult[r4b.AuditEvent]{}, capabilities.UnexpectedResourceError{ExpectedType: "AuditEvent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.AuditEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBasic(ctx context.Context, resource r4b.Basic) (capabilities.UpdateResult[r4b.Basic], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Basic]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Basic"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Basic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Basic)
	if !ok {
		return capabilities.UpdateResult[r4b.Basic]{}, capabilities.UnexpectedResourceError{ExpectedType: "Basic", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Basic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBinary(ctx context.Context, resource r4b.Binary) (capabilities.UpdateResult[r4b.Binary], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Binary]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Binary"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Binary]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Binary)
	if !ok {
		return capabilities.UpdateResult[r4b.Binary]{}, capabilities.UnexpectedResourceError{ExpectedType: "Binary", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Binary]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r4b.BiologicallyDerivedProduct) (capabilities.UpdateResult[r4b.BiologicallyDerivedProduct], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.BiologicallyDerivedProduct]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "BiologicallyDerivedProduct"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.BiologicallyDerivedProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return capabilities.UpdateResult[r4b.BiologicallyDerivedProduct]{}, capabilities.UnexpectedResourceError{ExpectedType: "BiologicallyDerivedProduct", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.BiologicallyDerivedProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBodyStructure(ctx context.Context, resource r4b.BodyStructure) (capabilities.UpdateResult[r4b.BodyStructure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.BodyStructure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "BodyStructure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.BodyStructure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BodyStructure)
	if !ok {
		return capabilities.UpdateResult[r4b.BodyStructure]{}, capabilities.UnexpectedResourceError{ExpectedType: "BodyStructure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.BodyStructure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateBundle(ctx context.Context, resource r4b.Bundle) (capabilities.UpdateResult[r4b.Bundle], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Bundle]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Bundle"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Bundle]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Bundle)
	if !ok {
		return capabilities.UpdateResult[r4b.Bundle]{}, capabilities.UnexpectedResourceError{ExpectedType: "Bundle", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Bundle]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilityStatement(ctx context.Context, resource r4b.CapabilityStatement) (capabilities.UpdateResult[r4b.CapabilityStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CapabilityStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CapabilityStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CapabilityStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CapabilityStatement)
	if !ok {
		return capabilities.UpdateResult[r4b.CapabilityStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "CapabilityStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CapabilityStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCarePlan(ctx context.Context, resource r4b.CarePlan) (capabilities.UpdateResult[r4b.CarePlan], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CarePlan]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CarePlan"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CarePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CarePlan)
	if !ok {
		return capabilities.UpdateResult[r4b.CarePlan]{}, capabilities.UnexpectedResourceError{ExpectedType: "CarePlan", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CarePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCareTeam(ctx context.Context, resource r4b.CareTeam) (capabilities.UpdateResult[r4b.CareTeam], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CareTeam]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CareTeam"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CareTeam]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CareTeam)
	if !ok {
		return capabilities.UpdateResult[r4b.CareTeam]{}, capabilities.UnexpectedResourceError{ExpectedType: "CareTeam", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CareTeam]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCatalogEntry(ctx context.Context, resource r4b.CatalogEntry) (capabilities.UpdateResult[r4b.CatalogEntry], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CatalogEntry]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CatalogEntry"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CatalogEntry]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CatalogEntry)
	if !ok {
		return capabilities.UpdateResult[r4b.CatalogEntry]{}, capabilities.UnexpectedResourceError{ExpectedType: "CatalogEntry", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CatalogEntry]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItem(ctx context.Context, resource r4b.ChargeItem) (capabilities.UpdateResult[r4b.ChargeItem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ChargeItem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ChargeItem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ChargeItem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItem)
	if !ok {
		return capabilities.UpdateResult[r4b.ChargeItem]{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ChargeItem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateChargeItemDefinition(ctx context.Context, resource r4b.ChargeItemDefinition) (capabilities.UpdateResult[r4b.ChargeItemDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ChargeItemDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ChargeItemDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ChargeItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItemDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.ChargeItemDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ChargeItemDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ChargeItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCitation(ctx context.Context, resource r4b.Citation) (capabilities.UpdateResult[r4b.Citation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Citation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Citation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Citation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Citation)
	if !ok {
		return capabilities.UpdateResult[r4b.Citation]{}, capabilities.UnexpectedResourceError{ExpectedType: "Citation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Citation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaim(ctx context.Context, resource r4b.Claim) (capabilities.UpdateResult[r4b.Claim], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Claim]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Claim"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Claim]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Claim)
	if !ok {
		return capabilities.UpdateResult[r4b.Claim]{}, capabilities.UnexpectedResourceError{ExpectedType: "Claim", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Claim]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClaimResponse(ctx context.Context, resource r4b.ClaimResponse) (capabilities.UpdateResult[r4b.ClaimResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ClaimResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClaimResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ClaimResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClaimResponse)
	if !ok {
		return capabilities.UpdateResult[r4b.ClaimResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClaimResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ClaimResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClinicalImpression(ctx context.Context, resource r4b.ClinicalImpression) (capabilities.UpdateResult[r4b.ClinicalImpression], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ClinicalImpression]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClinicalImpression"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ClinicalImpression]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalImpression)
	if !ok {
		return capabilities.UpdateResult[r4b.ClinicalImpression]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalImpression", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ClinicalImpression]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateClinicalUseDefinition(ctx context.Context, resource r4b.ClinicalUseDefinition) (capabilities.UpdateResult[r4b.ClinicalUseDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ClinicalUseDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ClinicalUseDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ClinicalUseDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalUseDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.ClinicalUseDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ClinicalUseDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ClinicalUseDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCodeSystem(ctx context.Context, resource r4b.CodeSystem) (capabilities.UpdateResult[r4b.CodeSystem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CodeSystem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CodeSystem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CodeSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CodeSystem)
	if !ok {
		return capabilities.UpdateResult[r4b.CodeSystem]{}, capabilities.UnexpectedResourceError{ExpectedType: "CodeSystem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CodeSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunication(ctx context.Context, resource r4b.Communication) (capabilities.UpdateResult[r4b.Communication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Communication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Communication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Communication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Communication)
	if !ok {
		return capabilities.UpdateResult[r4b.Communication]{}, capabilities.UnexpectedResourceError{ExpectedType: "Communication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Communication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCommunicationRequest(ctx context.Context, resource r4b.CommunicationRequest) (capabilities.UpdateResult[r4b.CommunicationRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CommunicationRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CommunicationRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CommunicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CommunicationRequest)
	if !ok {
		return capabilities.UpdateResult[r4b.CommunicationRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "CommunicationRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CommunicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCompartmentDefinition(ctx context.Context, resource r4b.CompartmentDefinition) (capabilities.UpdateResult[r4b.CompartmentDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CompartmentDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CompartmentDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CompartmentDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CompartmentDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.CompartmentDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "CompartmentDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CompartmentDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateComposition(ctx context.Context, resource r4b.Composition) (capabilities.UpdateResult[r4b.Composition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Composition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Composition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Composition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Composition)
	if !ok {
		return capabilities.UpdateResult[r4b.Composition]{}, capabilities.UnexpectedResourceError{ExpectedType: "Composition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Composition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConceptMap(ctx context.Context, resource r4b.ConceptMap) (capabilities.UpdateResult[r4b.ConceptMap], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ConceptMap]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ConceptMap"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ConceptMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ConceptMap)
	if !ok {
		return capabilities.UpdateResult[r4b.ConceptMap]{}, capabilities.UnexpectedResourceError{ExpectedType: "ConceptMap", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ConceptMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCondition(ctx context.Context, resource r4b.Condition) (capabilities.UpdateResult[r4b.Condition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Condition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Condition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Condition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Condition)
	if !ok {
		return capabilities.UpdateResult[r4b.Condition]{}, capabilities.UnexpectedResourceError{ExpectedType: "Condition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Condition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateConsent(ctx context.Context, resource r4b.Consent) (capabilities.UpdateResult[r4b.Consent], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Consent]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Consent"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Consent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Consent)
	if !ok {
		return capabilities.UpdateResult[r4b.Consent]{}, capabilities.UnexpectedResourceError{ExpectedType: "Consent", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Consent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateContract(ctx context.Context, resource r4b.Contract) (capabilities.UpdateResult[r4b.Contract], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Contract]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Contract"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Contract]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Contract)
	if !ok {
		return capabilities.UpdateResult[r4b.Contract]{}, capabilities.UnexpectedResourceError{ExpectedType: "Contract", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Contract]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverage(ctx context.Context, resource r4b.Coverage) (capabilities.UpdateResult[r4b.Coverage], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Coverage]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Coverage"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Coverage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Coverage)
	if !ok {
		return capabilities.UpdateResult[r4b.Coverage]{}, capabilities.UnexpectedResourceError{ExpectedType: "Coverage", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Coverage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityRequest(ctx context.Context, resource r4b.CoverageEligibilityRequest) (capabilities.UpdateResult[r4b.CoverageEligibilityRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CoverageEligibilityRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CoverageEligibilityRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CoverageEligibilityRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityRequest)
	if !ok {
		return capabilities.UpdateResult[r4b.CoverageEligibilityRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CoverageEligibilityRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCoverageEligibilityResponse(ctx context.Context, resource r4b.CoverageEligibilityResponse) (capabilities.UpdateResult[r4b.CoverageEligibilityResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.CoverageEligibilityResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "CoverageEligibilityResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.CoverageEligibilityResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityResponse)
	if !ok {
		return capabilities.UpdateResult[r4b.CoverageEligibilityResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "CoverageEligibilityResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.CoverageEligibilityResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDetectedIssue(ctx context.Context, resource r4b.DetectedIssue) (capabilities.UpdateResult[r4b.DetectedIssue], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DetectedIssue]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DetectedIssue"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DetectedIssue]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DetectedIssue)
	if !ok {
		return capabilities.UpdateResult[r4b.DetectedIssue]{}, capabilities.UnexpectedResourceError{ExpectedType: "DetectedIssue", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DetectedIssue]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDevice(ctx context.Context, resource r4b.Device) (capabilities.UpdateResult[r4b.Device], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Device]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Device"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Device]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Device)
	if !ok {
		return capabilities.UpdateResult[r4b.Device]{}, capabilities.UnexpectedResourceError{ExpectedType: "Device", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Device]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceDefinition(ctx context.Context, resource r4b.DeviceDefinition) (capabilities.UpdateResult[r4b.DeviceDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DeviceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DeviceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceMetric(ctx context.Context, resource r4b.DeviceMetric) (capabilities.UpdateResult[r4b.DeviceMetric], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceMetric]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceMetric"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DeviceMetric]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceMetric)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceMetric]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceMetric", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DeviceMetric]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceRequest(ctx context.Context, resource r4b.DeviceRequest) (capabilities.UpdateResult[r4b.DeviceRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DeviceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceRequest)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DeviceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDeviceUseStatement(ctx context.Context, resource r4b.DeviceUseStatement) (capabilities.UpdateResult[r4b.DeviceUseStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceUseStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DeviceUseStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DeviceUseStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceUseStatement)
	if !ok {
		return capabilities.UpdateResult[r4b.DeviceUseStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "DeviceUseStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DeviceUseStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDiagnosticReport(ctx context.Context, resource r4b.DiagnosticReport) (capabilities.UpdateResult[r4b.DiagnosticReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DiagnosticReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DiagnosticReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DiagnosticReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DiagnosticReport)
	if !ok {
		return capabilities.UpdateResult[r4b.DiagnosticReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "DiagnosticReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DiagnosticReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDocumentManifest(ctx context.Context, resource r4b.DocumentManifest) (capabilities.UpdateResult[r4b.DocumentManifest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DocumentManifest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DocumentManifest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DocumentManifest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentManifest)
	if !ok {
		return capabilities.UpdateResult[r4b.DocumentManifest]{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentManifest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DocumentManifest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateDocumentReference(ctx context.Context, resource r4b.DocumentReference) (capabilities.UpdateResult[r4b.DocumentReference], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.DocumentReference]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "DocumentReference"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.DocumentReference]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentReference)
	if !ok {
		return capabilities.UpdateResult[r4b.DocumentReference]{}, capabilities.UnexpectedResourceError{ExpectedType: "DocumentReference", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.DocumentReference]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEncounter(ctx context.Context, resource r4b.Encounter) (capabilities.UpdateResult[r4b.Encounter], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Encounter]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Encounter"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Encounter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Encounter)
	if !ok {
		return capabilities.UpdateResult[r4b.Encounter]{}, capabilities.UnexpectedResourceError{ExpectedType: "Encounter", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Encounter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEndpoint(ctx context.Context, resource r4b.Endpoint) (capabilities.UpdateResult[r4b.Endpoint], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Endpoint]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Endpoint"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Endpoint]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Endpoint)
	if !ok {
		return capabilities.UpdateResult[r4b.Endpoint]{}, capabilities.UnexpectedResourceError{ExpectedType: "Endpoint", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Endpoint]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentRequest(ctx context.Context, resource r4b.EnrollmentRequest) (capabilities.UpdateResult[r4b.EnrollmentRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.EnrollmentRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EnrollmentRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.EnrollmentRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentRequest)
	if !ok {
		return capabilities.UpdateResult[r4b.EnrollmentRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.EnrollmentRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEnrollmentResponse(ctx context.Context, resource r4b.EnrollmentResponse) (capabilities.UpdateResult[r4b.EnrollmentResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.EnrollmentResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EnrollmentResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.EnrollmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentResponse)
	if !ok {
		return capabilities.UpdateResult[r4b.EnrollmentResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "EnrollmentResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.EnrollmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEpisodeOfCare(ctx context.Context, resource r4b.EpisodeOfCare) (capabilities.UpdateResult[r4b.EpisodeOfCare], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.EpisodeOfCare]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EpisodeOfCare"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.EpisodeOfCare]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EpisodeOfCare)
	if !ok {
		return capabilities.UpdateResult[r4b.EpisodeOfCare]{}, capabilities.UnexpectedResourceError{ExpectedType: "EpisodeOfCare", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.EpisodeOfCare]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEventDefinition(ctx context.Context, resource r4b.EventDefinition) (capabilities.UpdateResult[r4b.EventDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.EventDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EventDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.EventDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EventDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.EventDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "EventDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.EventDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidence(ctx context.Context, resource r4b.Evidence) (capabilities.UpdateResult[r4b.Evidence], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Evidence]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Evidence"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Evidence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Evidence)
	if !ok {
		return capabilities.UpdateResult[r4b.Evidence]{}, capabilities.UnexpectedResourceError{ExpectedType: "Evidence", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Evidence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidenceReport(ctx context.Context, resource r4b.EvidenceReport) (capabilities.UpdateResult[r4b.EvidenceReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.EvidenceReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EvidenceReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.EvidenceReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceReport)
	if !ok {
		return capabilities.UpdateResult[r4b.EvidenceReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.EvidenceReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateEvidenceVariable(ctx context.Context, resource r4b.EvidenceVariable) (capabilities.UpdateResult[r4b.EvidenceVariable], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.EvidenceVariable]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "EvidenceVariable"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.EvidenceVariable]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceVariable)
	if !ok {
		return capabilities.UpdateResult[r4b.EvidenceVariable]{}, capabilities.UnexpectedResourceError{ExpectedType: "EvidenceVariable", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.EvidenceVariable]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExampleScenario(ctx context.Context, resource r4b.ExampleScenario) (capabilities.UpdateResult[r4b.ExampleScenario], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ExampleScenario]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ExampleScenario"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ExampleScenario]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExampleScenario)
	if !ok {
		return capabilities.UpdateResult[r4b.ExampleScenario]{}, capabilities.UnexpectedResourceError{ExpectedType: "ExampleScenario", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ExampleScenario]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateExplanationOfBenefit(ctx context.Context, resource r4b.ExplanationOfBenefit) (capabilities.UpdateResult[r4b.ExplanationOfBenefit], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ExplanationOfBenefit]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ExplanationOfBenefit"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ExplanationOfBenefit]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExplanationOfBenefit)
	if !ok {
		return capabilities.UpdateResult[r4b.ExplanationOfBenefit]{}, capabilities.UnexpectedResourceError{ExpectedType: "ExplanationOfBenefit", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ExplanationOfBenefit]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFamilyMemberHistory(ctx context.Context, resource r4b.FamilyMemberHistory) (capabilities.UpdateResult[r4b.FamilyMemberHistory], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.FamilyMemberHistory]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "FamilyMemberHistory"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.FamilyMemberHistory]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.FamilyMemberHistory)
	if !ok {
		return capabilities.UpdateResult[r4b.FamilyMemberHistory]{}, capabilities.UnexpectedResourceError{ExpectedType: "FamilyMemberHistory", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.FamilyMemberHistory]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateFlag(ctx context.Context, resource r4b.Flag) (capabilities.UpdateResult[r4b.Flag], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Flag]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Flag"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Flag]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Flag)
	if !ok {
		return capabilities.UpdateResult[r4b.Flag]{}, capabilities.UnexpectedResourceError{ExpectedType: "Flag", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Flag]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGoal(ctx context.Context, resource r4b.Goal) (capabilities.UpdateResult[r4b.Goal], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Goal]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Goal"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Goal]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Goal)
	if !ok {
		return capabilities.UpdateResult[r4b.Goal]{}, capabilities.UnexpectedResourceError{ExpectedType: "Goal", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Goal]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGraphDefinition(ctx context.Context, resource r4b.GraphDefinition) (capabilities.UpdateResult[r4b.GraphDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.GraphDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "GraphDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.GraphDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GraphDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.GraphDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "GraphDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.GraphDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGroup(ctx context.Context, resource r4b.Group) (capabilities.UpdateResult[r4b.Group], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Group]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Group"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Group]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Group)
	if !ok {
		return capabilities.UpdateResult[r4b.Group]{}, capabilities.UnexpectedResourceError{ExpectedType: "Group", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Group]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateGuidanceResponse(ctx context.Context, resource r4b.GuidanceResponse) (capabilities.UpdateResult[r4b.GuidanceResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.GuidanceResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "GuidanceResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.GuidanceResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GuidanceResponse)
	if !ok {
		return capabilities.UpdateResult[r4b.GuidanceResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "GuidanceResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.GuidanceResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateHealthcareService(ctx context.Context, resource r4b.HealthcareService) (capabilities.UpdateResult[r4b.HealthcareService], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.HealthcareService]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "HealthcareService"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.HealthcareService]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.HealthcareService)
	if !ok {
		return capabilities.UpdateResult[r4b.HealthcareService]{}, capabilities.UnexpectedResourceError{ExpectedType: "HealthcareService", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.HealthcareService]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImagingStudy(ctx context.Context, resource r4b.ImagingStudy) (capabilities.UpdateResult[r4b.ImagingStudy], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ImagingStudy]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImagingStudy"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ImagingStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImagingStudy)
	if !ok {
		return capabilities.UpdateResult[r4b.ImagingStudy]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImagingStudy", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ImagingStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunization(ctx context.Context, resource r4b.Immunization) (capabilities.UpdateResult[r4b.Immunization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Immunization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Immunization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Immunization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Immunization)
	if !ok {
		return capabilities.UpdateResult[r4b.Immunization]{}, capabilities.UnexpectedResourceError{ExpectedType: "Immunization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Immunization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationEvaluation(ctx context.Context, resource r4b.ImmunizationEvaluation) (capabilities.UpdateResult[r4b.ImmunizationEvaluation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ImmunizationEvaluation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImmunizationEvaluation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ImmunizationEvaluation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationEvaluation)
	if !ok {
		return capabilities.UpdateResult[r4b.ImmunizationEvaluation]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationEvaluation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ImmunizationEvaluation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImmunizationRecommendation(ctx context.Context, resource r4b.ImmunizationRecommendation) (capabilities.UpdateResult[r4b.ImmunizationRecommendation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ImmunizationRecommendation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImmunizationRecommendation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ImmunizationRecommendation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationRecommendation)
	if !ok {
		return capabilities.UpdateResult[r4b.ImmunizationRecommendation]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImmunizationRecommendation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ImmunizationRecommendation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateImplementationGuide(ctx context.Context, resource r4b.ImplementationGuide) (capabilities.UpdateResult[r4b.ImplementationGuide], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ImplementationGuide]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ImplementationGuide"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ImplementationGuide]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImplementationGuide)
	if !ok {
		return capabilities.UpdateResult[r4b.ImplementationGuide]{}, capabilities.UnexpectedResourceError{ExpectedType: "ImplementationGuide", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ImplementationGuide]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateIngredient(ctx context.Context, resource r4b.Ingredient) (capabilities.UpdateResult[r4b.Ingredient], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Ingredient]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Ingredient"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Ingredient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Ingredient)
	if !ok {
		return capabilities.UpdateResult[r4b.Ingredient]{}, capabilities.UnexpectedResourceError{ExpectedType: "Ingredient", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Ingredient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInsurancePlan(ctx context.Context, resource r4b.InsurancePlan) (capabilities.UpdateResult[r4b.InsurancePlan], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.InsurancePlan]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "InsurancePlan"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.InsurancePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.InsurancePlan)
	if !ok {
		return capabilities.UpdateResult[r4b.InsurancePlan]{}, capabilities.UnexpectedResourceError{ExpectedType: "InsurancePlan", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.InsurancePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateInvoice(ctx context.Context, resource r4b.Invoice) (capabilities.UpdateResult[r4b.Invoice], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Invoice]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Invoice"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Invoice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Invoice)
	if !ok {
		return capabilities.UpdateResult[r4b.Invoice]{}, capabilities.UnexpectedResourceError{ExpectedType: "Invoice", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Invoice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLibrary(ctx context.Context, resource r4b.Library) (capabilities.UpdateResult[r4b.Library], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Library]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Library"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Library]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Library)
	if !ok {
		return capabilities.UpdateResult[r4b.Library]{}, capabilities.UnexpectedResourceError{ExpectedType: "Library", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Library]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLinkage(ctx context.Context, resource r4b.Linkage) (capabilities.UpdateResult[r4b.Linkage], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Linkage]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Linkage"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Linkage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Linkage)
	if !ok {
		return capabilities.UpdateResult[r4b.Linkage]{}, capabilities.UnexpectedResourceError{ExpectedType: "Linkage", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Linkage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateList(ctx context.Context, resource r4b.List) (capabilities.UpdateResult[r4b.List], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.List]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "List"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.List]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.List)
	if !ok {
		return capabilities.UpdateResult[r4b.List]{}, capabilities.UnexpectedResourceError{ExpectedType: "List", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.List]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateLocation(ctx context.Context, resource r4b.Location) (capabilities.UpdateResult[r4b.Location], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Location]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Location"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Location]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Location)
	if !ok {
		return capabilities.UpdateResult[r4b.Location]{}, capabilities.UnexpectedResourceError{ExpectedType: "Location", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Location]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateManufacturedItemDefinition(ctx context.Context, resource r4b.ManufacturedItemDefinition) (capabilities.UpdateResult[r4b.ManufacturedItemDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ManufacturedItemDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ManufacturedItemDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ManufacturedItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ManufacturedItemDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.ManufacturedItemDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ManufacturedItemDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ManufacturedItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasure(ctx context.Context, resource r4b.Measure) (capabilities.UpdateResult[r4b.Measure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Measure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Measure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Measure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Measure)
	if !ok {
		return capabilities.UpdateResult[r4b.Measure]{}, capabilities.UnexpectedResourceError{ExpectedType: "Measure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Measure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMeasureReport(ctx context.Context, resource r4b.MeasureReport) (capabilities.UpdateResult[r4b.MeasureReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MeasureReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MeasureReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MeasureReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MeasureReport)
	if !ok {
		return capabilities.UpdateResult[r4b.MeasureReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "MeasureReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MeasureReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedia(ctx context.Context, resource r4b.Media) (capabilities.UpdateResult[r4b.Media], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Media]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Media"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Media]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Media)
	if !ok {
		return capabilities.UpdateResult[r4b.Media]{}, capabilities.UnexpectedResourceError{ExpectedType: "Media", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Media]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedication(ctx context.Context, resource r4b.Medication) (capabilities.UpdateResult[r4b.Medication], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Medication]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Medication"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Medication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Medication)
	if !ok {
		return capabilities.UpdateResult[r4b.Medication]{}, capabilities.UnexpectedResourceError{ExpectedType: "Medication", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Medication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationAdministration(ctx context.Context, resource r4b.MedicationAdministration) (capabilities.UpdateResult[r4b.MedicationAdministration], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationAdministration]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationAdministration"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MedicationAdministration]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationAdministration)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationAdministration]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationAdministration", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MedicationAdministration]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationDispense(ctx context.Context, resource r4b.MedicationDispense) (capabilities.UpdateResult[r4b.MedicationDispense], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationDispense]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationDispense"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MedicationDispense]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationDispense)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationDispense]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationDispense", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MedicationDispense]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationKnowledge(ctx context.Context, resource r4b.MedicationKnowledge) (capabilities.UpdateResult[r4b.MedicationKnowledge], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationKnowledge]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationKnowledge"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MedicationKnowledge]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationKnowledge)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationKnowledge]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationKnowledge", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MedicationKnowledge]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationRequest(ctx context.Context, resource r4b.MedicationRequest) (capabilities.UpdateResult[r4b.MedicationRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MedicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationRequest)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MedicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicationStatement(ctx context.Context, resource r4b.MedicationStatement) (capabilities.UpdateResult[r4b.MedicationStatement], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationStatement]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicationStatement"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MedicationStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationStatement)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicationStatement]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicationStatement", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MedicationStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMedicinalProductDefinition(ctx context.Context, resource r4b.MedicinalProductDefinition) (capabilities.UpdateResult[r4b.MedicinalProductDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicinalProductDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MedicinalProductDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MedicinalProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicinalProductDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.MedicinalProductDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "MedicinalProductDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MedicinalProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageDefinition(ctx context.Context, resource r4b.MessageDefinition) (capabilities.UpdateResult[r4b.MessageDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MessageDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MessageDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MessageDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.MessageDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MessageDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMessageHeader(ctx context.Context, resource r4b.MessageHeader) (capabilities.UpdateResult[r4b.MessageHeader], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MessageHeader]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MessageHeader"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MessageHeader]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageHeader)
	if !ok {
		return capabilities.UpdateResult[r4b.MessageHeader]{}, capabilities.UnexpectedResourceError{ExpectedType: "MessageHeader", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MessageHeader]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateMolecularSequence(ctx context.Context, resource r4b.MolecularSequence) (capabilities.UpdateResult[r4b.MolecularSequence], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.MolecularSequence]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "MolecularSequence"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.MolecularSequence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MolecularSequence)
	if !ok {
		return capabilities.UpdateResult[r4b.MolecularSequence]{}, capabilities.UnexpectedResourceError{ExpectedType: "MolecularSequence", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.MolecularSequence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNamingSystem(ctx context.Context, resource r4b.NamingSystem) (capabilities.UpdateResult[r4b.NamingSystem], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.NamingSystem]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NamingSystem"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.NamingSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NamingSystem)
	if !ok {
		return capabilities.UpdateResult[r4b.NamingSystem]{}, capabilities.UnexpectedResourceError{ExpectedType: "NamingSystem", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.NamingSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNutritionOrder(ctx context.Context, resource r4b.NutritionOrder) (capabilities.UpdateResult[r4b.NutritionOrder], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.NutritionOrder]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NutritionOrder"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.NutritionOrder]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionOrder)
	if !ok {
		return capabilities.UpdateResult[r4b.NutritionOrder]{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionOrder", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.NutritionOrder]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateNutritionProduct(ctx context.Context, resource r4b.NutritionProduct) (capabilities.UpdateResult[r4b.NutritionProduct], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.NutritionProduct]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "NutritionProduct"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.NutritionProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionProduct)
	if !ok {
		return capabilities.UpdateResult[r4b.NutritionProduct]{}, capabilities.UnexpectedResourceError{ExpectedType: "NutritionProduct", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.NutritionProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservation(ctx context.Context, resource r4b.Observation) (capabilities.UpdateResult[r4b.Observation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Observation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Observation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Observation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Observation)
	if !ok {
		return capabilities.UpdateResult[r4b.Observation]{}, capabilities.UnexpectedResourceError{ExpectedType: "Observation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Observation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateObservationDefinition(ctx context.Context, resource r4b.ObservationDefinition) (capabilities.UpdateResult[r4b.ObservationDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ObservationDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ObservationDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ObservationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ObservationDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.ObservationDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ObservationDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ObservationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationDefinition(ctx context.Context, resource r4b.OperationDefinition) (capabilities.UpdateResult[r4b.OperationDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.OperationDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OperationDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.OperationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.OperationDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.OperationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOperationOutcome(ctx context.Context, resource r4b.OperationOutcome) (capabilities.UpdateResult[r4b.OperationOutcome], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.OperationOutcome]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OperationOutcome"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.OperationOutcome]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationOutcome)
	if !ok {
		return capabilities.UpdateResult[r4b.OperationOutcome]{}, capabilities.UnexpectedResourceError{ExpectedType: "OperationOutcome", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.OperationOutcome]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganization(ctx context.Context, resource r4b.Organization) (capabilities.UpdateResult[r4b.Organization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Organization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Organization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Organization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Organization)
	if !ok {
		return capabilities.UpdateResult[r4b.Organization]{}, capabilities.UnexpectedResourceError{ExpectedType: "Organization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Organization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateOrganizationAffiliation(ctx context.Context, resource r4b.OrganizationAffiliation) (capabilities.UpdateResult[r4b.OrganizationAffiliation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.OrganizationAffiliation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "OrganizationAffiliation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.OrganizationAffiliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OrganizationAffiliation)
	if !ok {
		return capabilities.UpdateResult[r4b.OrganizationAffiliation]{}, capabilities.UnexpectedResourceError{ExpectedType: "OrganizationAffiliation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.OrganizationAffiliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePackagedProductDefinition(ctx context.Context, resource r4b.PackagedProductDefinition) (capabilities.UpdateResult[r4b.PackagedProductDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.PackagedProductDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PackagedProductDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.PackagedProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PackagedProductDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.PackagedProductDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "PackagedProductDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.PackagedProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateParameters(ctx context.Context, resource r4b.Parameters) (capabilities.UpdateResult[r4b.Parameters], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Parameters]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Parameters"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Parameters]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Parameters)
	if !ok {
		return capabilities.UpdateResult[r4b.Parameters]{}, capabilities.UnexpectedResourceError{ExpectedType: "Parameters", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Parameters]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePatient(ctx context.Context, resource r4b.Patient) (capabilities.UpdateResult[r4b.Patient], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Patient]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Patient"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Patient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Patient)
	if !ok {
		return capabilities.UpdateResult[r4b.Patient]{}, capabilities.UnexpectedResourceError{ExpectedType: "Patient", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Patient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentNotice(ctx context.Context, resource r4b.PaymentNotice) (capabilities.UpdateResult[r4b.PaymentNotice], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.PaymentNotice]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PaymentNotice"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.PaymentNotice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentNotice)
	if !ok {
		return capabilities.UpdateResult[r4b.PaymentNotice]{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentNotice", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.PaymentNotice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePaymentReconciliation(ctx context.Context, resource r4b.PaymentReconciliation) (capabilities.UpdateResult[r4b.PaymentReconciliation], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.PaymentReconciliation]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PaymentReconciliation"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.PaymentReconciliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentReconciliation)
	if !ok {
		return capabilities.UpdateResult[r4b.PaymentReconciliation]{}, capabilities.UnexpectedResourceError{ExpectedType: "PaymentReconciliation", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.PaymentReconciliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePerson(ctx context.Context, resource r4b.Person) (capabilities.UpdateResult[r4b.Person], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Person]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Person"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Person]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Person)
	if !ok {
		return capabilities.UpdateResult[r4b.Person]{}, capabilities.UnexpectedResourceError{ExpectedType: "Person", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Person]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePlanDefinition(ctx context.Context, resource r4b.PlanDefinition) (capabilities.UpdateResult[r4b.PlanDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.PlanDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PlanDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.PlanDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PlanDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.PlanDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "PlanDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.PlanDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitioner(ctx context.Context, resource r4b.Practitioner) (capabilities.UpdateResult[r4b.Practitioner], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Practitioner]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Practitioner"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Practitioner]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Practitioner)
	if !ok {
		return capabilities.UpdateResult[r4b.Practitioner]{}, capabilities.UnexpectedResourceError{ExpectedType: "Practitioner", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Practitioner]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdatePractitionerRole(ctx context.Context, resource r4b.PractitionerRole) (capabilities.UpdateResult[r4b.PractitionerRole], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.PractitionerRole]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "PractitionerRole"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.PractitionerRole]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PractitionerRole)
	if !ok {
		return capabilities.UpdateResult[r4b.PractitionerRole]{}, capabilities.UnexpectedResourceError{ExpectedType: "PractitionerRole", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.PractitionerRole]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProcedure(ctx context.Context, resource r4b.Procedure) (capabilities.UpdateResult[r4b.Procedure], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Procedure]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Procedure"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Procedure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Procedure)
	if !ok {
		return capabilities.UpdateResult[r4b.Procedure]{}, capabilities.UnexpectedResourceError{ExpectedType: "Procedure", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Procedure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateProvenance(ctx context.Context, resource r4b.Provenance) (capabilities.UpdateResult[r4b.Provenance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Provenance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Provenance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Provenance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Provenance)
	if !ok {
		return capabilities.UpdateResult[r4b.Provenance]{}, capabilities.UnexpectedResourceError{ExpectedType: "Provenance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Provenance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaire(ctx context.Context, resource r4b.Questionnaire) (capabilities.UpdateResult[r4b.Questionnaire], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Questionnaire]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Questionnaire"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Questionnaire]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Questionnaire)
	if !ok {
		return capabilities.UpdateResult[r4b.Questionnaire]{}, capabilities.UnexpectedResourceError{ExpectedType: "Questionnaire", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Questionnaire]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateQuestionnaireResponse(ctx context.Context, resource r4b.QuestionnaireResponse) (capabilities.UpdateResult[r4b.QuestionnaireResponse], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.QuestionnaireResponse]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "QuestionnaireResponse"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.QuestionnaireResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.QuestionnaireResponse)
	if !ok {
		return capabilities.UpdateResult[r4b.QuestionnaireResponse]{}, capabilities.UnexpectedResourceError{ExpectedType: "QuestionnaireResponse", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.QuestionnaireResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRegulatedAuthorization(ctx context.Context, resource r4b.RegulatedAuthorization) (capabilities.UpdateResult[r4b.RegulatedAuthorization], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.RegulatedAuthorization]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RegulatedAuthorization"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.RegulatedAuthorization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RegulatedAuthorization)
	if !ok {
		return capabilities.UpdateResult[r4b.RegulatedAuthorization]{}, capabilities.UnexpectedResourceError{ExpectedType: "RegulatedAuthorization", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.RegulatedAuthorization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRelatedPerson(ctx context.Context, resource r4b.RelatedPerson) (capabilities.UpdateResult[r4b.RelatedPerson], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.RelatedPerson]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RelatedPerson"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.RelatedPerson]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RelatedPerson)
	if !ok {
		return capabilities.UpdateResult[r4b.RelatedPerson]{}, capabilities.UnexpectedResourceError{ExpectedType: "RelatedPerson", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.RelatedPerson]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRequestGroup(ctx context.Context, resource r4b.RequestGroup) (capabilities.UpdateResult[r4b.RequestGroup], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.RequestGroup]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RequestGroup"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.RequestGroup]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RequestGroup)
	if !ok {
		return capabilities.UpdateResult[r4b.RequestGroup]{}, capabilities.UnexpectedResourceError{ExpectedType: "RequestGroup", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.RequestGroup]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchDefinition(ctx context.Context, resource r4b.ResearchDefinition) (capabilities.UpdateResult[r4b.ResearchDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ResearchDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ResearchDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchElementDefinition(ctx context.Context, resource r4b.ResearchElementDefinition) (capabilities.UpdateResult[r4b.ResearchElementDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchElementDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchElementDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ResearchElementDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchElementDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchElementDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchElementDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ResearchElementDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchStudy(ctx context.Context, resource r4b.ResearchStudy) (capabilities.UpdateResult[r4b.ResearchStudy], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchStudy]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchStudy"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ResearchStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchStudy)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchStudy]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchStudy", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ResearchStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateResearchSubject(ctx context.Context, resource r4b.ResearchSubject) (capabilities.UpdateResult[r4b.ResearchSubject], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchSubject]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ResearchSubject"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ResearchSubject]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchSubject)
	if !ok {
		return capabilities.UpdateResult[r4b.ResearchSubject]{}, capabilities.UnexpectedResourceError{ExpectedType: "ResearchSubject", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ResearchSubject]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateRiskAssessment(ctx context.Context, resource r4b.RiskAssessment) (capabilities.UpdateResult[r4b.RiskAssessment], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.RiskAssessment]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "RiskAssessment"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.RiskAssessment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RiskAssessment)
	if !ok {
		return capabilities.UpdateResult[r4b.RiskAssessment]{}, capabilities.UnexpectedResourceError{ExpectedType: "RiskAssessment", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.RiskAssessment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSchedule(ctx context.Context, resource r4b.Schedule) (capabilities.UpdateResult[r4b.Schedule], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Schedule]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Schedule"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Schedule]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Schedule)
	if !ok {
		return capabilities.UpdateResult[r4b.Schedule]{}, capabilities.UnexpectedResourceError{ExpectedType: "Schedule", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Schedule]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSearchParameter(ctx context.Context, resource r4b.SearchParameter) (capabilities.UpdateResult[r4b.SearchParameter], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.SearchParameter]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SearchParameter"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.SearchParameter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SearchParameter)
	if !ok {
		return capabilities.UpdateResult[r4b.SearchParameter]{}, capabilities.UnexpectedResourceError{ExpectedType: "SearchParameter", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.SearchParameter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateServiceRequest(ctx context.Context, resource r4b.ServiceRequest) (capabilities.UpdateResult[r4b.ServiceRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ServiceRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ServiceRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ServiceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ServiceRequest)
	if !ok {
		return capabilities.UpdateResult[r4b.ServiceRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "ServiceRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ServiceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSlot(ctx context.Context, resource r4b.Slot) (capabilities.UpdateResult[r4b.Slot], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Slot]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Slot"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Slot]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Slot)
	if !ok {
		return capabilities.UpdateResult[r4b.Slot]{}, capabilities.UnexpectedResourceError{ExpectedType: "Slot", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Slot]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimen(ctx context.Context, resource r4b.Specimen) (capabilities.UpdateResult[r4b.Specimen], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Specimen]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Specimen"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Specimen]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Specimen)
	if !ok {
		return capabilities.UpdateResult[r4b.Specimen]{}, capabilities.UnexpectedResourceError{ExpectedType: "Specimen", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Specimen]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSpecimenDefinition(ctx context.Context, resource r4b.SpecimenDefinition) (capabilities.UpdateResult[r4b.SpecimenDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.SpecimenDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SpecimenDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.SpecimenDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SpecimenDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.SpecimenDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "SpecimenDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.SpecimenDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureDefinition(ctx context.Context, resource r4b.StructureDefinition) (capabilities.UpdateResult[r4b.StructureDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.StructureDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "StructureDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.StructureDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.StructureDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.StructureDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateStructureMap(ctx context.Context, resource r4b.StructureMap) (capabilities.UpdateResult[r4b.StructureMap], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.StructureMap]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "StructureMap"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.StructureMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureMap)
	if !ok {
		return capabilities.UpdateResult[r4b.StructureMap]{}, capabilities.UnexpectedResourceError{ExpectedType: "StructureMap", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.StructureMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscription(ctx context.Context, resource r4b.Subscription) (capabilities.UpdateResult[r4b.Subscription], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Subscription]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Subscription"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Subscription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Subscription)
	if !ok {
		return capabilities.UpdateResult[r4b.Subscription]{}, capabilities.UnexpectedResourceError{ExpectedType: "Subscription", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Subscription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscriptionStatus(ctx context.Context, resource r4b.SubscriptionStatus) (capabilities.UpdateResult[r4b.SubscriptionStatus], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.SubscriptionStatus]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubscriptionStatus"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.SubscriptionStatus]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionStatus)
	if !ok {
		return capabilities.UpdateResult[r4b.SubscriptionStatus]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionStatus", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.SubscriptionStatus]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubscriptionTopic(ctx context.Context, resource r4b.SubscriptionTopic) (capabilities.UpdateResult[r4b.SubscriptionTopic], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.SubscriptionTopic]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubscriptionTopic"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.SubscriptionTopic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionTopic)
	if !ok {
		return capabilities.UpdateResult[r4b.SubscriptionTopic]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubscriptionTopic", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.SubscriptionTopic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstance(ctx context.Context, resource r4b.Substance) (capabilities.UpdateResult[r4b.Substance], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Substance]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Substance"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Substance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Substance)
	if !ok {
		return capabilities.UpdateResult[r4b.Substance]{}, capabilities.UnexpectedResourceError{ExpectedType: "Substance", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Substance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSubstanceDefinition(ctx context.Context, resource r4b.SubstanceDefinition) (capabilities.UpdateResult[r4b.SubstanceDefinition], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.SubstanceDefinition]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SubstanceDefinition"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.SubstanceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubstanceDefinition)
	if !ok {
		return capabilities.UpdateResult[r4b.SubstanceDefinition]{}, capabilities.UnexpectedResourceError{ExpectedType: "SubstanceDefinition", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.SubstanceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyDelivery(ctx context.Context, resource r4b.SupplyDelivery) (capabilities.UpdateResult[r4b.SupplyDelivery], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.SupplyDelivery]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SupplyDelivery"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.SupplyDelivery]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyDelivery)
	if !ok {
		return capabilities.UpdateResult[r4b.SupplyDelivery]{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyDelivery", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.SupplyDelivery]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateSupplyRequest(ctx context.Context, resource r4b.SupplyRequest) (capabilities.UpdateResult[r4b.SupplyRequest], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.SupplyRequest]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "SupplyRequest"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.SupplyRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyRequest)
	if !ok {
		return capabilities.UpdateResult[r4b.SupplyRequest]{}, capabilities.UnexpectedResourceError{ExpectedType: "SupplyRequest", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.SupplyRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTask(ctx context.Context, resource r4b.Task) (capabilities.UpdateResult[r4b.Task], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.Task]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "Task"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.Task]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Task)
	if !ok {
		return capabilities.UpdateResult[r4b.Task]{}, capabilities.UnexpectedResourceError{ExpectedType: "Task", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.Task]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTerminologyCapabilities(ctx context.Context, resource r4b.TerminologyCapabilities) (capabilities.UpdateResult[r4b.TerminologyCapabilities], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.TerminologyCapabilities]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TerminologyCapabilities"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.TerminologyCapabilities]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TerminologyCapabilities)
	if !ok {
		return capabilities.UpdateResult[r4b.TerminologyCapabilities]{}, capabilities.UnexpectedResourceError{ExpectedType: "TerminologyCapabilities", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.TerminologyCapabilities]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestReport(ctx context.Context, resource r4b.TestReport) (capabilities.UpdateResult[r4b.TestReport], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.TestReport]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TestReport"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.TestReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestReport)
	if !ok {
		return capabilities.UpdateResult[r4b.TestReport]{}, capabilities.UnexpectedResourceError{ExpectedType: "TestReport", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.TestReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateTestScript(ctx context.Context, resource r4b.TestScript) (capabilities.UpdateResult[r4b.TestScript], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.TestScript]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "TestScript"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.TestScript]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestScript)
	if !ok {
		return capabilities.UpdateResult[r4b.TestScript]{}, capabilities.UnexpectedResourceError{ExpectedType: "TestScript", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.TestScript]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateValueSet(ctx context.Context, resource r4b.ValueSet) (capabilities.UpdateResult[r4b.ValueSet], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.ValueSet]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "ValueSet"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.ValueSet]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ValueSet)
	if !ok {
		return capabilities.UpdateResult[r4b.ValueSet]{}, capabilities.UnexpectedResourceError{ExpectedType: "ValueSet", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.ValueSet]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVerificationResult(ctx context.Context, resource r4b.VerificationResult) (capabilities.UpdateResult[r4b.VerificationResult], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.VerificationResult]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "VerificationResult"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.VerificationResult]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VerificationResult)
	if !ok {
		return capabilities.UpdateResult[r4b.VerificationResult]{}, capabilities.UnexpectedResourceError{ExpectedType: "VerificationResult", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.VerificationResult]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateVisionPrescription(ctx context.Context, resource r4b.VisionPrescription) (capabilities.UpdateResult[r4b.VisionPrescription], capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return capabilities.UpdateResult[r4b.VisionPrescription]{}, capabilities.NotImplementedError{Interaction: "update", ResourceType: "VisionPrescription"}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return capabilities.UpdateResult[r4b.VisionPrescription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VisionPrescription)
	if !ok {
		return capabilities.UpdateResult[r4b.VisionPrescription]{}, capabilities.UnexpectedResourceError{ExpectedType: "VisionPrescription", GotType: v.ResourceType()}
	}
	return capabilities.UpdateResult[r4b.VisionPrescription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) SearchCapabilitiesAccount(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Account"], err
}
func (w Concrete) SearchAccount(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Account"}
	}
	v, err := g.Search(ctx, "Account", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesActivityDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ActivityDefinition"], err
}
func (w Concrete) SearchActivityDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ActivityDefinition"}
	}
	v, err := g.Search(ctx, "ActivityDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdministrableProductDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AdministrableProductDefinition"], err
}
func (w Concrete) SearchAdministrableProductDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AdministrableProductDefinition"}
	}
	v, err := g.Search(ctx, "AdministrableProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdverseEvent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AdverseEvent"], err
}
func (w Concrete) SearchAdverseEvent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AdverseEvent"}
	}
	v, err := g.Search(ctx, "AdverseEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAllergyIntolerance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AllergyIntolerance"], err
}
func (w Concrete) SearchAllergyIntolerance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AllergyIntolerance"}
	}
	v, err := g.Search(ctx, "AllergyIntolerance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointment(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Appointment"], err
}
func (w Concrete) SearchAppointment(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Appointment"}
	}
	v, err := g.Search(ctx, "Appointment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointmentResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AppointmentResponse"], err
}
func (w Concrete) SearchAppointmentResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AppointmentResponse"}
	}
	v, err := g.Search(ctx, "AppointmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAuditEvent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["AuditEvent"], err
}
func (w Concrete) SearchAuditEvent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "AuditEvent"}
	}
	v, err := g.Search(ctx, "AuditEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBasic(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Basic"], err
}
func (w Concrete) SearchBasic(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Basic"}
	}
	v, err := g.Search(ctx, "Basic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBinary(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Binary"], err
}
func (w Concrete) SearchBinary(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Binary"}
	}
	v, err := g.Search(ctx, "Binary", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBiologicallyDerivedProduct(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BiologicallyDerivedProduct"], err
}
func (w Concrete) SearchBiologicallyDerivedProduct(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "BiologicallyDerivedProduct"}
	}
	v, err := g.Search(ctx, "BiologicallyDerivedProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBodyStructure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["BodyStructure"], err
}
func (w Concrete) SearchBodyStructure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "BodyStructure"}
	}
	v, err := g.Search(ctx, "BodyStructure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBundle(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Bundle"], err
}
func (w Concrete) SearchBundle(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Bundle"}
	}
	v, err := g.Search(ctx, "Bundle", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCapabilityStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CapabilityStatement"], err
}
func (w Concrete) SearchCapabilityStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CapabilityStatement"}
	}
	v, err := g.Search(ctx, "CapabilityStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCarePlan(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CarePlan"], err
}
func (w Concrete) SearchCarePlan(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CarePlan"}
	}
	v, err := g.Search(ctx, "CarePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCareTeam(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CareTeam"], err
}
func (w Concrete) SearchCareTeam(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CareTeam"}
	}
	v, err := g.Search(ctx, "CareTeam", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCatalogEntry(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CatalogEntry"], err
}
func (w Concrete) SearchCatalogEntry(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CatalogEntry"}
	}
	v, err := g.Search(ctx, "CatalogEntry", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItem"], err
}
func (w Concrete) SearchChargeItem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ChargeItem"}
	}
	v, err := g.Search(ctx, "ChargeItem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItemDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ChargeItemDefinition"], err
}
func (w Concrete) SearchChargeItemDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ChargeItemDefinition"}
	}
	v, err := g.Search(ctx, "ChargeItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCitation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Citation"], err
}
func (w Concrete) SearchCitation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Citation"}
	}
	v, err := g.Search(ctx, "Citation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaim(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Claim"], err
}
func (w Concrete) SearchClaim(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Claim"}
	}
	v, err := g.Search(ctx, "Claim", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaimResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClaimResponse"], err
}
func (w Concrete) SearchClaimResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClaimResponse"}
	}
	v, err := g.Search(ctx, "ClaimResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalImpression(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClinicalImpression"], err
}
func (w Concrete) SearchClinicalImpression(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClinicalImpression"}
	}
	v, err := g.Search(ctx, "ClinicalImpression", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalUseDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ClinicalUseDefinition"], err
}
func (w Concrete) SearchClinicalUseDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ClinicalUseDefinition"}
	}
	v, err := g.Search(ctx, "ClinicalUseDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCodeSystem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CodeSystem"], err
}
func (w Concrete) SearchCodeSystem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CodeSystem"}
	}
	v, err := g.Search(ctx, "CodeSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Communication"], err
}
func (w Concrete) SearchCommunication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Communication"}
	}
	v, err := g.Search(ctx, "Communication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunicationRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CommunicationRequest"], err
}
func (w Concrete) SearchCommunicationRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CommunicationRequest"}
	}
	v, err := g.Search(ctx, "CommunicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCompartmentDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CompartmentDefinition"], err
}
func (w Concrete) SearchCompartmentDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CompartmentDefinition"}
	}
	v, err := g.Search(ctx, "CompartmentDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesComposition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Composition"], err
}
func (w Concrete) SearchComposition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Composition"}
	}
	v, err := g.Search(ctx, "Composition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConceptMap(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ConceptMap"], err
}
func (w Concrete) SearchConceptMap(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ConceptMap"}
	}
	v, err := g.Search(ctx, "ConceptMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCondition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Condition"], err
}
func (w Concrete) SearchCondition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Condition"}
	}
	v, err := g.Search(ctx, "Condition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConsent(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Consent"], err
}
func (w Concrete) SearchConsent(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Consent"}
	}
	v, err := g.Search(ctx, "Consent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesContract(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Contract"], err
}
func (w Concrete) SearchContract(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Contract"}
	}
	v, err := g.Search(ctx, "Contract", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverage(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Coverage"], err
}
func (w Concrete) SearchCoverage(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Coverage"}
	}
	v, err := g.Search(ctx, "Coverage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityRequest"], err
}
func (w Concrete) SearchCoverageEligibilityRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CoverageEligibilityRequest"}
	}
	v, err := g.Search(ctx, "CoverageEligibilityRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["CoverageEligibilityResponse"], err
}
func (w Concrete) SearchCoverageEligibilityResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "CoverageEligibilityResponse"}
	}
	v, err := g.Search(ctx, "CoverageEligibilityResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDetectedIssue(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DetectedIssue"], err
}
func (w Concrete) SearchDetectedIssue(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DetectedIssue"}
	}
	v, err := g.Search(ctx, "DetectedIssue", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDevice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Device"], err
}
func (w Concrete) SearchDevice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Device"}
	}
	v, err := g.Search(ctx, "Device", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceDefinition"], err
}
func (w Concrete) SearchDeviceDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceDefinition"}
	}
	v, err := g.Search(ctx, "DeviceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceMetric(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceMetric"], err
}
func (w Concrete) SearchDeviceMetric(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceMetric"}
	}
	v, err := g.Search(ctx, "DeviceMetric", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceRequest"], err
}
func (w Concrete) SearchDeviceRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceRequest"}
	}
	v, err := g.Search(ctx, "DeviceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceUseStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DeviceUseStatement"], err
}
func (w Concrete) SearchDeviceUseStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DeviceUseStatement"}
	}
	v, err := g.Search(ctx, "DeviceUseStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDiagnosticReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DiagnosticReport"], err
}
func (w Concrete) SearchDiagnosticReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DiagnosticReport"}
	}
	v, err := g.Search(ctx, "DiagnosticReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentManifest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DocumentManifest"], err
}
func (w Concrete) SearchDocumentManifest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DocumentManifest"}
	}
	v, err := g.Search(ctx, "DocumentManifest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentReference(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["DocumentReference"], err
}
func (w Concrete) SearchDocumentReference(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "DocumentReference"}
	}
	v, err := g.Search(ctx, "DocumentReference", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEncounter(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Encounter"], err
}
func (w Concrete) SearchEncounter(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Encounter"}
	}
	v, err := g.Search(ctx, "Encounter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEndpoint(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Endpoint"], err
}
func (w Concrete) SearchEndpoint(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Endpoint"}
	}
	v, err := g.Search(ctx, "Endpoint", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentRequest"], err
}
func (w Concrete) SearchEnrollmentRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EnrollmentRequest"}
	}
	v, err := g.Search(ctx, "EnrollmentRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EnrollmentResponse"], err
}
func (w Concrete) SearchEnrollmentResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EnrollmentResponse"}
	}
	v, err := g.Search(ctx, "EnrollmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEpisodeOfCare(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EpisodeOfCare"], err
}
func (w Concrete) SearchEpisodeOfCare(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EpisodeOfCare"}
	}
	v, err := g.Search(ctx, "EpisodeOfCare", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEventDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EventDefinition"], err
}
func (w Concrete) SearchEventDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EventDefinition"}
	}
	v, err := g.Search(ctx, "EventDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidence(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Evidence"], err
}
func (w Concrete) SearchEvidence(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Evidence"}
	}
	v, err := g.Search(ctx, "Evidence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EvidenceReport"], err
}
func (w Concrete) SearchEvidenceReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EvidenceReport"}
	}
	v, err := g.Search(ctx, "EvidenceReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceVariable(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["EvidenceVariable"], err
}
func (w Concrete) SearchEvidenceVariable(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "EvidenceVariable"}
	}
	v, err := g.Search(ctx, "EvidenceVariable", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExampleScenario(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExampleScenario"], err
}
func (w Concrete) SearchExampleScenario(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ExampleScenario"}
	}
	v, err := g.Search(ctx, "ExampleScenario", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExplanationOfBenefit(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ExplanationOfBenefit"], err
}
func (w Concrete) SearchExplanationOfBenefit(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ExplanationOfBenefit"}
	}
	v, err := g.Search(ctx, "ExplanationOfBenefit", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFamilyMemberHistory(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["FamilyMemberHistory"], err
}
func (w Concrete) SearchFamilyMemberHistory(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "FamilyMemberHistory"}
	}
	v, err := g.Search(ctx, "FamilyMemberHistory", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFlag(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Flag"], err
}
func (w Concrete) SearchFlag(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Flag"}
	}
	v, err := g.Search(ctx, "Flag", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGoal(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Goal"], err
}
func (w Concrete) SearchGoal(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Goal"}
	}
	v, err := g.Search(ctx, "Goal", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGraphDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GraphDefinition"], err
}
func (w Concrete) SearchGraphDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "GraphDefinition"}
	}
	v, err := g.Search(ctx, "GraphDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGroup(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Group"], err
}
func (w Concrete) SearchGroup(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Group"}
	}
	v, err := g.Search(ctx, "Group", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGuidanceResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["GuidanceResponse"], err
}
func (w Concrete) SearchGuidanceResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "GuidanceResponse"}
	}
	v, err := g.Search(ctx, "GuidanceResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesHealthcareService(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["HealthcareService"], err
}
func (w Concrete) SearchHealthcareService(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "HealthcareService"}
	}
	v, err := g.Search(ctx, "HealthcareService", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImagingStudy(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImagingStudy"], err
}
func (w Concrete) SearchImagingStudy(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImagingStudy"}
	}
	v, err := g.Search(ctx, "ImagingStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Immunization"], err
}
func (w Concrete) SearchImmunization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Immunization"}
	}
	v, err := g.Search(ctx, "Immunization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationEvaluation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationEvaluation"], err
}
func (w Concrete) SearchImmunizationEvaluation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImmunizationEvaluation"}
	}
	v, err := g.Search(ctx, "ImmunizationEvaluation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationRecommendation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImmunizationRecommendation"], err
}
func (w Concrete) SearchImmunizationRecommendation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImmunizationRecommendation"}
	}
	v, err := g.Search(ctx, "ImmunizationRecommendation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImplementationGuide(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ImplementationGuide"], err
}
func (w Concrete) SearchImplementationGuide(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ImplementationGuide"}
	}
	v, err := g.Search(ctx, "ImplementationGuide", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesIngredient(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Ingredient"], err
}
func (w Concrete) SearchIngredient(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Ingredient"}
	}
	v, err := g.Search(ctx, "Ingredient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInsurancePlan(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["InsurancePlan"], err
}
func (w Concrete) SearchInsurancePlan(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "InsurancePlan"}
	}
	v, err := g.Search(ctx, "InsurancePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInvoice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Invoice"], err
}
func (w Concrete) SearchInvoice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Invoice"}
	}
	v, err := g.Search(ctx, "Invoice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLibrary(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Library"], err
}
func (w Concrete) SearchLibrary(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Library"}
	}
	v, err := g.Search(ctx, "Library", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLinkage(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Linkage"], err
}
func (w Concrete) SearchLinkage(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Linkage"}
	}
	v, err := g.Search(ctx, "Linkage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesList(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["List"], err
}
func (w Concrete) SearchList(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "List"}
	}
	v, err := g.Search(ctx, "List", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLocation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Location"], err
}
func (w Concrete) SearchLocation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Location"}
	}
	v, err := g.Search(ctx, "Location", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesManufacturedItemDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ManufacturedItemDefinition"], err
}
func (w Concrete) SearchManufacturedItemDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ManufacturedItemDefinition"}
	}
	v, err := g.Search(ctx, "ManufacturedItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Measure"], err
}
func (w Concrete) SearchMeasure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Measure"}
	}
	v, err := g.Search(ctx, "Measure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasureReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MeasureReport"], err
}
func (w Concrete) SearchMeasureReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MeasureReport"}
	}
	v, err := g.Search(ctx, "MeasureReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedia(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Media"], err
}
func (w Concrete) SearchMedia(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Media"}
	}
	v, err := g.Search(ctx, "Media", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedication(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Medication"], err
}
func (w Concrete) SearchMedication(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Medication"}
	}
	v, err := g.Search(ctx, "Medication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationAdministration(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationAdministration"], err
}
func (w Concrete) SearchMedicationAdministration(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationAdministration"}
	}
	v, err := g.Search(ctx, "MedicationAdministration", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationDispense(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationDispense"], err
}
func (w Concrete) SearchMedicationDispense(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationDispense"}
	}
	v, err := g.Search(ctx, "MedicationDispense", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationKnowledge(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationKnowledge"], err
}
func (w Concrete) SearchMedicationKnowledge(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationKnowledge"}
	}
	v, err := g.Search(ctx, "MedicationKnowledge", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationRequest"], err
}
func (w Concrete) SearchMedicationRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationRequest"}
	}
	v, err := g.Search(ctx, "MedicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationStatement(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicationStatement"], err
}
func (w Concrete) SearchMedicationStatement(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicationStatement"}
	}
	v, err := g.Search(ctx, "MedicationStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MedicinalProductDefinition"], err
}
func (w Concrete) SearchMedicinalProductDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MedicinalProductDefinition"}
	}
	v, err := g.Search(ctx, "MedicinalProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageDefinition"], err
}
func (w Concrete) SearchMessageDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MessageDefinition"}
	}
	v, err := g.Search(ctx, "MessageDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageHeader(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MessageHeader"], err
}
func (w Concrete) SearchMessageHeader(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MessageHeader"}
	}
	v, err := g.Search(ctx, "MessageHeader", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMolecularSequence(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["MolecularSequence"], err
}
func (w Concrete) SearchMolecularSequence(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "MolecularSequence"}
	}
	v, err := g.Search(ctx, "MolecularSequence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNamingSystem(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NamingSystem"], err
}
func (w Concrete) SearchNamingSystem(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NamingSystem"}
	}
	v, err := g.Search(ctx, "NamingSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionOrder(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NutritionOrder"], err
}
func (w Concrete) SearchNutritionOrder(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NutritionOrder"}
	}
	v, err := g.Search(ctx, "NutritionOrder", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionProduct(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["NutritionProduct"], err
}
func (w Concrete) SearchNutritionProduct(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "NutritionProduct"}
	}
	v, err := g.Search(ctx, "NutritionProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Observation"], err
}
func (w Concrete) SearchObservation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Observation"}
	}
	v, err := g.Search(ctx, "Observation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservationDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ObservationDefinition"], err
}
func (w Concrete) SearchObservationDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ObservationDefinition"}
	}
	v, err := g.Search(ctx, "ObservationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationDefinition"], err
}
func (w Concrete) SearchOperationDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OperationDefinition"}
	}
	v, err := g.Search(ctx, "OperationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationOutcome(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OperationOutcome"], err
}
func (w Concrete) SearchOperationOutcome(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OperationOutcome"}
	}
	v, err := g.Search(ctx, "OperationOutcome", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Organization"], err
}
func (w Concrete) SearchOrganization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Organization"}
	}
	v, err := g.Search(ctx, "Organization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganizationAffiliation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["OrganizationAffiliation"], err
}
func (w Concrete) SearchOrganizationAffiliation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "OrganizationAffiliation"}
	}
	v, err := g.Search(ctx, "OrganizationAffiliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPackagedProductDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PackagedProductDefinition"], err
}
func (w Concrete) SearchPackagedProductDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PackagedProductDefinition"}
	}
	v, err := g.Search(ctx, "PackagedProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesParameters(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Parameters"], err
}
func (w Concrete) SearchParameters(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Parameters"}
	}
	v, err := g.Search(ctx, "Parameters", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPatient(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Patient"], err
}
func (w Concrete) SearchPatient(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Patient"}
	}
	v, err := g.Search(ctx, "Patient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentNotice(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentNotice"], err
}
func (w Concrete) SearchPaymentNotice(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PaymentNotice"}
	}
	v, err := g.Search(ctx, "PaymentNotice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentReconciliation(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PaymentReconciliation"], err
}
func (w Concrete) SearchPaymentReconciliation(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PaymentReconciliation"}
	}
	v, err := g.Search(ctx, "PaymentReconciliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPerson(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Person"], err
}
func (w Concrete) SearchPerson(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Person"}
	}
	v, err := g.Search(ctx, "Person", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPlanDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PlanDefinition"], err
}
func (w Concrete) SearchPlanDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PlanDefinition"}
	}
	v, err := g.Search(ctx, "PlanDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitioner(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Practitioner"], err
}
func (w Concrete) SearchPractitioner(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Practitioner"}
	}
	v, err := g.Search(ctx, "Practitioner", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitionerRole(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["PractitionerRole"], err
}
func (w Concrete) SearchPractitionerRole(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "PractitionerRole"}
	}
	v, err := g.Search(ctx, "PractitionerRole", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProcedure(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Procedure"], err
}
func (w Concrete) SearchProcedure(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Procedure"}
	}
	v, err := g.Search(ctx, "Procedure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProvenance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Provenance"], err
}
func (w Concrete) SearchProvenance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Provenance"}
	}
	v, err := g.Search(ctx, "Provenance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaire(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Questionnaire"], err
}
func (w Concrete) SearchQuestionnaire(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Questionnaire"}
	}
	v, err := g.Search(ctx, "Questionnaire", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaireResponse(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["QuestionnaireResponse"], err
}
func (w Concrete) SearchQuestionnaireResponse(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "QuestionnaireResponse"}
	}
	v, err := g.Search(ctx, "QuestionnaireResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRegulatedAuthorization(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RegulatedAuthorization"], err
}
func (w Concrete) SearchRegulatedAuthorization(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RegulatedAuthorization"}
	}
	v, err := g.Search(ctx, "RegulatedAuthorization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRelatedPerson(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RelatedPerson"], err
}
func (w Concrete) SearchRelatedPerson(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RelatedPerson"}
	}
	v, err := g.Search(ctx, "RelatedPerson", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRequestGroup(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RequestGroup"], err
}
func (w Concrete) SearchRequestGroup(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RequestGroup"}
	}
	v, err := g.Search(ctx, "RequestGroup", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchDefinition"], err
}
func (w Concrete) SearchResearchDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchDefinition"}
	}
	v, err := g.Search(ctx, "ResearchDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchElementDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchElementDefinition"], err
}
func (w Concrete) SearchResearchElementDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchElementDefinition"}
	}
	v, err := g.Search(ctx, "ResearchElementDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchStudy(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchStudy"], err
}
func (w Concrete) SearchResearchStudy(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchStudy"}
	}
	v, err := g.Search(ctx, "ResearchStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchSubject(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ResearchSubject"], err
}
func (w Concrete) SearchResearchSubject(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ResearchSubject"}
	}
	v, err := g.Search(ctx, "ResearchSubject", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRiskAssessment(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["RiskAssessment"], err
}
func (w Concrete) SearchRiskAssessment(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "RiskAssessment"}
	}
	v, err := g.Search(ctx, "RiskAssessment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSchedule(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Schedule"], err
}
func (w Concrete) SearchSchedule(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Schedule"}
	}
	v, err := g.Search(ctx, "Schedule", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSearchParameter(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SearchParameter"], err
}
func (w Concrete) SearchSearchParameter(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SearchParameter"}
	}
	v, err := g.Search(ctx, "SearchParameter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesServiceRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ServiceRequest"], err
}
func (w Concrete) SearchServiceRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ServiceRequest"}
	}
	v, err := g.Search(ctx, "ServiceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSlot(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Slot"], err
}
func (w Concrete) SearchSlot(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Slot"}
	}
	v, err := g.Search(ctx, "Slot", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimen(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Specimen"], err
}
func (w Concrete) SearchSpecimen(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Specimen"}
	}
	v, err := g.Search(ctx, "Specimen", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimenDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SpecimenDefinition"], err
}
func (w Concrete) SearchSpecimenDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SpecimenDefinition"}
	}
	v, err := g.Search(ctx, "SpecimenDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureDefinition"], err
}
func (w Concrete) SearchStructureDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "StructureDefinition"}
	}
	v, err := g.Search(ctx, "StructureDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureMap(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["StructureMap"], err
}
func (w Concrete) SearchStructureMap(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "StructureMap"}
	}
	v, err := g.Search(ctx, "StructureMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscription(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Subscription"], err
}
func (w Concrete) SearchSubscription(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Subscription"}
	}
	v, err := g.Search(ctx, "Subscription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscriptionStatus(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubscriptionStatus"], err
}
func (w Concrete) SearchSubscriptionStatus(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubscriptionStatus"}
	}
	v, err := g.Search(ctx, "SubscriptionStatus", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscriptionTopic(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubscriptionTopic"], err
}
func (w Concrete) SearchSubscriptionTopic(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubscriptionTopic"}
	}
	v, err := g.Search(ctx, "SubscriptionTopic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstance(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Substance"], err
}
func (w Concrete) SearchSubstance(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Substance"}
	}
	v, err := g.Search(ctx, "Substance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceDefinition(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SubstanceDefinition"], err
}
func (w Concrete) SearchSubstanceDefinition(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SubstanceDefinition"}
	}
	v, err := g.Search(ctx, "SubstanceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyDelivery(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyDelivery"], err
}
func (w Concrete) SearchSupplyDelivery(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SupplyDelivery"}
	}
	v, err := g.Search(ctx, "SupplyDelivery", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyRequest(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["SupplyRequest"], err
}
func (w Concrete) SearchSupplyRequest(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "SupplyRequest"}
	}
	v, err := g.Search(ctx, "SupplyRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTask(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["Task"], err
}
func (w Concrete) SearchTask(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "Task"}
	}
	v, err := g.Search(ctx, "Task", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTerminologyCapabilities(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TerminologyCapabilities"], err
}
func (w Concrete) SearchTerminologyCapabilities(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TerminologyCapabilities"}
	}
	v, err := g.Search(ctx, "TerminologyCapabilities", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestReport(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestReport"], err
}
func (w Concrete) SearchTestReport(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TestReport"}
	}
	v, err := g.Search(ctx, "TestReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestScript(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["TestScript"], err
}
func (w Concrete) SearchTestScript(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "TestScript"}
	}
	v, err := g.Search(ctx, "TestScript", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesValueSet(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["ValueSet"], err
}
func (w Concrete) SearchValueSet(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "ValueSet"}
	}
	v, err := g.Search(ctx, "ValueSet", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVerificationResult(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VerificationResult"], err
}
func (w Concrete) SearchVerificationResult(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "VerificationResult"}
	}
	v, err := g.Search(ctx, "VerificationResult", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVisionPrescription(ctx context.Context) (search.Capabilities, capabilities.FHIRError) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.SearchCapabilities["VisionPrescription"], err
}
func (w Concrete) SearchVisionPrescription(ctx context.Context, options search.Options) (search.Result, capabilities.FHIRError) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, capabilities.NotImplementedError{Interaction: "search", ResourceType: "VisionPrescription"}
	}
	v, err := g.Search(ctx, "VisionPrescription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
