// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4B

import (
	"context"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	update "github.com/DAMEDIC/fhir-toolbox-go/capabilities/update"
	r4b "github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4b"
	utils "github.com/DAMEDIC/fhir-toolbox-go/utils"
)

type Concrete struct {
	Generic capabilities.GenericCapabilities
}

func (w Concrete) CreateAccount(ctx context.Context, resource r4b.Account) (r4b.Account, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Account{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Account")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Account{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Account)
	if !ok {
		return r4b.Account{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Account" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateActivityDefinition(ctx context.Context, resource r4b.ActivityDefinition) (r4b.ActivityDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ActivityDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ActivityDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ActivityDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ActivityDefinition)
	if !ok {
		return r4b.ActivityDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ActivityDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAdministrableProductDefinition(ctx context.Context, resource r4b.AdministrableProductDefinition) (r4b.AdministrableProductDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AdministrableProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for AdministrableProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AdministrableProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdministrableProductDefinition)
	if !ok {
		return r4b.AdministrableProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AdministrableProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAdverseEvent(ctx context.Context, resource r4b.AdverseEvent) (r4b.AdverseEvent, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AdverseEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for AdverseEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AdverseEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdverseEvent)
	if !ok {
		return r4b.AdverseEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AdverseEvent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAllergyIntolerance(ctx context.Context, resource r4b.AllergyIntolerance) (r4b.AllergyIntolerance, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AllergyIntolerance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for AllergyIntolerance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AllergyIntolerance)
	if !ok {
		return r4b.AllergyIntolerance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AllergyIntolerance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAppointment(ctx context.Context, resource r4b.Appointment) (r4b.Appointment, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Appointment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Appointment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Appointment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Appointment)
	if !ok {
		return r4b.Appointment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Appointment" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAppointmentResponse(ctx context.Context, resource r4b.AppointmentResponse) (r4b.AppointmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AppointmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for AppointmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AppointmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AppointmentResponse)
	if !ok {
		return r4b.AppointmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AppointmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateAuditEvent(ctx context.Context, resource r4b.AuditEvent) (r4b.AuditEvent, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.AuditEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for AuditEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.AuditEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AuditEvent)
	if !ok {
		return r4b.AuditEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AuditEvent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBasic(ctx context.Context, resource r4b.Basic) (r4b.Basic, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Basic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Basic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Basic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Basic)
	if !ok {
		return r4b.Basic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Basic" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBinary(ctx context.Context, resource r4b.Binary) (r4b.Binary, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Binary{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Binary")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Binary{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Binary)
	if !ok {
		return r4b.Binary{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Binary" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBiologicallyDerivedProduct(ctx context.Context, resource r4b.BiologicallyDerivedProduct) (r4b.BiologicallyDerivedProduct, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for BiologicallyDerivedProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "BiologicallyDerivedProduct" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBodyStructure(ctx context.Context, resource r4b.BodyStructure) (r4b.BodyStructure, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.BodyStructure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for BodyStructure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.BodyStructure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BodyStructure)
	if !ok {
		return r4b.BodyStructure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "BodyStructure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateBundle(ctx context.Context, resource r4b.Bundle) (r4b.Bundle, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Bundle{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Bundle")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Bundle{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Bundle)
	if !ok {
		return r4b.Bundle{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Bundle" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCapabilityStatement(ctx context.Context, resource r4b.CapabilityStatement) (r4b.CapabilityStatement, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CapabilityStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CapabilityStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CapabilityStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CapabilityStatement)
	if !ok {
		return r4b.CapabilityStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CapabilityStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCarePlan(ctx context.Context, resource r4b.CarePlan) (r4b.CarePlan, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CarePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CarePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CarePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CarePlan)
	if !ok {
		return r4b.CarePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CarePlan" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCareTeam(ctx context.Context, resource r4b.CareTeam) (r4b.CareTeam, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CareTeam{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CareTeam")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CareTeam{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CareTeam)
	if !ok {
		return r4b.CareTeam{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CareTeam" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCatalogEntry(ctx context.Context, resource r4b.CatalogEntry) (r4b.CatalogEntry, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CatalogEntry{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CatalogEntry")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CatalogEntry{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CatalogEntry)
	if !ok {
		return r4b.CatalogEntry{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CatalogEntry" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateChargeItem(ctx context.Context, resource r4b.ChargeItem) (r4b.ChargeItem, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ChargeItem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ChargeItem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ChargeItem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItem)
	if !ok {
		return r4b.ChargeItem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ChargeItem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateChargeItemDefinition(ctx context.Context, resource r4b.ChargeItemDefinition) (r4b.ChargeItemDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ChargeItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ChargeItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItemDefinition)
	if !ok {
		return r4b.ChargeItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ChargeItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCitation(ctx context.Context, resource r4b.Citation) (r4b.Citation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Citation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Citation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Citation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Citation)
	if !ok {
		return r4b.Citation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Citation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateClaim(ctx context.Context, resource r4b.Claim) (r4b.Claim, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Claim{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Claim")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Claim{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Claim)
	if !ok {
		return r4b.Claim{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Claim" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateClaimResponse(ctx context.Context, resource r4b.ClaimResponse) (r4b.ClaimResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ClaimResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ClaimResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ClaimResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClaimResponse)
	if !ok {
		return r4b.ClaimResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClaimResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateClinicalImpression(ctx context.Context, resource r4b.ClinicalImpression) (r4b.ClinicalImpression, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ClinicalImpression{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ClinicalImpression")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ClinicalImpression{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalImpression)
	if !ok {
		return r4b.ClinicalImpression{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClinicalImpression" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateClinicalUseDefinition(ctx context.Context, resource r4b.ClinicalUseDefinition) (r4b.ClinicalUseDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ClinicalUseDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ClinicalUseDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ClinicalUseDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalUseDefinition)
	if !ok {
		return r4b.ClinicalUseDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClinicalUseDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCodeSystem(ctx context.Context, resource r4b.CodeSystem) (r4b.CodeSystem, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CodeSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CodeSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CodeSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CodeSystem)
	if !ok {
		return r4b.CodeSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CodeSystem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCommunication(ctx context.Context, resource r4b.Communication) (r4b.Communication, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Communication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Communication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Communication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Communication)
	if !ok {
		return r4b.Communication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Communication" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCommunicationRequest(ctx context.Context, resource r4b.CommunicationRequest) (r4b.CommunicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CommunicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CommunicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CommunicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CommunicationRequest)
	if !ok {
		return r4b.CommunicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CommunicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCompartmentDefinition(ctx context.Context, resource r4b.CompartmentDefinition) (r4b.CompartmentDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CompartmentDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CompartmentDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CompartmentDefinition)
	if !ok {
		return r4b.CompartmentDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CompartmentDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateComposition(ctx context.Context, resource r4b.Composition) (r4b.Composition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Composition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Composition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Composition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Composition)
	if !ok {
		return r4b.Composition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Composition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateConceptMap(ctx context.Context, resource r4b.ConceptMap) (r4b.ConceptMap, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ConceptMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ConceptMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ConceptMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ConceptMap)
	if !ok {
		return r4b.ConceptMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ConceptMap" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCondition(ctx context.Context, resource r4b.Condition) (r4b.Condition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Condition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Condition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Condition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Condition)
	if !ok {
		return r4b.Condition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Condition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateConsent(ctx context.Context, resource r4b.Consent) (r4b.Consent, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Consent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Consent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Consent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Consent)
	if !ok {
		return r4b.Consent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Consent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateContract(ctx context.Context, resource r4b.Contract) (r4b.Contract, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Contract{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Contract")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Contract{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Contract)
	if !ok {
		return r4b.Contract{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Contract" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCoverage(ctx context.Context, resource r4b.Coverage) (r4b.Coverage, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Coverage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Coverage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Coverage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Coverage)
	if !ok {
		return r4b.Coverage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Coverage" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityRequest(ctx context.Context, resource r4b.CoverageEligibilityRequest) (r4b.CoverageEligibilityRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CoverageEligibilityRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityRequest)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CoverageEligibilityRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateCoverageEligibilityResponse(ctx context.Context, resource r4b.CoverageEligibilityResponse) (r4b.CoverageEligibilityResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for CoverageEligibilityResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityResponse)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CoverageEligibilityResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDetectedIssue(ctx context.Context, resource r4b.DetectedIssue) (r4b.DetectedIssue, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DetectedIssue{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DetectedIssue")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DetectedIssue{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DetectedIssue)
	if !ok {
		return r4b.DetectedIssue{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DetectedIssue" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDevice(ctx context.Context, resource r4b.Device) (r4b.Device, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Device{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Device")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Device{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Device)
	if !ok {
		return r4b.Device{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Device" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceDefinition(ctx context.Context, resource r4b.DeviceDefinition) (r4b.DeviceDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DeviceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceDefinition)
	if !ok {
		return r4b.DeviceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceMetric(ctx context.Context, resource r4b.DeviceMetric) (r4b.DeviceMetric, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceMetric{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DeviceMetric")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceMetric{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceMetric)
	if !ok {
		return r4b.DeviceMetric{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceMetric" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceRequest(ctx context.Context, resource r4b.DeviceRequest) (r4b.DeviceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DeviceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceRequest)
	if !ok {
		return r4b.DeviceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDeviceUseStatement(ctx context.Context, resource r4b.DeviceUseStatement) (r4b.DeviceUseStatement, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DeviceUseStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DeviceUseStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceUseStatement)
	if !ok {
		return r4b.DeviceUseStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceUseStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDiagnosticReport(ctx context.Context, resource r4b.DiagnosticReport) (r4b.DiagnosticReport, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DiagnosticReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DiagnosticReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DiagnosticReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DiagnosticReport)
	if !ok {
		return r4b.DiagnosticReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DiagnosticReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDocumentManifest(ctx context.Context, resource r4b.DocumentManifest) (r4b.DocumentManifest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DocumentManifest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DocumentManifest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DocumentManifest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentManifest)
	if !ok {
		return r4b.DocumentManifest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DocumentManifest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateDocumentReference(ctx context.Context, resource r4b.DocumentReference) (r4b.DocumentReference, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.DocumentReference{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for DocumentReference")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.DocumentReference{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentReference)
	if !ok {
		return r4b.DocumentReference{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DocumentReference" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEncounter(ctx context.Context, resource r4b.Encounter) (r4b.Encounter, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Encounter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Encounter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Encounter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Encounter)
	if !ok {
		return r4b.Encounter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Encounter" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEndpoint(ctx context.Context, resource r4b.Endpoint) (r4b.Endpoint, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Endpoint{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Endpoint")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Endpoint{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Endpoint)
	if !ok {
		return r4b.Endpoint{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Endpoint" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentRequest(ctx context.Context, resource r4b.EnrollmentRequest) (r4b.EnrollmentRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EnrollmentRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for EnrollmentRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentRequest)
	if !ok {
		return r4b.EnrollmentRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EnrollmentRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEnrollmentResponse(ctx context.Context, resource r4b.EnrollmentResponse) (r4b.EnrollmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EnrollmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for EnrollmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentResponse)
	if !ok {
		return r4b.EnrollmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EnrollmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEpisodeOfCare(ctx context.Context, resource r4b.EpisodeOfCare) (r4b.EpisodeOfCare, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EpisodeOfCare{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for EpisodeOfCare")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EpisodeOfCare)
	if !ok {
		return r4b.EpisodeOfCare{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EpisodeOfCare" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEventDefinition(ctx context.Context, resource r4b.EventDefinition) (r4b.EventDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EventDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for EventDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EventDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EventDefinition)
	if !ok {
		return r4b.EventDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EventDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEvidence(ctx context.Context, resource r4b.Evidence) (r4b.Evidence, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Evidence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Evidence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Evidence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Evidence)
	if !ok {
		return r4b.Evidence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Evidence" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceReport(ctx context.Context, resource r4b.EvidenceReport) (r4b.EvidenceReport, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EvidenceReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for EvidenceReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EvidenceReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceReport)
	if !ok {
		return r4b.EvidenceReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EvidenceReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateEvidenceVariable(ctx context.Context, resource r4b.EvidenceVariable) (r4b.EvidenceVariable, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.EvidenceVariable{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for EvidenceVariable")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.EvidenceVariable{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceVariable)
	if !ok {
		return r4b.EvidenceVariable{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EvidenceVariable" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateExampleScenario(ctx context.Context, resource r4b.ExampleScenario) (r4b.ExampleScenario, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ExampleScenario{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ExampleScenario")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ExampleScenario{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExampleScenario)
	if !ok {
		return r4b.ExampleScenario{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ExampleScenario" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateExplanationOfBenefit(ctx context.Context, resource r4b.ExplanationOfBenefit) (r4b.ExplanationOfBenefit, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ExplanationOfBenefit{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ExplanationOfBenefit")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExplanationOfBenefit)
	if !ok {
		return r4b.ExplanationOfBenefit{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ExplanationOfBenefit" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateFamilyMemberHistory(ctx context.Context, resource r4b.FamilyMemberHistory) (r4b.FamilyMemberHistory, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.FamilyMemberHistory{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for FamilyMemberHistory")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.FamilyMemberHistory)
	if !ok {
		return r4b.FamilyMemberHistory{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "FamilyMemberHistory" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateFlag(ctx context.Context, resource r4b.Flag) (r4b.Flag, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Flag{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Flag")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Flag{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Flag)
	if !ok {
		return r4b.Flag{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Flag" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGoal(ctx context.Context, resource r4b.Goal) (r4b.Goal, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Goal{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Goal")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Goal{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Goal)
	if !ok {
		return r4b.Goal{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Goal" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGraphDefinition(ctx context.Context, resource r4b.GraphDefinition) (r4b.GraphDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.GraphDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for GraphDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.GraphDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GraphDefinition)
	if !ok {
		return r4b.GraphDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "GraphDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGroup(ctx context.Context, resource r4b.Group) (r4b.Group, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Group{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Group")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Group{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Group)
	if !ok {
		return r4b.Group{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Group" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateGuidanceResponse(ctx context.Context, resource r4b.GuidanceResponse) (r4b.GuidanceResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.GuidanceResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for GuidanceResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.GuidanceResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GuidanceResponse)
	if !ok {
		return r4b.GuidanceResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "GuidanceResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateHealthcareService(ctx context.Context, resource r4b.HealthcareService) (r4b.HealthcareService, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.HealthcareService{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for HealthcareService")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.HealthcareService{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.HealthcareService)
	if !ok {
		return r4b.HealthcareService{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "HealthcareService" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImagingStudy(ctx context.Context, resource r4b.ImagingStudy) (r4b.ImagingStudy, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImagingStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ImagingStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImagingStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImagingStudy)
	if !ok {
		return r4b.ImagingStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImagingStudy" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImmunization(ctx context.Context, resource r4b.Immunization) (r4b.Immunization, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Immunization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Immunization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Immunization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Immunization)
	if !ok {
		return r4b.Immunization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Immunization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationEvaluation(ctx context.Context, resource r4b.ImmunizationEvaluation) (r4b.ImmunizationEvaluation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImmunizationEvaluation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ImmunizationEvaluation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationEvaluation)
	if !ok {
		return r4b.ImmunizationEvaluation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImmunizationEvaluation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImmunizationRecommendation(ctx context.Context, resource r4b.ImmunizationRecommendation) (r4b.ImmunizationRecommendation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImmunizationRecommendation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ImmunizationRecommendation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationRecommendation)
	if !ok {
		return r4b.ImmunizationRecommendation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImmunizationRecommendation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateImplementationGuide(ctx context.Context, resource r4b.ImplementationGuide) (r4b.ImplementationGuide, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ImplementationGuide{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ImplementationGuide")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ImplementationGuide{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImplementationGuide)
	if !ok {
		return r4b.ImplementationGuide{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImplementationGuide" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateIngredient(ctx context.Context, resource r4b.Ingredient) (r4b.Ingredient, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Ingredient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Ingredient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Ingredient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Ingredient)
	if !ok {
		return r4b.Ingredient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Ingredient" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateInsurancePlan(ctx context.Context, resource r4b.InsurancePlan) (r4b.InsurancePlan, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.InsurancePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for InsurancePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.InsurancePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.InsurancePlan)
	if !ok {
		return r4b.InsurancePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "InsurancePlan" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateInvoice(ctx context.Context, resource r4b.Invoice) (r4b.Invoice, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Invoice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Invoice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Invoice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Invoice)
	if !ok {
		return r4b.Invoice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Invoice" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateLibrary(ctx context.Context, resource r4b.Library) (r4b.Library, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Library{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Library")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Library{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Library)
	if !ok {
		return r4b.Library{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Library" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateLinkage(ctx context.Context, resource r4b.Linkage) (r4b.Linkage, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Linkage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Linkage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Linkage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Linkage)
	if !ok {
		return r4b.Linkage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Linkage" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateList(ctx context.Context, resource r4b.List) (r4b.List, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.List{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for List")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.List{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.List)
	if !ok {
		return r4b.List{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "List" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateLocation(ctx context.Context, resource r4b.Location) (r4b.Location, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Location{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Location")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Location{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Location)
	if !ok {
		return r4b.Location{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Location" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateManufacturedItemDefinition(ctx context.Context, resource r4b.ManufacturedItemDefinition) (r4b.ManufacturedItemDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ManufacturedItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ManufacturedItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ManufacturedItemDefinition)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ManufacturedItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMeasure(ctx context.Context, resource r4b.Measure) (r4b.Measure, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Measure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Measure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Measure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Measure)
	if !ok {
		return r4b.Measure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Measure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMeasureReport(ctx context.Context, resource r4b.MeasureReport) (r4b.MeasureReport, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MeasureReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MeasureReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MeasureReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MeasureReport)
	if !ok {
		return r4b.MeasureReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MeasureReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedia(ctx context.Context, resource r4b.Media) (r4b.Media, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Media{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Media")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Media{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Media)
	if !ok {
		return r4b.Media{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Media" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedication(ctx context.Context, resource r4b.Medication) (r4b.Medication, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Medication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Medication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Medication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Medication)
	if !ok {
		return r4b.Medication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Medication" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationAdministration(ctx context.Context, resource r4b.MedicationAdministration) (r4b.MedicationAdministration, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationAdministration{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MedicationAdministration")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationAdministration{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationAdministration)
	if !ok {
		return r4b.MedicationAdministration{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationAdministration" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationDispense(ctx context.Context, resource r4b.MedicationDispense) (r4b.MedicationDispense, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationDispense{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MedicationDispense")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationDispense{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationDispense)
	if !ok {
		return r4b.MedicationDispense{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationDispense" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationKnowledge(ctx context.Context, resource r4b.MedicationKnowledge) (r4b.MedicationKnowledge, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationKnowledge{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MedicationKnowledge")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationKnowledge)
	if !ok {
		return r4b.MedicationKnowledge{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationKnowledge" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationRequest(ctx context.Context, resource r4b.MedicationRequest) (r4b.MedicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MedicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationRequest)
	if !ok {
		return r4b.MedicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicationStatement(ctx context.Context, resource r4b.MedicationStatement) (r4b.MedicationStatement, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicationStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MedicationStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationStatement)
	if !ok {
		return r4b.MedicationStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMedicinalProductDefinition(ctx context.Context, resource r4b.MedicinalProductDefinition) (r4b.MedicinalProductDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MedicinalProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MedicinalProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MedicinalProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicinalProductDefinition)
	if !ok {
		return r4b.MedicinalProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicinalProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMessageDefinition(ctx context.Context, resource r4b.MessageDefinition) (r4b.MessageDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MessageDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MessageDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MessageDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageDefinition)
	if !ok {
		return r4b.MessageDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MessageDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMessageHeader(ctx context.Context, resource r4b.MessageHeader) (r4b.MessageHeader, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MessageHeader{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MessageHeader")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MessageHeader{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageHeader)
	if !ok {
		return r4b.MessageHeader{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MessageHeader" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateMolecularSequence(ctx context.Context, resource r4b.MolecularSequence) (r4b.MolecularSequence, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.MolecularSequence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for MolecularSequence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.MolecularSequence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MolecularSequence)
	if !ok {
		return r4b.MolecularSequence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MolecularSequence" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateNamingSystem(ctx context.Context, resource r4b.NamingSystem) (r4b.NamingSystem, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.NamingSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for NamingSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.NamingSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NamingSystem)
	if !ok {
		return r4b.NamingSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NamingSystem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateNutritionOrder(ctx context.Context, resource r4b.NutritionOrder) (r4b.NutritionOrder, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.NutritionOrder{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for NutritionOrder")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.NutritionOrder{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionOrder)
	if !ok {
		return r4b.NutritionOrder{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NutritionOrder" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateNutritionProduct(ctx context.Context, resource r4b.NutritionProduct) (r4b.NutritionProduct, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.NutritionProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for NutritionProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.NutritionProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionProduct)
	if !ok {
		return r4b.NutritionProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NutritionProduct" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateObservation(ctx context.Context, resource r4b.Observation) (r4b.Observation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Observation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Observation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Observation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Observation)
	if !ok {
		return r4b.Observation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Observation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateObservationDefinition(ctx context.Context, resource r4b.ObservationDefinition) (r4b.ObservationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ObservationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ObservationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ObservationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ObservationDefinition)
	if !ok {
		return r4b.ObservationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ObservationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOperationDefinition(ctx context.Context, resource r4b.OperationDefinition) (r4b.OperationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.OperationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for OperationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.OperationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationDefinition)
	if !ok {
		return r4b.OperationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OperationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOperationOutcome(ctx context.Context, resource r4b.OperationOutcome) (r4b.OperationOutcome, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.OperationOutcome{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for OperationOutcome")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.OperationOutcome{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationOutcome)
	if !ok {
		return r4b.OperationOutcome{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OperationOutcome" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOrganization(ctx context.Context, resource r4b.Organization) (r4b.Organization, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Organization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Organization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Organization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Organization)
	if !ok {
		return r4b.Organization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Organization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateOrganizationAffiliation(ctx context.Context, resource r4b.OrganizationAffiliation) (r4b.OrganizationAffiliation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.OrganizationAffiliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for OrganizationAffiliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OrganizationAffiliation)
	if !ok {
		return r4b.OrganizationAffiliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OrganizationAffiliation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePackagedProductDefinition(ctx context.Context, resource r4b.PackagedProductDefinition) (r4b.PackagedProductDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PackagedProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for PackagedProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PackagedProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PackagedProductDefinition)
	if !ok {
		return r4b.PackagedProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PackagedProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateParameters(ctx context.Context, resource r4b.Parameters) (r4b.Parameters, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Parameters{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Parameters")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Parameters{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Parameters)
	if !ok {
		return r4b.Parameters{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Parameters" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePatient(ctx context.Context, resource r4b.Patient) (r4b.Patient, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Patient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Patient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Patient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Patient)
	if !ok {
		return r4b.Patient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Patient" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePaymentNotice(ctx context.Context, resource r4b.PaymentNotice) (r4b.PaymentNotice, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PaymentNotice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for PaymentNotice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PaymentNotice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentNotice)
	if !ok {
		return r4b.PaymentNotice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PaymentNotice" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePaymentReconciliation(ctx context.Context, resource r4b.PaymentReconciliation) (r4b.PaymentReconciliation, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PaymentReconciliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for PaymentReconciliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentReconciliation)
	if !ok {
		return r4b.PaymentReconciliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PaymentReconciliation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePerson(ctx context.Context, resource r4b.Person) (r4b.Person, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Person{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Person")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Person{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Person)
	if !ok {
		return r4b.Person{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Person" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePlanDefinition(ctx context.Context, resource r4b.PlanDefinition) (r4b.PlanDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PlanDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for PlanDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PlanDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PlanDefinition)
	if !ok {
		return r4b.PlanDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PlanDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePractitioner(ctx context.Context, resource r4b.Practitioner) (r4b.Practitioner, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Practitioner{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Practitioner")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Practitioner{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Practitioner)
	if !ok {
		return r4b.Practitioner{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Practitioner" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreatePractitionerRole(ctx context.Context, resource r4b.PractitionerRole) (r4b.PractitionerRole, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.PractitionerRole{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for PractitionerRole")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.PractitionerRole{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PractitionerRole)
	if !ok {
		return r4b.PractitionerRole{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PractitionerRole" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateProcedure(ctx context.Context, resource r4b.Procedure) (r4b.Procedure, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Procedure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Procedure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Procedure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Procedure)
	if !ok {
		return r4b.Procedure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Procedure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateProvenance(ctx context.Context, resource r4b.Provenance) (r4b.Provenance, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Provenance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Provenance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Provenance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Provenance)
	if !ok {
		return r4b.Provenance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Provenance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaire(ctx context.Context, resource r4b.Questionnaire) (r4b.Questionnaire, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Questionnaire{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Questionnaire")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Questionnaire{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Questionnaire)
	if !ok {
		return r4b.Questionnaire{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Questionnaire" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateQuestionnaireResponse(ctx context.Context, resource r4b.QuestionnaireResponse) (r4b.QuestionnaireResponse, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.QuestionnaireResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for QuestionnaireResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.QuestionnaireResponse)
	if !ok {
		return r4b.QuestionnaireResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "QuestionnaireResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRegulatedAuthorization(ctx context.Context, resource r4b.RegulatedAuthorization) (r4b.RegulatedAuthorization, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RegulatedAuthorization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for RegulatedAuthorization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RegulatedAuthorization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RegulatedAuthorization)
	if !ok {
		return r4b.RegulatedAuthorization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RegulatedAuthorization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRelatedPerson(ctx context.Context, resource r4b.RelatedPerson) (r4b.RelatedPerson, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RelatedPerson{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for RelatedPerson")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RelatedPerson{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RelatedPerson)
	if !ok {
		return r4b.RelatedPerson{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RelatedPerson" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRequestGroup(ctx context.Context, resource r4b.RequestGroup) (r4b.RequestGroup, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RequestGroup{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for RequestGroup")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RequestGroup{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RequestGroup)
	if !ok {
		return r4b.RequestGroup{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RequestGroup" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchDefinition(ctx context.Context, resource r4b.ResearchDefinition) (r4b.ResearchDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ResearchDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchDefinition)
	if !ok {
		return r4b.ResearchDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchElementDefinition(ctx context.Context, resource r4b.ResearchElementDefinition) (r4b.ResearchElementDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchElementDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ResearchElementDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchElementDefinition)
	if !ok {
		return r4b.ResearchElementDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchElementDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchStudy(ctx context.Context, resource r4b.ResearchStudy) (r4b.ResearchStudy, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ResearchStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchStudy)
	if !ok {
		return r4b.ResearchStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchStudy" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateResearchSubject(ctx context.Context, resource r4b.ResearchSubject) (r4b.ResearchSubject, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ResearchSubject{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ResearchSubject")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchSubject{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchSubject)
	if !ok {
		return r4b.ResearchSubject{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchSubject" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateRiskAssessment(ctx context.Context, resource r4b.RiskAssessment) (r4b.RiskAssessment, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.RiskAssessment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for RiskAssessment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.RiskAssessment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RiskAssessment)
	if !ok {
		return r4b.RiskAssessment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RiskAssessment" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSchedule(ctx context.Context, resource r4b.Schedule) (r4b.Schedule, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Schedule{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Schedule")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Schedule{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Schedule)
	if !ok {
		return r4b.Schedule{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Schedule" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSearchParameter(ctx context.Context, resource r4b.SearchParameter) (r4b.SearchParameter, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SearchParameter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for SearchParameter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SearchParameter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SearchParameter)
	if !ok {
		return r4b.SearchParameter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SearchParameter" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateServiceRequest(ctx context.Context, resource r4b.ServiceRequest) (r4b.ServiceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ServiceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ServiceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ServiceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ServiceRequest)
	if !ok {
		return r4b.ServiceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ServiceRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSlot(ctx context.Context, resource r4b.Slot) (r4b.Slot, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Slot{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Slot")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Slot{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Slot)
	if !ok {
		return r4b.Slot{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Slot" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSpecimen(ctx context.Context, resource r4b.Specimen) (r4b.Specimen, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Specimen{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Specimen")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Specimen{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Specimen)
	if !ok {
		return r4b.Specimen{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Specimen" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSpecimenDefinition(ctx context.Context, resource r4b.SpecimenDefinition) (r4b.SpecimenDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SpecimenDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for SpecimenDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SpecimenDefinition)
	if !ok {
		return r4b.SpecimenDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SpecimenDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateStructureDefinition(ctx context.Context, resource r4b.StructureDefinition) (r4b.StructureDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.StructureDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for StructureDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.StructureDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureDefinition)
	if !ok {
		return r4b.StructureDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "StructureDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateStructureMap(ctx context.Context, resource r4b.StructureMap) (r4b.StructureMap, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.StructureMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for StructureMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.StructureMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureMap)
	if !ok {
		return r4b.StructureMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "StructureMap" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubscription(ctx context.Context, resource r4b.Subscription) (r4b.Subscription, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Subscription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Subscription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Subscription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Subscription)
	if !ok {
		return r4b.Subscription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Subscription" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubscriptionStatus(ctx context.Context, resource r4b.SubscriptionStatus) (r4b.SubscriptionStatus, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SubscriptionStatus{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for SubscriptionStatus")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SubscriptionStatus{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionStatus)
	if !ok {
		return r4b.SubscriptionStatus{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubscriptionStatus" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubscriptionTopic(ctx context.Context, resource r4b.SubscriptionTopic) (r4b.SubscriptionTopic, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SubscriptionTopic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for SubscriptionTopic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SubscriptionTopic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionTopic)
	if !ok {
		return r4b.SubscriptionTopic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubscriptionTopic" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstance(ctx context.Context, resource r4b.Substance) (r4b.Substance, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Substance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Substance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Substance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Substance)
	if !ok {
		return r4b.Substance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Substance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSubstanceDefinition(ctx context.Context, resource r4b.SubstanceDefinition) (r4b.SubstanceDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SubstanceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for SubstanceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SubstanceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubstanceDefinition)
	if !ok {
		return r4b.SubstanceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubstanceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSupplyDelivery(ctx context.Context, resource r4b.SupplyDelivery) (r4b.SupplyDelivery, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SupplyDelivery{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for SupplyDelivery")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SupplyDelivery{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyDelivery)
	if !ok {
		return r4b.SupplyDelivery{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SupplyDelivery" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateSupplyRequest(ctx context.Context, resource r4b.SupplyRequest) (r4b.SupplyRequest, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.SupplyRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for SupplyRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.SupplyRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyRequest)
	if !ok {
		return r4b.SupplyRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SupplyRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTask(ctx context.Context, resource r4b.Task) (r4b.Task, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.Task{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for Task")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.Task{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Task)
	if !ok {
		return r4b.Task{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Task" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTerminologyCapabilities(ctx context.Context, resource r4b.TerminologyCapabilities) (r4b.TerminologyCapabilities, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.TerminologyCapabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for TerminologyCapabilities")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TerminologyCapabilities)
	if !ok {
		return r4b.TerminologyCapabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TerminologyCapabilities" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTestReport(ctx context.Context, resource r4b.TestReport) (r4b.TestReport, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.TestReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for TestReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.TestReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestReport)
	if !ok {
		return r4b.TestReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TestReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateTestScript(ctx context.Context, resource r4b.TestScript) (r4b.TestScript, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.TestScript{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for TestScript")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.TestScript{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestScript)
	if !ok {
		return r4b.TestScript{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TestScript" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateValueSet(ctx context.Context, resource r4b.ValueSet) (r4b.ValueSet, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.ValueSet{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for ValueSet")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.ValueSet{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ValueSet)
	if !ok {
		return r4b.ValueSet{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ValueSet" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateVerificationResult(ctx context.Context, resource r4b.VerificationResult) (r4b.VerificationResult, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.VerificationResult{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for VerificationResult")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.VerificationResult{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VerificationResult)
	if !ok {
		return r4b.VerificationResult{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "VerificationResult" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) CreateVisionPrescription(ctx context.Context, resource r4b.VisionPrescription) (r4b.VisionPrescription, error) {
	g, ok := w.Generic.(capabilities.GenericCreate)
	if !ok {
		return r4b.VisionPrescription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Create not implemented for VisionPrescription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Create(ctx, resource)
	if err != nil {
		return r4b.VisionPrescription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VisionPrescription)
	if !ok {
		return r4b.VisionPrescription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "VisionPrescription" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAccount(ctx context.Context, id string) (r4b.Account, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Account{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Account")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Account", id)
	if err != nil {
		return r4b.Account{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Account)
	if !ok {
		return r4b.Account{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Account" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadActivityDefinition(ctx context.Context, id string) (r4b.ActivityDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ActivityDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ActivityDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r4b.ActivityDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ActivityDefinition)
	if !ok {
		return r4b.ActivityDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ActivityDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAdministrableProductDefinition(ctx context.Context, id string) (r4b.AdministrableProductDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AdministrableProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for AdministrableProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AdministrableProductDefinition", id)
	if err != nil {
		return r4b.AdministrableProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdministrableProductDefinition)
	if !ok {
		return r4b.AdministrableProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AdministrableProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAdverseEvent(ctx context.Context, id string) (r4b.AdverseEvent, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AdverseEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for AdverseEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r4b.AdverseEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdverseEvent)
	if !ok {
		return r4b.AdverseEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AdverseEvent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAllergyIntolerance(ctx context.Context, id string) (r4b.AllergyIntolerance, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AllergyIntolerance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for AllergyIntolerance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r4b.AllergyIntolerance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AllergyIntolerance)
	if !ok {
		return r4b.AllergyIntolerance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AllergyIntolerance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAppointment(ctx context.Context, id string) (r4b.Appointment, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Appointment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Appointment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Appointment", id)
	if err != nil {
		return r4b.Appointment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Appointment)
	if !ok {
		return r4b.Appointment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Appointment" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAppointmentResponse(ctx context.Context, id string) (r4b.AppointmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AppointmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for AppointmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r4b.AppointmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AppointmentResponse)
	if !ok {
		return r4b.AppointmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AppointmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadAuditEvent(ctx context.Context, id string) (r4b.AuditEvent, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.AuditEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for AuditEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r4b.AuditEvent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AuditEvent)
	if !ok {
		return r4b.AuditEvent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AuditEvent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBasic(ctx context.Context, id string) (r4b.Basic, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Basic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Basic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Basic", id)
	if err != nil {
		return r4b.Basic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Basic)
	if !ok {
		return r4b.Basic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Basic" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBinary(ctx context.Context, id string) (r4b.Binary, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Binary{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Binary")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Binary", id)
	if err != nil {
		return r4b.Binary{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Binary)
	if !ok {
		return r4b.Binary{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Binary" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r4b.BiologicallyDerivedProduct, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for BiologicallyDerivedProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r4b.BiologicallyDerivedProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "BiologicallyDerivedProduct" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBodyStructure(ctx context.Context, id string) (r4b.BodyStructure, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.BodyStructure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for BodyStructure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r4b.BodyStructure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BodyStructure)
	if !ok {
		return r4b.BodyStructure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "BodyStructure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadBundle(ctx context.Context, id string) (r4b.Bundle, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Bundle{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Bundle")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Bundle", id)
	if err != nil {
		return r4b.Bundle{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Bundle)
	if !ok {
		return r4b.Bundle{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Bundle" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCapabilityStatement(ctx context.Context, id string) (r4b.CapabilityStatement, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CapabilityStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CapabilityStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r4b.CapabilityStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CapabilityStatement)
	if !ok {
		return r4b.CapabilityStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CapabilityStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCarePlan(ctx context.Context, id string) (r4b.CarePlan, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CarePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CarePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CarePlan", id)
	if err != nil {
		return r4b.CarePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CarePlan)
	if !ok {
		return r4b.CarePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CarePlan" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCareTeam(ctx context.Context, id string) (r4b.CareTeam, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CareTeam{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CareTeam")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CareTeam", id)
	if err != nil {
		return r4b.CareTeam{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CareTeam)
	if !ok {
		return r4b.CareTeam{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CareTeam" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCatalogEntry(ctx context.Context, id string) (r4b.CatalogEntry, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CatalogEntry{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CatalogEntry")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CatalogEntry", id)
	if err != nil {
		return r4b.CatalogEntry{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CatalogEntry)
	if !ok {
		return r4b.CatalogEntry{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CatalogEntry" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadChargeItem(ctx context.Context, id string) (r4b.ChargeItem, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ChargeItem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ChargeItem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r4b.ChargeItem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItem)
	if !ok {
		return r4b.ChargeItem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ChargeItem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadChargeItemDefinition(ctx context.Context, id string) (r4b.ChargeItemDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ChargeItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ChargeItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r4b.ChargeItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItemDefinition)
	if !ok {
		return r4b.ChargeItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ChargeItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCitation(ctx context.Context, id string) (r4b.Citation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Citation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Citation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Citation", id)
	if err != nil {
		return r4b.Citation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Citation)
	if !ok {
		return r4b.Citation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Citation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadClaim(ctx context.Context, id string) (r4b.Claim, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Claim{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Claim")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Claim", id)
	if err != nil {
		return r4b.Claim{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Claim)
	if !ok {
		return r4b.Claim{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Claim" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadClaimResponse(ctx context.Context, id string) (r4b.ClaimResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ClaimResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ClaimResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r4b.ClaimResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClaimResponse)
	if !ok {
		return r4b.ClaimResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClaimResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadClinicalImpression(ctx context.Context, id string) (r4b.ClinicalImpression, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ClinicalImpression{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ClinicalImpression")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r4b.ClinicalImpression{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalImpression)
	if !ok {
		return r4b.ClinicalImpression{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClinicalImpression" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadClinicalUseDefinition(ctx context.Context, id string) (r4b.ClinicalUseDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ClinicalUseDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ClinicalUseDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ClinicalUseDefinition", id)
	if err != nil {
		return r4b.ClinicalUseDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalUseDefinition)
	if !ok {
		return r4b.ClinicalUseDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClinicalUseDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCodeSystem(ctx context.Context, id string) (r4b.CodeSystem, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CodeSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CodeSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r4b.CodeSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CodeSystem)
	if !ok {
		return r4b.CodeSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CodeSystem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCommunication(ctx context.Context, id string) (r4b.Communication, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Communication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Communication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Communication", id)
	if err != nil {
		return r4b.Communication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Communication)
	if !ok {
		return r4b.Communication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Communication" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCommunicationRequest(ctx context.Context, id string) (r4b.CommunicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CommunicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CommunicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r4b.CommunicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CommunicationRequest)
	if !ok {
		return r4b.CommunicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CommunicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCompartmentDefinition(ctx context.Context, id string) (r4b.CompartmentDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CompartmentDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CompartmentDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r4b.CompartmentDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CompartmentDefinition)
	if !ok {
		return r4b.CompartmentDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CompartmentDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadComposition(ctx context.Context, id string) (r4b.Composition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Composition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Composition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Composition", id)
	if err != nil {
		return r4b.Composition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Composition)
	if !ok {
		return r4b.Composition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Composition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadConceptMap(ctx context.Context, id string) (r4b.ConceptMap, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ConceptMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ConceptMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r4b.ConceptMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ConceptMap)
	if !ok {
		return r4b.ConceptMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ConceptMap" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCondition(ctx context.Context, id string) (r4b.Condition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Condition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Condition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Condition", id)
	if err != nil {
		return r4b.Condition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Condition)
	if !ok {
		return r4b.Condition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Condition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadConsent(ctx context.Context, id string) (r4b.Consent, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Consent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Consent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Consent", id)
	if err != nil {
		return r4b.Consent{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Consent)
	if !ok {
		return r4b.Consent{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Consent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadContract(ctx context.Context, id string) (r4b.Contract, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Contract{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Contract")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Contract", id)
	if err != nil {
		return r4b.Contract{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Contract)
	if !ok {
		return r4b.Contract{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Contract" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCoverage(ctx context.Context, id string) (r4b.Coverage, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Coverage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Coverage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Coverage", id)
	if err != nil {
		return r4b.Coverage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Coverage)
	if !ok {
		return r4b.Coverage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Coverage" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r4b.CoverageEligibilityRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CoverageEligibilityRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r4b.CoverageEligibilityRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityRequest)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CoverageEligibilityRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r4b.CoverageEligibilityResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for CoverageEligibilityResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r4b.CoverageEligibilityResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityResponse)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CoverageEligibilityResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDetectedIssue(ctx context.Context, id string) (r4b.DetectedIssue, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DetectedIssue{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DetectedIssue")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r4b.DetectedIssue{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DetectedIssue)
	if !ok {
		return r4b.DetectedIssue{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DetectedIssue" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDevice(ctx context.Context, id string) (r4b.Device, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Device{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Device")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Device", id)
	if err != nil {
		return r4b.Device{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Device)
	if !ok {
		return r4b.Device{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Device" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceDefinition(ctx context.Context, id string) (r4b.DeviceDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DeviceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r4b.DeviceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceDefinition)
	if !ok {
		return r4b.DeviceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceMetric(ctx context.Context, id string) (r4b.DeviceMetric, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceMetric{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DeviceMetric")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r4b.DeviceMetric{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceMetric)
	if !ok {
		return r4b.DeviceMetric{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceMetric" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceRequest(ctx context.Context, id string) (r4b.DeviceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DeviceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r4b.DeviceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceRequest)
	if !ok {
		return r4b.DeviceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDeviceUseStatement(ctx context.Context, id string) (r4b.DeviceUseStatement, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DeviceUseStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DeviceUseStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DeviceUseStatement", id)
	if err != nil {
		return r4b.DeviceUseStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceUseStatement)
	if !ok {
		return r4b.DeviceUseStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceUseStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDiagnosticReport(ctx context.Context, id string) (r4b.DiagnosticReport, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DiagnosticReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DiagnosticReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r4b.DiagnosticReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DiagnosticReport)
	if !ok {
		return r4b.DiagnosticReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DiagnosticReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDocumentManifest(ctx context.Context, id string) (r4b.DocumentManifest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DocumentManifest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DocumentManifest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DocumentManifest", id)
	if err != nil {
		return r4b.DocumentManifest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentManifest)
	if !ok {
		return r4b.DocumentManifest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DocumentManifest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadDocumentReference(ctx context.Context, id string) (r4b.DocumentReference, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.DocumentReference{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for DocumentReference")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r4b.DocumentReference{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentReference)
	if !ok {
		return r4b.DocumentReference{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DocumentReference" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEncounter(ctx context.Context, id string) (r4b.Encounter, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Encounter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Encounter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Encounter", id)
	if err != nil {
		return r4b.Encounter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Encounter)
	if !ok {
		return r4b.Encounter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Encounter" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEndpoint(ctx context.Context, id string) (r4b.Endpoint, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Endpoint{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Endpoint")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Endpoint", id)
	if err != nil {
		return r4b.Endpoint{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Endpoint)
	if !ok {
		return r4b.Endpoint{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Endpoint" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentRequest(ctx context.Context, id string) (r4b.EnrollmentRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EnrollmentRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for EnrollmentRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r4b.EnrollmentRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentRequest)
	if !ok {
		return r4b.EnrollmentRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EnrollmentRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEnrollmentResponse(ctx context.Context, id string) (r4b.EnrollmentResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EnrollmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for EnrollmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r4b.EnrollmentResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentResponse)
	if !ok {
		return r4b.EnrollmentResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EnrollmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEpisodeOfCare(ctx context.Context, id string) (r4b.EpisodeOfCare, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EpisodeOfCare{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for EpisodeOfCare")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r4b.EpisodeOfCare{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EpisodeOfCare)
	if !ok {
		return r4b.EpisodeOfCare{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EpisodeOfCare" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEventDefinition(ctx context.Context, id string) (r4b.EventDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EventDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for EventDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r4b.EventDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EventDefinition)
	if !ok {
		return r4b.EventDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EventDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEvidence(ctx context.Context, id string) (r4b.Evidence, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Evidence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Evidence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Evidence", id)
	if err != nil {
		return r4b.Evidence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Evidence)
	if !ok {
		return r4b.Evidence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Evidence" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceReport(ctx context.Context, id string) (r4b.EvidenceReport, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EvidenceReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for EvidenceReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EvidenceReport", id)
	if err != nil {
		return r4b.EvidenceReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceReport)
	if !ok {
		return r4b.EvidenceReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EvidenceReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadEvidenceVariable(ctx context.Context, id string) (r4b.EvidenceVariable, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.EvidenceVariable{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for EvidenceVariable")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r4b.EvidenceVariable{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceVariable)
	if !ok {
		return r4b.EvidenceVariable{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EvidenceVariable" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadExampleScenario(ctx context.Context, id string) (r4b.ExampleScenario, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ExampleScenario{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ExampleScenario")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r4b.ExampleScenario{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExampleScenario)
	if !ok {
		return r4b.ExampleScenario{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ExampleScenario" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadExplanationOfBenefit(ctx context.Context, id string) (r4b.ExplanationOfBenefit, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ExplanationOfBenefit{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ExplanationOfBenefit")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r4b.ExplanationOfBenefit{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExplanationOfBenefit)
	if !ok {
		return r4b.ExplanationOfBenefit{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ExplanationOfBenefit" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadFamilyMemberHistory(ctx context.Context, id string) (r4b.FamilyMemberHistory, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.FamilyMemberHistory{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for FamilyMemberHistory")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r4b.FamilyMemberHistory{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.FamilyMemberHistory)
	if !ok {
		return r4b.FamilyMemberHistory{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "FamilyMemberHistory" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadFlag(ctx context.Context, id string) (r4b.Flag, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Flag{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Flag")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Flag", id)
	if err != nil {
		return r4b.Flag{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Flag)
	if !ok {
		return r4b.Flag{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Flag" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGoal(ctx context.Context, id string) (r4b.Goal, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Goal{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Goal")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Goal", id)
	if err != nil {
		return r4b.Goal{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Goal)
	if !ok {
		return r4b.Goal{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Goal" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGraphDefinition(ctx context.Context, id string) (r4b.GraphDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.GraphDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for GraphDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r4b.GraphDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GraphDefinition)
	if !ok {
		return r4b.GraphDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "GraphDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGroup(ctx context.Context, id string) (r4b.Group, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Group{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Group")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Group", id)
	if err != nil {
		return r4b.Group{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Group)
	if !ok {
		return r4b.Group{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Group" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadGuidanceResponse(ctx context.Context, id string) (r4b.GuidanceResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.GuidanceResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for GuidanceResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r4b.GuidanceResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GuidanceResponse)
	if !ok {
		return r4b.GuidanceResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "GuidanceResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadHealthcareService(ctx context.Context, id string) (r4b.HealthcareService, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.HealthcareService{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for HealthcareService")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r4b.HealthcareService{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.HealthcareService)
	if !ok {
		return r4b.HealthcareService{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "HealthcareService" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImagingStudy(ctx context.Context, id string) (r4b.ImagingStudy, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImagingStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ImagingStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r4b.ImagingStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImagingStudy)
	if !ok {
		return r4b.ImagingStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImagingStudy" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImmunization(ctx context.Context, id string) (r4b.Immunization, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Immunization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Immunization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Immunization", id)
	if err != nil {
		return r4b.Immunization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Immunization)
	if !ok {
		return r4b.Immunization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Immunization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationEvaluation(ctx context.Context, id string) (r4b.ImmunizationEvaluation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImmunizationEvaluation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ImmunizationEvaluation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r4b.ImmunizationEvaluation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationEvaluation)
	if !ok {
		return r4b.ImmunizationEvaluation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImmunizationEvaluation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImmunizationRecommendation(ctx context.Context, id string) (r4b.ImmunizationRecommendation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImmunizationRecommendation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ImmunizationRecommendation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r4b.ImmunizationRecommendation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationRecommendation)
	if !ok {
		return r4b.ImmunizationRecommendation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImmunizationRecommendation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadImplementationGuide(ctx context.Context, id string) (r4b.ImplementationGuide, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ImplementationGuide{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ImplementationGuide")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r4b.ImplementationGuide{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImplementationGuide)
	if !ok {
		return r4b.ImplementationGuide{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImplementationGuide" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadIngredient(ctx context.Context, id string) (r4b.Ingredient, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Ingredient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Ingredient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Ingredient", id)
	if err != nil {
		return r4b.Ingredient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Ingredient)
	if !ok {
		return r4b.Ingredient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Ingredient" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadInsurancePlan(ctx context.Context, id string) (r4b.InsurancePlan, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.InsurancePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for InsurancePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r4b.InsurancePlan{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.InsurancePlan)
	if !ok {
		return r4b.InsurancePlan{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "InsurancePlan" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadInvoice(ctx context.Context, id string) (r4b.Invoice, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Invoice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Invoice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Invoice", id)
	if err != nil {
		return r4b.Invoice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Invoice)
	if !ok {
		return r4b.Invoice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Invoice" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadLibrary(ctx context.Context, id string) (r4b.Library, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Library{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Library")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Library", id)
	if err != nil {
		return r4b.Library{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Library)
	if !ok {
		return r4b.Library{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Library" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadLinkage(ctx context.Context, id string) (r4b.Linkage, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Linkage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Linkage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Linkage", id)
	if err != nil {
		return r4b.Linkage{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Linkage)
	if !ok {
		return r4b.Linkage{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Linkage" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadList(ctx context.Context, id string) (r4b.List, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.List{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for List")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "List", id)
	if err != nil {
		return r4b.List{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.List)
	if !ok {
		return r4b.List{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "List" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadLocation(ctx context.Context, id string) (r4b.Location, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Location{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Location")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Location", id)
	if err != nil {
		return r4b.Location{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Location)
	if !ok {
		return r4b.Location{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Location" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadManufacturedItemDefinition(ctx context.Context, id string) (r4b.ManufacturedItemDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ManufacturedItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ManufacturedItemDefinition", id)
	if err != nil {
		return r4b.ManufacturedItemDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ManufacturedItemDefinition)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ManufacturedItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMeasure(ctx context.Context, id string) (r4b.Measure, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Measure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Measure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Measure", id)
	if err != nil {
		return r4b.Measure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Measure)
	if !ok {
		return r4b.Measure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Measure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMeasureReport(ctx context.Context, id string) (r4b.MeasureReport, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MeasureReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MeasureReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r4b.MeasureReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MeasureReport)
	if !ok {
		return r4b.MeasureReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MeasureReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedia(ctx context.Context, id string) (r4b.Media, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Media{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Media")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Media", id)
	if err != nil {
		return r4b.Media{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Media)
	if !ok {
		return r4b.Media{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Media" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedication(ctx context.Context, id string) (r4b.Medication, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Medication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Medication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Medication", id)
	if err != nil {
		return r4b.Medication{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Medication)
	if !ok {
		return r4b.Medication{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Medication" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationAdministration(ctx context.Context, id string) (r4b.MedicationAdministration, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationAdministration{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MedicationAdministration")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r4b.MedicationAdministration{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationAdministration)
	if !ok {
		return r4b.MedicationAdministration{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationAdministration" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationDispense(ctx context.Context, id string) (r4b.MedicationDispense, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationDispense{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MedicationDispense")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r4b.MedicationDispense{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationDispense)
	if !ok {
		return r4b.MedicationDispense{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationDispense" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationKnowledge(ctx context.Context, id string) (r4b.MedicationKnowledge, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationKnowledge{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MedicationKnowledge")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r4b.MedicationKnowledge{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationKnowledge)
	if !ok {
		return r4b.MedicationKnowledge{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationKnowledge" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationRequest(ctx context.Context, id string) (r4b.MedicationRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MedicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r4b.MedicationRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationRequest)
	if !ok {
		return r4b.MedicationRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicationStatement(ctx context.Context, id string) (r4b.MedicationStatement, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicationStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MedicationStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r4b.MedicationStatement{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationStatement)
	if !ok {
		return r4b.MedicationStatement{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMedicinalProductDefinition(ctx context.Context, id string) (r4b.MedicinalProductDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MedicinalProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MedicinalProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MedicinalProductDefinition", id)
	if err != nil {
		return r4b.MedicinalProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicinalProductDefinition)
	if !ok {
		return r4b.MedicinalProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicinalProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMessageDefinition(ctx context.Context, id string) (r4b.MessageDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MessageDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MessageDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r4b.MessageDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageDefinition)
	if !ok {
		return r4b.MessageDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MessageDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMessageHeader(ctx context.Context, id string) (r4b.MessageHeader, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MessageHeader{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MessageHeader")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r4b.MessageHeader{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageHeader)
	if !ok {
		return r4b.MessageHeader{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MessageHeader" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadMolecularSequence(ctx context.Context, id string) (r4b.MolecularSequence, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.MolecularSequence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for MolecularSequence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r4b.MolecularSequence{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MolecularSequence)
	if !ok {
		return r4b.MolecularSequence{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MolecularSequence" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadNamingSystem(ctx context.Context, id string) (r4b.NamingSystem, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.NamingSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for NamingSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r4b.NamingSystem{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NamingSystem)
	if !ok {
		return r4b.NamingSystem{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NamingSystem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadNutritionOrder(ctx context.Context, id string) (r4b.NutritionOrder, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.NutritionOrder{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for NutritionOrder")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r4b.NutritionOrder{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionOrder)
	if !ok {
		return r4b.NutritionOrder{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NutritionOrder" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadNutritionProduct(ctx context.Context, id string) (r4b.NutritionProduct, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.NutritionProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for NutritionProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "NutritionProduct", id)
	if err != nil {
		return r4b.NutritionProduct{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionProduct)
	if !ok {
		return r4b.NutritionProduct{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NutritionProduct" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadObservation(ctx context.Context, id string) (r4b.Observation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Observation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Observation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Observation", id)
	if err != nil {
		return r4b.Observation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Observation)
	if !ok {
		return r4b.Observation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Observation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadObservationDefinition(ctx context.Context, id string) (r4b.ObservationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ObservationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ObservationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r4b.ObservationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ObservationDefinition)
	if !ok {
		return r4b.ObservationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ObservationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOperationDefinition(ctx context.Context, id string) (r4b.OperationDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.OperationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for OperationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r4b.OperationDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationDefinition)
	if !ok {
		return r4b.OperationDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OperationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOperationOutcome(ctx context.Context, id string) (r4b.OperationOutcome, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.OperationOutcome{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for OperationOutcome")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r4b.OperationOutcome{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationOutcome)
	if !ok {
		return r4b.OperationOutcome{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OperationOutcome" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOrganization(ctx context.Context, id string) (r4b.Organization, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Organization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Organization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Organization", id)
	if err != nil {
		return r4b.Organization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Organization)
	if !ok {
		return r4b.Organization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Organization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadOrganizationAffiliation(ctx context.Context, id string) (r4b.OrganizationAffiliation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.OrganizationAffiliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for OrganizationAffiliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r4b.OrganizationAffiliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OrganizationAffiliation)
	if !ok {
		return r4b.OrganizationAffiliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OrganizationAffiliation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPackagedProductDefinition(ctx context.Context, id string) (r4b.PackagedProductDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PackagedProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for PackagedProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PackagedProductDefinition", id)
	if err != nil {
		return r4b.PackagedProductDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PackagedProductDefinition)
	if !ok {
		return r4b.PackagedProductDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PackagedProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadParameters(ctx context.Context, id string) (r4b.Parameters, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Parameters{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Parameters")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Parameters", id)
	if err != nil {
		return r4b.Parameters{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Parameters)
	if !ok {
		return r4b.Parameters{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Parameters" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPatient(ctx context.Context, id string) (r4b.Patient, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Patient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Patient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Patient", id)
	if err != nil {
		return r4b.Patient{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Patient)
	if !ok {
		return r4b.Patient{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Patient" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPaymentNotice(ctx context.Context, id string) (r4b.PaymentNotice, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PaymentNotice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for PaymentNotice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r4b.PaymentNotice{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentNotice)
	if !ok {
		return r4b.PaymentNotice{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PaymentNotice" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPaymentReconciliation(ctx context.Context, id string) (r4b.PaymentReconciliation, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PaymentReconciliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for PaymentReconciliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r4b.PaymentReconciliation{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentReconciliation)
	if !ok {
		return r4b.PaymentReconciliation{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PaymentReconciliation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPerson(ctx context.Context, id string) (r4b.Person, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Person{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Person")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Person", id)
	if err != nil {
		return r4b.Person{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Person)
	if !ok {
		return r4b.Person{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Person" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPlanDefinition(ctx context.Context, id string) (r4b.PlanDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PlanDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for PlanDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r4b.PlanDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PlanDefinition)
	if !ok {
		return r4b.PlanDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PlanDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPractitioner(ctx context.Context, id string) (r4b.Practitioner, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Practitioner{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Practitioner")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Practitioner", id)
	if err != nil {
		return r4b.Practitioner{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Practitioner)
	if !ok {
		return r4b.Practitioner{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Practitioner" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadPractitionerRole(ctx context.Context, id string) (r4b.PractitionerRole, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.PractitionerRole{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for PractitionerRole")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r4b.PractitionerRole{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PractitionerRole)
	if !ok {
		return r4b.PractitionerRole{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PractitionerRole" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadProcedure(ctx context.Context, id string) (r4b.Procedure, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Procedure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Procedure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Procedure", id)
	if err != nil {
		return r4b.Procedure{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Procedure)
	if !ok {
		return r4b.Procedure{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Procedure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadProvenance(ctx context.Context, id string) (r4b.Provenance, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Provenance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Provenance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Provenance", id)
	if err != nil {
		return r4b.Provenance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Provenance)
	if !ok {
		return r4b.Provenance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Provenance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaire(ctx context.Context, id string) (r4b.Questionnaire, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Questionnaire{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Questionnaire")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r4b.Questionnaire{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Questionnaire)
	if !ok {
		return r4b.Questionnaire{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Questionnaire" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadQuestionnaireResponse(ctx context.Context, id string) (r4b.QuestionnaireResponse, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.QuestionnaireResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for QuestionnaireResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r4b.QuestionnaireResponse{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.QuestionnaireResponse)
	if !ok {
		return r4b.QuestionnaireResponse{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "QuestionnaireResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRegulatedAuthorization(ctx context.Context, id string) (r4b.RegulatedAuthorization, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RegulatedAuthorization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for RegulatedAuthorization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RegulatedAuthorization", id)
	if err != nil {
		return r4b.RegulatedAuthorization{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RegulatedAuthorization)
	if !ok {
		return r4b.RegulatedAuthorization{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RegulatedAuthorization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRelatedPerson(ctx context.Context, id string) (r4b.RelatedPerson, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RelatedPerson{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for RelatedPerson")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r4b.RelatedPerson{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RelatedPerson)
	if !ok {
		return r4b.RelatedPerson{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RelatedPerson" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRequestGroup(ctx context.Context, id string) (r4b.RequestGroup, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RequestGroup{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for RequestGroup")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RequestGroup", id)
	if err != nil {
		return r4b.RequestGroup{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RequestGroup)
	if !ok {
		return r4b.RequestGroup{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RequestGroup" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchDefinition(ctx context.Context, id string) (r4b.ResearchDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ResearchDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchDefinition", id)
	if err != nil {
		return r4b.ResearchDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchDefinition)
	if !ok {
		return r4b.ResearchDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchElementDefinition(ctx context.Context, id string) (r4b.ResearchElementDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchElementDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ResearchElementDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchElementDefinition", id)
	if err != nil {
		return r4b.ResearchElementDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchElementDefinition)
	if !ok {
		return r4b.ResearchElementDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchElementDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchStudy(ctx context.Context, id string) (r4b.ResearchStudy, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ResearchStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r4b.ResearchStudy{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchStudy)
	if !ok {
		return r4b.ResearchStudy{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchStudy" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadResearchSubject(ctx context.Context, id string) (r4b.ResearchSubject, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ResearchSubject{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ResearchSubject")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r4b.ResearchSubject{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchSubject)
	if !ok {
		return r4b.ResearchSubject{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchSubject" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadRiskAssessment(ctx context.Context, id string) (r4b.RiskAssessment, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.RiskAssessment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for RiskAssessment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r4b.RiskAssessment{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RiskAssessment)
	if !ok {
		return r4b.RiskAssessment{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RiskAssessment" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSchedule(ctx context.Context, id string) (r4b.Schedule, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Schedule{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Schedule")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Schedule", id)
	if err != nil {
		return r4b.Schedule{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Schedule)
	if !ok {
		return r4b.Schedule{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Schedule" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSearchParameter(ctx context.Context, id string) (r4b.SearchParameter, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SearchParameter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for SearchParameter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r4b.SearchParameter{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SearchParameter)
	if !ok {
		return r4b.SearchParameter{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SearchParameter" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadServiceRequest(ctx context.Context, id string) (r4b.ServiceRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ServiceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ServiceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r4b.ServiceRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ServiceRequest)
	if !ok {
		return r4b.ServiceRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ServiceRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSlot(ctx context.Context, id string) (r4b.Slot, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Slot{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Slot")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Slot", id)
	if err != nil {
		return r4b.Slot{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Slot)
	if !ok {
		return r4b.Slot{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Slot" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSpecimen(ctx context.Context, id string) (r4b.Specimen, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Specimen{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Specimen")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Specimen", id)
	if err != nil {
		return r4b.Specimen{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Specimen)
	if !ok {
		return r4b.Specimen{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Specimen" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSpecimenDefinition(ctx context.Context, id string) (r4b.SpecimenDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SpecimenDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for SpecimenDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r4b.SpecimenDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SpecimenDefinition)
	if !ok {
		return r4b.SpecimenDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SpecimenDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadStructureDefinition(ctx context.Context, id string) (r4b.StructureDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.StructureDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for StructureDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r4b.StructureDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureDefinition)
	if !ok {
		return r4b.StructureDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "StructureDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadStructureMap(ctx context.Context, id string) (r4b.StructureMap, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.StructureMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for StructureMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "StructureMap", id)
	if err != nil {
		return r4b.StructureMap{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureMap)
	if !ok {
		return r4b.StructureMap{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "StructureMap" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubscription(ctx context.Context, id string) (r4b.Subscription, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Subscription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Subscription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Subscription", id)
	if err != nil {
		return r4b.Subscription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Subscription)
	if !ok {
		return r4b.Subscription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Subscription" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubscriptionStatus(ctx context.Context, id string) (r4b.SubscriptionStatus, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SubscriptionStatus{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for SubscriptionStatus")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubscriptionStatus", id)
	if err != nil {
		return r4b.SubscriptionStatus{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionStatus)
	if !ok {
		return r4b.SubscriptionStatus{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubscriptionStatus" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubscriptionTopic(ctx context.Context, id string) (r4b.SubscriptionTopic, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SubscriptionTopic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for SubscriptionTopic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubscriptionTopic", id)
	if err != nil {
		return r4b.SubscriptionTopic{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionTopic)
	if !ok {
		return r4b.SubscriptionTopic{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubscriptionTopic" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstance(ctx context.Context, id string) (r4b.Substance, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Substance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Substance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Substance", id)
	if err != nil {
		return r4b.Substance{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Substance)
	if !ok {
		return r4b.Substance{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Substance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSubstanceDefinition(ctx context.Context, id string) (r4b.SubstanceDefinition, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SubstanceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for SubstanceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SubstanceDefinition", id)
	if err != nil {
		return r4b.SubstanceDefinition{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubstanceDefinition)
	if !ok {
		return r4b.SubstanceDefinition{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubstanceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSupplyDelivery(ctx context.Context, id string) (r4b.SupplyDelivery, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SupplyDelivery{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for SupplyDelivery")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r4b.SupplyDelivery{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyDelivery)
	if !ok {
		return r4b.SupplyDelivery{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SupplyDelivery" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadSupplyRequest(ctx context.Context, id string) (r4b.SupplyRequest, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.SupplyRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for SupplyRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r4b.SupplyRequest{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyRequest)
	if !ok {
		return r4b.SupplyRequest{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SupplyRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTask(ctx context.Context, id string) (r4b.Task, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.Task{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for Task")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "Task", id)
	if err != nil {
		return r4b.Task{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Task)
	if !ok {
		return r4b.Task{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Task" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTerminologyCapabilities(ctx context.Context, id string) (r4b.TerminologyCapabilities, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.TerminologyCapabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for TerminologyCapabilities")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r4b.TerminologyCapabilities{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TerminologyCapabilities)
	if !ok {
		return r4b.TerminologyCapabilities{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TerminologyCapabilities" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTestReport(ctx context.Context, id string) (r4b.TestReport, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.TestReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for TestReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "TestReport", id)
	if err != nil {
		return r4b.TestReport{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestReport)
	if !ok {
		return r4b.TestReport{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TestReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadTestScript(ctx context.Context, id string) (r4b.TestScript, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.TestScript{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for TestScript")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "TestScript", id)
	if err != nil {
		return r4b.TestScript{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestScript)
	if !ok {
		return r4b.TestScript{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TestScript" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadValueSet(ctx context.Context, id string) (r4b.ValueSet, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.ValueSet{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for ValueSet")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "ValueSet", id)
	if err != nil {
		return r4b.ValueSet{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ValueSet)
	if !ok {
		return r4b.ValueSet{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ValueSet" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadVerificationResult(ctx context.Context, id string) (r4b.VerificationResult, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.VerificationResult{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for VerificationResult")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r4b.VerificationResult{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VerificationResult)
	if !ok {
		return r4b.VerificationResult{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "VerificationResult" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) ReadVisionPrescription(ctx context.Context, id string) (r4b.VisionPrescription, error) {
	g, ok := w.Generic.(capabilities.GenericRead)
	if !ok {
		return r4b.VisionPrescription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Read not implemented for VisionPrescription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r4b.VisionPrescription{}, err
	}
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VisionPrescription)
	if !ok {
		return r4b.VisionPrescription{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "VisionPrescription" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return r, nil
}
func (w Concrete) UpdateAccount(ctx context.Context, resource r4b.Account) (update.Result[r4b.Account], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Account]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Account")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Account]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Account)
	if !ok {
		return update.Result[r4b.Account]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Account" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Account]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesAccount(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Account"], err
}
func (w Concrete) UpdateActivityDefinition(ctx context.Context, resource r4b.ActivityDefinition) (update.Result[r4b.ActivityDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ActivityDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ActivityDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ActivityDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ActivityDefinition)
	if !ok {
		return update.Result[r4b.ActivityDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ActivityDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ActivityDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesActivityDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ActivityDefinition"], err
}
func (w Concrete) UpdateAdministrableProductDefinition(ctx context.Context, resource r4b.AdministrableProductDefinition) (update.Result[r4b.AdministrableProductDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.AdministrableProductDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for AdministrableProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AdministrableProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdministrableProductDefinition)
	if !ok {
		return update.Result[r4b.AdministrableProductDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AdministrableProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.AdministrableProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesAdministrableProductDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["AdministrableProductDefinition"], err
}
func (w Concrete) UpdateAdverseEvent(ctx context.Context, resource r4b.AdverseEvent) (update.Result[r4b.AdverseEvent], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.AdverseEvent]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for AdverseEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AdverseEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AdverseEvent)
	if !ok {
		return update.Result[r4b.AdverseEvent]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AdverseEvent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.AdverseEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesAdverseEvent(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["AdverseEvent"], err
}
func (w Concrete) UpdateAllergyIntolerance(ctx context.Context, resource r4b.AllergyIntolerance) (update.Result[r4b.AllergyIntolerance], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.AllergyIntolerance]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for AllergyIntolerance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AllergyIntolerance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AllergyIntolerance)
	if !ok {
		return update.Result[r4b.AllergyIntolerance]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AllergyIntolerance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.AllergyIntolerance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesAllergyIntolerance(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["AllergyIntolerance"], err
}
func (w Concrete) UpdateAppointment(ctx context.Context, resource r4b.Appointment) (update.Result[r4b.Appointment], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Appointment]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Appointment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Appointment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Appointment)
	if !ok {
		return update.Result[r4b.Appointment]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Appointment" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Appointment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesAppointment(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Appointment"], err
}
func (w Concrete) UpdateAppointmentResponse(ctx context.Context, resource r4b.AppointmentResponse) (update.Result[r4b.AppointmentResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.AppointmentResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for AppointmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AppointmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AppointmentResponse)
	if !ok {
		return update.Result[r4b.AppointmentResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AppointmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.AppointmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesAppointmentResponse(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["AppointmentResponse"], err
}
func (w Concrete) UpdateAuditEvent(ctx context.Context, resource r4b.AuditEvent) (update.Result[r4b.AuditEvent], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.AuditEvent]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for AuditEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AuditEvent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.AuditEvent)
	if !ok {
		return update.Result[r4b.AuditEvent]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "AuditEvent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.AuditEvent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesAuditEvent(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["AuditEvent"], err
}
func (w Concrete) UpdateBasic(ctx context.Context, resource r4b.Basic) (update.Result[r4b.Basic], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Basic]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Basic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Basic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Basic)
	if !ok {
		return update.Result[r4b.Basic]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Basic" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Basic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesBasic(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Basic"], err
}
func (w Concrete) UpdateBinary(ctx context.Context, resource r4b.Binary) (update.Result[r4b.Binary], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Binary]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Binary")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Binary]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Binary)
	if !ok {
		return update.Result[r4b.Binary]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Binary" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Binary]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesBinary(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Binary"], err
}
func (w Concrete) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r4b.BiologicallyDerivedProduct) (update.Result[r4b.BiologicallyDerivedProduct], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.BiologicallyDerivedProduct]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for BiologicallyDerivedProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.BiologicallyDerivedProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return update.Result[r4b.BiologicallyDerivedProduct]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "BiologicallyDerivedProduct" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.BiologicallyDerivedProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesBiologicallyDerivedProduct(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["BiologicallyDerivedProduct"], err
}
func (w Concrete) UpdateBodyStructure(ctx context.Context, resource r4b.BodyStructure) (update.Result[r4b.BodyStructure], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.BodyStructure]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for BodyStructure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.BodyStructure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.BodyStructure)
	if !ok {
		return update.Result[r4b.BodyStructure]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "BodyStructure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.BodyStructure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesBodyStructure(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["BodyStructure"], err
}
func (w Concrete) UpdateBundle(ctx context.Context, resource r4b.Bundle) (update.Result[r4b.Bundle], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Bundle]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Bundle")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Bundle]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Bundle)
	if !ok {
		return update.Result[r4b.Bundle]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Bundle" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Bundle]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesBundle(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Bundle"], err
}
func (w Concrete) UpdateCapabilityStatement(ctx context.Context, resource r4b.CapabilityStatement) (update.Result[r4b.CapabilityStatement], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CapabilityStatement]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CapabilityStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CapabilityStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CapabilityStatement)
	if !ok {
		return update.Result[r4b.CapabilityStatement]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CapabilityStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CapabilityStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCapabilityStatement(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CapabilityStatement"], err
}
func (w Concrete) UpdateCarePlan(ctx context.Context, resource r4b.CarePlan) (update.Result[r4b.CarePlan], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CarePlan]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CarePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CarePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CarePlan)
	if !ok {
		return update.Result[r4b.CarePlan]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CarePlan" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CarePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCarePlan(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CarePlan"], err
}
func (w Concrete) UpdateCareTeam(ctx context.Context, resource r4b.CareTeam) (update.Result[r4b.CareTeam], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CareTeam]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CareTeam")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CareTeam]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CareTeam)
	if !ok {
		return update.Result[r4b.CareTeam]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CareTeam" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CareTeam]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCareTeam(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CareTeam"], err
}
func (w Concrete) UpdateCatalogEntry(ctx context.Context, resource r4b.CatalogEntry) (update.Result[r4b.CatalogEntry], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CatalogEntry]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CatalogEntry")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CatalogEntry]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CatalogEntry)
	if !ok {
		return update.Result[r4b.CatalogEntry]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CatalogEntry" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CatalogEntry]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCatalogEntry(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CatalogEntry"], err
}
func (w Concrete) UpdateChargeItem(ctx context.Context, resource r4b.ChargeItem) (update.Result[r4b.ChargeItem], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ChargeItem]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ChargeItem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ChargeItem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItem)
	if !ok {
		return update.Result[r4b.ChargeItem]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ChargeItem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ChargeItem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesChargeItem(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ChargeItem"], err
}
func (w Concrete) UpdateChargeItemDefinition(ctx context.Context, resource r4b.ChargeItemDefinition) (update.Result[r4b.ChargeItemDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ChargeItemDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ChargeItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ChargeItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ChargeItemDefinition)
	if !ok {
		return update.Result[r4b.ChargeItemDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ChargeItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ChargeItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesChargeItemDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ChargeItemDefinition"], err
}
func (w Concrete) UpdateCitation(ctx context.Context, resource r4b.Citation) (update.Result[r4b.Citation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Citation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Citation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Citation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Citation)
	if !ok {
		return update.Result[r4b.Citation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Citation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Citation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCitation(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Citation"], err
}
func (w Concrete) UpdateClaim(ctx context.Context, resource r4b.Claim) (update.Result[r4b.Claim], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Claim]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Claim")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Claim]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Claim)
	if !ok {
		return update.Result[r4b.Claim]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Claim" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Claim]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesClaim(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Claim"], err
}
func (w Concrete) UpdateClaimResponse(ctx context.Context, resource r4b.ClaimResponse) (update.Result[r4b.ClaimResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ClaimResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ClaimResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ClaimResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClaimResponse)
	if !ok {
		return update.Result[r4b.ClaimResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClaimResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ClaimResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesClaimResponse(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ClaimResponse"], err
}
func (w Concrete) UpdateClinicalImpression(ctx context.Context, resource r4b.ClinicalImpression) (update.Result[r4b.ClinicalImpression], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ClinicalImpression]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ClinicalImpression")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ClinicalImpression]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalImpression)
	if !ok {
		return update.Result[r4b.ClinicalImpression]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClinicalImpression" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ClinicalImpression]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesClinicalImpression(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ClinicalImpression"], err
}
func (w Concrete) UpdateClinicalUseDefinition(ctx context.Context, resource r4b.ClinicalUseDefinition) (update.Result[r4b.ClinicalUseDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ClinicalUseDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ClinicalUseDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ClinicalUseDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ClinicalUseDefinition)
	if !ok {
		return update.Result[r4b.ClinicalUseDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ClinicalUseDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ClinicalUseDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesClinicalUseDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ClinicalUseDefinition"], err
}
func (w Concrete) UpdateCodeSystem(ctx context.Context, resource r4b.CodeSystem) (update.Result[r4b.CodeSystem], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CodeSystem]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CodeSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CodeSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CodeSystem)
	if !ok {
		return update.Result[r4b.CodeSystem]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CodeSystem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CodeSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCodeSystem(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CodeSystem"], err
}
func (w Concrete) UpdateCommunication(ctx context.Context, resource r4b.Communication) (update.Result[r4b.Communication], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Communication]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Communication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Communication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Communication)
	if !ok {
		return update.Result[r4b.Communication]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Communication" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Communication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCommunication(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Communication"], err
}
func (w Concrete) UpdateCommunicationRequest(ctx context.Context, resource r4b.CommunicationRequest) (update.Result[r4b.CommunicationRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CommunicationRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CommunicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CommunicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CommunicationRequest)
	if !ok {
		return update.Result[r4b.CommunicationRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CommunicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CommunicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCommunicationRequest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CommunicationRequest"], err
}
func (w Concrete) UpdateCompartmentDefinition(ctx context.Context, resource r4b.CompartmentDefinition) (update.Result[r4b.CompartmentDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CompartmentDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CompartmentDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CompartmentDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CompartmentDefinition)
	if !ok {
		return update.Result[r4b.CompartmentDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CompartmentDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CompartmentDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCompartmentDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CompartmentDefinition"], err
}
func (w Concrete) UpdateComposition(ctx context.Context, resource r4b.Composition) (update.Result[r4b.Composition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Composition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Composition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Composition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Composition)
	if !ok {
		return update.Result[r4b.Composition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Composition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Composition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesComposition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Composition"], err
}
func (w Concrete) UpdateConceptMap(ctx context.Context, resource r4b.ConceptMap) (update.Result[r4b.ConceptMap], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ConceptMap]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ConceptMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ConceptMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ConceptMap)
	if !ok {
		return update.Result[r4b.ConceptMap]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ConceptMap" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ConceptMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesConceptMap(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ConceptMap"], err
}
func (w Concrete) UpdateCondition(ctx context.Context, resource r4b.Condition) (update.Result[r4b.Condition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Condition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Condition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Condition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Condition)
	if !ok {
		return update.Result[r4b.Condition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Condition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Condition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCondition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Condition"], err
}
func (w Concrete) UpdateConsent(ctx context.Context, resource r4b.Consent) (update.Result[r4b.Consent], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Consent]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Consent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Consent]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Consent)
	if !ok {
		return update.Result[r4b.Consent]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Consent" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Consent]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesConsent(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Consent"], err
}
func (w Concrete) UpdateContract(ctx context.Context, resource r4b.Contract) (update.Result[r4b.Contract], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Contract]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Contract")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Contract]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Contract)
	if !ok {
		return update.Result[r4b.Contract]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Contract" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Contract]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesContract(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Contract"], err
}
func (w Concrete) UpdateCoverage(ctx context.Context, resource r4b.Coverage) (update.Result[r4b.Coverage], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Coverage]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Coverage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Coverage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Coverage)
	if !ok {
		return update.Result[r4b.Coverage]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Coverage" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Coverage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCoverage(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Coverage"], err
}
func (w Concrete) UpdateCoverageEligibilityRequest(ctx context.Context, resource r4b.CoverageEligibilityRequest) (update.Result[r4b.CoverageEligibilityRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CoverageEligibilityRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CoverageEligibilityRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CoverageEligibilityRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityRequest)
	if !ok {
		return update.Result[r4b.CoverageEligibilityRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CoverageEligibilityRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CoverageEligibilityRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCoverageEligibilityRequest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CoverageEligibilityRequest"], err
}
func (w Concrete) UpdateCoverageEligibilityResponse(ctx context.Context, resource r4b.CoverageEligibilityResponse) (update.Result[r4b.CoverageEligibilityResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.CoverageEligibilityResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for CoverageEligibilityResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CoverageEligibilityResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.CoverageEligibilityResponse)
	if !ok {
		return update.Result[r4b.CoverageEligibilityResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "CoverageEligibilityResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.CoverageEligibilityResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesCoverageEligibilityResponse(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["CoverageEligibilityResponse"], err
}
func (w Concrete) UpdateDetectedIssue(ctx context.Context, resource r4b.DetectedIssue) (update.Result[r4b.DetectedIssue], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DetectedIssue]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DetectedIssue")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DetectedIssue]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DetectedIssue)
	if !ok {
		return update.Result[r4b.DetectedIssue]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DetectedIssue" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DetectedIssue]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDetectedIssue(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DetectedIssue"], err
}
func (w Concrete) UpdateDevice(ctx context.Context, resource r4b.Device) (update.Result[r4b.Device], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Device]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Device")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Device]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Device)
	if !ok {
		return update.Result[r4b.Device]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Device" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Device]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDevice(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Device"], err
}
func (w Concrete) UpdateDeviceDefinition(ctx context.Context, resource r4b.DeviceDefinition) (update.Result[r4b.DeviceDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DeviceDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DeviceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceDefinition)
	if !ok {
		return update.Result[r4b.DeviceDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DeviceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDeviceDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DeviceDefinition"], err
}
func (w Concrete) UpdateDeviceMetric(ctx context.Context, resource r4b.DeviceMetric) (update.Result[r4b.DeviceMetric], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DeviceMetric]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DeviceMetric")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceMetric]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceMetric)
	if !ok {
		return update.Result[r4b.DeviceMetric]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceMetric" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DeviceMetric]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDeviceMetric(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DeviceMetric"], err
}
func (w Concrete) UpdateDeviceRequest(ctx context.Context, resource r4b.DeviceRequest) (update.Result[r4b.DeviceRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DeviceRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DeviceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceRequest)
	if !ok {
		return update.Result[r4b.DeviceRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DeviceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDeviceRequest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DeviceRequest"], err
}
func (w Concrete) UpdateDeviceUseStatement(ctx context.Context, resource r4b.DeviceUseStatement) (update.Result[r4b.DeviceUseStatement], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DeviceUseStatement]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DeviceUseStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceUseStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DeviceUseStatement)
	if !ok {
		return update.Result[r4b.DeviceUseStatement]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DeviceUseStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DeviceUseStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDeviceUseStatement(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DeviceUseStatement"], err
}
func (w Concrete) UpdateDiagnosticReport(ctx context.Context, resource r4b.DiagnosticReport) (update.Result[r4b.DiagnosticReport], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DiagnosticReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DiagnosticReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DiagnosticReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DiagnosticReport)
	if !ok {
		return update.Result[r4b.DiagnosticReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DiagnosticReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DiagnosticReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDiagnosticReport(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DiagnosticReport"], err
}
func (w Concrete) UpdateDocumentManifest(ctx context.Context, resource r4b.DocumentManifest) (update.Result[r4b.DocumentManifest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DocumentManifest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DocumentManifest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DocumentManifest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentManifest)
	if !ok {
		return update.Result[r4b.DocumentManifest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DocumentManifest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DocumentManifest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDocumentManifest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DocumentManifest"], err
}
func (w Concrete) UpdateDocumentReference(ctx context.Context, resource r4b.DocumentReference) (update.Result[r4b.DocumentReference], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.DocumentReference]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for DocumentReference")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DocumentReference]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.DocumentReference)
	if !ok {
		return update.Result[r4b.DocumentReference]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "DocumentReference" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.DocumentReference]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesDocumentReference(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["DocumentReference"], err
}
func (w Concrete) UpdateEncounter(ctx context.Context, resource r4b.Encounter) (update.Result[r4b.Encounter], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Encounter]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Encounter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Encounter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Encounter)
	if !ok {
		return update.Result[r4b.Encounter]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Encounter" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Encounter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEncounter(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Encounter"], err
}
func (w Concrete) UpdateEndpoint(ctx context.Context, resource r4b.Endpoint) (update.Result[r4b.Endpoint], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Endpoint]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Endpoint")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Endpoint]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Endpoint)
	if !ok {
		return update.Result[r4b.Endpoint]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Endpoint" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Endpoint]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEndpoint(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Endpoint"], err
}
func (w Concrete) UpdateEnrollmentRequest(ctx context.Context, resource r4b.EnrollmentRequest) (update.Result[r4b.EnrollmentRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.EnrollmentRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for EnrollmentRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EnrollmentRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentRequest)
	if !ok {
		return update.Result[r4b.EnrollmentRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EnrollmentRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.EnrollmentRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEnrollmentRequest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["EnrollmentRequest"], err
}
func (w Concrete) UpdateEnrollmentResponse(ctx context.Context, resource r4b.EnrollmentResponse) (update.Result[r4b.EnrollmentResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.EnrollmentResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for EnrollmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EnrollmentResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EnrollmentResponse)
	if !ok {
		return update.Result[r4b.EnrollmentResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EnrollmentResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.EnrollmentResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEnrollmentResponse(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["EnrollmentResponse"], err
}
func (w Concrete) UpdateEpisodeOfCare(ctx context.Context, resource r4b.EpisodeOfCare) (update.Result[r4b.EpisodeOfCare], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.EpisodeOfCare]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for EpisodeOfCare")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EpisodeOfCare]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EpisodeOfCare)
	if !ok {
		return update.Result[r4b.EpisodeOfCare]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EpisodeOfCare" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.EpisodeOfCare]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEpisodeOfCare(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["EpisodeOfCare"], err
}
func (w Concrete) UpdateEventDefinition(ctx context.Context, resource r4b.EventDefinition) (update.Result[r4b.EventDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.EventDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for EventDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EventDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EventDefinition)
	if !ok {
		return update.Result[r4b.EventDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EventDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.EventDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEventDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["EventDefinition"], err
}
func (w Concrete) UpdateEvidence(ctx context.Context, resource r4b.Evidence) (update.Result[r4b.Evidence], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Evidence]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Evidence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Evidence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Evidence)
	if !ok {
		return update.Result[r4b.Evidence]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Evidence" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Evidence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEvidence(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Evidence"], err
}
func (w Concrete) UpdateEvidenceReport(ctx context.Context, resource r4b.EvidenceReport) (update.Result[r4b.EvidenceReport], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.EvidenceReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for EvidenceReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EvidenceReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceReport)
	if !ok {
		return update.Result[r4b.EvidenceReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EvidenceReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.EvidenceReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEvidenceReport(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["EvidenceReport"], err
}
func (w Concrete) UpdateEvidenceVariable(ctx context.Context, resource r4b.EvidenceVariable) (update.Result[r4b.EvidenceVariable], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.EvidenceVariable]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for EvidenceVariable")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EvidenceVariable]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.EvidenceVariable)
	if !ok {
		return update.Result[r4b.EvidenceVariable]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "EvidenceVariable" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.EvidenceVariable]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesEvidenceVariable(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["EvidenceVariable"], err
}
func (w Concrete) UpdateExampleScenario(ctx context.Context, resource r4b.ExampleScenario) (update.Result[r4b.ExampleScenario], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ExampleScenario]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ExampleScenario")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ExampleScenario]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExampleScenario)
	if !ok {
		return update.Result[r4b.ExampleScenario]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ExampleScenario" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ExampleScenario]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesExampleScenario(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ExampleScenario"], err
}
func (w Concrete) UpdateExplanationOfBenefit(ctx context.Context, resource r4b.ExplanationOfBenefit) (update.Result[r4b.ExplanationOfBenefit], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ExplanationOfBenefit]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ExplanationOfBenefit")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ExplanationOfBenefit]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ExplanationOfBenefit)
	if !ok {
		return update.Result[r4b.ExplanationOfBenefit]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ExplanationOfBenefit" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ExplanationOfBenefit]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesExplanationOfBenefit(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ExplanationOfBenefit"], err
}
func (w Concrete) UpdateFamilyMemberHistory(ctx context.Context, resource r4b.FamilyMemberHistory) (update.Result[r4b.FamilyMemberHistory], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.FamilyMemberHistory]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for FamilyMemberHistory")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.FamilyMemberHistory]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.FamilyMemberHistory)
	if !ok {
		return update.Result[r4b.FamilyMemberHistory]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "FamilyMemberHistory" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.FamilyMemberHistory]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesFamilyMemberHistory(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["FamilyMemberHistory"], err
}
func (w Concrete) UpdateFlag(ctx context.Context, resource r4b.Flag) (update.Result[r4b.Flag], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Flag]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Flag")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Flag]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Flag)
	if !ok {
		return update.Result[r4b.Flag]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Flag" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Flag]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesFlag(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Flag"], err
}
func (w Concrete) UpdateGoal(ctx context.Context, resource r4b.Goal) (update.Result[r4b.Goal], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Goal]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Goal")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Goal]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Goal)
	if !ok {
		return update.Result[r4b.Goal]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Goal" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Goal]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesGoal(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Goal"], err
}
func (w Concrete) UpdateGraphDefinition(ctx context.Context, resource r4b.GraphDefinition) (update.Result[r4b.GraphDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.GraphDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for GraphDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.GraphDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GraphDefinition)
	if !ok {
		return update.Result[r4b.GraphDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "GraphDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.GraphDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesGraphDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["GraphDefinition"], err
}
func (w Concrete) UpdateGroup(ctx context.Context, resource r4b.Group) (update.Result[r4b.Group], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Group]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Group")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Group]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Group)
	if !ok {
		return update.Result[r4b.Group]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Group" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Group]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesGroup(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Group"], err
}
func (w Concrete) UpdateGuidanceResponse(ctx context.Context, resource r4b.GuidanceResponse) (update.Result[r4b.GuidanceResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.GuidanceResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for GuidanceResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.GuidanceResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.GuidanceResponse)
	if !ok {
		return update.Result[r4b.GuidanceResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "GuidanceResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.GuidanceResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesGuidanceResponse(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["GuidanceResponse"], err
}
func (w Concrete) UpdateHealthcareService(ctx context.Context, resource r4b.HealthcareService) (update.Result[r4b.HealthcareService], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.HealthcareService]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for HealthcareService")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.HealthcareService]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.HealthcareService)
	if !ok {
		return update.Result[r4b.HealthcareService]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "HealthcareService" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.HealthcareService]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesHealthcareService(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["HealthcareService"], err
}
func (w Concrete) UpdateImagingStudy(ctx context.Context, resource r4b.ImagingStudy) (update.Result[r4b.ImagingStudy], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ImagingStudy]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ImagingStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImagingStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImagingStudy)
	if !ok {
		return update.Result[r4b.ImagingStudy]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImagingStudy" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ImagingStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesImagingStudy(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ImagingStudy"], err
}
func (w Concrete) UpdateImmunization(ctx context.Context, resource r4b.Immunization) (update.Result[r4b.Immunization], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Immunization]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Immunization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Immunization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Immunization)
	if !ok {
		return update.Result[r4b.Immunization]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Immunization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Immunization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesImmunization(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Immunization"], err
}
func (w Concrete) UpdateImmunizationEvaluation(ctx context.Context, resource r4b.ImmunizationEvaluation) (update.Result[r4b.ImmunizationEvaluation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ImmunizationEvaluation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ImmunizationEvaluation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImmunizationEvaluation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationEvaluation)
	if !ok {
		return update.Result[r4b.ImmunizationEvaluation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImmunizationEvaluation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ImmunizationEvaluation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesImmunizationEvaluation(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ImmunizationEvaluation"], err
}
func (w Concrete) UpdateImmunizationRecommendation(ctx context.Context, resource r4b.ImmunizationRecommendation) (update.Result[r4b.ImmunizationRecommendation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ImmunizationRecommendation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ImmunizationRecommendation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImmunizationRecommendation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImmunizationRecommendation)
	if !ok {
		return update.Result[r4b.ImmunizationRecommendation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImmunizationRecommendation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ImmunizationRecommendation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesImmunizationRecommendation(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ImmunizationRecommendation"], err
}
func (w Concrete) UpdateImplementationGuide(ctx context.Context, resource r4b.ImplementationGuide) (update.Result[r4b.ImplementationGuide], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ImplementationGuide]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ImplementationGuide")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImplementationGuide]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ImplementationGuide)
	if !ok {
		return update.Result[r4b.ImplementationGuide]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ImplementationGuide" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ImplementationGuide]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesImplementationGuide(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ImplementationGuide"], err
}
func (w Concrete) UpdateIngredient(ctx context.Context, resource r4b.Ingredient) (update.Result[r4b.Ingredient], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Ingredient]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Ingredient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Ingredient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Ingredient)
	if !ok {
		return update.Result[r4b.Ingredient]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Ingredient" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Ingredient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesIngredient(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Ingredient"], err
}
func (w Concrete) UpdateInsurancePlan(ctx context.Context, resource r4b.InsurancePlan) (update.Result[r4b.InsurancePlan], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.InsurancePlan]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for InsurancePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.InsurancePlan]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.InsurancePlan)
	if !ok {
		return update.Result[r4b.InsurancePlan]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "InsurancePlan" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.InsurancePlan]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesInsurancePlan(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["InsurancePlan"], err
}
func (w Concrete) UpdateInvoice(ctx context.Context, resource r4b.Invoice) (update.Result[r4b.Invoice], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Invoice]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Invoice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Invoice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Invoice)
	if !ok {
		return update.Result[r4b.Invoice]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Invoice" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Invoice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesInvoice(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Invoice"], err
}
func (w Concrete) UpdateLibrary(ctx context.Context, resource r4b.Library) (update.Result[r4b.Library], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Library]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Library")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Library]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Library)
	if !ok {
		return update.Result[r4b.Library]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Library" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Library]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesLibrary(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Library"], err
}
func (w Concrete) UpdateLinkage(ctx context.Context, resource r4b.Linkage) (update.Result[r4b.Linkage], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Linkage]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Linkage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Linkage]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Linkage)
	if !ok {
		return update.Result[r4b.Linkage]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Linkage" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Linkage]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesLinkage(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Linkage"], err
}
func (w Concrete) UpdateList(ctx context.Context, resource r4b.List) (update.Result[r4b.List], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.List]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for List")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.List]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.List)
	if !ok {
		return update.Result[r4b.List]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "List" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.List]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesList(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["List"], err
}
func (w Concrete) UpdateLocation(ctx context.Context, resource r4b.Location) (update.Result[r4b.Location], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Location]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Location")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Location]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Location)
	if !ok {
		return update.Result[r4b.Location]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Location" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Location]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesLocation(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Location"], err
}
func (w Concrete) UpdateManufacturedItemDefinition(ctx context.Context, resource r4b.ManufacturedItemDefinition) (update.Result[r4b.ManufacturedItemDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ManufacturedItemDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ManufacturedItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ManufacturedItemDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ManufacturedItemDefinition)
	if !ok {
		return update.Result[r4b.ManufacturedItemDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ManufacturedItemDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ManufacturedItemDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesManufacturedItemDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ManufacturedItemDefinition"], err
}
func (w Concrete) UpdateMeasure(ctx context.Context, resource r4b.Measure) (update.Result[r4b.Measure], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Measure]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Measure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Measure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Measure)
	if !ok {
		return update.Result[r4b.Measure]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Measure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Measure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMeasure(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Measure"], err
}
func (w Concrete) UpdateMeasureReport(ctx context.Context, resource r4b.MeasureReport) (update.Result[r4b.MeasureReport], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MeasureReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MeasureReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MeasureReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MeasureReport)
	if !ok {
		return update.Result[r4b.MeasureReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MeasureReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MeasureReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMeasureReport(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MeasureReport"], err
}
func (w Concrete) UpdateMedia(ctx context.Context, resource r4b.Media) (update.Result[r4b.Media], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Media]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Media")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Media]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Media)
	if !ok {
		return update.Result[r4b.Media]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Media" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Media]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedia(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Media"], err
}
func (w Concrete) UpdateMedication(ctx context.Context, resource r4b.Medication) (update.Result[r4b.Medication], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Medication]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Medication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Medication]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Medication)
	if !ok {
		return update.Result[r4b.Medication]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Medication" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Medication]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedication(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Medication"], err
}
func (w Concrete) UpdateMedicationAdministration(ctx context.Context, resource r4b.MedicationAdministration) (update.Result[r4b.MedicationAdministration], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MedicationAdministration]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MedicationAdministration")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationAdministration]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationAdministration)
	if !ok {
		return update.Result[r4b.MedicationAdministration]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationAdministration" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MedicationAdministration]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedicationAdministration(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MedicationAdministration"], err
}
func (w Concrete) UpdateMedicationDispense(ctx context.Context, resource r4b.MedicationDispense) (update.Result[r4b.MedicationDispense], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MedicationDispense]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MedicationDispense")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationDispense]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationDispense)
	if !ok {
		return update.Result[r4b.MedicationDispense]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationDispense" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MedicationDispense]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedicationDispense(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MedicationDispense"], err
}
func (w Concrete) UpdateMedicationKnowledge(ctx context.Context, resource r4b.MedicationKnowledge) (update.Result[r4b.MedicationKnowledge], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MedicationKnowledge]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MedicationKnowledge")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationKnowledge]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationKnowledge)
	if !ok {
		return update.Result[r4b.MedicationKnowledge]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationKnowledge" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MedicationKnowledge]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedicationKnowledge(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MedicationKnowledge"], err
}
func (w Concrete) UpdateMedicationRequest(ctx context.Context, resource r4b.MedicationRequest) (update.Result[r4b.MedicationRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MedicationRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MedicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationRequest)
	if !ok {
		return update.Result[r4b.MedicationRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MedicationRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedicationRequest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MedicationRequest"], err
}
func (w Concrete) UpdateMedicationStatement(ctx context.Context, resource r4b.MedicationStatement) (update.Result[r4b.MedicationStatement], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MedicationStatement]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MedicationStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationStatement]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicationStatement)
	if !ok {
		return update.Result[r4b.MedicationStatement]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicationStatement" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MedicationStatement]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedicationStatement(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MedicationStatement"], err
}
func (w Concrete) UpdateMedicinalProductDefinition(ctx context.Context, resource r4b.MedicinalProductDefinition) (update.Result[r4b.MedicinalProductDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MedicinalProductDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MedicinalProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicinalProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MedicinalProductDefinition)
	if !ok {
		return update.Result[r4b.MedicinalProductDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MedicinalProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MedicinalProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMedicinalProductDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MedicinalProductDefinition"], err
}
func (w Concrete) UpdateMessageDefinition(ctx context.Context, resource r4b.MessageDefinition) (update.Result[r4b.MessageDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MessageDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MessageDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MessageDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageDefinition)
	if !ok {
		return update.Result[r4b.MessageDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MessageDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MessageDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMessageDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MessageDefinition"], err
}
func (w Concrete) UpdateMessageHeader(ctx context.Context, resource r4b.MessageHeader) (update.Result[r4b.MessageHeader], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MessageHeader]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MessageHeader")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MessageHeader]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MessageHeader)
	if !ok {
		return update.Result[r4b.MessageHeader]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MessageHeader" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MessageHeader]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMessageHeader(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MessageHeader"], err
}
func (w Concrete) UpdateMolecularSequence(ctx context.Context, resource r4b.MolecularSequence) (update.Result[r4b.MolecularSequence], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.MolecularSequence]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for MolecularSequence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MolecularSequence]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.MolecularSequence)
	if !ok {
		return update.Result[r4b.MolecularSequence]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "MolecularSequence" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.MolecularSequence]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesMolecularSequence(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["MolecularSequence"], err
}
func (w Concrete) UpdateNamingSystem(ctx context.Context, resource r4b.NamingSystem) (update.Result[r4b.NamingSystem], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.NamingSystem]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for NamingSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.NamingSystem]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NamingSystem)
	if !ok {
		return update.Result[r4b.NamingSystem]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NamingSystem" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.NamingSystem]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesNamingSystem(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["NamingSystem"], err
}
func (w Concrete) UpdateNutritionOrder(ctx context.Context, resource r4b.NutritionOrder) (update.Result[r4b.NutritionOrder], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.NutritionOrder]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for NutritionOrder")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.NutritionOrder]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionOrder)
	if !ok {
		return update.Result[r4b.NutritionOrder]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NutritionOrder" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.NutritionOrder]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesNutritionOrder(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["NutritionOrder"], err
}
func (w Concrete) UpdateNutritionProduct(ctx context.Context, resource r4b.NutritionProduct) (update.Result[r4b.NutritionProduct], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.NutritionProduct]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for NutritionProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.NutritionProduct]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.NutritionProduct)
	if !ok {
		return update.Result[r4b.NutritionProduct]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "NutritionProduct" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.NutritionProduct]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesNutritionProduct(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["NutritionProduct"], err
}
func (w Concrete) UpdateObservation(ctx context.Context, resource r4b.Observation) (update.Result[r4b.Observation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Observation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Observation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Observation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Observation)
	if !ok {
		return update.Result[r4b.Observation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Observation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Observation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesObservation(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Observation"], err
}
func (w Concrete) UpdateObservationDefinition(ctx context.Context, resource r4b.ObservationDefinition) (update.Result[r4b.ObservationDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ObservationDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ObservationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ObservationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ObservationDefinition)
	if !ok {
		return update.Result[r4b.ObservationDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ObservationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ObservationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesObservationDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ObservationDefinition"], err
}
func (w Concrete) UpdateOperationDefinition(ctx context.Context, resource r4b.OperationDefinition) (update.Result[r4b.OperationDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.OperationDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for OperationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.OperationDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationDefinition)
	if !ok {
		return update.Result[r4b.OperationDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OperationDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.OperationDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesOperationDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["OperationDefinition"], err
}
func (w Concrete) UpdateOperationOutcome(ctx context.Context, resource r4b.OperationOutcome) (update.Result[r4b.OperationOutcome], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.OperationOutcome]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for OperationOutcome")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.OperationOutcome]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OperationOutcome)
	if !ok {
		return update.Result[r4b.OperationOutcome]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OperationOutcome" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.OperationOutcome]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesOperationOutcome(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["OperationOutcome"], err
}
func (w Concrete) UpdateOrganization(ctx context.Context, resource r4b.Organization) (update.Result[r4b.Organization], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Organization]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Organization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Organization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Organization)
	if !ok {
		return update.Result[r4b.Organization]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Organization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Organization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesOrganization(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Organization"], err
}
func (w Concrete) UpdateOrganizationAffiliation(ctx context.Context, resource r4b.OrganizationAffiliation) (update.Result[r4b.OrganizationAffiliation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.OrganizationAffiliation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for OrganizationAffiliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.OrganizationAffiliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.OrganizationAffiliation)
	if !ok {
		return update.Result[r4b.OrganizationAffiliation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "OrganizationAffiliation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.OrganizationAffiliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesOrganizationAffiliation(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["OrganizationAffiliation"], err
}
func (w Concrete) UpdatePackagedProductDefinition(ctx context.Context, resource r4b.PackagedProductDefinition) (update.Result[r4b.PackagedProductDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.PackagedProductDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for PackagedProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PackagedProductDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PackagedProductDefinition)
	if !ok {
		return update.Result[r4b.PackagedProductDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PackagedProductDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.PackagedProductDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPackagedProductDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["PackagedProductDefinition"], err
}
func (w Concrete) UpdateParameters(ctx context.Context, resource r4b.Parameters) (update.Result[r4b.Parameters], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Parameters]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Parameters")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Parameters]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Parameters)
	if !ok {
		return update.Result[r4b.Parameters]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Parameters" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Parameters]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesParameters(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Parameters"], err
}
func (w Concrete) UpdatePatient(ctx context.Context, resource r4b.Patient) (update.Result[r4b.Patient], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Patient]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Patient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Patient]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Patient)
	if !ok {
		return update.Result[r4b.Patient]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Patient" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Patient]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPatient(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Patient"], err
}
func (w Concrete) UpdatePaymentNotice(ctx context.Context, resource r4b.PaymentNotice) (update.Result[r4b.PaymentNotice], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.PaymentNotice]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for PaymentNotice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PaymentNotice]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentNotice)
	if !ok {
		return update.Result[r4b.PaymentNotice]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PaymentNotice" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.PaymentNotice]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPaymentNotice(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["PaymentNotice"], err
}
func (w Concrete) UpdatePaymentReconciliation(ctx context.Context, resource r4b.PaymentReconciliation) (update.Result[r4b.PaymentReconciliation], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.PaymentReconciliation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for PaymentReconciliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PaymentReconciliation]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PaymentReconciliation)
	if !ok {
		return update.Result[r4b.PaymentReconciliation]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PaymentReconciliation" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.PaymentReconciliation]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPaymentReconciliation(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["PaymentReconciliation"], err
}
func (w Concrete) UpdatePerson(ctx context.Context, resource r4b.Person) (update.Result[r4b.Person], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Person]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Person")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Person]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Person)
	if !ok {
		return update.Result[r4b.Person]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Person" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Person]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPerson(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Person"], err
}
func (w Concrete) UpdatePlanDefinition(ctx context.Context, resource r4b.PlanDefinition) (update.Result[r4b.PlanDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.PlanDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for PlanDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PlanDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PlanDefinition)
	if !ok {
		return update.Result[r4b.PlanDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PlanDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.PlanDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPlanDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["PlanDefinition"], err
}
func (w Concrete) UpdatePractitioner(ctx context.Context, resource r4b.Practitioner) (update.Result[r4b.Practitioner], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Practitioner]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Practitioner")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Practitioner]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Practitioner)
	if !ok {
		return update.Result[r4b.Practitioner]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Practitioner" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Practitioner]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPractitioner(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Practitioner"], err
}
func (w Concrete) UpdatePractitionerRole(ctx context.Context, resource r4b.PractitionerRole) (update.Result[r4b.PractitionerRole], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.PractitionerRole]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for PractitionerRole")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PractitionerRole]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.PractitionerRole)
	if !ok {
		return update.Result[r4b.PractitionerRole]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "PractitionerRole" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.PractitionerRole]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesPractitionerRole(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["PractitionerRole"], err
}
func (w Concrete) UpdateProcedure(ctx context.Context, resource r4b.Procedure) (update.Result[r4b.Procedure], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Procedure]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Procedure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Procedure]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Procedure)
	if !ok {
		return update.Result[r4b.Procedure]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Procedure" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Procedure]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesProcedure(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Procedure"], err
}
func (w Concrete) UpdateProvenance(ctx context.Context, resource r4b.Provenance) (update.Result[r4b.Provenance], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Provenance]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Provenance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Provenance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Provenance)
	if !ok {
		return update.Result[r4b.Provenance]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Provenance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Provenance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesProvenance(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Provenance"], err
}
func (w Concrete) UpdateQuestionnaire(ctx context.Context, resource r4b.Questionnaire) (update.Result[r4b.Questionnaire], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Questionnaire]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Questionnaire")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Questionnaire]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Questionnaire)
	if !ok {
		return update.Result[r4b.Questionnaire]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Questionnaire" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Questionnaire]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesQuestionnaire(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Questionnaire"], err
}
func (w Concrete) UpdateQuestionnaireResponse(ctx context.Context, resource r4b.QuestionnaireResponse) (update.Result[r4b.QuestionnaireResponse], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.QuestionnaireResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for QuestionnaireResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.QuestionnaireResponse]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.QuestionnaireResponse)
	if !ok {
		return update.Result[r4b.QuestionnaireResponse]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "QuestionnaireResponse" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.QuestionnaireResponse]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesQuestionnaireResponse(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["QuestionnaireResponse"], err
}
func (w Concrete) UpdateRegulatedAuthorization(ctx context.Context, resource r4b.RegulatedAuthorization) (update.Result[r4b.RegulatedAuthorization], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.RegulatedAuthorization]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for RegulatedAuthorization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RegulatedAuthorization]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RegulatedAuthorization)
	if !ok {
		return update.Result[r4b.RegulatedAuthorization]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RegulatedAuthorization" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.RegulatedAuthorization]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesRegulatedAuthorization(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["RegulatedAuthorization"], err
}
func (w Concrete) UpdateRelatedPerson(ctx context.Context, resource r4b.RelatedPerson) (update.Result[r4b.RelatedPerson], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.RelatedPerson]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for RelatedPerson")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RelatedPerson]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RelatedPerson)
	if !ok {
		return update.Result[r4b.RelatedPerson]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RelatedPerson" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.RelatedPerson]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesRelatedPerson(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["RelatedPerson"], err
}
func (w Concrete) UpdateRequestGroup(ctx context.Context, resource r4b.RequestGroup) (update.Result[r4b.RequestGroup], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.RequestGroup]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for RequestGroup")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RequestGroup]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RequestGroup)
	if !ok {
		return update.Result[r4b.RequestGroup]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RequestGroup" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.RequestGroup]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesRequestGroup(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["RequestGroup"], err
}
func (w Concrete) UpdateResearchDefinition(ctx context.Context, resource r4b.ResearchDefinition) (update.Result[r4b.ResearchDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ResearchDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ResearchDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchDefinition)
	if !ok {
		return update.Result[r4b.ResearchDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ResearchDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesResearchDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ResearchDefinition"], err
}
func (w Concrete) UpdateResearchElementDefinition(ctx context.Context, resource r4b.ResearchElementDefinition) (update.Result[r4b.ResearchElementDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ResearchElementDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ResearchElementDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchElementDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchElementDefinition)
	if !ok {
		return update.Result[r4b.ResearchElementDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchElementDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ResearchElementDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesResearchElementDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ResearchElementDefinition"], err
}
func (w Concrete) UpdateResearchStudy(ctx context.Context, resource r4b.ResearchStudy) (update.Result[r4b.ResearchStudy], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ResearchStudy]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ResearchStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchStudy]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchStudy)
	if !ok {
		return update.Result[r4b.ResearchStudy]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchStudy" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ResearchStudy]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesResearchStudy(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ResearchStudy"], err
}
func (w Concrete) UpdateResearchSubject(ctx context.Context, resource r4b.ResearchSubject) (update.Result[r4b.ResearchSubject], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ResearchSubject]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ResearchSubject")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchSubject]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ResearchSubject)
	if !ok {
		return update.Result[r4b.ResearchSubject]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ResearchSubject" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ResearchSubject]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesResearchSubject(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ResearchSubject"], err
}
func (w Concrete) UpdateRiskAssessment(ctx context.Context, resource r4b.RiskAssessment) (update.Result[r4b.RiskAssessment], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.RiskAssessment]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for RiskAssessment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RiskAssessment]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.RiskAssessment)
	if !ok {
		return update.Result[r4b.RiskAssessment]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "RiskAssessment" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.RiskAssessment]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesRiskAssessment(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["RiskAssessment"], err
}
func (w Concrete) UpdateSchedule(ctx context.Context, resource r4b.Schedule) (update.Result[r4b.Schedule], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Schedule]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Schedule")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Schedule]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Schedule)
	if !ok {
		return update.Result[r4b.Schedule]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Schedule" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Schedule]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSchedule(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Schedule"], err
}
func (w Concrete) UpdateSearchParameter(ctx context.Context, resource r4b.SearchParameter) (update.Result[r4b.SearchParameter], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.SearchParameter]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for SearchParameter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SearchParameter]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SearchParameter)
	if !ok {
		return update.Result[r4b.SearchParameter]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SearchParameter" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.SearchParameter]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSearchParameter(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["SearchParameter"], err
}
func (w Concrete) UpdateServiceRequest(ctx context.Context, resource r4b.ServiceRequest) (update.Result[r4b.ServiceRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ServiceRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ServiceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ServiceRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ServiceRequest)
	if !ok {
		return update.Result[r4b.ServiceRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ServiceRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ServiceRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesServiceRequest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ServiceRequest"], err
}
func (w Concrete) UpdateSlot(ctx context.Context, resource r4b.Slot) (update.Result[r4b.Slot], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Slot]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Slot")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Slot]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Slot)
	if !ok {
		return update.Result[r4b.Slot]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Slot" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Slot]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSlot(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Slot"], err
}
func (w Concrete) UpdateSpecimen(ctx context.Context, resource r4b.Specimen) (update.Result[r4b.Specimen], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Specimen]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Specimen")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Specimen]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Specimen)
	if !ok {
		return update.Result[r4b.Specimen]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Specimen" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Specimen]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSpecimen(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Specimen"], err
}
func (w Concrete) UpdateSpecimenDefinition(ctx context.Context, resource r4b.SpecimenDefinition) (update.Result[r4b.SpecimenDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.SpecimenDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for SpecimenDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SpecimenDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SpecimenDefinition)
	if !ok {
		return update.Result[r4b.SpecimenDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SpecimenDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.SpecimenDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSpecimenDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["SpecimenDefinition"], err
}
func (w Concrete) UpdateStructureDefinition(ctx context.Context, resource r4b.StructureDefinition) (update.Result[r4b.StructureDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.StructureDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for StructureDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.StructureDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureDefinition)
	if !ok {
		return update.Result[r4b.StructureDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "StructureDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.StructureDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesStructureDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["StructureDefinition"], err
}
func (w Concrete) UpdateStructureMap(ctx context.Context, resource r4b.StructureMap) (update.Result[r4b.StructureMap], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.StructureMap]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for StructureMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.StructureMap]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.StructureMap)
	if !ok {
		return update.Result[r4b.StructureMap]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "StructureMap" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.StructureMap]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesStructureMap(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["StructureMap"], err
}
func (w Concrete) UpdateSubscription(ctx context.Context, resource r4b.Subscription) (update.Result[r4b.Subscription], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Subscription]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Subscription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Subscription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Subscription)
	if !ok {
		return update.Result[r4b.Subscription]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Subscription" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Subscription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSubscription(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Subscription"], err
}
func (w Concrete) UpdateSubscriptionStatus(ctx context.Context, resource r4b.SubscriptionStatus) (update.Result[r4b.SubscriptionStatus], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.SubscriptionStatus]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for SubscriptionStatus")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SubscriptionStatus]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionStatus)
	if !ok {
		return update.Result[r4b.SubscriptionStatus]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubscriptionStatus" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.SubscriptionStatus]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSubscriptionStatus(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["SubscriptionStatus"], err
}
func (w Concrete) UpdateSubscriptionTopic(ctx context.Context, resource r4b.SubscriptionTopic) (update.Result[r4b.SubscriptionTopic], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.SubscriptionTopic]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for SubscriptionTopic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SubscriptionTopic]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubscriptionTopic)
	if !ok {
		return update.Result[r4b.SubscriptionTopic]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubscriptionTopic" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.SubscriptionTopic]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSubscriptionTopic(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["SubscriptionTopic"], err
}
func (w Concrete) UpdateSubstance(ctx context.Context, resource r4b.Substance) (update.Result[r4b.Substance], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Substance]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Substance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Substance]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Substance)
	if !ok {
		return update.Result[r4b.Substance]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Substance" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Substance]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSubstance(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Substance"], err
}
func (w Concrete) UpdateSubstanceDefinition(ctx context.Context, resource r4b.SubstanceDefinition) (update.Result[r4b.SubstanceDefinition], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.SubstanceDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for SubstanceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SubstanceDefinition]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SubstanceDefinition)
	if !ok {
		return update.Result[r4b.SubstanceDefinition]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SubstanceDefinition" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.SubstanceDefinition]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSubstanceDefinition(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["SubstanceDefinition"], err
}
func (w Concrete) UpdateSupplyDelivery(ctx context.Context, resource r4b.SupplyDelivery) (update.Result[r4b.SupplyDelivery], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.SupplyDelivery]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for SupplyDelivery")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SupplyDelivery]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyDelivery)
	if !ok {
		return update.Result[r4b.SupplyDelivery]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SupplyDelivery" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.SupplyDelivery]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSupplyDelivery(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["SupplyDelivery"], err
}
func (w Concrete) UpdateSupplyRequest(ctx context.Context, resource r4b.SupplyRequest) (update.Result[r4b.SupplyRequest], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.SupplyRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for SupplyRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SupplyRequest]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.SupplyRequest)
	if !ok {
		return update.Result[r4b.SupplyRequest]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "SupplyRequest" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.SupplyRequest]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesSupplyRequest(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["SupplyRequest"], err
}
func (w Concrete) UpdateTask(ctx context.Context, resource r4b.Task) (update.Result[r4b.Task], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.Task]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for Task")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Task]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.Task)
	if !ok {
		return update.Result[r4b.Task]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "Task" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.Task]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesTask(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["Task"], err
}
func (w Concrete) UpdateTerminologyCapabilities(ctx context.Context, resource r4b.TerminologyCapabilities) (update.Result[r4b.TerminologyCapabilities], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.TerminologyCapabilities]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for TerminologyCapabilities")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.TerminologyCapabilities]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TerminologyCapabilities)
	if !ok {
		return update.Result[r4b.TerminologyCapabilities]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TerminologyCapabilities" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.TerminologyCapabilities]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesTerminologyCapabilities(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["TerminologyCapabilities"], err
}
func (w Concrete) UpdateTestReport(ctx context.Context, resource r4b.TestReport) (update.Result[r4b.TestReport], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.TestReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for TestReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.TestReport]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestReport)
	if !ok {
		return update.Result[r4b.TestReport]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TestReport" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.TestReport]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesTestReport(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["TestReport"], err
}
func (w Concrete) UpdateTestScript(ctx context.Context, resource r4b.TestScript) (update.Result[r4b.TestScript], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.TestScript]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for TestScript")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.TestScript]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.TestScript)
	if !ok {
		return update.Result[r4b.TestScript]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "TestScript" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.TestScript]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesTestScript(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["TestScript"], err
}
func (w Concrete) UpdateValueSet(ctx context.Context, resource r4b.ValueSet) (update.Result[r4b.ValueSet], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.ValueSet]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for ValueSet")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ValueSet]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.ValueSet)
	if !ok {
		return update.Result[r4b.ValueSet]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "ValueSet" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.ValueSet]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesValueSet(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["ValueSet"], err
}
func (w Concrete) UpdateVerificationResult(ctx context.Context, resource r4b.VerificationResult) (update.Result[r4b.VerificationResult], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.VerificationResult]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for VerificationResult")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.VerificationResult]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VerificationResult)
	if !ok {
		return update.Result[r4b.VerificationResult]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "VerificationResult" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.VerificationResult]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesVerificationResult(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["VerificationResult"], err
}
func (w Concrete) UpdateVisionPrescription(ctx context.Context, resource r4b.VisionPrescription) (update.Result[r4b.VisionPrescription], error) {
	g, ok := w.Generic.(capabilities.GenericUpdate)
	if !ok {
		return update.Result[r4b.VisionPrescription]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Update not implemented for VisionPrescription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	result, err := g.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.VisionPrescription]{}, err
	}
	v := result.Resource
	contained, ok := v.(r4b.ContainedResource)
	if ok {
		v = contained.Resource
	}
	r, ok := v.(r4b.VisionPrescription)
	if !ok {
		return update.Result[r4b.VisionPrescription]{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("processing")},
			Diagnostics: &r4b.String{Value: utils.Ptr("expected " + "VisionPrescription" + " but got " + v.ResourceType())},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return update.Result[r4b.VisionPrescription]{

		Created:  result.Created,
		Resource: r,
	}, nil
}
func (w Concrete) UpdateCapabilitiesVisionPrescription(ctx context.Context) (update.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return update.Capabilities{}, err
	}
	return allCapabilities.Update["VisionPrescription"], err
}
func (w Concrete) DeleteAccount(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Account")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Account", id)
}
func (w Concrete) DeleteActivityDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ActivityDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ActivityDefinition", id)
}
func (w Concrete) DeleteAdministrableProductDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for AdministrableProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AdministrableProductDefinition", id)
}
func (w Concrete) DeleteAdverseEvent(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for AdverseEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AdverseEvent", id)
}
func (w Concrete) DeleteAllergyIntolerance(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for AllergyIntolerance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AllergyIntolerance", id)
}
func (w Concrete) DeleteAppointment(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Appointment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Appointment", id)
}
func (w Concrete) DeleteAppointmentResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for AppointmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AppointmentResponse", id)
}
func (w Concrete) DeleteAuditEvent(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for AuditEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "AuditEvent", id)
}
func (w Concrete) DeleteBasic(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Basic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Basic", id)
}
func (w Concrete) DeleteBinary(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Binary")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Binary", id)
}
func (w Concrete) DeleteBiologicallyDerivedProduct(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for BiologicallyDerivedProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "BiologicallyDerivedProduct", id)
}
func (w Concrete) DeleteBodyStructure(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for BodyStructure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "BodyStructure", id)
}
func (w Concrete) DeleteBundle(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Bundle")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Bundle", id)
}
func (w Concrete) DeleteCapabilityStatement(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CapabilityStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CapabilityStatement", id)
}
func (w Concrete) DeleteCarePlan(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CarePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CarePlan", id)
}
func (w Concrete) DeleteCareTeam(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CareTeam")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CareTeam", id)
}
func (w Concrete) DeleteCatalogEntry(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CatalogEntry")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CatalogEntry", id)
}
func (w Concrete) DeleteChargeItem(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ChargeItem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ChargeItem", id)
}
func (w Concrete) DeleteChargeItemDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ChargeItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ChargeItemDefinition", id)
}
func (w Concrete) DeleteCitation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Citation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Citation", id)
}
func (w Concrete) DeleteClaim(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Claim")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Claim", id)
}
func (w Concrete) DeleteClaimResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ClaimResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ClaimResponse", id)
}
func (w Concrete) DeleteClinicalImpression(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ClinicalImpression")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ClinicalImpression", id)
}
func (w Concrete) DeleteClinicalUseDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ClinicalUseDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ClinicalUseDefinition", id)
}
func (w Concrete) DeleteCodeSystem(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CodeSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CodeSystem", id)
}
func (w Concrete) DeleteCommunication(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Communication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Communication", id)
}
func (w Concrete) DeleteCommunicationRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CommunicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CommunicationRequest", id)
}
func (w Concrete) DeleteCompartmentDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CompartmentDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CompartmentDefinition", id)
}
func (w Concrete) DeleteComposition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Composition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Composition", id)
}
func (w Concrete) DeleteConceptMap(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ConceptMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ConceptMap", id)
}
func (w Concrete) DeleteCondition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Condition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Condition", id)
}
func (w Concrete) DeleteConsent(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Consent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Consent", id)
}
func (w Concrete) DeleteContract(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Contract")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Contract", id)
}
func (w Concrete) DeleteCoverage(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Coverage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Coverage", id)
}
func (w Concrete) DeleteCoverageEligibilityRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CoverageEligibilityRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CoverageEligibilityRequest", id)
}
func (w Concrete) DeleteCoverageEligibilityResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for CoverageEligibilityResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "CoverageEligibilityResponse", id)
}
func (w Concrete) DeleteDetectedIssue(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DetectedIssue")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DetectedIssue", id)
}
func (w Concrete) DeleteDevice(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Device")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Device", id)
}
func (w Concrete) DeleteDeviceDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DeviceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceDefinition", id)
}
func (w Concrete) DeleteDeviceMetric(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DeviceMetric")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceMetric", id)
}
func (w Concrete) DeleteDeviceRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DeviceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceRequest", id)
}
func (w Concrete) DeleteDeviceUseStatement(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DeviceUseStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DeviceUseStatement", id)
}
func (w Concrete) DeleteDiagnosticReport(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DiagnosticReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DiagnosticReport", id)
}
func (w Concrete) DeleteDocumentManifest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DocumentManifest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DocumentManifest", id)
}
func (w Concrete) DeleteDocumentReference(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for DocumentReference")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "DocumentReference", id)
}
func (w Concrete) DeleteEncounter(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Encounter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Encounter", id)
}
func (w Concrete) DeleteEndpoint(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Endpoint")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Endpoint", id)
}
func (w Concrete) DeleteEnrollmentRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for EnrollmentRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EnrollmentRequest", id)
}
func (w Concrete) DeleteEnrollmentResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for EnrollmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EnrollmentResponse", id)
}
func (w Concrete) DeleteEpisodeOfCare(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for EpisodeOfCare")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EpisodeOfCare", id)
}
func (w Concrete) DeleteEventDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for EventDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EventDefinition", id)
}
func (w Concrete) DeleteEvidence(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Evidence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Evidence", id)
}
func (w Concrete) DeleteEvidenceReport(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for EvidenceReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EvidenceReport", id)
}
func (w Concrete) DeleteEvidenceVariable(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for EvidenceVariable")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "EvidenceVariable", id)
}
func (w Concrete) DeleteExampleScenario(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ExampleScenario")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ExampleScenario", id)
}
func (w Concrete) DeleteExplanationOfBenefit(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ExplanationOfBenefit")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ExplanationOfBenefit", id)
}
func (w Concrete) DeleteFamilyMemberHistory(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for FamilyMemberHistory")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "FamilyMemberHistory", id)
}
func (w Concrete) DeleteFlag(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Flag")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Flag", id)
}
func (w Concrete) DeleteGoal(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Goal")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Goal", id)
}
func (w Concrete) DeleteGraphDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for GraphDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "GraphDefinition", id)
}
func (w Concrete) DeleteGroup(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Group")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Group", id)
}
func (w Concrete) DeleteGuidanceResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for GuidanceResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "GuidanceResponse", id)
}
func (w Concrete) DeleteHealthcareService(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for HealthcareService")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "HealthcareService", id)
}
func (w Concrete) DeleteImagingStudy(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ImagingStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImagingStudy", id)
}
func (w Concrete) DeleteImmunization(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Immunization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Immunization", id)
}
func (w Concrete) DeleteImmunizationEvaluation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ImmunizationEvaluation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImmunizationEvaluation", id)
}
func (w Concrete) DeleteImmunizationRecommendation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ImmunizationRecommendation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImmunizationRecommendation", id)
}
func (w Concrete) DeleteImplementationGuide(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ImplementationGuide")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ImplementationGuide", id)
}
func (w Concrete) DeleteIngredient(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Ingredient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Ingredient", id)
}
func (w Concrete) DeleteInsurancePlan(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for InsurancePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "InsurancePlan", id)
}
func (w Concrete) DeleteInvoice(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Invoice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Invoice", id)
}
func (w Concrete) DeleteLibrary(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Library")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Library", id)
}
func (w Concrete) DeleteLinkage(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Linkage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Linkage", id)
}
func (w Concrete) DeleteList(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for List")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "List", id)
}
func (w Concrete) DeleteLocation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Location")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Location", id)
}
func (w Concrete) DeleteManufacturedItemDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ManufacturedItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ManufacturedItemDefinition", id)
}
func (w Concrete) DeleteMeasure(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Measure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Measure", id)
}
func (w Concrete) DeleteMeasureReport(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MeasureReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MeasureReport", id)
}
func (w Concrete) DeleteMedia(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Media")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Media", id)
}
func (w Concrete) DeleteMedication(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Medication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Medication", id)
}
func (w Concrete) DeleteMedicationAdministration(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MedicationAdministration")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationAdministration", id)
}
func (w Concrete) DeleteMedicationDispense(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MedicationDispense")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationDispense", id)
}
func (w Concrete) DeleteMedicationKnowledge(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MedicationKnowledge")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationKnowledge", id)
}
func (w Concrete) DeleteMedicationRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MedicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationRequest", id)
}
func (w Concrete) DeleteMedicationStatement(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MedicationStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicationStatement", id)
}
func (w Concrete) DeleteMedicinalProductDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MedicinalProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MedicinalProductDefinition", id)
}
func (w Concrete) DeleteMessageDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MessageDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MessageDefinition", id)
}
func (w Concrete) DeleteMessageHeader(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MessageHeader")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MessageHeader", id)
}
func (w Concrete) DeleteMolecularSequence(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for MolecularSequence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "MolecularSequence", id)
}
func (w Concrete) DeleteNamingSystem(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for NamingSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "NamingSystem", id)
}
func (w Concrete) DeleteNutritionOrder(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for NutritionOrder")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "NutritionOrder", id)
}
func (w Concrete) DeleteNutritionProduct(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for NutritionProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "NutritionProduct", id)
}
func (w Concrete) DeleteObservation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Observation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Observation", id)
}
func (w Concrete) DeleteObservationDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ObservationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ObservationDefinition", id)
}
func (w Concrete) DeleteOperationDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for OperationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "OperationDefinition", id)
}
func (w Concrete) DeleteOperationOutcome(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for OperationOutcome")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "OperationOutcome", id)
}
func (w Concrete) DeleteOrganization(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Organization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Organization", id)
}
func (w Concrete) DeleteOrganizationAffiliation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for OrganizationAffiliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "OrganizationAffiliation", id)
}
func (w Concrete) DeletePackagedProductDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for PackagedProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PackagedProductDefinition", id)
}
func (w Concrete) DeleteParameters(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Parameters")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Parameters", id)
}
func (w Concrete) DeletePatient(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Patient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Patient", id)
}
func (w Concrete) DeletePaymentNotice(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for PaymentNotice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PaymentNotice", id)
}
func (w Concrete) DeletePaymentReconciliation(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for PaymentReconciliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PaymentReconciliation", id)
}
func (w Concrete) DeletePerson(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Person")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Person", id)
}
func (w Concrete) DeletePlanDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for PlanDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PlanDefinition", id)
}
func (w Concrete) DeletePractitioner(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Practitioner")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Practitioner", id)
}
func (w Concrete) DeletePractitionerRole(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for PractitionerRole")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "PractitionerRole", id)
}
func (w Concrete) DeleteProcedure(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Procedure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Procedure", id)
}
func (w Concrete) DeleteProvenance(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Provenance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Provenance", id)
}
func (w Concrete) DeleteQuestionnaire(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Questionnaire")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Questionnaire", id)
}
func (w Concrete) DeleteQuestionnaireResponse(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for QuestionnaireResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "QuestionnaireResponse", id)
}
func (w Concrete) DeleteRegulatedAuthorization(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for RegulatedAuthorization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RegulatedAuthorization", id)
}
func (w Concrete) DeleteRelatedPerson(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for RelatedPerson")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RelatedPerson", id)
}
func (w Concrete) DeleteRequestGroup(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for RequestGroup")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RequestGroup", id)
}
func (w Concrete) DeleteResearchDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ResearchDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchDefinition", id)
}
func (w Concrete) DeleteResearchElementDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ResearchElementDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchElementDefinition", id)
}
func (w Concrete) DeleteResearchStudy(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ResearchStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchStudy", id)
}
func (w Concrete) DeleteResearchSubject(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ResearchSubject")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ResearchSubject", id)
}
func (w Concrete) DeleteRiskAssessment(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for RiskAssessment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "RiskAssessment", id)
}
func (w Concrete) DeleteSchedule(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Schedule")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Schedule", id)
}
func (w Concrete) DeleteSearchParameter(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for SearchParameter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SearchParameter", id)
}
func (w Concrete) DeleteServiceRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ServiceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ServiceRequest", id)
}
func (w Concrete) DeleteSlot(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Slot")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Slot", id)
}
func (w Concrete) DeleteSpecimen(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Specimen")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Specimen", id)
}
func (w Concrete) DeleteSpecimenDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for SpecimenDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SpecimenDefinition", id)
}
func (w Concrete) DeleteStructureDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for StructureDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "StructureDefinition", id)
}
func (w Concrete) DeleteStructureMap(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for StructureMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "StructureMap", id)
}
func (w Concrete) DeleteSubscription(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Subscription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Subscription", id)
}
func (w Concrete) DeleteSubscriptionStatus(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for SubscriptionStatus")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubscriptionStatus", id)
}
func (w Concrete) DeleteSubscriptionTopic(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for SubscriptionTopic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubscriptionTopic", id)
}
func (w Concrete) DeleteSubstance(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Substance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Substance", id)
}
func (w Concrete) DeleteSubstanceDefinition(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for SubstanceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SubstanceDefinition", id)
}
func (w Concrete) DeleteSupplyDelivery(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for SupplyDelivery")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SupplyDelivery", id)
}
func (w Concrete) DeleteSupplyRequest(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for SupplyRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "SupplyRequest", id)
}
func (w Concrete) DeleteTask(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for Task")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "Task", id)
}
func (w Concrete) DeleteTerminologyCapabilities(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for TerminologyCapabilities")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "TerminologyCapabilities", id)
}
func (w Concrete) DeleteTestReport(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for TestReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "TestReport", id)
}
func (w Concrete) DeleteTestScript(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for TestScript")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "TestScript", id)
}
func (w Concrete) DeleteValueSet(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for ValueSet")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "ValueSet", id)
}
func (w Concrete) DeleteVerificationResult(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for VerificationResult")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "VerificationResult", id)
}
func (w Concrete) DeleteVisionPrescription(ctx context.Context, id string) error {
	g, ok := w.Generic.(capabilities.GenericDelete)
	if !ok {
		return r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Delete not implemented for VisionPrescription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	return g.Delete(ctx, "VisionPrescription", id)
}
func (w Concrete) SearchAccount(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Account")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Account", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAccount(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Account"], err
}
func (w Concrete) SearchActivityDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ActivityDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ActivityDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesActivityDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ActivityDefinition"], err
}
func (w Concrete) SearchAdministrableProductDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for AdministrableProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AdministrableProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdministrableProductDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["AdministrableProductDefinition"], err
}
func (w Concrete) SearchAdverseEvent(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for AdverseEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AdverseEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAdverseEvent(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["AdverseEvent"], err
}
func (w Concrete) SearchAllergyIntolerance(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for AllergyIntolerance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AllergyIntolerance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAllergyIntolerance(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["AllergyIntolerance"], err
}
func (w Concrete) SearchAppointment(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Appointment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Appointment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointment(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Appointment"], err
}
func (w Concrete) SearchAppointmentResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for AppointmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AppointmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAppointmentResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["AppointmentResponse"], err
}
func (w Concrete) SearchAuditEvent(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for AuditEvent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "AuditEvent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesAuditEvent(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["AuditEvent"], err
}
func (w Concrete) SearchBasic(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Basic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Basic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBasic(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Basic"], err
}
func (w Concrete) SearchBinary(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Binary")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Binary", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBinary(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Binary"], err
}
func (w Concrete) SearchBiologicallyDerivedProduct(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for BiologicallyDerivedProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "BiologicallyDerivedProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBiologicallyDerivedProduct(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["BiologicallyDerivedProduct"], err
}
func (w Concrete) SearchBodyStructure(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for BodyStructure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "BodyStructure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBodyStructure(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["BodyStructure"], err
}
func (w Concrete) SearchBundle(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Bundle")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Bundle", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesBundle(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Bundle"], err
}
func (w Concrete) SearchCapabilityStatement(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CapabilityStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CapabilityStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCapabilityStatement(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CapabilityStatement"], err
}
func (w Concrete) SearchCarePlan(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CarePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CarePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCarePlan(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CarePlan"], err
}
func (w Concrete) SearchCareTeam(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CareTeam")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CareTeam", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCareTeam(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CareTeam"], err
}
func (w Concrete) SearchCatalogEntry(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CatalogEntry")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CatalogEntry", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCatalogEntry(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CatalogEntry"], err
}
func (w Concrete) SearchChargeItem(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ChargeItem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ChargeItem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItem(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ChargeItem"], err
}
func (w Concrete) SearchChargeItemDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ChargeItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ChargeItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesChargeItemDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ChargeItemDefinition"], err
}
func (w Concrete) SearchCitation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Citation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Citation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCitation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Citation"], err
}
func (w Concrete) SearchClaim(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Claim")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Claim", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaim(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Claim"], err
}
func (w Concrete) SearchClaimResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ClaimResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ClaimResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClaimResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ClaimResponse"], err
}
func (w Concrete) SearchClinicalImpression(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ClinicalImpression")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ClinicalImpression", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalImpression(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ClinicalImpression"], err
}
func (w Concrete) SearchClinicalUseDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ClinicalUseDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ClinicalUseDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesClinicalUseDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ClinicalUseDefinition"], err
}
func (w Concrete) SearchCodeSystem(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CodeSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CodeSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCodeSystem(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CodeSystem"], err
}
func (w Concrete) SearchCommunication(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Communication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Communication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunication(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Communication"], err
}
func (w Concrete) SearchCommunicationRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CommunicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CommunicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCommunicationRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CommunicationRequest"], err
}
func (w Concrete) SearchCompartmentDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CompartmentDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CompartmentDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCompartmentDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CompartmentDefinition"], err
}
func (w Concrete) SearchComposition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Composition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Composition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesComposition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Composition"], err
}
func (w Concrete) SearchConceptMap(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ConceptMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ConceptMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConceptMap(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ConceptMap"], err
}
func (w Concrete) SearchCondition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Condition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Condition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCondition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Condition"], err
}
func (w Concrete) SearchConsent(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Consent")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Consent", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesConsent(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Consent"], err
}
func (w Concrete) SearchContract(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Contract")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Contract", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesContract(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Contract"], err
}
func (w Concrete) SearchCoverage(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Coverage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Coverage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverage(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Coverage"], err
}
func (w Concrete) SearchCoverageEligibilityRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CoverageEligibilityRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CoverageEligibilityRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CoverageEligibilityRequest"], err
}
func (w Concrete) SearchCoverageEligibilityResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for CoverageEligibilityResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "CoverageEligibilityResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesCoverageEligibilityResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["CoverageEligibilityResponse"], err
}
func (w Concrete) SearchDetectedIssue(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DetectedIssue")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DetectedIssue", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDetectedIssue(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DetectedIssue"], err
}
func (w Concrete) SearchDevice(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Device")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Device", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDevice(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Device"], err
}
func (w Concrete) SearchDeviceDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DeviceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DeviceDefinition"], err
}
func (w Concrete) SearchDeviceMetric(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DeviceMetric")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceMetric", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceMetric(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DeviceMetric"], err
}
func (w Concrete) SearchDeviceRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DeviceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DeviceRequest"], err
}
func (w Concrete) SearchDeviceUseStatement(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DeviceUseStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DeviceUseStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDeviceUseStatement(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DeviceUseStatement"], err
}
func (w Concrete) SearchDiagnosticReport(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DiagnosticReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DiagnosticReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDiagnosticReport(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DiagnosticReport"], err
}
func (w Concrete) SearchDocumentManifest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DocumentManifest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DocumentManifest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentManifest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DocumentManifest"], err
}
func (w Concrete) SearchDocumentReference(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for DocumentReference")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "DocumentReference", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesDocumentReference(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["DocumentReference"], err
}
func (w Concrete) SearchEncounter(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Encounter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Encounter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEncounter(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Encounter"], err
}
func (w Concrete) SearchEndpoint(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Endpoint")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Endpoint", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEndpoint(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Endpoint"], err
}
func (w Concrete) SearchEnrollmentRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for EnrollmentRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EnrollmentRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["EnrollmentRequest"], err
}
func (w Concrete) SearchEnrollmentResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for EnrollmentResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EnrollmentResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEnrollmentResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["EnrollmentResponse"], err
}
func (w Concrete) SearchEpisodeOfCare(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for EpisodeOfCare")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EpisodeOfCare", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEpisodeOfCare(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["EpisodeOfCare"], err
}
func (w Concrete) SearchEventDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for EventDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EventDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEventDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["EventDefinition"], err
}
func (w Concrete) SearchEvidence(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Evidence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Evidence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidence(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Evidence"], err
}
func (w Concrete) SearchEvidenceReport(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for EvidenceReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EvidenceReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceReport(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["EvidenceReport"], err
}
func (w Concrete) SearchEvidenceVariable(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for EvidenceVariable")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "EvidenceVariable", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesEvidenceVariable(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["EvidenceVariable"], err
}
func (w Concrete) SearchExampleScenario(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ExampleScenario")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ExampleScenario", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExampleScenario(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ExampleScenario"], err
}
func (w Concrete) SearchExplanationOfBenefit(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ExplanationOfBenefit")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ExplanationOfBenefit", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesExplanationOfBenefit(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ExplanationOfBenefit"], err
}
func (w Concrete) SearchFamilyMemberHistory(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for FamilyMemberHistory")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "FamilyMemberHistory", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFamilyMemberHistory(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["FamilyMemberHistory"], err
}
func (w Concrete) SearchFlag(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Flag")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Flag", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesFlag(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Flag"], err
}
func (w Concrete) SearchGoal(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Goal")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Goal", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGoal(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Goal"], err
}
func (w Concrete) SearchGraphDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for GraphDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "GraphDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGraphDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["GraphDefinition"], err
}
func (w Concrete) SearchGroup(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Group")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Group", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGroup(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Group"], err
}
func (w Concrete) SearchGuidanceResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for GuidanceResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "GuidanceResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesGuidanceResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["GuidanceResponse"], err
}
func (w Concrete) SearchHealthcareService(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for HealthcareService")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "HealthcareService", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesHealthcareService(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["HealthcareService"], err
}
func (w Concrete) SearchImagingStudy(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ImagingStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImagingStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImagingStudy(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ImagingStudy"], err
}
func (w Concrete) SearchImmunization(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Immunization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Immunization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunization(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Immunization"], err
}
func (w Concrete) SearchImmunizationEvaluation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ImmunizationEvaluation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImmunizationEvaluation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationEvaluation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ImmunizationEvaluation"], err
}
func (w Concrete) SearchImmunizationRecommendation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ImmunizationRecommendation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImmunizationRecommendation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImmunizationRecommendation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ImmunizationRecommendation"], err
}
func (w Concrete) SearchImplementationGuide(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ImplementationGuide")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ImplementationGuide", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesImplementationGuide(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ImplementationGuide"], err
}
func (w Concrete) SearchIngredient(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Ingredient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Ingredient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesIngredient(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Ingredient"], err
}
func (w Concrete) SearchInsurancePlan(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for InsurancePlan")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "InsurancePlan", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInsurancePlan(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["InsurancePlan"], err
}
func (w Concrete) SearchInvoice(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Invoice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Invoice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesInvoice(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Invoice"], err
}
func (w Concrete) SearchLibrary(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Library")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Library", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLibrary(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Library"], err
}
func (w Concrete) SearchLinkage(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Linkage")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Linkage", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLinkage(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Linkage"], err
}
func (w Concrete) SearchList(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for List")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "List", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesList(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["List"], err
}
func (w Concrete) SearchLocation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Location")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Location", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesLocation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Location"], err
}
func (w Concrete) SearchManufacturedItemDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ManufacturedItemDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ManufacturedItemDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesManufacturedItemDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ManufacturedItemDefinition"], err
}
func (w Concrete) SearchMeasure(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Measure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Measure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasure(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Measure"], err
}
func (w Concrete) SearchMeasureReport(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MeasureReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MeasureReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMeasureReport(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MeasureReport"], err
}
func (w Concrete) SearchMedia(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Media")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Media", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedia(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Media"], err
}
func (w Concrete) SearchMedication(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Medication")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Medication", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedication(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Medication"], err
}
func (w Concrete) SearchMedicationAdministration(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MedicationAdministration")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationAdministration", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationAdministration(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MedicationAdministration"], err
}
func (w Concrete) SearchMedicationDispense(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MedicationDispense")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationDispense", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationDispense(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MedicationDispense"], err
}
func (w Concrete) SearchMedicationKnowledge(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MedicationKnowledge")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationKnowledge", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationKnowledge(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MedicationKnowledge"], err
}
func (w Concrete) SearchMedicationRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MedicationRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MedicationRequest"], err
}
func (w Concrete) SearchMedicationStatement(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MedicationStatement")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicationStatement", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicationStatement(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MedicationStatement"], err
}
func (w Concrete) SearchMedicinalProductDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MedicinalProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MedicinalProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMedicinalProductDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MedicinalProductDefinition"], err
}
func (w Concrete) SearchMessageDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MessageDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MessageDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MessageDefinition"], err
}
func (w Concrete) SearchMessageHeader(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MessageHeader")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MessageHeader", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMessageHeader(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MessageHeader"], err
}
func (w Concrete) SearchMolecularSequence(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for MolecularSequence")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "MolecularSequence", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesMolecularSequence(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["MolecularSequence"], err
}
func (w Concrete) SearchNamingSystem(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for NamingSystem")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "NamingSystem", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNamingSystem(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["NamingSystem"], err
}
func (w Concrete) SearchNutritionOrder(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for NutritionOrder")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "NutritionOrder", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionOrder(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["NutritionOrder"], err
}
func (w Concrete) SearchNutritionProduct(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for NutritionProduct")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "NutritionProduct", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesNutritionProduct(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["NutritionProduct"], err
}
func (w Concrete) SearchObservation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Observation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Observation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Observation"], err
}
func (w Concrete) SearchObservationDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ObservationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ObservationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesObservationDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ObservationDefinition"], err
}
func (w Concrete) SearchOperationDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for OperationDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "OperationDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["OperationDefinition"], err
}
func (w Concrete) SearchOperationOutcome(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for OperationOutcome")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "OperationOutcome", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOperationOutcome(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["OperationOutcome"], err
}
func (w Concrete) SearchOrganization(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Organization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Organization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganization(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Organization"], err
}
func (w Concrete) SearchOrganizationAffiliation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for OrganizationAffiliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "OrganizationAffiliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesOrganizationAffiliation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["OrganizationAffiliation"], err
}
func (w Concrete) SearchPackagedProductDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for PackagedProductDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PackagedProductDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPackagedProductDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["PackagedProductDefinition"], err
}
func (w Concrete) SearchParameters(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Parameters")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Parameters", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesParameters(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Parameters"], err
}
func (w Concrete) SearchPatient(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Patient")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Patient", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPatient(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Patient"], err
}
func (w Concrete) SearchPaymentNotice(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for PaymentNotice")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PaymentNotice", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentNotice(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["PaymentNotice"], err
}
func (w Concrete) SearchPaymentReconciliation(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for PaymentReconciliation")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PaymentReconciliation", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPaymentReconciliation(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["PaymentReconciliation"], err
}
func (w Concrete) SearchPerson(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Person")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Person", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPerson(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Person"], err
}
func (w Concrete) SearchPlanDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for PlanDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PlanDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPlanDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["PlanDefinition"], err
}
func (w Concrete) SearchPractitioner(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Practitioner")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Practitioner", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitioner(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Practitioner"], err
}
func (w Concrete) SearchPractitionerRole(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for PractitionerRole")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "PractitionerRole", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesPractitionerRole(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["PractitionerRole"], err
}
func (w Concrete) SearchProcedure(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Procedure")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Procedure", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProcedure(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Procedure"], err
}
func (w Concrete) SearchProvenance(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Provenance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Provenance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesProvenance(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Provenance"], err
}
func (w Concrete) SearchQuestionnaire(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Questionnaire")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Questionnaire", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaire(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Questionnaire"], err
}
func (w Concrete) SearchQuestionnaireResponse(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for QuestionnaireResponse")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "QuestionnaireResponse", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesQuestionnaireResponse(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["QuestionnaireResponse"], err
}
func (w Concrete) SearchRegulatedAuthorization(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for RegulatedAuthorization")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RegulatedAuthorization", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRegulatedAuthorization(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["RegulatedAuthorization"], err
}
func (w Concrete) SearchRelatedPerson(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for RelatedPerson")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RelatedPerson", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRelatedPerson(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["RelatedPerson"], err
}
func (w Concrete) SearchRequestGroup(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for RequestGroup")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RequestGroup", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRequestGroup(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["RequestGroup"], err
}
func (w Concrete) SearchResearchDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ResearchDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ResearchDefinition"], err
}
func (w Concrete) SearchResearchElementDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ResearchElementDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchElementDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchElementDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ResearchElementDefinition"], err
}
func (w Concrete) SearchResearchStudy(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ResearchStudy")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchStudy", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchStudy(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ResearchStudy"], err
}
func (w Concrete) SearchResearchSubject(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ResearchSubject")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ResearchSubject", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesResearchSubject(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ResearchSubject"], err
}
func (w Concrete) SearchRiskAssessment(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for RiskAssessment")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "RiskAssessment", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesRiskAssessment(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["RiskAssessment"], err
}
func (w Concrete) SearchSchedule(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Schedule")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Schedule", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSchedule(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Schedule"], err
}
func (w Concrete) SearchSearchParameter(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for SearchParameter")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SearchParameter", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSearchParameter(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["SearchParameter"], err
}
func (w Concrete) SearchServiceRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ServiceRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ServiceRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesServiceRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ServiceRequest"], err
}
func (w Concrete) SearchSlot(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Slot")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Slot", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSlot(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Slot"], err
}
func (w Concrete) SearchSpecimen(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Specimen")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Specimen", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimen(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Specimen"], err
}
func (w Concrete) SearchSpecimenDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for SpecimenDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SpecimenDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSpecimenDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["SpecimenDefinition"], err
}
func (w Concrete) SearchStructureDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for StructureDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "StructureDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["StructureDefinition"], err
}
func (w Concrete) SearchStructureMap(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for StructureMap")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "StructureMap", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesStructureMap(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["StructureMap"], err
}
func (w Concrete) SearchSubscription(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Subscription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Subscription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscription(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Subscription"], err
}
func (w Concrete) SearchSubscriptionStatus(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for SubscriptionStatus")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubscriptionStatus", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscriptionStatus(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["SubscriptionStatus"], err
}
func (w Concrete) SearchSubscriptionTopic(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for SubscriptionTopic")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubscriptionTopic", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubscriptionTopic(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["SubscriptionTopic"], err
}
func (w Concrete) SearchSubstance(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Substance")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Substance", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstance(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Substance"], err
}
func (w Concrete) SearchSubstanceDefinition(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for SubstanceDefinition")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SubstanceDefinition", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSubstanceDefinition(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["SubstanceDefinition"], err
}
func (w Concrete) SearchSupplyDelivery(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for SupplyDelivery")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SupplyDelivery", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyDelivery(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["SupplyDelivery"], err
}
func (w Concrete) SearchSupplyRequest(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for SupplyRequest")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "SupplyRequest", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesSupplyRequest(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["SupplyRequest"], err
}
func (w Concrete) SearchTask(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for Task")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "Task", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTask(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["Task"], err
}
func (w Concrete) SearchTerminologyCapabilities(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for TerminologyCapabilities")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "TerminologyCapabilities", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTerminologyCapabilities(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["TerminologyCapabilities"], err
}
func (w Concrete) SearchTestReport(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for TestReport")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "TestReport", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestReport(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["TestReport"], err
}
func (w Concrete) SearchTestScript(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for TestScript")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "TestScript", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesTestScript(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["TestScript"], err
}
func (w Concrete) SearchValueSet(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for ValueSet")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "ValueSet", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesValueSet(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["ValueSet"], err
}
func (w Concrete) SearchVerificationResult(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for VerificationResult")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "VerificationResult", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVerificationResult(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["VerificationResult"], err
}
func (w Concrete) SearchVisionPrescription(ctx context.Context, options search.Options) (search.Result, error) {
	g, ok := w.Generic.(capabilities.GenericSearch)
	if !ok {
		return search.Result{}, r4b.OperationOutcome{Issue: []r4b.OperationOutcomeIssue{r4b.OperationOutcomeIssue{
			Code:        r4b.Code{Value: utils.Ptr("not-supported")},
			Diagnostics: &r4b.String{Value: utils.Ptr("Search not implemented for VisionPrescription")},
			Severity:    r4b.Code{Value: utils.Ptr("fatal")},
		}}}
	}
	v, err := g.Search(ctx, "VisionPrescription", options)
	if err != nil {
		return search.Result{}, err
	}
	return v, nil
}
func (w Concrete) SearchCapabilitiesVisionPrescription(ctx context.Context) (search.Capabilities, error) {
	allCapabilities, err := w.Generic.AllCapabilities(ctx)
	if err != nil {
		return search.Capabilities{}, err
	}
	return allCapabilities.Search["VisionPrescription"], err
}
