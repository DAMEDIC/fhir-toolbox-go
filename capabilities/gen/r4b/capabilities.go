// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4B

import (
	"context"
	"errors"
	capabilities "github.com/DAMEDIC/fhir-toolbox-go/capabilities"
	create "github.com/DAMEDIC/fhir-toolbox-go/capabilities/create"
	deletion "github.com/DAMEDIC/fhir-toolbox-go/capabilities/deletion"
	read "github.com/DAMEDIC/fhir-toolbox-go/capabilities/read"
	search "github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	update "github.com/DAMEDIC/fhir-toolbox-go/capabilities/update"
)

func AllCapabilities(ctx context.Context, api any) (capabilities.Capabilities, error) {
	allCapabilities := capabilities.Capabilities{
		Create: make(map[string]create.Capabilities),
		Delete: make(map[string]deletion.Capabilities),
		Read:   make(map[string]read.Capabilities),
		Search: make(map[string]search.Capabilities[search.Parameter]),
		Update: make(map[string]update.Capabilities),
	}
	var errs []error
	if _, ok := api.(AccountCreate); ok {
		allCapabilities.Create["Account"] = create.Capabilities{}
	}
	if _, ok := api.(AccountRead); ok {
		allCapabilities.Read["Account"] = read.Capabilities{}
	}
	if _, ok := api.(AccountDelete); ok {
		allCapabilities.Delete["Account"] = deletion.Capabilities{}
	}
	if c, ok := api.(AccountUpdate); ok {
		allCapabilities.Update["Account"] = update.Capabilities{}
		c, ok := c.(AccountUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesAccount(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Account"] = c
			}
		}
	}
	if c, ok := api.(AccountSearch); ok {
		c, err := c.SearchCapabilitiesAccount(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Account"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Account"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ActivityDefinitionCreate); ok {
		allCapabilities.Create["ActivityDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(ActivityDefinitionRead); ok {
		allCapabilities.Read["ActivityDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(ActivityDefinitionDelete); ok {
		allCapabilities.Delete["ActivityDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ActivityDefinitionUpdate); ok {
		allCapabilities.Update["ActivityDefinition"] = update.Capabilities{}
		c, ok := c.(ActivityDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesActivityDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ActivityDefinition"] = c
			}
		}
	}
	if c, ok := api.(ActivityDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesActivityDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ActivityDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ActivityDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(AdministrableProductDefinitionCreate); ok {
		allCapabilities.Create["AdministrableProductDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(AdministrableProductDefinitionRead); ok {
		allCapabilities.Read["AdministrableProductDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(AdministrableProductDefinitionDelete); ok {
		allCapabilities.Delete["AdministrableProductDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(AdministrableProductDefinitionUpdate); ok {
		allCapabilities.Update["AdministrableProductDefinition"] = update.Capabilities{}
		c, ok := c.(AdministrableProductDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesAdministrableProductDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["AdministrableProductDefinition"] = c
			}
		}
	}
	if c, ok := api.(AdministrableProductDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesAdministrableProductDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["AdministrableProductDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["AdministrableProductDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(AdverseEventCreate); ok {
		allCapabilities.Create["AdverseEvent"] = create.Capabilities{}
	}
	if _, ok := api.(AdverseEventRead); ok {
		allCapabilities.Read["AdverseEvent"] = read.Capabilities{}
	}
	if _, ok := api.(AdverseEventDelete); ok {
		allCapabilities.Delete["AdverseEvent"] = deletion.Capabilities{}
	}
	if c, ok := api.(AdverseEventUpdate); ok {
		allCapabilities.Update["AdverseEvent"] = update.Capabilities{}
		c, ok := c.(AdverseEventUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesAdverseEvent(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["AdverseEvent"] = c
			}
		}
	}
	if c, ok := api.(AdverseEventSearch); ok {
		c, err := c.SearchCapabilitiesAdverseEvent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["AdverseEvent"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["AdverseEvent"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(AllergyIntoleranceCreate); ok {
		allCapabilities.Create["AllergyIntolerance"] = create.Capabilities{}
	}
	if _, ok := api.(AllergyIntoleranceRead); ok {
		allCapabilities.Read["AllergyIntolerance"] = read.Capabilities{}
	}
	if _, ok := api.(AllergyIntoleranceDelete); ok {
		allCapabilities.Delete["AllergyIntolerance"] = deletion.Capabilities{}
	}
	if c, ok := api.(AllergyIntoleranceUpdate); ok {
		allCapabilities.Update["AllergyIntolerance"] = update.Capabilities{}
		c, ok := c.(AllergyIntoleranceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesAllergyIntolerance(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["AllergyIntolerance"] = c
			}
		}
	}
	if c, ok := api.(AllergyIntoleranceSearch); ok {
		c, err := c.SearchCapabilitiesAllergyIntolerance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["AllergyIntolerance"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["AllergyIntolerance"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(AppointmentCreate); ok {
		allCapabilities.Create["Appointment"] = create.Capabilities{}
	}
	if _, ok := api.(AppointmentRead); ok {
		allCapabilities.Read["Appointment"] = read.Capabilities{}
	}
	if _, ok := api.(AppointmentDelete); ok {
		allCapabilities.Delete["Appointment"] = deletion.Capabilities{}
	}
	if c, ok := api.(AppointmentUpdate); ok {
		allCapabilities.Update["Appointment"] = update.Capabilities{}
		c, ok := c.(AppointmentUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesAppointment(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Appointment"] = c
			}
		}
	}
	if c, ok := api.(AppointmentSearch); ok {
		c, err := c.SearchCapabilitiesAppointment(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Appointment"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Appointment"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(AppointmentResponseCreate); ok {
		allCapabilities.Create["AppointmentResponse"] = create.Capabilities{}
	}
	if _, ok := api.(AppointmentResponseRead); ok {
		allCapabilities.Read["AppointmentResponse"] = read.Capabilities{}
	}
	if _, ok := api.(AppointmentResponseDelete); ok {
		allCapabilities.Delete["AppointmentResponse"] = deletion.Capabilities{}
	}
	if c, ok := api.(AppointmentResponseUpdate); ok {
		allCapabilities.Update["AppointmentResponse"] = update.Capabilities{}
		c, ok := c.(AppointmentResponseUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesAppointmentResponse(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["AppointmentResponse"] = c
			}
		}
	}
	if c, ok := api.(AppointmentResponseSearch); ok {
		c, err := c.SearchCapabilitiesAppointmentResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["AppointmentResponse"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["AppointmentResponse"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(AuditEventCreate); ok {
		allCapabilities.Create["AuditEvent"] = create.Capabilities{}
	}
	if _, ok := api.(AuditEventRead); ok {
		allCapabilities.Read["AuditEvent"] = read.Capabilities{}
	}
	if _, ok := api.(AuditEventDelete); ok {
		allCapabilities.Delete["AuditEvent"] = deletion.Capabilities{}
	}
	if c, ok := api.(AuditEventUpdate); ok {
		allCapabilities.Update["AuditEvent"] = update.Capabilities{}
		c, ok := c.(AuditEventUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesAuditEvent(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["AuditEvent"] = c
			}
		}
	}
	if c, ok := api.(AuditEventSearch); ok {
		c, err := c.SearchCapabilitiesAuditEvent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["AuditEvent"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["AuditEvent"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(BasicCreate); ok {
		allCapabilities.Create["Basic"] = create.Capabilities{}
	}
	if _, ok := api.(BasicRead); ok {
		allCapabilities.Read["Basic"] = read.Capabilities{}
	}
	if _, ok := api.(BasicDelete); ok {
		allCapabilities.Delete["Basic"] = deletion.Capabilities{}
	}
	if c, ok := api.(BasicUpdate); ok {
		allCapabilities.Update["Basic"] = update.Capabilities{}
		c, ok := c.(BasicUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesBasic(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Basic"] = c
			}
		}
	}
	if c, ok := api.(BasicSearch); ok {
		c, err := c.SearchCapabilitiesBasic(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Basic"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Basic"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(BinaryCreate); ok {
		allCapabilities.Create["Binary"] = create.Capabilities{}
	}
	if _, ok := api.(BinaryRead); ok {
		allCapabilities.Read["Binary"] = read.Capabilities{}
	}
	if _, ok := api.(BinaryDelete); ok {
		allCapabilities.Delete["Binary"] = deletion.Capabilities{}
	}
	if c, ok := api.(BinaryUpdate); ok {
		allCapabilities.Update["Binary"] = update.Capabilities{}
		c, ok := c.(BinaryUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesBinary(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Binary"] = c
			}
		}
	}
	if c, ok := api.(BinarySearch); ok {
		c, err := c.SearchCapabilitiesBinary(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Binary"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Binary"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(BiologicallyDerivedProductCreate); ok {
		allCapabilities.Create["BiologicallyDerivedProduct"] = create.Capabilities{}
	}
	if _, ok := api.(BiologicallyDerivedProductRead); ok {
		allCapabilities.Read["BiologicallyDerivedProduct"] = read.Capabilities{}
	}
	if _, ok := api.(BiologicallyDerivedProductDelete); ok {
		allCapabilities.Delete["BiologicallyDerivedProduct"] = deletion.Capabilities{}
	}
	if c, ok := api.(BiologicallyDerivedProductUpdate); ok {
		allCapabilities.Update["BiologicallyDerivedProduct"] = update.Capabilities{}
		c, ok := c.(BiologicallyDerivedProductUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesBiologicallyDerivedProduct(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["BiologicallyDerivedProduct"] = c
			}
		}
	}
	if c, ok := api.(BiologicallyDerivedProductSearch); ok {
		c, err := c.SearchCapabilitiesBiologicallyDerivedProduct(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["BiologicallyDerivedProduct"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["BiologicallyDerivedProduct"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(BodyStructureCreate); ok {
		allCapabilities.Create["BodyStructure"] = create.Capabilities{}
	}
	if _, ok := api.(BodyStructureRead); ok {
		allCapabilities.Read["BodyStructure"] = read.Capabilities{}
	}
	if _, ok := api.(BodyStructureDelete); ok {
		allCapabilities.Delete["BodyStructure"] = deletion.Capabilities{}
	}
	if c, ok := api.(BodyStructureUpdate); ok {
		allCapabilities.Update["BodyStructure"] = update.Capabilities{}
		c, ok := c.(BodyStructureUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesBodyStructure(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["BodyStructure"] = c
			}
		}
	}
	if c, ok := api.(BodyStructureSearch); ok {
		c, err := c.SearchCapabilitiesBodyStructure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["BodyStructure"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["BodyStructure"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(BundleCreate); ok {
		allCapabilities.Create["Bundle"] = create.Capabilities{}
	}
	if _, ok := api.(BundleRead); ok {
		allCapabilities.Read["Bundle"] = read.Capabilities{}
	}
	if _, ok := api.(BundleDelete); ok {
		allCapabilities.Delete["Bundle"] = deletion.Capabilities{}
	}
	if c, ok := api.(BundleUpdate); ok {
		allCapabilities.Update["Bundle"] = update.Capabilities{}
		c, ok := c.(BundleUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesBundle(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Bundle"] = c
			}
		}
	}
	if c, ok := api.(BundleSearch); ok {
		c, err := c.SearchCapabilitiesBundle(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Bundle"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Bundle"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CapabilityStatementCreate); ok {
		allCapabilities.Create["CapabilityStatement"] = create.Capabilities{}
	}
	if _, ok := api.(CapabilityStatementRead); ok {
		allCapabilities.Read["CapabilityStatement"] = read.Capabilities{}
	}
	if _, ok := api.(CapabilityStatementDelete); ok {
		allCapabilities.Delete["CapabilityStatement"] = deletion.Capabilities{}
	}
	if c, ok := api.(CapabilityStatementUpdate); ok {
		allCapabilities.Update["CapabilityStatement"] = update.Capabilities{}
		c, ok := c.(CapabilityStatementUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCapabilityStatement(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CapabilityStatement"] = c
			}
		}
	}
	if c, ok := api.(CapabilityStatementSearch); ok {
		c, err := c.SearchCapabilitiesCapabilityStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CapabilityStatement"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CapabilityStatement"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CarePlanCreate); ok {
		allCapabilities.Create["CarePlan"] = create.Capabilities{}
	}
	if _, ok := api.(CarePlanRead); ok {
		allCapabilities.Read["CarePlan"] = read.Capabilities{}
	}
	if _, ok := api.(CarePlanDelete); ok {
		allCapabilities.Delete["CarePlan"] = deletion.Capabilities{}
	}
	if c, ok := api.(CarePlanUpdate); ok {
		allCapabilities.Update["CarePlan"] = update.Capabilities{}
		c, ok := c.(CarePlanUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCarePlan(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CarePlan"] = c
			}
		}
	}
	if c, ok := api.(CarePlanSearch); ok {
		c, err := c.SearchCapabilitiesCarePlan(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CarePlan"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CarePlan"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CareTeamCreate); ok {
		allCapabilities.Create["CareTeam"] = create.Capabilities{}
	}
	if _, ok := api.(CareTeamRead); ok {
		allCapabilities.Read["CareTeam"] = read.Capabilities{}
	}
	if _, ok := api.(CareTeamDelete); ok {
		allCapabilities.Delete["CareTeam"] = deletion.Capabilities{}
	}
	if c, ok := api.(CareTeamUpdate); ok {
		allCapabilities.Update["CareTeam"] = update.Capabilities{}
		c, ok := c.(CareTeamUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCareTeam(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CareTeam"] = c
			}
		}
	}
	if c, ok := api.(CareTeamSearch); ok {
		c, err := c.SearchCapabilitiesCareTeam(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CareTeam"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CareTeam"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CatalogEntryCreate); ok {
		allCapabilities.Create["CatalogEntry"] = create.Capabilities{}
	}
	if _, ok := api.(CatalogEntryRead); ok {
		allCapabilities.Read["CatalogEntry"] = read.Capabilities{}
	}
	if _, ok := api.(CatalogEntryDelete); ok {
		allCapabilities.Delete["CatalogEntry"] = deletion.Capabilities{}
	}
	if c, ok := api.(CatalogEntryUpdate); ok {
		allCapabilities.Update["CatalogEntry"] = update.Capabilities{}
		c, ok := c.(CatalogEntryUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCatalogEntry(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CatalogEntry"] = c
			}
		}
	}
	if c, ok := api.(CatalogEntrySearch); ok {
		c, err := c.SearchCapabilitiesCatalogEntry(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CatalogEntry"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CatalogEntry"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ChargeItemCreate); ok {
		allCapabilities.Create["ChargeItem"] = create.Capabilities{}
	}
	if _, ok := api.(ChargeItemRead); ok {
		allCapabilities.Read["ChargeItem"] = read.Capabilities{}
	}
	if _, ok := api.(ChargeItemDelete); ok {
		allCapabilities.Delete["ChargeItem"] = deletion.Capabilities{}
	}
	if c, ok := api.(ChargeItemUpdate); ok {
		allCapabilities.Update["ChargeItem"] = update.Capabilities{}
		c, ok := c.(ChargeItemUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesChargeItem(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ChargeItem"] = c
			}
		}
	}
	if c, ok := api.(ChargeItemSearch); ok {
		c, err := c.SearchCapabilitiesChargeItem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ChargeItem"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ChargeItem"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ChargeItemDefinitionCreate); ok {
		allCapabilities.Create["ChargeItemDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(ChargeItemDefinitionRead); ok {
		allCapabilities.Read["ChargeItemDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(ChargeItemDefinitionDelete); ok {
		allCapabilities.Delete["ChargeItemDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ChargeItemDefinitionUpdate); ok {
		allCapabilities.Update["ChargeItemDefinition"] = update.Capabilities{}
		c, ok := c.(ChargeItemDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesChargeItemDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ChargeItemDefinition"] = c
			}
		}
	}
	if c, ok := api.(ChargeItemDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesChargeItemDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ChargeItemDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ChargeItemDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CitationCreate); ok {
		allCapabilities.Create["Citation"] = create.Capabilities{}
	}
	if _, ok := api.(CitationRead); ok {
		allCapabilities.Read["Citation"] = read.Capabilities{}
	}
	if _, ok := api.(CitationDelete); ok {
		allCapabilities.Delete["Citation"] = deletion.Capabilities{}
	}
	if c, ok := api.(CitationUpdate); ok {
		allCapabilities.Update["Citation"] = update.Capabilities{}
		c, ok := c.(CitationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCitation(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Citation"] = c
			}
		}
	}
	if c, ok := api.(CitationSearch); ok {
		c, err := c.SearchCapabilitiesCitation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Citation"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Citation"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ClaimCreate); ok {
		allCapabilities.Create["Claim"] = create.Capabilities{}
	}
	if _, ok := api.(ClaimRead); ok {
		allCapabilities.Read["Claim"] = read.Capabilities{}
	}
	if _, ok := api.(ClaimDelete); ok {
		allCapabilities.Delete["Claim"] = deletion.Capabilities{}
	}
	if c, ok := api.(ClaimUpdate); ok {
		allCapabilities.Update["Claim"] = update.Capabilities{}
		c, ok := c.(ClaimUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesClaim(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Claim"] = c
			}
		}
	}
	if c, ok := api.(ClaimSearch); ok {
		c, err := c.SearchCapabilitiesClaim(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Claim"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Claim"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ClaimResponseCreate); ok {
		allCapabilities.Create["ClaimResponse"] = create.Capabilities{}
	}
	if _, ok := api.(ClaimResponseRead); ok {
		allCapabilities.Read["ClaimResponse"] = read.Capabilities{}
	}
	if _, ok := api.(ClaimResponseDelete); ok {
		allCapabilities.Delete["ClaimResponse"] = deletion.Capabilities{}
	}
	if c, ok := api.(ClaimResponseUpdate); ok {
		allCapabilities.Update["ClaimResponse"] = update.Capabilities{}
		c, ok := c.(ClaimResponseUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesClaimResponse(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ClaimResponse"] = c
			}
		}
	}
	if c, ok := api.(ClaimResponseSearch); ok {
		c, err := c.SearchCapabilitiesClaimResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ClaimResponse"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ClaimResponse"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ClinicalImpressionCreate); ok {
		allCapabilities.Create["ClinicalImpression"] = create.Capabilities{}
	}
	if _, ok := api.(ClinicalImpressionRead); ok {
		allCapabilities.Read["ClinicalImpression"] = read.Capabilities{}
	}
	if _, ok := api.(ClinicalImpressionDelete); ok {
		allCapabilities.Delete["ClinicalImpression"] = deletion.Capabilities{}
	}
	if c, ok := api.(ClinicalImpressionUpdate); ok {
		allCapabilities.Update["ClinicalImpression"] = update.Capabilities{}
		c, ok := c.(ClinicalImpressionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesClinicalImpression(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ClinicalImpression"] = c
			}
		}
	}
	if c, ok := api.(ClinicalImpressionSearch); ok {
		c, err := c.SearchCapabilitiesClinicalImpression(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ClinicalImpression"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ClinicalImpression"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ClinicalUseDefinitionCreate); ok {
		allCapabilities.Create["ClinicalUseDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(ClinicalUseDefinitionRead); ok {
		allCapabilities.Read["ClinicalUseDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(ClinicalUseDefinitionDelete); ok {
		allCapabilities.Delete["ClinicalUseDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ClinicalUseDefinitionUpdate); ok {
		allCapabilities.Update["ClinicalUseDefinition"] = update.Capabilities{}
		c, ok := c.(ClinicalUseDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesClinicalUseDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ClinicalUseDefinition"] = c
			}
		}
	}
	if c, ok := api.(ClinicalUseDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesClinicalUseDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ClinicalUseDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ClinicalUseDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CodeSystemCreate); ok {
		allCapabilities.Create["CodeSystem"] = create.Capabilities{}
	}
	if _, ok := api.(CodeSystemRead); ok {
		allCapabilities.Read["CodeSystem"] = read.Capabilities{}
	}
	if _, ok := api.(CodeSystemDelete); ok {
		allCapabilities.Delete["CodeSystem"] = deletion.Capabilities{}
	}
	if c, ok := api.(CodeSystemUpdate); ok {
		allCapabilities.Update["CodeSystem"] = update.Capabilities{}
		c, ok := c.(CodeSystemUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCodeSystem(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CodeSystem"] = c
			}
		}
	}
	if c, ok := api.(CodeSystemSearch); ok {
		c, err := c.SearchCapabilitiesCodeSystem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CodeSystem"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CodeSystem"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CommunicationCreate); ok {
		allCapabilities.Create["Communication"] = create.Capabilities{}
	}
	if _, ok := api.(CommunicationRead); ok {
		allCapabilities.Read["Communication"] = read.Capabilities{}
	}
	if _, ok := api.(CommunicationDelete); ok {
		allCapabilities.Delete["Communication"] = deletion.Capabilities{}
	}
	if c, ok := api.(CommunicationUpdate); ok {
		allCapabilities.Update["Communication"] = update.Capabilities{}
		c, ok := c.(CommunicationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCommunication(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Communication"] = c
			}
		}
	}
	if c, ok := api.(CommunicationSearch); ok {
		c, err := c.SearchCapabilitiesCommunication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Communication"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Communication"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CommunicationRequestCreate); ok {
		allCapabilities.Create["CommunicationRequest"] = create.Capabilities{}
	}
	if _, ok := api.(CommunicationRequestRead); ok {
		allCapabilities.Read["CommunicationRequest"] = read.Capabilities{}
	}
	if _, ok := api.(CommunicationRequestDelete); ok {
		allCapabilities.Delete["CommunicationRequest"] = deletion.Capabilities{}
	}
	if c, ok := api.(CommunicationRequestUpdate); ok {
		allCapabilities.Update["CommunicationRequest"] = update.Capabilities{}
		c, ok := c.(CommunicationRequestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCommunicationRequest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CommunicationRequest"] = c
			}
		}
	}
	if c, ok := api.(CommunicationRequestSearch); ok {
		c, err := c.SearchCapabilitiesCommunicationRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CommunicationRequest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CommunicationRequest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CompartmentDefinitionCreate); ok {
		allCapabilities.Create["CompartmentDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(CompartmentDefinitionRead); ok {
		allCapabilities.Read["CompartmentDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(CompartmentDefinitionDelete); ok {
		allCapabilities.Delete["CompartmentDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(CompartmentDefinitionUpdate); ok {
		allCapabilities.Update["CompartmentDefinition"] = update.Capabilities{}
		c, ok := c.(CompartmentDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCompartmentDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CompartmentDefinition"] = c
			}
		}
	}
	if c, ok := api.(CompartmentDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesCompartmentDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CompartmentDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CompartmentDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CompositionCreate); ok {
		allCapabilities.Create["Composition"] = create.Capabilities{}
	}
	if _, ok := api.(CompositionRead); ok {
		allCapabilities.Read["Composition"] = read.Capabilities{}
	}
	if _, ok := api.(CompositionDelete); ok {
		allCapabilities.Delete["Composition"] = deletion.Capabilities{}
	}
	if c, ok := api.(CompositionUpdate); ok {
		allCapabilities.Update["Composition"] = update.Capabilities{}
		c, ok := c.(CompositionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesComposition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Composition"] = c
			}
		}
	}
	if c, ok := api.(CompositionSearch); ok {
		c, err := c.SearchCapabilitiesComposition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Composition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Composition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ConceptMapCreate); ok {
		allCapabilities.Create["ConceptMap"] = create.Capabilities{}
	}
	if _, ok := api.(ConceptMapRead); ok {
		allCapabilities.Read["ConceptMap"] = read.Capabilities{}
	}
	if _, ok := api.(ConceptMapDelete); ok {
		allCapabilities.Delete["ConceptMap"] = deletion.Capabilities{}
	}
	if c, ok := api.(ConceptMapUpdate); ok {
		allCapabilities.Update["ConceptMap"] = update.Capabilities{}
		c, ok := c.(ConceptMapUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesConceptMap(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ConceptMap"] = c
			}
		}
	}
	if c, ok := api.(ConceptMapSearch); ok {
		c, err := c.SearchCapabilitiesConceptMap(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ConceptMap"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ConceptMap"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ConditionCreate); ok {
		allCapabilities.Create["Condition"] = create.Capabilities{}
	}
	if _, ok := api.(ConditionRead); ok {
		allCapabilities.Read["Condition"] = read.Capabilities{}
	}
	if _, ok := api.(ConditionDelete); ok {
		allCapabilities.Delete["Condition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ConditionUpdate); ok {
		allCapabilities.Update["Condition"] = update.Capabilities{}
		c, ok := c.(ConditionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCondition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Condition"] = c
			}
		}
	}
	if c, ok := api.(ConditionSearch); ok {
		c, err := c.SearchCapabilitiesCondition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Condition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Condition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ConsentCreate); ok {
		allCapabilities.Create["Consent"] = create.Capabilities{}
	}
	if _, ok := api.(ConsentRead); ok {
		allCapabilities.Read["Consent"] = read.Capabilities{}
	}
	if _, ok := api.(ConsentDelete); ok {
		allCapabilities.Delete["Consent"] = deletion.Capabilities{}
	}
	if c, ok := api.(ConsentUpdate); ok {
		allCapabilities.Update["Consent"] = update.Capabilities{}
		c, ok := c.(ConsentUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesConsent(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Consent"] = c
			}
		}
	}
	if c, ok := api.(ConsentSearch); ok {
		c, err := c.SearchCapabilitiesConsent(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Consent"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Consent"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ContractCreate); ok {
		allCapabilities.Create["Contract"] = create.Capabilities{}
	}
	if _, ok := api.(ContractRead); ok {
		allCapabilities.Read["Contract"] = read.Capabilities{}
	}
	if _, ok := api.(ContractDelete); ok {
		allCapabilities.Delete["Contract"] = deletion.Capabilities{}
	}
	if c, ok := api.(ContractUpdate); ok {
		allCapabilities.Update["Contract"] = update.Capabilities{}
		c, ok := c.(ContractUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesContract(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Contract"] = c
			}
		}
	}
	if c, ok := api.(ContractSearch); ok {
		c, err := c.SearchCapabilitiesContract(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Contract"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Contract"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CoverageCreate); ok {
		allCapabilities.Create["Coverage"] = create.Capabilities{}
	}
	if _, ok := api.(CoverageRead); ok {
		allCapabilities.Read["Coverage"] = read.Capabilities{}
	}
	if _, ok := api.(CoverageDelete); ok {
		allCapabilities.Delete["Coverage"] = deletion.Capabilities{}
	}
	if c, ok := api.(CoverageUpdate); ok {
		allCapabilities.Update["Coverage"] = update.Capabilities{}
		c, ok := c.(CoverageUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCoverage(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Coverage"] = c
			}
		}
	}
	if c, ok := api.(CoverageSearch); ok {
		c, err := c.SearchCapabilitiesCoverage(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Coverage"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Coverage"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CoverageEligibilityRequestCreate); ok {
		allCapabilities.Create["CoverageEligibilityRequest"] = create.Capabilities{}
	}
	if _, ok := api.(CoverageEligibilityRequestRead); ok {
		allCapabilities.Read["CoverageEligibilityRequest"] = read.Capabilities{}
	}
	if _, ok := api.(CoverageEligibilityRequestDelete); ok {
		allCapabilities.Delete["CoverageEligibilityRequest"] = deletion.Capabilities{}
	}
	if c, ok := api.(CoverageEligibilityRequestUpdate); ok {
		allCapabilities.Update["CoverageEligibilityRequest"] = update.Capabilities{}
		c, ok := c.(CoverageEligibilityRequestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCoverageEligibilityRequest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CoverageEligibilityRequest"] = c
			}
		}
	}
	if c, ok := api.(CoverageEligibilityRequestSearch); ok {
		c, err := c.SearchCapabilitiesCoverageEligibilityRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CoverageEligibilityRequest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CoverageEligibilityRequest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(CoverageEligibilityResponseCreate); ok {
		allCapabilities.Create["CoverageEligibilityResponse"] = create.Capabilities{}
	}
	if _, ok := api.(CoverageEligibilityResponseRead); ok {
		allCapabilities.Read["CoverageEligibilityResponse"] = read.Capabilities{}
	}
	if _, ok := api.(CoverageEligibilityResponseDelete); ok {
		allCapabilities.Delete["CoverageEligibilityResponse"] = deletion.Capabilities{}
	}
	if c, ok := api.(CoverageEligibilityResponseUpdate); ok {
		allCapabilities.Update["CoverageEligibilityResponse"] = update.Capabilities{}
		c, ok := c.(CoverageEligibilityResponseUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesCoverageEligibilityResponse(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["CoverageEligibilityResponse"] = c
			}
		}
	}
	if c, ok := api.(CoverageEligibilityResponseSearch); ok {
		c, err := c.SearchCapabilitiesCoverageEligibilityResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["CoverageEligibilityResponse"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["CoverageEligibilityResponse"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DetectedIssueCreate); ok {
		allCapabilities.Create["DetectedIssue"] = create.Capabilities{}
	}
	if _, ok := api.(DetectedIssueRead); ok {
		allCapabilities.Read["DetectedIssue"] = read.Capabilities{}
	}
	if _, ok := api.(DetectedIssueDelete); ok {
		allCapabilities.Delete["DetectedIssue"] = deletion.Capabilities{}
	}
	if c, ok := api.(DetectedIssueUpdate); ok {
		allCapabilities.Update["DetectedIssue"] = update.Capabilities{}
		c, ok := c.(DetectedIssueUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDetectedIssue(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DetectedIssue"] = c
			}
		}
	}
	if c, ok := api.(DetectedIssueSearch); ok {
		c, err := c.SearchCapabilitiesDetectedIssue(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DetectedIssue"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DetectedIssue"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DeviceCreate); ok {
		allCapabilities.Create["Device"] = create.Capabilities{}
	}
	if _, ok := api.(DeviceRead); ok {
		allCapabilities.Read["Device"] = read.Capabilities{}
	}
	if _, ok := api.(DeviceDelete); ok {
		allCapabilities.Delete["Device"] = deletion.Capabilities{}
	}
	if c, ok := api.(DeviceUpdate); ok {
		allCapabilities.Update["Device"] = update.Capabilities{}
		c, ok := c.(DeviceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDevice(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Device"] = c
			}
		}
	}
	if c, ok := api.(DeviceSearch); ok {
		c, err := c.SearchCapabilitiesDevice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Device"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Device"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DeviceDefinitionCreate); ok {
		allCapabilities.Create["DeviceDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(DeviceDefinitionRead); ok {
		allCapabilities.Read["DeviceDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(DeviceDefinitionDelete); ok {
		allCapabilities.Delete["DeviceDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(DeviceDefinitionUpdate); ok {
		allCapabilities.Update["DeviceDefinition"] = update.Capabilities{}
		c, ok := c.(DeviceDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDeviceDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DeviceDefinition"] = c
			}
		}
	}
	if c, ok := api.(DeviceDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesDeviceDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DeviceDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DeviceDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DeviceMetricCreate); ok {
		allCapabilities.Create["DeviceMetric"] = create.Capabilities{}
	}
	if _, ok := api.(DeviceMetricRead); ok {
		allCapabilities.Read["DeviceMetric"] = read.Capabilities{}
	}
	if _, ok := api.(DeviceMetricDelete); ok {
		allCapabilities.Delete["DeviceMetric"] = deletion.Capabilities{}
	}
	if c, ok := api.(DeviceMetricUpdate); ok {
		allCapabilities.Update["DeviceMetric"] = update.Capabilities{}
		c, ok := c.(DeviceMetricUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDeviceMetric(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DeviceMetric"] = c
			}
		}
	}
	if c, ok := api.(DeviceMetricSearch); ok {
		c, err := c.SearchCapabilitiesDeviceMetric(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DeviceMetric"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DeviceMetric"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DeviceRequestCreate); ok {
		allCapabilities.Create["DeviceRequest"] = create.Capabilities{}
	}
	if _, ok := api.(DeviceRequestRead); ok {
		allCapabilities.Read["DeviceRequest"] = read.Capabilities{}
	}
	if _, ok := api.(DeviceRequestDelete); ok {
		allCapabilities.Delete["DeviceRequest"] = deletion.Capabilities{}
	}
	if c, ok := api.(DeviceRequestUpdate); ok {
		allCapabilities.Update["DeviceRequest"] = update.Capabilities{}
		c, ok := c.(DeviceRequestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDeviceRequest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DeviceRequest"] = c
			}
		}
	}
	if c, ok := api.(DeviceRequestSearch); ok {
		c, err := c.SearchCapabilitiesDeviceRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DeviceRequest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DeviceRequest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DeviceUseStatementCreate); ok {
		allCapabilities.Create["DeviceUseStatement"] = create.Capabilities{}
	}
	if _, ok := api.(DeviceUseStatementRead); ok {
		allCapabilities.Read["DeviceUseStatement"] = read.Capabilities{}
	}
	if _, ok := api.(DeviceUseStatementDelete); ok {
		allCapabilities.Delete["DeviceUseStatement"] = deletion.Capabilities{}
	}
	if c, ok := api.(DeviceUseStatementUpdate); ok {
		allCapabilities.Update["DeviceUseStatement"] = update.Capabilities{}
		c, ok := c.(DeviceUseStatementUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDeviceUseStatement(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DeviceUseStatement"] = c
			}
		}
	}
	if c, ok := api.(DeviceUseStatementSearch); ok {
		c, err := c.SearchCapabilitiesDeviceUseStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DeviceUseStatement"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DeviceUseStatement"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DiagnosticReportCreate); ok {
		allCapabilities.Create["DiagnosticReport"] = create.Capabilities{}
	}
	if _, ok := api.(DiagnosticReportRead); ok {
		allCapabilities.Read["DiagnosticReport"] = read.Capabilities{}
	}
	if _, ok := api.(DiagnosticReportDelete); ok {
		allCapabilities.Delete["DiagnosticReport"] = deletion.Capabilities{}
	}
	if c, ok := api.(DiagnosticReportUpdate); ok {
		allCapabilities.Update["DiagnosticReport"] = update.Capabilities{}
		c, ok := c.(DiagnosticReportUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDiagnosticReport(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DiagnosticReport"] = c
			}
		}
	}
	if c, ok := api.(DiagnosticReportSearch); ok {
		c, err := c.SearchCapabilitiesDiagnosticReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DiagnosticReport"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DiagnosticReport"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DocumentManifestCreate); ok {
		allCapabilities.Create["DocumentManifest"] = create.Capabilities{}
	}
	if _, ok := api.(DocumentManifestRead); ok {
		allCapabilities.Read["DocumentManifest"] = read.Capabilities{}
	}
	if _, ok := api.(DocumentManifestDelete); ok {
		allCapabilities.Delete["DocumentManifest"] = deletion.Capabilities{}
	}
	if c, ok := api.(DocumentManifestUpdate); ok {
		allCapabilities.Update["DocumentManifest"] = update.Capabilities{}
		c, ok := c.(DocumentManifestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDocumentManifest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DocumentManifest"] = c
			}
		}
	}
	if c, ok := api.(DocumentManifestSearch); ok {
		c, err := c.SearchCapabilitiesDocumentManifest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DocumentManifest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DocumentManifest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(DocumentReferenceCreate); ok {
		allCapabilities.Create["DocumentReference"] = create.Capabilities{}
	}
	if _, ok := api.(DocumentReferenceRead); ok {
		allCapabilities.Read["DocumentReference"] = read.Capabilities{}
	}
	if _, ok := api.(DocumentReferenceDelete); ok {
		allCapabilities.Delete["DocumentReference"] = deletion.Capabilities{}
	}
	if c, ok := api.(DocumentReferenceUpdate); ok {
		allCapabilities.Update["DocumentReference"] = update.Capabilities{}
		c, ok := c.(DocumentReferenceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesDocumentReference(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["DocumentReference"] = c
			}
		}
	}
	if c, ok := api.(DocumentReferenceSearch); ok {
		c, err := c.SearchCapabilitiesDocumentReference(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["DocumentReference"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["DocumentReference"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EncounterCreate); ok {
		allCapabilities.Create["Encounter"] = create.Capabilities{}
	}
	if _, ok := api.(EncounterRead); ok {
		allCapabilities.Read["Encounter"] = read.Capabilities{}
	}
	if _, ok := api.(EncounterDelete); ok {
		allCapabilities.Delete["Encounter"] = deletion.Capabilities{}
	}
	if c, ok := api.(EncounterUpdate); ok {
		allCapabilities.Update["Encounter"] = update.Capabilities{}
		c, ok := c.(EncounterUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEncounter(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Encounter"] = c
			}
		}
	}
	if c, ok := api.(EncounterSearch); ok {
		c, err := c.SearchCapabilitiesEncounter(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Encounter"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Encounter"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EndpointCreate); ok {
		allCapabilities.Create["Endpoint"] = create.Capabilities{}
	}
	if _, ok := api.(EndpointRead); ok {
		allCapabilities.Read["Endpoint"] = read.Capabilities{}
	}
	if _, ok := api.(EndpointDelete); ok {
		allCapabilities.Delete["Endpoint"] = deletion.Capabilities{}
	}
	if c, ok := api.(EndpointUpdate); ok {
		allCapabilities.Update["Endpoint"] = update.Capabilities{}
		c, ok := c.(EndpointUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEndpoint(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Endpoint"] = c
			}
		}
	}
	if c, ok := api.(EndpointSearch); ok {
		c, err := c.SearchCapabilitiesEndpoint(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Endpoint"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Endpoint"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EnrollmentRequestCreate); ok {
		allCapabilities.Create["EnrollmentRequest"] = create.Capabilities{}
	}
	if _, ok := api.(EnrollmentRequestRead); ok {
		allCapabilities.Read["EnrollmentRequest"] = read.Capabilities{}
	}
	if _, ok := api.(EnrollmentRequestDelete); ok {
		allCapabilities.Delete["EnrollmentRequest"] = deletion.Capabilities{}
	}
	if c, ok := api.(EnrollmentRequestUpdate); ok {
		allCapabilities.Update["EnrollmentRequest"] = update.Capabilities{}
		c, ok := c.(EnrollmentRequestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEnrollmentRequest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["EnrollmentRequest"] = c
			}
		}
	}
	if c, ok := api.(EnrollmentRequestSearch); ok {
		c, err := c.SearchCapabilitiesEnrollmentRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["EnrollmentRequest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["EnrollmentRequest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EnrollmentResponseCreate); ok {
		allCapabilities.Create["EnrollmentResponse"] = create.Capabilities{}
	}
	if _, ok := api.(EnrollmentResponseRead); ok {
		allCapabilities.Read["EnrollmentResponse"] = read.Capabilities{}
	}
	if _, ok := api.(EnrollmentResponseDelete); ok {
		allCapabilities.Delete["EnrollmentResponse"] = deletion.Capabilities{}
	}
	if c, ok := api.(EnrollmentResponseUpdate); ok {
		allCapabilities.Update["EnrollmentResponse"] = update.Capabilities{}
		c, ok := c.(EnrollmentResponseUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEnrollmentResponse(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["EnrollmentResponse"] = c
			}
		}
	}
	if c, ok := api.(EnrollmentResponseSearch); ok {
		c, err := c.SearchCapabilitiesEnrollmentResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["EnrollmentResponse"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["EnrollmentResponse"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EpisodeOfCareCreate); ok {
		allCapabilities.Create["EpisodeOfCare"] = create.Capabilities{}
	}
	if _, ok := api.(EpisodeOfCareRead); ok {
		allCapabilities.Read["EpisodeOfCare"] = read.Capabilities{}
	}
	if _, ok := api.(EpisodeOfCareDelete); ok {
		allCapabilities.Delete["EpisodeOfCare"] = deletion.Capabilities{}
	}
	if c, ok := api.(EpisodeOfCareUpdate); ok {
		allCapabilities.Update["EpisodeOfCare"] = update.Capabilities{}
		c, ok := c.(EpisodeOfCareUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEpisodeOfCare(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["EpisodeOfCare"] = c
			}
		}
	}
	if c, ok := api.(EpisodeOfCareSearch); ok {
		c, err := c.SearchCapabilitiesEpisodeOfCare(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["EpisodeOfCare"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["EpisodeOfCare"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EventDefinitionCreate); ok {
		allCapabilities.Create["EventDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(EventDefinitionRead); ok {
		allCapabilities.Read["EventDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(EventDefinitionDelete); ok {
		allCapabilities.Delete["EventDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(EventDefinitionUpdate); ok {
		allCapabilities.Update["EventDefinition"] = update.Capabilities{}
		c, ok := c.(EventDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEventDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["EventDefinition"] = c
			}
		}
	}
	if c, ok := api.(EventDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesEventDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["EventDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["EventDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EvidenceCreate); ok {
		allCapabilities.Create["Evidence"] = create.Capabilities{}
	}
	if _, ok := api.(EvidenceRead); ok {
		allCapabilities.Read["Evidence"] = read.Capabilities{}
	}
	if _, ok := api.(EvidenceDelete); ok {
		allCapabilities.Delete["Evidence"] = deletion.Capabilities{}
	}
	if c, ok := api.(EvidenceUpdate); ok {
		allCapabilities.Update["Evidence"] = update.Capabilities{}
		c, ok := c.(EvidenceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEvidence(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Evidence"] = c
			}
		}
	}
	if c, ok := api.(EvidenceSearch); ok {
		c, err := c.SearchCapabilitiesEvidence(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Evidence"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Evidence"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EvidenceReportCreate); ok {
		allCapabilities.Create["EvidenceReport"] = create.Capabilities{}
	}
	if _, ok := api.(EvidenceReportRead); ok {
		allCapabilities.Read["EvidenceReport"] = read.Capabilities{}
	}
	if _, ok := api.(EvidenceReportDelete); ok {
		allCapabilities.Delete["EvidenceReport"] = deletion.Capabilities{}
	}
	if c, ok := api.(EvidenceReportUpdate); ok {
		allCapabilities.Update["EvidenceReport"] = update.Capabilities{}
		c, ok := c.(EvidenceReportUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEvidenceReport(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["EvidenceReport"] = c
			}
		}
	}
	if c, ok := api.(EvidenceReportSearch); ok {
		c, err := c.SearchCapabilitiesEvidenceReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["EvidenceReport"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["EvidenceReport"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(EvidenceVariableCreate); ok {
		allCapabilities.Create["EvidenceVariable"] = create.Capabilities{}
	}
	if _, ok := api.(EvidenceVariableRead); ok {
		allCapabilities.Read["EvidenceVariable"] = read.Capabilities{}
	}
	if _, ok := api.(EvidenceVariableDelete); ok {
		allCapabilities.Delete["EvidenceVariable"] = deletion.Capabilities{}
	}
	if c, ok := api.(EvidenceVariableUpdate); ok {
		allCapabilities.Update["EvidenceVariable"] = update.Capabilities{}
		c, ok := c.(EvidenceVariableUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesEvidenceVariable(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["EvidenceVariable"] = c
			}
		}
	}
	if c, ok := api.(EvidenceVariableSearch); ok {
		c, err := c.SearchCapabilitiesEvidenceVariable(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["EvidenceVariable"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["EvidenceVariable"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ExampleScenarioCreate); ok {
		allCapabilities.Create["ExampleScenario"] = create.Capabilities{}
	}
	if _, ok := api.(ExampleScenarioRead); ok {
		allCapabilities.Read["ExampleScenario"] = read.Capabilities{}
	}
	if _, ok := api.(ExampleScenarioDelete); ok {
		allCapabilities.Delete["ExampleScenario"] = deletion.Capabilities{}
	}
	if c, ok := api.(ExampleScenarioUpdate); ok {
		allCapabilities.Update["ExampleScenario"] = update.Capabilities{}
		c, ok := c.(ExampleScenarioUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesExampleScenario(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ExampleScenario"] = c
			}
		}
	}
	if c, ok := api.(ExampleScenarioSearch); ok {
		c, err := c.SearchCapabilitiesExampleScenario(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ExampleScenario"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ExampleScenario"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ExplanationOfBenefitCreate); ok {
		allCapabilities.Create["ExplanationOfBenefit"] = create.Capabilities{}
	}
	if _, ok := api.(ExplanationOfBenefitRead); ok {
		allCapabilities.Read["ExplanationOfBenefit"] = read.Capabilities{}
	}
	if _, ok := api.(ExplanationOfBenefitDelete); ok {
		allCapabilities.Delete["ExplanationOfBenefit"] = deletion.Capabilities{}
	}
	if c, ok := api.(ExplanationOfBenefitUpdate); ok {
		allCapabilities.Update["ExplanationOfBenefit"] = update.Capabilities{}
		c, ok := c.(ExplanationOfBenefitUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesExplanationOfBenefit(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ExplanationOfBenefit"] = c
			}
		}
	}
	if c, ok := api.(ExplanationOfBenefitSearch); ok {
		c, err := c.SearchCapabilitiesExplanationOfBenefit(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ExplanationOfBenefit"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ExplanationOfBenefit"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(FamilyMemberHistoryCreate); ok {
		allCapabilities.Create["FamilyMemberHistory"] = create.Capabilities{}
	}
	if _, ok := api.(FamilyMemberHistoryRead); ok {
		allCapabilities.Read["FamilyMemberHistory"] = read.Capabilities{}
	}
	if _, ok := api.(FamilyMemberHistoryDelete); ok {
		allCapabilities.Delete["FamilyMemberHistory"] = deletion.Capabilities{}
	}
	if c, ok := api.(FamilyMemberHistoryUpdate); ok {
		allCapabilities.Update["FamilyMemberHistory"] = update.Capabilities{}
		c, ok := c.(FamilyMemberHistoryUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesFamilyMemberHistory(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["FamilyMemberHistory"] = c
			}
		}
	}
	if c, ok := api.(FamilyMemberHistorySearch); ok {
		c, err := c.SearchCapabilitiesFamilyMemberHistory(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["FamilyMemberHistory"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["FamilyMemberHistory"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(FlagCreate); ok {
		allCapabilities.Create["Flag"] = create.Capabilities{}
	}
	if _, ok := api.(FlagRead); ok {
		allCapabilities.Read["Flag"] = read.Capabilities{}
	}
	if _, ok := api.(FlagDelete); ok {
		allCapabilities.Delete["Flag"] = deletion.Capabilities{}
	}
	if c, ok := api.(FlagUpdate); ok {
		allCapabilities.Update["Flag"] = update.Capabilities{}
		c, ok := c.(FlagUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesFlag(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Flag"] = c
			}
		}
	}
	if c, ok := api.(FlagSearch); ok {
		c, err := c.SearchCapabilitiesFlag(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Flag"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Flag"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(GoalCreate); ok {
		allCapabilities.Create["Goal"] = create.Capabilities{}
	}
	if _, ok := api.(GoalRead); ok {
		allCapabilities.Read["Goal"] = read.Capabilities{}
	}
	if _, ok := api.(GoalDelete); ok {
		allCapabilities.Delete["Goal"] = deletion.Capabilities{}
	}
	if c, ok := api.(GoalUpdate); ok {
		allCapabilities.Update["Goal"] = update.Capabilities{}
		c, ok := c.(GoalUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesGoal(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Goal"] = c
			}
		}
	}
	if c, ok := api.(GoalSearch); ok {
		c, err := c.SearchCapabilitiesGoal(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Goal"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Goal"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(GraphDefinitionCreate); ok {
		allCapabilities.Create["GraphDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(GraphDefinitionRead); ok {
		allCapabilities.Read["GraphDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(GraphDefinitionDelete); ok {
		allCapabilities.Delete["GraphDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(GraphDefinitionUpdate); ok {
		allCapabilities.Update["GraphDefinition"] = update.Capabilities{}
		c, ok := c.(GraphDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesGraphDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["GraphDefinition"] = c
			}
		}
	}
	if c, ok := api.(GraphDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesGraphDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["GraphDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["GraphDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(GroupCreate); ok {
		allCapabilities.Create["Group"] = create.Capabilities{}
	}
	if _, ok := api.(GroupRead); ok {
		allCapabilities.Read["Group"] = read.Capabilities{}
	}
	if _, ok := api.(GroupDelete); ok {
		allCapabilities.Delete["Group"] = deletion.Capabilities{}
	}
	if c, ok := api.(GroupUpdate); ok {
		allCapabilities.Update["Group"] = update.Capabilities{}
		c, ok := c.(GroupUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesGroup(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Group"] = c
			}
		}
	}
	if c, ok := api.(GroupSearch); ok {
		c, err := c.SearchCapabilitiesGroup(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Group"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Group"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(GuidanceResponseCreate); ok {
		allCapabilities.Create["GuidanceResponse"] = create.Capabilities{}
	}
	if _, ok := api.(GuidanceResponseRead); ok {
		allCapabilities.Read["GuidanceResponse"] = read.Capabilities{}
	}
	if _, ok := api.(GuidanceResponseDelete); ok {
		allCapabilities.Delete["GuidanceResponse"] = deletion.Capabilities{}
	}
	if c, ok := api.(GuidanceResponseUpdate); ok {
		allCapabilities.Update["GuidanceResponse"] = update.Capabilities{}
		c, ok := c.(GuidanceResponseUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesGuidanceResponse(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["GuidanceResponse"] = c
			}
		}
	}
	if c, ok := api.(GuidanceResponseSearch); ok {
		c, err := c.SearchCapabilitiesGuidanceResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["GuidanceResponse"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["GuidanceResponse"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(HealthcareServiceCreate); ok {
		allCapabilities.Create["HealthcareService"] = create.Capabilities{}
	}
	if _, ok := api.(HealthcareServiceRead); ok {
		allCapabilities.Read["HealthcareService"] = read.Capabilities{}
	}
	if _, ok := api.(HealthcareServiceDelete); ok {
		allCapabilities.Delete["HealthcareService"] = deletion.Capabilities{}
	}
	if c, ok := api.(HealthcareServiceUpdate); ok {
		allCapabilities.Update["HealthcareService"] = update.Capabilities{}
		c, ok := c.(HealthcareServiceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesHealthcareService(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["HealthcareService"] = c
			}
		}
	}
	if c, ok := api.(HealthcareServiceSearch); ok {
		c, err := c.SearchCapabilitiesHealthcareService(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["HealthcareService"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["HealthcareService"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ImagingStudyCreate); ok {
		allCapabilities.Create["ImagingStudy"] = create.Capabilities{}
	}
	if _, ok := api.(ImagingStudyRead); ok {
		allCapabilities.Read["ImagingStudy"] = read.Capabilities{}
	}
	if _, ok := api.(ImagingStudyDelete); ok {
		allCapabilities.Delete["ImagingStudy"] = deletion.Capabilities{}
	}
	if c, ok := api.(ImagingStudyUpdate); ok {
		allCapabilities.Update["ImagingStudy"] = update.Capabilities{}
		c, ok := c.(ImagingStudyUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesImagingStudy(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ImagingStudy"] = c
			}
		}
	}
	if c, ok := api.(ImagingStudySearch); ok {
		c, err := c.SearchCapabilitiesImagingStudy(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ImagingStudy"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ImagingStudy"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ImmunizationCreate); ok {
		allCapabilities.Create["Immunization"] = create.Capabilities{}
	}
	if _, ok := api.(ImmunizationRead); ok {
		allCapabilities.Read["Immunization"] = read.Capabilities{}
	}
	if _, ok := api.(ImmunizationDelete); ok {
		allCapabilities.Delete["Immunization"] = deletion.Capabilities{}
	}
	if c, ok := api.(ImmunizationUpdate); ok {
		allCapabilities.Update["Immunization"] = update.Capabilities{}
		c, ok := c.(ImmunizationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesImmunization(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Immunization"] = c
			}
		}
	}
	if c, ok := api.(ImmunizationSearch); ok {
		c, err := c.SearchCapabilitiesImmunization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Immunization"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Immunization"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ImmunizationEvaluationCreate); ok {
		allCapabilities.Create["ImmunizationEvaluation"] = create.Capabilities{}
	}
	if _, ok := api.(ImmunizationEvaluationRead); ok {
		allCapabilities.Read["ImmunizationEvaluation"] = read.Capabilities{}
	}
	if _, ok := api.(ImmunizationEvaluationDelete); ok {
		allCapabilities.Delete["ImmunizationEvaluation"] = deletion.Capabilities{}
	}
	if c, ok := api.(ImmunizationEvaluationUpdate); ok {
		allCapabilities.Update["ImmunizationEvaluation"] = update.Capabilities{}
		c, ok := c.(ImmunizationEvaluationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesImmunizationEvaluation(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ImmunizationEvaluation"] = c
			}
		}
	}
	if c, ok := api.(ImmunizationEvaluationSearch); ok {
		c, err := c.SearchCapabilitiesImmunizationEvaluation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ImmunizationEvaluation"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ImmunizationEvaluation"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ImmunizationRecommendationCreate); ok {
		allCapabilities.Create["ImmunizationRecommendation"] = create.Capabilities{}
	}
	if _, ok := api.(ImmunizationRecommendationRead); ok {
		allCapabilities.Read["ImmunizationRecommendation"] = read.Capabilities{}
	}
	if _, ok := api.(ImmunizationRecommendationDelete); ok {
		allCapabilities.Delete["ImmunizationRecommendation"] = deletion.Capabilities{}
	}
	if c, ok := api.(ImmunizationRecommendationUpdate); ok {
		allCapabilities.Update["ImmunizationRecommendation"] = update.Capabilities{}
		c, ok := c.(ImmunizationRecommendationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesImmunizationRecommendation(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ImmunizationRecommendation"] = c
			}
		}
	}
	if c, ok := api.(ImmunizationRecommendationSearch); ok {
		c, err := c.SearchCapabilitiesImmunizationRecommendation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ImmunizationRecommendation"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ImmunizationRecommendation"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ImplementationGuideCreate); ok {
		allCapabilities.Create["ImplementationGuide"] = create.Capabilities{}
	}
	if _, ok := api.(ImplementationGuideRead); ok {
		allCapabilities.Read["ImplementationGuide"] = read.Capabilities{}
	}
	if _, ok := api.(ImplementationGuideDelete); ok {
		allCapabilities.Delete["ImplementationGuide"] = deletion.Capabilities{}
	}
	if c, ok := api.(ImplementationGuideUpdate); ok {
		allCapabilities.Update["ImplementationGuide"] = update.Capabilities{}
		c, ok := c.(ImplementationGuideUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesImplementationGuide(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ImplementationGuide"] = c
			}
		}
	}
	if c, ok := api.(ImplementationGuideSearch); ok {
		c, err := c.SearchCapabilitiesImplementationGuide(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ImplementationGuide"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ImplementationGuide"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(IngredientCreate); ok {
		allCapabilities.Create["Ingredient"] = create.Capabilities{}
	}
	if _, ok := api.(IngredientRead); ok {
		allCapabilities.Read["Ingredient"] = read.Capabilities{}
	}
	if _, ok := api.(IngredientDelete); ok {
		allCapabilities.Delete["Ingredient"] = deletion.Capabilities{}
	}
	if c, ok := api.(IngredientUpdate); ok {
		allCapabilities.Update["Ingredient"] = update.Capabilities{}
		c, ok := c.(IngredientUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesIngredient(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Ingredient"] = c
			}
		}
	}
	if c, ok := api.(IngredientSearch); ok {
		c, err := c.SearchCapabilitiesIngredient(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Ingredient"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Ingredient"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(InsurancePlanCreate); ok {
		allCapabilities.Create["InsurancePlan"] = create.Capabilities{}
	}
	if _, ok := api.(InsurancePlanRead); ok {
		allCapabilities.Read["InsurancePlan"] = read.Capabilities{}
	}
	if _, ok := api.(InsurancePlanDelete); ok {
		allCapabilities.Delete["InsurancePlan"] = deletion.Capabilities{}
	}
	if c, ok := api.(InsurancePlanUpdate); ok {
		allCapabilities.Update["InsurancePlan"] = update.Capabilities{}
		c, ok := c.(InsurancePlanUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesInsurancePlan(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["InsurancePlan"] = c
			}
		}
	}
	if c, ok := api.(InsurancePlanSearch); ok {
		c, err := c.SearchCapabilitiesInsurancePlan(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["InsurancePlan"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["InsurancePlan"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(InvoiceCreate); ok {
		allCapabilities.Create["Invoice"] = create.Capabilities{}
	}
	if _, ok := api.(InvoiceRead); ok {
		allCapabilities.Read["Invoice"] = read.Capabilities{}
	}
	if _, ok := api.(InvoiceDelete); ok {
		allCapabilities.Delete["Invoice"] = deletion.Capabilities{}
	}
	if c, ok := api.(InvoiceUpdate); ok {
		allCapabilities.Update["Invoice"] = update.Capabilities{}
		c, ok := c.(InvoiceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesInvoice(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Invoice"] = c
			}
		}
	}
	if c, ok := api.(InvoiceSearch); ok {
		c, err := c.SearchCapabilitiesInvoice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Invoice"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Invoice"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(LibraryCreate); ok {
		allCapabilities.Create["Library"] = create.Capabilities{}
	}
	if _, ok := api.(LibraryRead); ok {
		allCapabilities.Read["Library"] = read.Capabilities{}
	}
	if _, ok := api.(LibraryDelete); ok {
		allCapabilities.Delete["Library"] = deletion.Capabilities{}
	}
	if c, ok := api.(LibraryUpdate); ok {
		allCapabilities.Update["Library"] = update.Capabilities{}
		c, ok := c.(LibraryUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesLibrary(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Library"] = c
			}
		}
	}
	if c, ok := api.(LibrarySearch); ok {
		c, err := c.SearchCapabilitiesLibrary(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Library"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Library"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(LinkageCreate); ok {
		allCapabilities.Create["Linkage"] = create.Capabilities{}
	}
	if _, ok := api.(LinkageRead); ok {
		allCapabilities.Read["Linkage"] = read.Capabilities{}
	}
	if _, ok := api.(LinkageDelete); ok {
		allCapabilities.Delete["Linkage"] = deletion.Capabilities{}
	}
	if c, ok := api.(LinkageUpdate); ok {
		allCapabilities.Update["Linkage"] = update.Capabilities{}
		c, ok := c.(LinkageUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesLinkage(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Linkage"] = c
			}
		}
	}
	if c, ok := api.(LinkageSearch); ok {
		c, err := c.SearchCapabilitiesLinkage(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Linkage"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Linkage"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ListCreate); ok {
		allCapabilities.Create["List"] = create.Capabilities{}
	}
	if _, ok := api.(ListRead); ok {
		allCapabilities.Read["List"] = read.Capabilities{}
	}
	if _, ok := api.(ListDelete); ok {
		allCapabilities.Delete["List"] = deletion.Capabilities{}
	}
	if c, ok := api.(ListUpdate); ok {
		allCapabilities.Update["List"] = update.Capabilities{}
		c, ok := c.(ListUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesList(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["List"] = c
			}
		}
	}
	if c, ok := api.(ListSearch); ok {
		c, err := c.SearchCapabilitiesList(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["List"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["List"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(LocationCreate); ok {
		allCapabilities.Create["Location"] = create.Capabilities{}
	}
	if _, ok := api.(LocationRead); ok {
		allCapabilities.Read["Location"] = read.Capabilities{}
	}
	if _, ok := api.(LocationDelete); ok {
		allCapabilities.Delete["Location"] = deletion.Capabilities{}
	}
	if c, ok := api.(LocationUpdate); ok {
		allCapabilities.Update["Location"] = update.Capabilities{}
		c, ok := c.(LocationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesLocation(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Location"] = c
			}
		}
	}
	if c, ok := api.(LocationSearch); ok {
		c, err := c.SearchCapabilitiesLocation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Location"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Location"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ManufacturedItemDefinitionCreate); ok {
		allCapabilities.Create["ManufacturedItemDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(ManufacturedItemDefinitionRead); ok {
		allCapabilities.Read["ManufacturedItemDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(ManufacturedItemDefinitionDelete); ok {
		allCapabilities.Delete["ManufacturedItemDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ManufacturedItemDefinitionUpdate); ok {
		allCapabilities.Update["ManufacturedItemDefinition"] = update.Capabilities{}
		c, ok := c.(ManufacturedItemDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesManufacturedItemDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ManufacturedItemDefinition"] = c
			}
		}
	}
	if c, ok := api.(ManufacturedItemDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesManufacturedItemDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ManufacturedItemDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ManufacturedItemDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MeasureCreate); ok {
		allCapabilities.Create["Measure"] = create.Capabilities{}
	}
	if _, ok := api.(MeasureRead); ok {
		allCapabilities.Read["Measure"] = read.Capabilities{}
	}
	if _, ok := api.(MeasureDelete); ok {
		allCapabilities.Delete["Measure"] = deletion.Capabilities{}
	}
	if c, ok := api.(MeasureUpdate); ok {
		allCapabilities.Update["Measure"] = update.Capabilities{}
		c, ok := c.(MeasureUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMeasure(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Measure"] = c
			}
		}
	}
	if c, ok := api.(MeasureSearch); ok {
		c, err := c.SearchCapabilitiesMeasure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Measure"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Measure"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MeasureReportCreate); ok {
		allCapabilities.Create["MeasureReport"] = create.Capabilities{}
	}
	if _, ok := api.(MeasureReportRead); ok {
		allCapabilities.Read["MeasureReport"] = read.Capabilities{}
	}
	if _, ok := api.(MeasureReportDelete); ok {
		allCapabilities.Delete["MeasureReport"] = deletion.Capabilities{}
	}
	if c, ok := api.(MeasureReportUpdate); ok {
		allCapabilities.Update["MeasureReport"] = update.Capabilities{}
		c, ok := c.(MeasureReportUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMeasureReport(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MeasureReport"] = c
			}
		}
	}
	if c, ok := api.(MeasureReportSearch); ok {
		c, err := c.SearchCapabilitiesMeasureReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MeasureReport"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MeasureReport"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MediaCreate); ok {
		allCapabilities.Create["Media"] = create.Capabilities{}
	}
	if _, ok := api.(MediaRead); ok {
		allCapabilities.Read["Media"] = read.Capabilities{}
	}
	if _, ok := api.(MediaDelete); ok {
		allCapabilities.Delete["Media"] = deletion.Capabilities{}
	}
	if c, ok := api.(MediaUpdate); ok {
		allCapabilities.Update["Media"] = update.Capabilities{}
		c, ok := c.(MediaUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedia(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Media"] = c
			}
		}
	}
	if c, ok := api.(MediaSearch); ok {
		c, err := c.SearchCapabilitiesMedia(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Media"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Media"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MedicationCreate); ok {
		allCapabilities.Create["Medication"] = create.Capabilities{}
	}
	if _, ok := api.(MedicationRead); ok {
		allCapabilities.Read["Medication"] = read.Capabilities{}
	}
	if _, ok := api.(MedicationDelete); ok {
		allCapabilities.Delete["Medication"] = deletion.Capabilities{}
	}
	if c, ok := api.(MedicationUpdate); ok {
		allCapabilities.Update["Medication"] = update.Capabilities{}
		c, ok := c.(MedicationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedication(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Medication"] = c
			}
		}
	}
	if c, ok := api.(MedicationSearch); ok {
		c, err := c.SearchCapabilitiesMedication(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Medication"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Medication"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MedicationAdministrationCreate); ok {
		allCapabilities.Create["MedicationAdministration"] = create.Capabilities{}
	}
	if _, ok := api.(MedicationAdministrationRead); ok {
		allCapabilities.Read["MedicationAdministration"] = read.Capabilities{}
	}
	if _, ok := api.(MedicationAdministrationDelete); ok {
		allCapabilities.Delete["MedicationAdministration"] = deletion.Capabilities{}
	}
	if c, ok := api.(MedicationAdministrationUpdate); ok {
		allCapabilities.Update["MedicationAdministration"] = update.Capabilities{}
		c, ok := c.(MedicationAdministrationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedicationAdministration(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MedicationAdministration"] = c
			}
		}
	}
	if c, ok := api.(MedicationAdministrationSearch); ok {
		c, err := c.SearchCapabilitiesMedicationAdministration(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MedicationAdministration"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MedicationAdministration"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MedicationDispenseCreate); ok {
		allCapabilities.Create["MedicationDispense"] = create.Capabilities{}
	}
	if _, ok := api.(MedicationDispenseRead); ok {
		allCapabilities.Read["MedicationDispense"] = read.Capabilities{}
	}
	if _, ok := api.(MedicationDispenseDelete); ok {
		allCapabilities.Delete["MedicationDispense"] = deletion.Capabilities{}
	}
	if c, ok := api.(MedicationDispenseUpdate); ok {
		allCapabilities.Update["MedicationDispense"] = update.Capabilities{}
		c, ok := c.(MedicationDispenseUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedicationDispense(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MedicationDispense"] = c
			}
		}
	}
	if c, ok := api.(MedicationDispenseSearch); ok {
		c, err := c.SearchCapabilitiesMedicationDispense(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MedicationDispense"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MedicationDispense"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MedicationKnowledgeCreate); ok {
		allCapabilities.Create["MedicationKnowledge"] = create.Capabilities{}
	}
	if _, ok := api.(MedicationKnowledgeRead); ok {
		allCapabilities.Read["MedicationKnowledge"] = read.Capabilities{}
	}
	if _, ok := api.(MedicationKnowledgeDelete); ok {
		allCapabilities.Delete["MedicationKnowledge"] = deletion.Capabilities{}
	}
	if c, ok := api.(MedicationKnowledgeUpdate); ok {
		allCapabilities.Update["MedicationKnowledge"] = update.Capabilities{}
		c, ok := c.(MedicationKnowledgeUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedicationKnowledge(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MedicationKnowledge"] = c
			}
		}
	}
	if c, ok := api.(MedicationKnowledgeSearch); ok {
		c, err := c.SearchCapabilitiesMedicationKnowledge(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MedicationKnowledge"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MedicationKnowledge"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MedicationRequestCreate); ok {
		allCapabilities.Create["MedicationRequest"] = create.Capabilities{}
	}
	if _, ok := api.(MedicationRequestRead); ok {
		allCapabilities.Read["MedicationRequest"] = read.Capabilities{}
	}
	if _, ok := api.(MedicationRequestDelete); ok {
		allCapabilities.Delete["MedicationRequest"] = deletion.Capabilities{}
	}
	if c, ok := api.(MedicationRequestUpdate); ok {
		allCapabilities.Update["MedicationRequest"] = update.Capabilities{}
		c, ok := c.(MedicationRequestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedicationRequest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MedicationRequest"] = c
			}
		}
	}
	if c, ok := api.(MedicationRequestSearch); ok {
		c, err := c.SearchCapabilitiesMedicationRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MedicationRequest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MedicationRequest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MedicationStatementCreate); ok {
		allCapabilities.Create["MedicationStatement"] = create.Capabilities{}
	}
	if _, ok := api.(MedicationStatementRead); ok {
		allCapabilities.Read["MedicationStatement"] = read.Capabilities{}
	}
	if _, ok := api.(MedicationStatementDelete); ok {
		allCapabilities.Delete["MedicationStatement"] = deletion.Capabilities{}
	}
	if c, ok := api.(MedicationStatementUpdate); ok {
		allCapabilities.Update["MedicationStatement"] = update.Capabilities{}
		c, ok := c.(MedicationStatementUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedicationStatement(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MedicationStatement"] = c
			}
		}
	}
	if c, ok := api.(MedicationStatementSearch); ok {
		c, err := c.SearchCapabilitiesMedicationStatement(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MedicationStatement"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MedicationStatement"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MedicinalProductDefinitionCreate); ok {
		allCapabilities.Create["MedicinalProductDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(MedicinalProductDefinitionRead); ok {
		allCapabilities.Read["MedicinalProductDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(MedicinalProductDefinitionDelete); ok {
		allCapabilities.Delete["MedicinalProductDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(MedicinalProductDefinitionUpdate); ok {
		allCapabilities.Update["MedicinalProductDefinition"] = update.Capabilities{}
		c, ok := c.(MedicinalProductDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMedicinalProductDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MedicinalProductDefinition"] = c
			}
		}
	}
	if c, ok := api.(MedicinalProductDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesMedicinalProductDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MedicinalProductDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MedicinalProductDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MessageDefinitionCreate); ok {
		allCapabilities.Create["MessageDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(MessageDefinitionRead); ok {
		allCapabilities.Read["MessageDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(MessageDefinitionDelete); ok {
		allCapabilities.Delete["MessageDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(MessageDefinitionUpdate); ok {
		allCapabilities.Update["MessageDefinition"] = update.Capabilities{}
		c, ok := c.(MessageDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMessageDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MessageDefinition"] = c
			}
		}
	}
	if c, ok := api.(MessageDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesMessageDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MessageDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MessageDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MessageHeaderCreate); ok {
		allCapabilities.Create["MessageHeader"] = create.Capabilities{}
	}
	if _, ok := api.(MessageHeaderRead); ok {
		allCapabilities.Read["MessageHeader"] = read.Capabilities{}
	}
	if _, ok := api.(MessageHeaderDelete); ok {
		allCapabilities.Delete["MessageHeader"] = deletion.Capabilities{}
	}
	if c, ok := api.(MessageHeaderUpdate); ok {
		allCapabilities.Update["MessageHeader"] = update.Capabilities{}
		c, ok := c.(MessageHeaderUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMessageHeader(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MessageHeader"] = c
			}
		}
	}
	if c, ok := api.(MessageHeaderSearch); ok {
		c, err := c.SearchCapabilitiesMessageHeader(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MessageHeader"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MessageHeader"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(MolecularSequenceCreate); ok {
		allCapabilities.Create["MolecularSequence"] = create.Capabilities{}
	}
	if _, ok := api.(MolecularSequenceRead); ok {
		allCapabilities.Read["MolecularSequence"] = read.Capabilities{}
	}
	if _, ok := api.(MolecularSequenceDelete); ok {
		allCapabilities.Delete["MolecularSequence"] = deletion.Capabilities{}
	}
	if c, ok := api.(MolecularSequenceUpdate); ok {
		allCapabilities.Update["MolecularSequence"] = update.Capabilities{}
		c, ok := c.(MolecularSequenceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesMolecularSequence(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["MolecularSequence"] = c
			}
		}
	}
	if c, ok := api.(MolecularSequenceSearch); ok {
		c, err := c.SearchCapabilitiesMolecularSequence(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["MolecularSequence"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["MolecularSequence"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(NamingSystemCreate); ok {
		allCapabilities.Create["NamingSystem"] = create.Capabilities{}
	}
	if _, ok := api.(NamingSystemRead); ok {
		allCapabilities.Read["NamingSystem"] = read.Capabilities{}
	}
	if _, ok := api.(NamingSystemDelete); ok {
		allCapabilities.Delete["NamingSystem"] = deletion.Capabilities{}
	}
	if c, ok := api.(NamingSystemUpdate); ok {
		allCapabilities.Update["NamingSystem"] = update.Capabilities{}
		c, ok := c.(NamingSystemUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesNamingSystem(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["NamingSystem"] = c
			}
		}
	}
	if c, ok := api.(NamingSystemSearch); ok {
		c, err := c.SearchCapabilitiesNamingSystem(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["NamingSystem"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["NamingSystem"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(NutritionOrderCreate); ok {
		allCapabilities.Create["NutritionOrder"] = create.Capabilities{}
	}
	if _, ok := api.(NutritionOrderRead); ok {
		allCapabilities.Read["NutritionOrder"] = read.Capabilities{}
	}
	if _, ok := api.(NutritionOrderDelete); ok {
		allCapabilities.Delete["NutritionOrder"] = deletion.Capabilities{}
	}
	if c, ok := api.(NutritionOrderUpdate); ok {
		allCapabilities.Update["NutritionOrder"] = update.Capabilities{}
		c, ok := c.(NutritionOrderUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesNutritionOrder(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["NutritionOrder"] = c
			}
		}
	}
	if c, ok := api.(NutritionOrderSearch); ok {
		c, err := c.SearchCapabilitiesNutritionOrder(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["NutritionOrder"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["NutritionOrder"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(NutritionProductCreate); ok {
		allCapabilities.Create["NutritionProduct"] = create.Capabilities{}
	}
	if _, ok := api.(NutritionProductRead); ok {
		allCapabilities.Read["NutritionProduct"] = read.Capabilities{}
	}
	if _, ok := api.(NutritionProductDelete); ok {
		allCapabilities.Delete["NutritionProduct"] = deletion.Capabilities{}
	}
	if c, ok := api.(NutritionProductUpdate); ok {
		allCapabilities.Update["NutritionProduct"] = update.Capabilities{}
		c, ok := c.(NutritionProductUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesNutritionProduct(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["NutritionProduct"] = c
			}
		}
	}
	if c, ok := api.(NutritionProductSearch); ok {
		c, err := c.SearchCapabilitiesNutritionProduct(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["NutritionProduct"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["NutritionProduct"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ObservationCreate); ok {
		allCapabilities.Create["Observation"] = create.Capabilities{}
	}
	if _, ok := api.(ObservationRead); ok {
		allCapabilities.Read["Observation"] = read.Capabilities{}
	}
	if _, ok := api.(ObservationDelete); ok {
		allCapabilities.Delete["Observation"] = deletion.Capabilities{}
	}
	if c, ok := api.(ObservationUpdate); ok {
		allCapabilities.Update["Observation"] = update.Capabilities{}
		c, ok := c.(ObservationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesObservation(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Observation"] = c
			}
		}
	}
	if c, ok := api.(ObservationSearch); ok {
		c, err := c.SearchCapabilitiesObservation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Observation"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Observation"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ObservationDefinitionCreate); ok {
		allCapabilities.Create["ObservationDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(ObservationDefinitionRead); ok {
		allCapabilities.Read["ObservationDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(ObservationDefinitionDelete); ok {
		allCapabilities.Delete["ObservationDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ObservationDefinitionUpdate); ok {
		allCapabilities.Update["ObservationDefinition"] = update.Capabilities{}
		c, ok := c.(ObservationDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesObservationDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ObservationDefinition"] = c
			}
		}
	}
	if c, ok := api.(ObservationDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesObservationDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ObservationDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ObservationDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(OperationDefinitionCreate); ok {
		allCapabilities.Create["OperationDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(OperationDefinitionRead); ok {
		allCapabilities.Read["OperationDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(OperationDefinitionDelete); ok {
		allCapabilities.Delete["OperationDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(OperationDefinitionUpdate); ok {
		allCapabilities.Update["OperationDefinition"] = update.Capabilities{}
		c, ok := c.(OperationDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesOperationDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["OperationDefinition"] = c
			}
		}
	}
	if c, ok := api.(OperationDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesOperationDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["OperationDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["OperationDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(OperationOutcomeCreate); ok {
		allCapabilities.Create["OperationOutcome"] = create.Capabilities{}
	}
	if _, ok := api.(OperationOutcomeRead); ok {
		allCapabilities.Read["OperationOutcome"] = read.Capabilities{}
	}
	if _, ok := api.(OperationOutcomeDelete); ok {
		allCapabilities.Delete["OperationOutcome"] = deletion.Capabilities{}
	}
	if c, ok := api.(OperationOutcomeUpdate); ok {
		allCapabilities.Update["OperationOutcome"] = update.Capabilities{}
		c, ok := c.(OperationOutcomeUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesOperationOutcome(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["OperationOutcome"] = c
			}
		}
	}
	if c, ok := api.(OperationOutcomeSearch); ok {
		c, err := c.SearchCapabilitiesOperationOutcome(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["OperationOutcome"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["OperationOutcome"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(OrganizationCreate); ok {
		allCapabilities.Create["Organization"] = create.Capabilities{}
	}
	if _, ok := api.(OrganizationRead); ok {
		allCapabilities.Read["Organization"] = read.Capabilities{}
	}
	if _, ok := api.(OrganizationDelete); ok {
		allCapabilities.Delete["Organization"] = deletion.Capabilities{}
	}
	if c, ok := api.(OrganizationUpdate); ok {
		allCapabilities.Update["Organization"] = update.Capabilities{}
		c, ok := c.(OrganizationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesOrganization(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Organization"] = c
			}
		}
	}
	if c, ok := api.(OrganizationSearch); ok {
		c, err := c.SearchCapabilitiesOrganization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Organization"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Organization"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(OrganizationAffiliationCreate); ok {
		allCapabilities.Create["OrganizationAffiliation"] = create.Capabilities{}
	}
	if _, ok := api.(OrganizationAffiliationRead); ok {
		allCapabilities.Read["OrganizationAffiliation"] = read.Capabilities{}
	}
	if _, ok := api.(OrganizationAffiliationDelete); ok {
		allCapabilities.Delete["OrganizationAffiliation"] = deletion.Capabilities{}
	}
	if c, ok := api.(OrganizationAffiliationUpdate); ok {
		allCapabilities.Update["OrganizationAffiliation"] = update.Capabilities{}
		c, ok := c.(OrganizationAffiliationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesOrganizationAffiliation(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["OrganizationAffiliation"] = c
			}
		}
	}
	if c, ok := api.(OrganizationAffiliationSearch); ok {
		c, err := c.SearchCapabilitiesOrganizationAffiliation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["OrganizationAffiliation"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["OrganizationAffiliation"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PackagedProductDefinitionCreate); ok {
		allCapabilities.Create["PackagedProductDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(PackagedProductDefinitionRead); ok {
		allCapabilities.Read["PackagedProductDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(PackagedProductDefinitionDelete); ok {
		allCapabilities.Delete["PackagedProductDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(PackagedProductDefinitionUpdate); ok {
		allCapabilities.Update["PackagedProductDefinition"] = update.Capabilities{}
		c, ok := c.(PackagedProductDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPackagedProductDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["PackagedProductDefinition"] = c
			}
		}
	}
	if c, ok := api.(PackagedProductDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesPackagedProductDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["PackagedProductDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["PackagedProductDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ParametersCreate); ok {
		allCapabilities.Create["Parameters"] = create.Capabilities{}
	}
	if _, ok := api.(ParametersRead); ok {
		allCapabilities.Read["Parameters"] = read.Capabilities{}
	}
	if _, ok := api.(ParametersDelete); ok {
		allCapabilities.Delete["Parameters"] = deletion.Capabilities{}
	}
	if c, ok := api.(ParametersUpdate); ok {
		allCapabilities.Update["Parameters"] = update.Capabilities{}
		c, ok := c.(ParametersUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesParameters(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Parameters"] = c
			}
		}
	}
	if c, ok := api.(ParametersSearch); ok {
		c, err := c.SearchCapabilitiesParameters(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Parameters"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Parameters"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PatientCreate); ok {
		allCapabilities.Create["Patient"] = create.Capabilities{}
	}
	if _, ok := api.(PatientRead); ok {
		allCapabilities.Read["Patient"] = read.Capabilities{}
	}
	if _, ok := api.(PatientDelete); ok {
		allCapabilities.Delete["Patient"] = deletion.Capabilities{}
	}
	if c, ok := api.(PatientUpdate); ok {
		allCapabilities.Update["Patient"] = update.Capabilities{}
		c, ok := c.(PatientUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPatient(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Patient"] = c
			}
		}
	}
	if c, ok := api.(PatientSearch); ok {
		c, err := c.SearchCapabilitiesPatient(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Patient"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Patient"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PaymentNoticeCreate); ok {
		allCapabilities.Create["PaymentNotice"] = create.Capabilities{}
	}
	if _, ok := api.(PaymentNoticeRead); ok {
		allCapabilities.Read["PaymentNotice"] = read.Capabilities{}
	}
	if _, ok := api.(PaymentNoticeDelete); ok {
		allCapabilities.Delete["PaymentNotice"] = deletion.Capabilities{}
	}
	if c, ok := api.(PaymentNoticeUpdate); ok {
		allCapabilities.Update["PaymentNotice"] = update.Capabilities{}
		c, ok := c.(PaymentNoticeUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPaymentNotice(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["PaymentNotice"] = c
			}
		}
	}
	if c, ok := api.(PaymentNoticeSearch); ok {
		c, err := c.SearchCapabilitiesPaymentNotice(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["PaymentNotice"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["PaymentNotice"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PaymentReconciliationCreate); ok {
		allCapabilities.Create["PaymentReconciliation"] = create.Capabilities{}
	}
	if _, ok := api.(PaymentReconciliationRead); ok {
		allCapabilities.Read["PaymentReconciliation"] = read.Capabilities{}
	}
	if _, ok := api.(PaymentReconciliationDelete); ok {
		allCapabilities.Delete["PaymentReconciliation"] = deletion.Capabilities{}
	}
	if c, ok := api.(PaymentReconciliationUpdate); ok {
		allCapabilities.Update["PaymentReconciliation"] = update.Capabilities{}
		c, ok := c.(PaymentReconciliationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPaymentReconciliation(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["PaymentReconciliation"] = c
			}
		}
	}
	if c, ok := api.(PaymentReconciliationSearch); ok {
		c, err := c.SearchCapabilitiesPaymentReconciliation(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["PaymentReconciliation"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["PaymentReconciliation"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PersonCreate); ok {
		allCapabilities.Create["Person"] = create.Capabilities{}
	}
	if _, ok := api.(PersonRead); ok {
		allCapabilities.Read["Person"] = read.Capabilities{}
	}
	if _, ok := api.(PersonDelete); ok {
		allCapabilities.Delete["Person"] = deletion.Capabilities{}
	}
	if c, ok := api.(PersonUpdate); ok {
		allCapabilities.Update["Person"] = update.Capabilities{}
		c, ok := c.(PersonUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPerson(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Person"] = c
			}
		}
	}
	if c, ok := api.(PersonSearch); ok {
		c, err := c.SearchCapabilitiesPerson(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Person"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Person"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PlanDefinitionCreate); ok {
		allCapabilities.Create["PlanDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(PlanDefinitionRead); ok {
		allCapabilities.Read["PlanDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(PlanDefinitionDelete); ok {
		allCapabilities.Delete["PlanDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(PlanDefinitionUpdate); ok {
		allCapabilities.Update["PlanDefinition"] = update.Capabilities{}
		c, ok := c.(PlanDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPlanDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["PlanDefinition"] = c
			}
		}
	}
	if c, ok := api.(PlanDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesPlanDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["PlanDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["PlanDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PractitionerCreate); ok {
		allCapabilities.Create["Practitioner"] = create.Capabilities{}
	}
	if _, ok := api.(PractitionerRead); ok {
		allCapabilities.Read["Practitioner"] = read.Capabilities{}
	}
	if _, ok := api.(PractitionerDelete); ok {
		allCapabilities.Delete["Practitioner"] = deletion.Capabilities{}
	}
	if c, ok := api.(PractitionerUpdate); ok {
		allCapabilities.Update["Practitioner"] = update.Capabilities{}
		c, ok := c.(PractitionerUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPractitioner(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Practitioner"] = c
			}
		}
	}
	if c, ok := api.(PractitionerSearch); ok {
		c, err := c.SearchCapabilitiesPractitioner(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Practitioner"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Practitioner"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(PractitionerRoleCreate); ok {
		allCapabilities.Create["PractitionerRole"] = create.Capabilities{}
	}
	if _, ok := api.(PractitionerRoleRead); ok {
		allCapabilities.Read["PractitionerRole"] = read.Capabilities{}
	}
	if _, ok := api.(PractitionerRoleDelete); ok {
		allCapabilities.Delete["PractitionerRole"] = deletion.Capabilities{}
	}
	if c, ok := api.(PractitionerRoleUpdate); ok {
		allCapabilities.Update["PractitionerRole"] = update.Capabilities{}
		c, ok := c.(PractitionerRoleUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesPractitionerRole(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["PractitionerRole"] = c
			}
		}
	}
	if c, ok := api.(PractitionerRoleSearch); ok {
		c, err := c.SearchCapabilitiesPractitionerRole(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["PractitionerRole"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["PractitionerRole"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ProcedureCreate); ok {
		allCapabilities.Create["Procedure"] = create.Capabilities{}
	}
	if _, ok := api.(ProcedureRead); ok {
		allCapabilities.Read["Procedure"] = read.Capabilities{}
	}
	if _, ok := api.(ProcedureDelete); ok {
		allCapabilities.Delete["Procedure"] = deletion.Capabilities{}
	}
	if c, ok := api.(ProcedureUpdate); ok {
		allCapabilities.Update["Procedure"] = update.Capabilities{}
		c, ok := c.(ProcedureUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesProcedure(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Procedure"] = c
			}
		}
	}
	if c, ok := api.(ProcedureSearch); ok {
		c, err := c.SearchCapabilitiesProcedure(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Procedure"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Procedure"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ProvenanceCreate); ok {
		allCapabilities.Create["Provenance"] = create.Capabilities{}
	}
	if _, ok := api.(ProvenanceRead); ok {
		allCapabilities.Read["Provenance"] = read.Capabilities{}
	}
	if _, ok := api.(ProvenanceDelete); ok {
		allCapabilities.Delete["Provenance"] = deletion.Capabilities{}
	}
	if c, ok := api.(ProvenanceUpdate); ok {
		allCapabilities.Update["Provenance"] = update.Capabilities{}
		c, ok := c.(ProvenanceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesProvenance(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Provenance"] = c
			}
		}
	}
	if c, ok := api.(ProvenanceSearch); ok {
		c, err := c.SearchCapabilitiesProvenance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Provenance"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Provenance"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(QuestionnaireCreate); ok {
		allCapabilities.Create["Questionnaire"] = create.Capabilities{}
	}
	if _, ok := api.(QuestionnaireRead); ok {
		allCapabilities.Read["Questionnaire"] = read.Capabilities{}
	}
	if _, ok := api.(QuestionnaireDelete); ok {
		allCapabilities.Delete["Questionnaire"] = deletion.Capabilities{}
	}
	if c, ok := api.(QuestionnaireUpdate); ok {
		allCapabilities.Update["Questionnaire"] = update.Capabilities{}
		c, ok := c.(QuestionnaireUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesQuestionnaire(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Questionnaire"] = c
			}
		}
	}
	if c, ok := api.(QuestionnaireSearch); ok {
		c, err := c.SearchCapabilitiesQuestionnaire(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Questionnaire"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Questionnaire"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(QuestionnaireResponseCreate); ok {
		allCapabilities.Create["QuestionnaireResponse"] = create.Capabilities{}
	}
	if _, ok := api.(QuestionnaireResponseRead); ok {
		allCapabilities.Read["QuestionnaireResponse"] = read.Capabilities{}
	}
	if _, ok := api.(QuestionnaireResponseDelete); ok {
		allCapabilities.Delete["QuestionnaireResponse"] = deletion.Capabilities{}
	}
	if c, ok := api.(QuestionnaireResponseUpdate); ok {
		allCapabilities.Update["QuestionnaireResponse"] = update.Capabilities{}
		c, ok := c.(QuestionnaireResponseUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesQuestionnaireResponse(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["QuestionnaireResponse"] = c
			}
		}
	}
	if c, ok := api.(QuestionnaireResponseSearch); ok {
		c, err := c.SearchCapabilitiesQuestionnaireResponse(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["QuestionnaireResponse"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["QuestionnaireResponse"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(RegulatedAuthorizationCreate); ok {
		allCapabilities.Create["RegulatedAuthorization"] = create.Capabilities{}
	}
	if _, ok := api.(RegulatedAuthorizationRead); ok {
		allCapabilities.Read["RegulatedAuthorization"] = read.Capabilities{}
	}
	if _, ok := api.(RegulatedAuthorizationDelete); ok {
		allCapabilities.Delete["RegulatedAuthorization"] = deletion.Capabilities{}
	}
	if c, ok := api.(RegulatedAuthorizationUpdate); ok {
		allCapabilities.Update["RegulatedAuthorization"] = update.Capabilities{}
		c, ok := c.(RegulatedAuthorizationUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesRegulatedAuthorization(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["RegulatedAuthorization"] = c
			}
		}
	}
	if c, ok := api.(RegulatedAuthorizationSearch); ok {
		c, err := c.SearchCapabilitiesRegulatedAuthorization(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["RegulatedAuthorization"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["RegulatedAuthorization"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(RelatedPersonCreate); ok {
		allCapabilities.Create["RelatedPerson"] = create.Capabilities{}
	}
	if _, ok := api.(RelatedPersonRead); ok {
		allCapabilities.Read["RelatedPerson"] = read.Capabilities{}
	}
	if _, ok := api.(RelatedPersonDelete); ok {
		allCapabilities.Delete["RelatedPerson"] = deletion.Capabilities{}
	}
	if c, ok := api.(RelatedPersonUpdate); ok {
		allCapabilities.Update["RelatedPerson"] = update.Capabilities{}
		c, ok := c.(RelatedPersonUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesRelatedPerson(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["RelatedPerson"] = c
			}
		}
	}
	if c, ok := api.(RelatedPersonSearch); ok {
		c, err := c.SearchCapabilitiesRelatedPerson(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["RelatedPerson"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["RelatedPerson"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(RequestGroupCreate); ok {
		allCapabilities.Create["RequestGroup"] = create.Capabilities{}
	}
	if _, ok := api.(RequestGroupRead); ok {
		allCapabilities.Read["RequestGroup"] = read.Capabilities{}
	}
	if _, ok := api.(RequestGroupDelete); ok {
		allCapabilities.Delete["RequestGroup"] = deletion.Capabilities{}
	}
	if c, ok := api.(RequestGroupUpdate); ok {
		allCapabilities.Update["RequestGroup"] = update.Capabilities{}
		c, ok := c.(RequestGroupUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesRequestGroup(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["RequestGroup"] = c
			}
		}
	}
	if c, ok := api.(RequestGroupSearch); ok {
		c, err := c.SearchCapabilitiesRequestGroup(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["RequestGroup"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["RequestGroup"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ResearchDefinitionCreate); ok {
		allCapabilities.Create["ResearchDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(ResearchDefinitionRead); ok {
		allCapabilities.Read["ResearchDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(ResearchDefinitionDelete); ok {
		allCapabilities.Delete["ResearchDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ResearchDefinitionUpdate); ok {
		allCapabilities.Update["ResearchDefinition"] = update.Capabilities{}
		c, ok := c.(ResearchDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesResearchDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ResearchDefinition"] = c
			}
		}
	}
	if c, ok := api.(ResearchDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesResearchDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ResearchDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ResearchDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ResearchElementDefinitionCreate); ok {
		allCapabilities.Create["ResearchElementDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(ResearchElementDefinitionRead); ok {
		allCapabilities.Read["ResearchElementDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(ResearchElementDefinitionDelete); ok {
		allCapabilities.Delete["ResearchElementDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(ResearchElementDefinitionUpdate); ok {
		allCapabilities.Update["ResearchElementDefinition"] = update.Capabilities{}
		c, ok := c.(ResearchElementDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesResearchElementDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ResearchElementDefinition"] = c
			}
		}
	}
	if c, ok := api.(ResearchElementDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesResearchElementDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ResearchElementDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ResearchElementDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ResearchStudyCreate); ok {
		allCapabilities.Create["ResearchStudy"] = create.Capabilities{}
	}
	if _, ok := api.(ResearchStudyRead); ok {
		allCapabilities.Read["ResearchStudy"] = read.Capabilities{}
	}
	if _, ok := api.(ResearchStudyDelete); ok {
		allCapabilities.Delete["ResearchStudy"] = deletion.Capabilities{}
	}
	if c, ok := api.(ResearchStudyUpdate); ok {
		allCapabilities.Update["ResearchStudy"] = update.Capabilities{}
		c, ok := c.(ResearchStudyUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesResearchStudy(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ResearchStudy"] = c
			}
		}
	}
	if c, ok := api.(ResearchStudySearch); ok {
		c, err := c.SearchCapabilitiesResearchStudy(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ResearchStudy"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ResearchStudy"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ResearchSubjectCreate); ok {
		allCapabilities.Create["ResearchSubject"] = create.Capabilities{}
	}
	if _, ok := api.(ResearchSubjectRead); ok {
		allCapabilities.Read["ResearchSubject"] = read.Capabilities{}
	}
	if _, ok := api.(ResearchSubjectDelete); ok {
		allCapabilities.Delete["ResearchSubject"] = deletion.Capabilities{}
	}
	if c, ok := api.(ResearchSubjectUpdate); ok {
		allCapabilities.Update["ResearchSubject"] = update.Capabilities{}
		c, ok := c.(ResearchSubjectUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesResearchSubject(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ResearchSubject"] = c
			}
		}
	}
	if c, ok := api.(ResearchSubjectSearch); ok {
		c, err := c.SearchCapabilitiesResearchSubject(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ResearchSubject"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ResearchSubject"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(RiskAssessmentCreate); ok {
		allCapabilities.Create["RiskAssessment"] = create.Capabilities{}
	}
	if _, ok := api.(RiskAssessmentRead); ok {
		allCapabilities.Read["RiskAssessment"] = read.Capabilities{}
	}
	if _, ok := api.(RiskAssessmentDelete); ok {
		allCapabilities.Delete["RiskAssessment"] = deletion.Capabilities{}
	}
	if c, ok := api.(RiskAssessmentUpdate); ok {
		allCapabilities.Update["RiskAssessment"] = update.Capabilities{}
		c, ok := c.(RiskAssessmentUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesRiskAssessment(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["RiskAssessment"] = c
			}
		}
	}
	if c, ok := api.(RiskAssessmentSearch); ok {
		c, err := c.SearchCapabilitiesRiskAssessment(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["RiskAssessment"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["RiskAssessment"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ScheduleCreate); ok {
		allCapabilities.Create["Schedule"] = create.Capabilities{}
	}
	if _, ok := api.(ScheduleRead); ok {
		allCapabilities.Read["Schedule"] = read.Capabilities{}
	}
	if _, ok := api.(ScheduleDelete); ok {
		allCapabilities.Delete["Schedule"] = deletion.Capabilities{}
	}
	if c, ok := api.(ScheduleUpdate); ok {
		allCapabilities.Update["Schedule"] = update.Capabilities{}
		c, ok := c.(ScheduleUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSchedule(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Schedule"] = c
			}
		}
	}
	if c, ok := api.(ScheduleSearch); ok {
		c, err := c.SearchCapabilitiesSchedule(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Schedule"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Schedule"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SearchParameterCreate); ok {
		allCapabilities.Create["SearchParameter"] = create.Capabilities{}
	}
	if _, ok := api.(SearchParameterRead); ok {
		allCapabilities.Read["SearchParameter"] = read.Capabilities{}
	}
	if _, ok := api.(SearchParameterDelete); ok {
		allCapabilities.Delete["SearchParameter"] = deletion.Capabilities{}
	}
	if c, ok := api.(SearchParameterUpdate); ok {
		allCapabilities.Update["SearchParameter"] = update.Capabilities{}
		c, ok := c.(SearchParameterUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSearchParameter(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["SearchParameter"] = c
			}
		}
	}
	if c, ok := api.(SearchParameterSearch); ok {
		c, err := c.SearchCapabilitiesSearchParameter(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["SearchParameter"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["SearchParameter"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ServiceRequestCreate); ok {
		allCapabilities.Create["ServiceRequest"] = create.Capabilities{}
	}
	if _, ok := api.(ServiceRequestRead); ok {
		allCapabilities.Read["ServiceRequest"] = read.Capabilities{}
	}
	if _, ok := api.(ServiceRequestDelete); ok {
		allCapabilities.Delete["ServiceRequest"] = deletion.Capabilities{}
	}
	if c, ok := api.(ServiceRequestUpdate); ok {
		allCapabilities.Update["ServiceRequest"] = update.Capabilities{}
		c, ok := c.(ServiceRequestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesServiceRequest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ServiceRequest"] = c
			}
		}
	}
	if c, ok := api.(ServiceRequestSearch); ok {
		c, err := c.SearchCapabilitiesServiceRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ServiceRequest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ServiceRequest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SlotCreate); ok {
		allCapabilities.Create["Slot"] = create.Capabilities{}
	}
	if _, ok := api.(SlotRead); ok {
		allCapabilities.Read["Slot"] = read.Capabilities{}
	}
	if _, ok := api.(SlotDelete); ok {
		allCapabilities.Delete["Slot"] = deletion.Capabilities{}
	}
	if c, ok := api.(SlotUpdate); ok {
		allCapabilities.Update["Slot"] = update.Capabilities{}
		c, ok := c.(SlotUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSlot(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Slot"] = c
			}
		}
	}
	if c, ok := api.(SlotSearch); ok {
		c, err := c.SearchCapabilitiesSlot(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Slot"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Slot"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SpecimenCreate); ok {
		allCapabilities.Create["Specimen"] = create.Capabilities{}
	}
	if _, ok := api.(SpecimenRead); ok {
		allCapabilities.Read["Specimen"] = read.Capabilities{}
	}
	if _, ok := api.(SpecimenDelete); ok {
		allCapabilities.Delete["Specimen"] = deletion.Capabilities{}
	}
	if c, ok := api.(SpecimenUpdate); ok {
		allCapabilities.Update["Specimen"] = update.Capabilities{}
		c, ok := c.(SpecimenUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSpecimen(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Specimen"] = c
			}
		}
	}
	if c, ok := api.(SpecimenSearch); ok {
		c, err := c.SearchCapabilitiesSpecimen(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Specimen"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Specimen"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SpecimenDefinitionCreate); ok {
		allCapabilities.Create["SpecimenDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(SpecimenDefinitionRead); ok {
		allCapabilities.Read["SpecimenDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(SpecimenDefinitionDelete); ok {
		allCapabilities.Delete["SpecimenDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(SpecimenDefinitionUpdate); ok {
		allCapabilities.Update["SpecimenDefinition"] = update.Capabilities{}
		c, ok := c.(SpecimenDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSpecimenDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["SpecimenDefinition"] = c
			}
		}
	}
	if c, ok := api.(SpecimenDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesSpecimenDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["SpecimenDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["SpecimenDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(StructureDefinitionCreate); ok {
		allCapabilities.Create["StructureDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(StructureDefinitionRead); ok {
		allCapabilities.Read["StructureDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(StructureDefinitionDelete); ok {
		allCapabilities.Delete["StructureDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(StructureDefinitionUpdate); ok {
		allCapabilities.Update["StructureDefinition"] = update.Capabilities{}
		c, ok := c.(StructureDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesStructureDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["StructureDefinition"] = c
			}
		}
	}
	if c, ok := api.(StructureDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesStructureDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["StructureDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["StructureDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(StructureMapCreate); ok {
		allCapabilities.Create["StructureMap"] = create.Capabilities{}
	}
	if _, ok := api.(StructureMapRead); ok {
		allCapabilities.Read["StructureMap"] = read.Capabilities{}
	}
	if _, ok := api.(StructureMapDelete); ok {
		allCapabilities.Delete["StructureMap"] = deletion.Capabilities{}
	}
	if c, ok := api.(StructureMapUpdate); ok {
		allCapabilities.Update["StructureMap"] = update.Capabilities{}
		c, ok := c.(StructureMapUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesStructureMap(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["StructureMap"] = c
			}
		}
	}
	if c, ok := api.(StructureMapSearch); ok {
		c, err := c.SearchCapabilitiesStructureMap(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["StructureMap"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["StructureMap"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SubscriptionCreate); ok {
		allCapabilities.Create["Subscription"] = create.Capabilities{}
	}
	if _, ok := api.(SubscriptionRead); ok {
		allCapabilities.Read["Subscription"] = read.Capabilities{}
	}
	if _, ok := api.(SubscriptionDelete); ok {
		allCapabilities.Delete["Subscription"] = deletion.Capabilities{}
	}
	if c, ok := api.(SubscriptionUpdate); ok {
		allCapabilities.Update["Subscription"] = update.Capabilities{}
		c, ok := c.(SubscriptionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSubscription(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Subscription"] = c
			}
		}
	}
	if c, ok := api.(SubscriptionSearch); ok {
		c, err := c.SearchCapabilitiesSubscription(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Subscription"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Subscription"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SubscriptionStatusCreate); ok {
		allCapabilities.Create["SubscriptionStatus"] = create.Capabilities{}
	}
	if _, ok := api.(SubscriptionStatusRead); ok {
		allCapabilities.Read["SubscriptionStatus"] = read.Capabilities{}
	}
	if _, ok := api.(SubscriptionStatusDelete); ok {
		allCapabilities.Delete["SubscriptionStatus"] = deletion.Capabilities{}
	}
	if c, ok := api.(SubscriptionStatusUpdate); ok {
		allCapabilities.Update["SubscriptionStatus"] = update.Capabilities{}
		c, ok := c.(SubscriptionStatusUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSubscriptionStatus(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["SubscriptionStatus"] = c
			}
		}
	}
	if c, ok := api.(SubscriptionStatusSearch); ok {
		c, err := c.SearchCapabilitiesSubscriptionStatus(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["SubscriptionStatus"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["SubscriptionStatus"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SubscriptionTopicCreate); ok {
		allCapabilities.Create["SubscriptionTopic"] = create.Capabilities{}
	}
	if _, ok := api.(SubscriptionTopicRead); ok {
		allCapabilities.Read["SubscriptionTopic"] = read.Capabilities{}
	}
	if _, ok := api.(SubscriptionTopicDelete); ok {
		allCapabilities.Delete["SubscriptionTopic"] = deletion.Capabilities{}
	}
	if c, ok := api.(SubscriptionTopicUpdate); ok {
		allCapabilities.Update["SubscriptionTopic"] = update.Capabilities{}
		c, ok := c.(SubscriptionTopicUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSubscriptionTopic(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["SubscriptionTopic"] = c
			}
		}
	}
	if c, ok := api.(SubscriptionTopicSearch); ok {
		c, err := c.SearchCapabilitiesSubscriptionTopic(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["SubscriptionTopic"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["SubscriptionTopic"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SubstanceCreate); ok {
		allCapabilities.Create["Substance"] = create.Capabilities{}
	}
	if _, ok := api.(SubstanceRead); ok {
		allCapabilities.Read["Substance"] = read.Capabilities{}
	}
	if _, ok := api.(SubstanceDelete); ok {
		allCapabilities.Delete["Substance"] = deletion.Capabilities{}
	}
	if c, ok := api.(SubstanceUpdate); ok {
		allCapabilities.Update["Substance"] = update.Capabilities{}
		c, ok := c.(SubstanceUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSubstance(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Substance"] = c
			}
		}
	}
	if c, ok := api.(SubstanceSearch); ok {
		c, err := c.SearchCapabilitiesSubstance(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Substance"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Substance"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SubstanceDefinitionCreate); ok {
		allCapabilities.Create["SubstanceDefinition"] = create.Capabilities{}
	}
	if _, ok := api.(SubstanceDefinitionRead); ok {
		allCapabilities.Read["SubstanceDefinition"] = read.Capabilities{}
	}
	if _, ok := api.(SubstanceDefinitionDelete); ok {
		allCapabilities.Delete["SubstanceDefinition"] = deletion.Capabilities{}
	}
	if c, ok := api.(SubstanceDefinitionUpdate); ok {
		allCapabilities.Update["SubstanceDefinition"] = update.Capabilities{}
		c, ok := c.(SubstanceDefinitionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSubstanceDefinition(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["SubstanceDefinition"] = c
			}
		}
	}
	if c, ok := api.(SubstanceDefinitionSearch); ok {
		c, err := c.SearchCapabilitiesSubstanceDefinition(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["SubstanceDefinition"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["SubstanceDefinition"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SupplyDeliveryCreate); ok {
		allCapabilities.Create["SupplyDelivery"] = create.Capabilities{}
	}
	if _, ok := api.(SupplyDeliveryRead); ok {
		allCapabilities.Read["SupplyDelivery"] = read.Capabilities{}
	}
	if _, ok := api.(SupplyDeliveryDelete); ok {
		allCapabilities.Delete["SupplyDelivery"] = deletion.Capabilities{}
	}
	if c, ok := api.(SupplyDeliveryUpdate); ok {
		allCapabilities.Update["SupplyDelivery"] = update.Capabilities{}
		c, ok := c.(SupplyDeliveryUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSupplyDelivery(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["SupplyDelivery"] = c
			}
		}
	}
	if c, ok := api.(SupplyDeliverySearch); ok {
		c, err := c.SearchCapabilitiesSupplyDelivery(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["SupplyDelivery"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["SupplyDelivery"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(SupplyRequestCreate); ok {
		allCapabilities.Create["SupplyRequest"] = create.Capabilities{}
	}
	if _, ok := api.(SupplyRequestRead); ok {
		allCapabilities.Read["SupplyRequest"] = read.Capabilities{}
	}
	if _, ok := api.(SupplyRequestDelete); ok {
		allCapabilities.Delete["SupplyRequest"] = deletion.Capabilities{}
	}
	if c, ok := api.(SupplyRequestUpdate); ok {
		allCapabilities.Update["SupplyRequest"] = update.Capabilities{}
		c, ok := c.(SupplyRequestUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesSupplyRequest(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["SupplyRequest"] = c
			}
		}
	}
	if c, ok := api.(SupplyRequestSearch); ok {
		c, err := c.SearchCapabilitiesSupplyRequest(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["SupplyRequest"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["SupplyRequest"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(TaskCreate); ok {
		allCapabilities.Create["Task"] = create.Capabilities{}
	}
	if _, ok := api.(TaskRead); ok {
		allCapabilities.Read["Task"] = read.Capabilities{}
	}
	if _, ok := api.(TaskDelete); ok {
		allCapabilities.Delete["Task"] = deletion.Capabilities{}
	}
	if c, ok := api.(TaskUpdate); ok {
		allCapabilities.Update["Task"] = update.Capabilities{}
		c, ok := c.(TaskUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesTask(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["Task"] = c
			}
		}
	}
	if c, ok := api.(TaskSearch); ok {
		c, err := c.SearchCapabilitiesTask(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["Task"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["Task"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(TerminologyCapabilitiesCreate); ok {
		allCapabilities.Create["TerminologyCapabilities"] = create.Capabilities{}
	}
	if _, ok := api.(TerminologyCapabilitiesRead); ok {
		allCapabilities.Read["TerminologyCapabilities"] = read.Capabilities{}
	}
	if _, ok := api.(TerminologyCapabilitiesDelete); ok {
		allCapabilities.Delete["TerminologyCapabilities"] = deletion.Capabilities{}
	}
	if c, ok := api.(TerminologyCapabilitiesUpdate); ok {
		allCapabilities.Update["TerminologyCapabilities"] = update.Capabilities{}
		c, ok := c.(TerminologyCapabilitiesUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesTerminologyCapabilities(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["TerminologyCapabilities"] = c
			}
		}
	}
	if c, ok := api.(TerminologyCapabilitiesSearch); ok {
		c, err := c.SearchCapabilitiesTerminologyCapabilities(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["TerminologyCapabilities"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["TerminologyCapabilities"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(TestReportCreate); ok {
		allCapabilities.Create["TestReport"] = create.Capabilities{}
	}
	if _, ok := api.(TestReportRead); ok {
		allCapabilities.Read["TestReport"] = read.Capabilities{}
	}
	if _, ok := api.(TestReportDelete); ok {
		allCapabilities.Delete["TestReport"] = deletion.Capabilities{}
	}
	if c, ok := api.(TestReportUpdate); ok {
		allCapabilities.Update["TestReport"] = update.Capabilities{}
		c, ok := c.(TestReportUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesTestReport(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["TestReport"] = c
			}
		}
	}
	if c, ok := api.(TestReportSearch); ok {
		c, err := c.SearchCapabilitiesTestReport(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["TestReport"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["TestReport"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(TestScriptCreate); ok {
		allCapabilities.Create["TestScript"] = create.Capabilities{}
	}
	if _, ok := api.(TestScriptRead); ok {
		allCapabilities.Read["TestScript"] = read.Capabilities{}
	}
	if _, ok := api.(TestScriptDelete); ok {
		allCapabilities.Delete["TestScript"] = deletion.Capabilities{}
	}
	if c, ok := api.(TestScriptUpdate); ok {
		allCapabilities.Update["TestScript"] = update.Capabilities{}
		c, ok := c.(TestScriptUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesTestScript(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["TestScript"] = c
			}
		}
	}
	if c, ok := api.(TestScriptSearch); ok {
		c, err := c.SearchCapabilitiesTestScript(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["TestScript"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["TestScript"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(ValueSetCreate); ok {
		allCapabilities.Create["ValueSet"] = create.Capabilities{}
	}
	if _, ok := api.(ValueSetRead); ok {
		allCapabilities.Read["ValueSet"] = read.Capabilities{}
	}
	if _, ok := api.(ValueSetDelete); ok {
		allCapabilities.Delete["ValueSet"] = deletion.Capabilities{}
	}
	if c, ok := api.(ValueSetUpdate); ok {
		allCapabilities.Update["ValueSet"] = update.Capabilities{}
		c, ok := c.(ValueSetUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesValueSet(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["ValueSet"] = c
			}
		}
	}
	if c, ok := api.(ValueSetSearch); ok {
		c, err := c.SearchCapabilitiesValueSet(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["ValueSet"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["ValueSet"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(VerificationResultCreate); ok {
		allCapabilities.Create["VerificationResult"] = create.Capabilities{}
	}
	if _, ok := api.(VerificationResultRead); ok {
		allCapabilities.Read["VerificationResult"] = read.Capabilities{}
	}
	if _, ok := api.(VerificationResultDelete); ok {
		allCapabilities.Delete["VerificationResult"] = deletion.Capabilities{}
	}
	if c, ok := api.(VerificationResultUpdate); ok {
		allCapabilities.Update["VerificationResult"] = update.Capabilities{}
		c, ok := c.(VerificationResultUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesVerificationResult(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["VerificationResult"] = c
			}
		}
	}
	if c, ok := api.(VerificationResultSearch); ok {
		c, err := c.SearchCapabilitiesVerificationResult(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["VerificationResult"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["VerificationResult"].Parameters[n] = p
			}
		}
	}
	if _, ok := api.(VisionPrescriptionCreate); ok {
		allCapabilities.Create["VisionPrescription"] = create.Capabilities{}
	}
	if _, ok := api.(VisionPrescriptionRead); ok {
		allCapabilities.Read["VisionPrescription"] = read.Capabilities{}
	}
	if _, ok := api.(VisionPrescriptionDelete); ok {
		allCapabilities.Delete["VisionPrescription"] = deletion.Capabilities{}
	}
	if c, ok := api.(VisionPrescriptionUpdate); ok {
		allCapabilities.Update["VisionPrescription"] = update.Capabilities{}
		c, ok := c.(VisionPrescriptionUpdateCapabilities)
		if ok {
			c, err := c.UpdateCapabilitiesVisionPrescription(ctx)
			if err != nil {
				errs = append(errs, err)
			} else {
				allCapabilities.Update["VisionPrescription"] = c
			}
		}
	}
	if c, ok := api.(VisionPrescriptionSearch); ok {
		c, err := c.SearchCapabilitiesVisionPrescription(ctx)
		if err != nil {
			errs = append(errs, err)
		} else {
			allCapabilities.Search["VisionPrescription"] = search.Capabilities[search.Parameter]{
				Includes:   c.Includes,
				Parameters: make(map[string]search.Parameter),
			}
			for n, p := range c.Parameters {
				allCapabilities.Search["VisionPrescription"].Parameters[n] = p
			}
		}
	}
	return allCapabilities, errors.Join(errs...)
}
