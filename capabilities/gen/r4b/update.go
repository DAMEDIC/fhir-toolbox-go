// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package capabilitiesR4B

import (
	"context"
	update "github.com/DAMEDIC/fhir-toolbox-go/capabilities/update"
	r4b "github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4b"
)

// AccountUpdate needs to be implemented to support the update interaction.
type AccountUpdate interface {
	UpdateAccount(ctx context.Context, resource r4b.Account) (update.Result[r4b.Account], error)
}

// AccountUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type AccountUpdateCapabilities interface {
	UpdateCapabilitiesAccount(ctx context.Context) (update.Capabilities, error)
}

// ActivityDefinitionUpdate needs to be implemented to support the update interaction.
type ActivityDefinitionUpdate interface {
	UpdateActivityDefinition(ctx context.Context, resource r4b.ActivityDefinition) (update.Result[r4b.ActivityDefinition], error)
}

// ActivityDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ActivityDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesActivityDefinition(ctx context.Context) (update.Capabilities, error)
}

// AdministrableProductDefinitionUpdate needs to be implemented to support the update interaction.
type AdministrableProductDefinitionUpdate interface {
	UpdateAdministrableProductDefinition(ctx context.Context, resource r4b.AdministrableProductDefinition) (update.Result[r4b.AdministrableProductDefinition], error)
}

// AdministrableProductDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type AdministrableProductDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesAdministrableProductDefinition(ctx context.Context) (update.Capabilities, error)
}

// AdverseEventUpdate needs to be implemented to support the update interaction.
type AdverseEventUpdate interface {
	UpdateAdverseEvent(ctx context.Context, resource r4b.AdverseEvent) (update.Result[r4b.AdverseEvent], error)
}

// AdverseEventUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type AdverseEventUpdateCapabilities interface {
	UpdateCapabilitiesAdverseEvent(ctx context.Context) (update.Capabilities, error)
}

// AllergyIntoleranceUpdate needs to be implemented to support the update interaction.
type AllergyIntoleranceUpdate interface {
	UpdateAllergyIntolerance(ctx context.Context, resource r4b.AllergyIntolerance) (update.Result[r4b.AllergyIntolerance], error)
}

// AllergyIntoleranceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type AllergyIntoleranceUpdateCapabilities interface {
	UpdateCapabilitiesAllergyIntolerance(ctx context.Context) (update.Capabilities, error)
}

// AppointmentUpdate needs to be implemented to support the update interaction.
type AppointmentUpdate interface {
	UpdateAppointment(ctx context.Context, resource r4b.Appointment) (update.Result[r4b.Appointment], error)
}

// AppointmentUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type AppointmentUpdateCapabilities interface {
	UpdateCapabilitiesAppointment(ctx context.Context) (update.Capabilities, error)
}

// AppointmentResponseUpdate needs to be implemented to support the update interaction.
type AppointmentResponseUpdate interface {
	UpdateAppointmentResponse(ctx context.Context, resource r4b.AppointmentResponse) (update.Result[r4b.AppointmentResponse], error)
}

// AppointmentResponseUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type AppointmentResponseUpdateCapabilities interface {
	UpdateCapabilitiesAppointmentResponse(ctx context.Context) (update.Capabilities, error)
}

// AuditEventUpdate needs to be implemented to support the update interaction.
type AuditEventUpdate interface {
	UpdateAuditEvent(ctx context.Context, resource r4b.AuditEvent) (update.Result[r4b.AuditEvent], error)
}

// AuditEventUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type AuditEventUpdateCapabilities interface {
	UpdateCapabilitiesAuditEvent(ctx context.Context) (update.Capabilities, error)
}

// BasicUpdate needs to be implemented to support the update interaction.
type BasicUpdate interface {
	UpdateBasic(ctx context.Context, resource r4b.Basic) (update.Result[r4b.Basic], error)
}

// BasicUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type BasicUpdateCapabilities interface {
	UpdateCapabilitiesBasic(ctx context.Context) (update.Capabilities, error)
}

// BinaryUpdate needs to be implemented to support the update interaction.
type BinaryUpdate interface {
	UpdateBinary(ctx context.Context, resource r4b.Binary) (update.Result[r4b.Binary], error)
}

// BinaryUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type BinaryUpdateCapabilities interface {
	UpdateCapabilitiesBinary(ctx context.Context) (update.Capabilities, error)
}

// BiologicallyDerivedProductUpdate needs to be implemented to support the update interaction.
type BiologicallyDerivedProductUpdate interface {
	UpdateBiologicallyDerivedProduct(ctx context.Context, resource r4b.BiologicallyDerivedProduct) (update.Result[r4b.BiologicallyDerivedProduct], error)
}

// BiologicallyDerivedProductUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type BiologicallyDerivedProductUpdateCapabilities interface {
	UpdateCapabilitiesBiologicallyDerivedProduct(ctx context.Context) (update.Capabilities, error)
}

// BodyStructureUpdate needs to be implemented to support the update interaction.
type BodyStructureUpdate interface {
	UpdateBodyStructure(ctx context.Context, resource r4b.BodyStructure) (update.Result[r4b.BodyStructure], error)
}

// BodyStructureUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type BodyStructureUpdateCapabilities interface {
	UpdateCapabilitiesBodyStructure(ctx context.Context) (update.Capabilities, error)
}

// BundleUpdate needs to be implemented to support the update interaction.
type BundleUpdate interface {
	UpdateBundle(ctx context.Context, resource r4b.Bundle) (update.Result[r4b.Bundle], error)
}

// BundleUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type BundleUpdateCapabilities interface {
	UpdateCapabilitiesBundle(ctx context.Context) (update.Capabilities, error)
}

// CapabilityStatementUpdate needs to be implemented to support the update interaction.
type CapabilityStatementUpdate interface {
	UpdateCapabilityStatement(ctx context.Context, resource r4b.CapabilityStatement) (update.Result[r4b.CapabilityStatement], error)
}

// CapabilityStatementUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CapabilityStatementUpdateCapabilities interface {
	UpdateCapabilitiesCapabilityStatement(ctx context.Context) (update.Capabilities, error)
}

// CarePlanUpdate needs to be implemented to support the update interaction.
type CarePlanUpdate interface {
	UpdateCarePlan(ctx context.Context, resource r4b.CarePlan) (update.Result[r4b.CarePlan], error)
}

// CarePlanUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CarePlanUpdateCapabilities interface {
	UpdateCapabilitiesCarePlan(ctx context.Context) (update.Capabilities, error)
}

// CareTeamUpdate needs to be implemented to support the update interaction.
type CareTeamUpdate interface {
	UpdateCareTeam(ctx context.Context, resource r4b.CareTeam) (update.Result[r4b.CareTeam], error)
}

// CareTeamUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CareTeamUpdateCapabilities interface {
	UpdateCapabilitiesCareTeam(ctx context.Context) (update.Capabilities, error)
}

// CatalogEntryUpdate needs to be implemented to support the update interaction.
type CatalogEntryUpdate interface {
	UpdateCatalogEntry(ctx context.Context, resource r4b.CatalogEntry) (update.Result[r4b.CatalogEntry], error)
}

// CatalogEntryUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CatalogEntryUpdateCapabilities interface {
	UpdateCapabilitiesCatalogEntry(ctx context.Context) (update.Capabilities, error)
}

// ChargeItemUpdate needs to be implemented to support the update interaction.
type ChargeItemUpdate interface {
	UpdateChargeItem(ctx context.Context, resource r4b.ChargeItem) (update.Result[r4b.ChargeItem], error)
}

// ChargeItemUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ChargeItemUpdateCapabilities interface {
	UpdateCapabilitiesChargeItem(ctx context.Context) (update.Capabilities, error)
}

// ChargeItemDefinitionUpdate needs to be implemented to support the update interaction.
type ChargeItemDefinitionUpdate interface {
	UpdateChargeItemDefinition(ctx context.Context, resource r4b.ChargeItemDefinition) (update.Result[r4b.ChargeItemDefinition], error)
}

// ChargeItemDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ChargeItemDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesChargeItemDefinition(ctx context.Context) (update.Capabilities, error)
}

// CitationUpdate needs to be implemented to support the update interaction.
type CitationUpdate interface {
	UpdateCitation(ctx context.Context, resource r4b.Citation) (update.Result[r4b.Citation], error)
}

// CitationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CitationUpdateCapabilities interface {
	UpdateCapabilitiesCitation(ctx context.Context) (update.Capabilities, error)
}

// ClaimUpdate needs to be implemented to support the update interaction.
type ClaimUpdate interface {
	UpdateClaim(ctx context.Context, resource r4b.Claim) (update.Result[r4b.Claim], error)
}

// ClaimUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ClaimUpdateCapabilities interface {
	UpdateCapabilitiesClaim(ctx context.Context) (update.Capabilities, error)
}

// ClaimResponseUpdate needs to be implemented to support the update interaction.
type ClaimResponseUpdate interface {
	UpdateClaimResponse(ctx context.Context, resource r4b.ClaimResponse) (update.Result[r4b.ClaimResponse], error)
}

// ClaimResponseUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ClaimResponseUpdateCapabilities interface {
	UpdateCapabilitiesClaimResponse(ctx context.Context) (update.Capabilities, error)
}

// ClinicalImpressionUpdate needs to be implemented to support the update interaction.
type ClinicalImpressionUpdate interface {
	UpdateClinicalImpression(ctx context.Context, resource r4b.ClinicalImpression) (update.Result[r4b.ClinicalImpression], error)
}

// ClinicalImpressionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ClinicalImpressionUpdateCapabilities interface {
	UpdateCapabilitiesClinicalImpression(ctx context.Context) (update.Capabilities, error)
}

// ClinicalUseDefinitionUpdate needs to be implemented to support the update interaction.
type ClinicalUseDefinitionUpdate interface {
	UpdateClinicalUseDefinition(ctx context.Context, resource r4b.ClinicalUseDefinition) (update.Result[r4b.ClinicalUseDefinition], error)
}

// ClinicalUseDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ClinicalUseDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesClinicalUseDefinition(ctx context.Context) (update.Capabilities, error)
}

// CodeSystemUpdate needs to be implemented to support the update interaction.
type CodeSystemUpdate interface {
	UpdateCodeSystem(ctx context.Context, resource r4b.CodeSystem) (update.Result[r4b.CodeSystem], error)
}

// CodeSystemUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CodeSystemUpdateCapabilities interface {
	UpdateCapabilitiesCodeSystem(ctx context.Context) (update.Capabilities, error)
}

// CommunicationUpdate needs to be implemented to support the update interaction.
type CommunicationUpdate interface {
	UpdateCommunication(ctx context.Context, resource r4b.Communication) (update.Result[r4b.Communication], error)
}

// CommunicationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CommunicationUpdateCapabilities interface {
	UpdateCapabilitiesCommunication(ctx context.Context) (update.Capabilities, error)
}

// CommunicationRequestUpdate needs to be implemented to support the update interaction.
type CommunicationRequestUpdate interface {
	UpdateCommunicationRequest(ctx context.Context, resource r4b.CommunicationRequest) (update.Result[r4b.CommunicationRequest], error)
}

// CommunicationRequestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CommunicationRequestUpdateCapabilities interface {
	UpdateCapabilitiesCommunicationRequest(ctx context.Context) (update.Capabilities, error)
}

// CompartmentDefinitionUpdate needs to be implemented to support the update interaction.
type CompartmentDefinitionUpdate interface {
	UpdateCompartmentDefinition(ctx context.Context, resource r4b.CompartmentDefinition) (update.Result[r4b.CompartmentDefinition], error)
}

// CompartmentDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CompartmentDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesCompartmentDefinition(ctx context.Context) (update.Capabilities, error)
}

// CompositionUpdate needs to be implemented to support the update interaction.
type CompositionUpdate interface {
	UpdateComposition(ctx context.Context, resource r4b.Composition) (update.Result[r4b.Composition], error)
}

// CompositionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CompositionUpdateCapabilities interface {
	UpdateCapabilitiesComposition(ctx context.Context) (update.Capabilities, error)
}

// ConceptMapUpdate needs to be implemented to support the update interaction.
type ConceptMapUpdate interface {
	UpdateConceptMap(ctx context.Context, resource r4b.ConceptMap) (update.Result[r4b.ConceptMap], error)
}

// ConceptMapUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ConceptMapUpdateCapabilities interface {
	UpdateCapabilitiesConceptMap(ctx context.Context) (update.Capabilities, error)
}

// ConditionUpdate needs to be implemented to support the update interaction.
type ConditionUpdate interface {
	UpdateCondition(ctx context.Context, resource r4b.Condition) (update.Result[r4b.Condition], error)
}

// ConditionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ConditionUpdateCapabilities interface {
	UpdateCapabilitiesCondition(ctx context.Context) (update.Capabilities, error)
}

// ConsentUpdate needs to be implemented to support the update interaction.
type ConsentUpdate interface {
	UpdateConsent(ctx context.Context, resource r4b.Consent) (update.Result[r4b.Consent], error)
}

// ConsentUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ConsentUpdateCapabilities interface {
	UpdateCapabilitiesConsent(ctx context.Context) (update.Capabilities, error)
}

// ContractUpdate needs to be implemented to support the update interaction.
type ContractUpdate interface {
	UpdateContract(ctx context.Context, resource r4b.Contract) (update.Result[r4b.Contract], error)
}

// ContractUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ContractUpdateCapabilities interface {
	UpdateCapabilitiesContract(ctx context.Context) (update.Capabilities, error)
}

// CoverageUpdate needs to be implemented to support the update interaction.
type CoverageUpdate interface {
	UpdateCoverage(ctx context.Context, resource r4b.Coverage) (update.Result[r4b.Coverage], error)
}

// CoverageUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CoverageUpdateCapabilities interface {
	UpdateCapabilitiesCoverage(ctx context.Context) (update.Capabilities, error)
}

// CoverageEligibilityRequestUpdate needs to be implemented to support the update interaction.
type CoverageEligibilityRequestUpdate interface {
	UpdateCoverageEligibilityRequest(ctx context.Context, resource r4b.CoverageEligibilityRequest) (update.Result[r4b.CoverageEligibilityRequest], error)
}

// CoverageEligibilityRequestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CoverageEligibilityRequestUpdateCapabilities interface {
	UpdateCapabilitiesCoverageEligibilityRequest(ctx context.Context) (update.Capabilities, error)
}

// CoverageEligibilityResponseUpdate needs to be implemented to support the update interaction.
type CoverageEligibilityResponseUpdate interface {
	UpdateCoverageEligibilityResponse(ctx context.Context, resource r4b.CoverageEligibilityResponse) (update.Result[r4b.CoverageEligibilityResponse], error)
}

// CoverageEligibilityResponseUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type CoverageEligibilityResponseUpdateCapabilities interface {
	UpdateCapabilitiesCoverageEligibilityResponse(ctx context.Context) (update.Capabilities, error)
}

// DetectedIssueUpdate needs to be implemented to support the update interaction.
type DetectedIssueUpdate interface {
	UpdateDetectedIssue(ctx context.Context, resource r4b.DetectedIssue) (update.Result[r4b.DetectedIssue], error)
}

// DetectedIssueUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DetectedIssueUpdateCapabilities interface {
	UpdateCapabilitiesDetectedIssue(ctx context.Context) (update.Capabilities, error)
}

// DeviceUpdate needs to be implemented to support the update interaction.
type DeviceUpdate interface {
	UpdateDevice(ctx context.Context, resource r4b.Device) (update.Result[r4b.Device], error)
}

// DeviceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DeviceUpdateCapabilities interface {
	UpdateCapabilitiesDevice(ctx context.Context) (update.Capabilities, error)
}

// DeviceDefinitionUpdate needs to be implemented to support the update interaction.
type DeviceDefinitionUpdate interface {
	UpdateDeviceDefinition(ctx context.Context, resource r4b.DeviceDefinition) (update.Result[r4b.DeviceDefinition], error)
}

// DeviceDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DeviceDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesDeviceDefinition(ctx context.Context) (update.Capabilities, error)
}

// DeviceMetricUpdate needs to be implemented to support the update interaction.
type DeviceMetricUpdate interface {
	UpdateDeviceMetric(ctx context.Context, resource r4b.DeviceMetric) (update.Result[r4b.DeviceMetric], error)
}

// DeviceMetricUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DeviceMetricUpdateCapabilities interface {
	UpdateCapabilitiesDeviceMetric(ctx context.Context) (update.Capabilities, error)
}

// DeviceRequestUpdate needs to be implemented to support the update interaction.
type DeviceRequestUpdate interface {
	UpdateDeviceRequest(ctx context.Context, resource r4b.DeviceRequest) (update.Result[r4b.DeviceRequest], error)
}

// DeviceRequestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DeviceRequestUpdateCapabilities interface {
	UpdateCapabilitiesDeviceRequest(ctx context.Context) (update.Capabilities, error)
}

// DeviceUseStatementUpdate needs to be implemented to support the update interaction.
type DeviceUseStatementUpdate interface {
	UpdateDeviceUseStatement(ctx context.Context, resource r4b.DeviceUseStatement) (update.Result[r4b.DeviceUseStatement], error)
}

// DeviceUseStatementUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DeviceUseStatementUpdateCapabilities interface {
	UpdateCapabilitiesDeviceUseStatement(ctx context.Context) (update.Capabilities, error)
}

// DiagnosticReportUpdate needs to be implemented to support the update interaction.
type DiagnosticReportUpdate interface {
	UpdateDiagnosticReport(ctx context.Context, resource r4b.DiagnosticReport) (update.Result[r4b.DiagnosticReport], error)
}

// DiagnosticReportUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DiagnosticReportUpdateCapabilities interface {
	UpdateCapabilitiesDiagnosticReport(ctx context.Context) (update.Capabilities, error)
}

// DocumentManifestUpdate needs to be implemented to support the update interaction.
type DocumentManifestUpdate interface {
	UpdateDocumentManifest(ctx context.Context, resource r4b.DocumentManifest) (update.Result[r4b.DocumentManifest], error)
}

// DocumentManifestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DocumentManifestUpdateCapabilities interface {
	UpdateCapabilitiesDocumentManifest(ctx context.Context) (update.Capabilities, error)
}

// DocumentReferenceUpdate needs to be implemented to support the update interaction.
type DocumentReferenceUpdate interface {
	UpdateDocumentReference(ctx context.Context, resource r4b.DocumentReference) (update.Result[r4b.DocumentReference], error)
}

// DocumentReferenceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type DocumentReferenceUpdateCapabilities interface {
	UpdateCapabilitiesDocumentReference(ctx context.Context) (update.Capabilities, error)
}

// EncounterUpdate needs to be implemented to support the update interaction.
type EncounterUpdate interface {
	UpdateEncounter(ctx context.Context, resource r4b.Encounter) (update.Result[r4b.Encounter], error)
}

// EncounterUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EncounterUpdateCapabilities interface {
	UpdateCapabilitiesEncounter(ctx context.Context) (update.Capabilities, error)
}

// EndpointUpdate needs to be implemented to support the update interaction.
type EndpointUpdate interface {
	UpdateEndpoint(ctx context.Context, resource r4b.Endpoint) (update.Result[r4b.Endpoint], error)
}

// EndpointUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EndpointUpdateCapabilities interface {
	UpdateCapabilitiesEndpoint(ctx context.Context) (update.Capabilities, error)
}

// EnrollmentRequestUpdate needs to be implemented to support the update interaction.
type EnrollmentRequestUpdate interface {
	UpdateEnrollmentRequest(ctx context.Context, resource r4b.EnrollmentRequest) (update.Result[r4b.EnrollmentRequest], error)
}

// EnrollmentRequestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EnrollmentRequestUpdateCapabilities interface {
	UpdateCapabilitiesEnrollmentRequest(ctx context.Context) (update.Capabilities, error)
}

// EnrollmentResponseUpdate needs to be implemented to support the update interaction.
type EnrollmentResponseUpdate interface {
	UpdateEnrollmentResponse(ctx context.Context, resource r4b.EnrollmentResponse) (update.Result[r4b.EnrollmentResponse], error)
}

// EnrollmentResponseUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EnrollmentResponseUpdateCapabilities interface {
	UpdateCapabilitiesEnrollmentResponse(ctx context.Context) (update.Capabilities, error)
}

// EpisodeOfCareUpdate needs to be implemented to support the update interaction.
type EpisodeOfCareUpdate interface {
	UpdateEpisodeOfCare(ctx context.Context, resource r4b.EpisodeOfCare) (update.Result[r4b.EpisodeOfCare], error)
}

// EpisodeOfCareUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EpisodeOfCareUpdateCapabilities interface {
	UpdateCapabilitiesEpisodeOfCare(ctx context.Context) (update.Capabilities, error)
}

// EventDefinitionUpdate needs to be implemented to support the update interaction.
type EventDefinitionUpdate interface {
	UpdateEventDefinition(ctx context.Context, resource r4b.EventDefinition) (update.Result[r4b.EventDefinition], error)
}

// EventDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EventDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesEventDefinition(ctx context.Context) (update.Capabilities, error)
}

// EvidenceUpdate needs to be implemented to support the update interaction.
type EvidenceUpdate interface {
	UpdateEvidence(ctx context.Context, resource r4b.Evidence) (update.Result[r4b.Evidence], error)
}

// EvidenceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EvidenceUpdateCapabilities interface {
	UpdateCapabilitiesEvidence(ctx context.Context) (update.Capabilities, error)
}

// EvidenceReportUpdate needs to be implemented to support the update interaction.
type EvidenceReportUpdate interface {
	UpdateEvidenceReport(ctx context.Context, resource r4b.EvidenceReport) (update.Result[r4b.EvidenceReport], error)
}

// EvidenceReportUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EvidenceReportUpdateCapabilities interface {
	UpdateCapabilitiesEvidenceReport(ctx context.Context) (update.Capabilities, error)
}

// EvidenceVariableUpdate needs to be implemented to support the update interaction.
type EvidenceVariableUpdate interface {
	UpdateEvidenceVariable(ctx context.Context, resource r4b.EvidenceVariable) (update.Result[r4b.EvidenceVariable], error)
}

// EvidenceVariableUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type EvidenceVariableUpdateCapabilities interface {
	UpdateCapabilitiesEvidenceVariable(ctx context.Context) (update.Capabilities, error)
}

// ExampleScenarioUpdate needs to be implemented to support the update interaction.
type ExampleScenarioUpdate interface {
	UpdateExampleScenario(ctx context.Context, resource r4b.ExampleScenario) (update.Result[r4b.ExampleScenario], error)
}

// ExampleScenarioUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ExampleScenarioUpdateCapabilities interface {
	UpdateCapabilitiesExampleScenario(ctx context.Context) (update.Capabilities, error)
}

// ExplanationOfBenefitUpdate needs to be implemented to support the update interaction.
type ExplanationOfBenefitUpdate interface {
	UpdateExplanationOfBenefit(ctx context.Context, resource r4b.ExplanationOfBenefit) (update.Result[r4b.ExplanationOfBenefit], error)
}

// ExplanationOfBenefitUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ExplanationOfBenefitUpdateCapabilities interface {
	UpdateCapabilitiesExplanationOfBenefit(ctx context.Context) (update.Capabilities, error)
}

// FamilyMemberHistoryUpdate needs to be implemented to support the update interaction.
type FamilyMemberHistoryUpdate interface {
	UpdateFamilyMemberHistory(ctx context.Context, resource r4b.FamilyMemberHistory) (update.Result[r4b.FamilyMemberHistory], error)
}

// FamilyMemberHistoryUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type FamilyMemberHistoryUpdateCapabilities interface {
	UpdateCapabilitiesFamilyMemberHistory(ctx context.Context) (update.Capabilities, error)
}

// FlagUpdate needs to be implemented to support the update interaction.
type FlagUpdate interface {
	UpdateFlag(ctx context.Context, resource r4b.Flag) (update.Result[r4b.Flag], error)
}

// FlagUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type FlagUpdateCapabilities interface {
	UpdateCapabilitiesFlag(ctx context.Context) (update.Capabilities, error)
}

// GoalUpdate needs to be implemented to support the update interaction.
type GoalUpdate interface {
	UpdateGoal(ctx context.Context, resource r4b.Goal) (update.Result[r4b.Goal], error)
}

// GoalUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type GoalUpdateCapabilities interface {
	UpdateCapabilitiesGoal(ctx context.Context) (update.Capabilities, error)
}

// GraphDefinitionUpdate needs to be implemented to support the update interaction.
type GraphDefinitionUpdate interface {
	UpdateGraphDefinition(ctx context.Context, resource r4b.GraphDefinition) (update.Result[r4b.GraphDefinition], error)
}

// GraphDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type GraphDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesGraphDefinition(ctx context.Context) (update.Capabilities, error)
}

// GroupUpdate needs to be implemented to support the update interaction.
type GroupUpdate interface {
	UpdateGroup(ctx context.Context, resource r4b.Group) (update.Result[r4b.Group], error)
}

// GroupUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type GroupUpdateCapabilities interface {
	UpdateCapabilitiesGroup(ctx context.Context) (update.Capabilities, error)
}

// GuidanceResponseUpdate needs to be implemented to support the update interaction.
type GuidanceResponseUpdate interface {
	UpdateGuidanceResponse(ctx context.Context, resource r4b.GuidanceResponse) (update.Result[r4b.GuidanceResponse], error)
}

// GuidanceResponseUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type GuidanceResponseUpdateCapabilities interface {
	UpdateCapabilitiesGuidanceResponse(ctx context.Context) (update.Capabilities, error)
}

// HealthcareServiceUpdate needs to be implemented to support the update interaction.
type HealthcareServiceUpdate interface {
	UpdateHealthcareService(ctx context.Context, resource r4b.HealthcareService) (update.Result[r4b.HealthcareService], error)
}

// HealthcareServiceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type HealthcareServiceUpdateCapabilities interface {
	UpdateCapabilitiesHealthcareService(ctx context.Context) (update.Capabilities, error)
}

// ImagingStudyUpdate needs to be implemented to support the update interaction.
type ImagingStudyUpdate interface {
	UpdateImagingStudy(ctx context.Context, resource r4b.ImagingStudy) (update.Result[r4b.ImagingStudy], error)
}

// ImagingStudyUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ImagingStudyUpdateCapabilities interface {
	UpdateCapabilitiesImagingStudy(ctx context.Context) (update.Capabilities, error)
}

// ImmunizationUpdate needs to be implemented to support the update interaction.
type ImmunizationUpdate interface {
	UpdateImmunization(ctx context.Context, resource r4b.Immunization) (update.Result[r4b.Immunization], error)
}

// ImmunizationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ImmunizationUpdateCapabilities interface {
	UpdateCapabilitiesImmunization(ctx context.Context) (update.Capabilities, error)
}

// ImmunizationEvaluationUpdate needs to be implemented to support the update interaction.
type ImmunizationEvaluationUpdate interface {
	UpdateImmunizationEvaluation(ctx context.Context, resource r4b.ImmunizationEvaluation) (update.Result[r4b.ImmunizationEvaluation], error)
}

// ImmunizationEvaluationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ImmunizationEvaluationUpdateCapabilities interface {
	UpdateCapabilitiesImmunizationEvaluation(ctx context.Context) (update.Capabilities, error)
}

// ImmunizationRecommendationUpdate needs to be implemented to support the update interaction.
type ImmunizationRecommendationUpdate interface {
	UpdateImmunizationRecommendation(ctx context.Context, resource r4b.ImmunizationRecommendation) (update.Result[r4b.ImmunizationRecommendation], error)
}

// ImmunizationRecommendationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ImmunizationRecommendationUpdateCapabilities interface {
	UpdateCapabilitiesImmunizationRecommendation(ctx context.Context) (update.Capabilities, error)
}

// ImplementationGuideUpdate needs to be implemented to support the update interaction.
type ImplementationGuideUpdate interface {
	UpdateImplementationGuide(ctx context.Context, resource r4b.ImplementationGuide) (update.Result[r4b.ImplementationGuide], error)
}

// ImplementationGuideUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ImplementationGuideUpdateCapabilities interface {
	UpdateCapabilitiesImplementationGuide(ctx context.Context) (update.Capabilities, error)
}

// IngredientUpdate needs to be implemented to support the update interaction.
type IngredientUpdate interface {
	UpdateIngredient(ctx context.Context, resource r4b.Ingredient) (update.Result[r4b.Ingredient], error)
}

// IngredientUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type IngredientUpdateCapabilities interface {
	UpdateCapabilitiesIngredient(ctx context.Context) (update.Capabilities, error)
}

// InsurancePlanUpdate needs to be implemented to support the update interaction.
type InsurancePlanUpdate interface {
	UpdateInsurancePlan(ctx context.Context, resource r4b.InsurancePlan) (update.Result[r4b.InsurancePlan], error)
}

// InsurancePlanUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type InsurancePlanUpdateCapabilities interface {
	UpdateCapabilitiesInsurancePlan(ctx context.Context) (update.Capabilities, error)
}

// InvoiceUpdate needs to be implemented to support the update interaction.
type InvoiceUpdate interface {
	UpdateInvoice(ctx context.Context, resource r4b.Invoice) (update.Result[r4b.Invoice], error)
}

// InvoiceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type InvoiceUpdateCapabilities interface {
	UpdateCapabilitiesInvoice(ctx context.Context) (update.Capabilities, error)
}

// LibraryUpdate needs to be implemented to support the update interaction.
type LibraryUpdate interface {
	UpdateLibrary(ctx context.Context, resource r4b.Library) (update.Result[r4b.Library], error)
}

// LibraryUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type LibraryUpdateCapabilities interface {
	UpdateCapabilitiesLibrary(ctx context.Context) (update.Capabilities, error)
}

// LinkageUpdate needs to be implemented to support the update interaction.
type LinkageUpdate interface {
	UpdateLinkage(ctx context.Context, resource r4b.Linkage) (update.Result[r4b.Linkage], error)
}

// LinkageUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type LinkageUpdateCapabilities interface {
	UpdateCapabilitiesLinkage(ctx context.Context) (update.Capabilities, error)
}

// ListUpdate needs to be implemented to support the update interaction.
type ListUpdate interface {
	UpdateList(ctx context.Context, resource r4b.List) (update.Result[r4b.List], error)
}

// ListUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ListUpdateCapabilities interface {
	UpdateCapabilitiesList(ctx context.Context) (update.Capabilities, error)
}

// LocationUpdate needs to be implemented to support the update interaction.
type LocationUpdate interface {
	UpdateLocation(ctx context.Context, resource r4b.Location) (update.Result[r4b.Location], error)
}

// LocationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type LocationUpdateCapabilities interface {
	UpdateCapabilitiesLocation(ctx context.Context) (update.Capabilities, error)
}

// ManufacturedItemDefinitionUpdate needs to be implemented to support the update interaction.
type ManufacturedItemDefinitionUpdate interface {
	UpdateManufacturedItemDefinition(ctx context.Context, resource r4b.ManufacturedItemDefinition) (update.Result[r4b.ManufacturedItemDefinition], error)
}

// ManufacturedItemDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ManufacturedItemDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesManufacturedItemDefinition(ctx context.Context) (update.Capabilities, error)
}

// MeasureUpdate needs to be implemented to support the update interaction.
type MeasureUpdate interface {
	UpdateMeasure(ctx context.Context, resource r4b.Measure) (update.Result[r4b.Measure], error)
}

// MeasureUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MeasureUpdateCapabilities interface {
	UpdateCapabilitiesMeasure(ctx context.Context) (update.Capabilities, error)
}

// MeasureReportUpdate needs to be implemented to support the update interaction.
type MeasureReportUpdate interface {
	UpdateMeasureReport(ctx context.Context, resource r4b.MeasureReport) (update.Result[r4b.MeasureReport], error)
}

// MeasureReportUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MeasureReportUpdateCapabilities interface {
	UpdateCapabilitiesMeasureReport(ctx context.Context) (update.Capabilities, error)
}

// MediaUpdate needs to be implemented to support the update interaction.
type MediaUpdate interface {
	UpdateMedia(ctx context.Context, resource r4b.Media) (update.Result[r4b.Media], error)
}

// MediaUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MediaUpdateCapabilities interface {
	UpdateCapabilitiesMedia(ctx context.Context) (update.Capabilities, error)
}

// MedicationUpdate needs to be implemented to support the update interaction.
type MedicationUpdate interface {
	UpdateMedication(ctx context.Context, resource r4b.Medication) (update.Result[r4b.Medication], error)
}

// MedicationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MedicationUpdateCapabilities interface {
	UpdateCapabilitiesMedication(ctx context.Context) (update.Capabilities, error)
}

// MedicationAdministrationUpdate needs to be implemented to support the update interaction.
type MedicationAdministrationUpdate interface {
	UpdateMedicationAdministration(ctx context.Context, resource r4b.MedicationAdministration) (update.Result[r4b.MedicationAdministration], error)
}

// MedicationAdministrationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MedicationAdministrationUpdateCapabilities interface {
	UpdateCapabilitiesMedicationAdministration(ctx context.Context) (update.Capabilities, error)
}

// MedicationDispenseUpdate needs to be implemented to support the update interaction.
type MedicationDispenseUpdate interface {
	UpdateMedicationDispense(ctx context.Context, resource r4b.MedicationDispense) (update.Result[r4b.MedicationDispense], error)
}

// MedicationDispenseUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MedicationDispenseUpdateCapabilities interface {
	UpdateCapabilitiesMedicationDispense(ctx context.Context) (update.Capabilities, error)
}

// MedicationKnowledgeUpdate needs to be implemented to support the update interaction.
type MedicationKnowledgeUpdate interface {
	UpdateMedicationKnowledge(ctx context.Context, resource r4b.MedicationKnowledge) (update.Result[r4b.MedicationKnowledge], error)
}

// MedicationKnowledgeUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MedicationKnowledgeUpdateCapabilities interface {
	UpdateCapabilitiesMedicationKnowledge(ctx context.Context) (update.Capabilities, error)
}

// MedicationRequestUpdate needs to be implemented to support the update interaction.
type MedicationRequestUpdate interface {
	UpdateMedicationRequest(ctx context.Context, resource r4b.MedicationRequest) (update.Result[r4b.MedicationRequest], error)
}

// MedicationRequestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MedicationRequestUpdateCapabilities interface {
	UpdateCapabilitiesMedicationRequest(ctx context.Context) (update.Capabilities, error)
}

// MedicationStatementUpdate needs to be implemented to support the update interaction.
type MedicationStatementUpdate interface {
	UpdateMedicationStatement(ctx context.Context, resource r4b.MedicationStatement) (update.Result[r4b.MedicationStatement], error)
}

// MedicationStatementUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MedicationStatementUpdateCapabilities interface {
	UpdateCapabilitiesMedicationStatement(ctx context.Context) (update.Capabilities, error)
}

// MedicinalProductDefinitionUpdate needs to be implemented to support the update interaction.
type MedicinalProductDefinitionUpdate interface {
	UpdateMedicinalProductDefinition(ctx context.Context, resource r4b.MedicinalProductDefinition) (update.Result[r4b.MedicinalProductDefinition], error)
}

// MedicinalProductDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MedicinalProductDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesMedicinalProductDefinition(ctx context.Context) (update.Capabilities, error)
}

// MessageDefinitionUpdate needs to be implemented to support the update interaction.
type MessageDefinitionUpdate interface {
	UpdateMessageDefinition(ctx context.Context, resource r4b.MessageDefinition) (update.Result[r4b.MessageDefinition], error)
}

// MessageDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MessageDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesMessageDefinition(ctx context.Context) (update.Capabilities, error)
}

// MessageHeaderUpdate needs to be implemented to support the update interaction.
type MessageHeaderUpdate interface {
	UpdateMessageHeader(ctx context.Context, resource r4b.MessageHeader) (update.Result[r4b.MessageHeader], error)
}

// MessageHeaderUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MessageHeaderUpdateCapabilities interface {
	UpdateCapabilitiesMessageHeader(ctx context.Context) (update.Capabilities, error)
}

// MolecularSequenceUpdate needs to be implemented to support the update interaction.
type MolecularSequenceUpdate interface {
	UpdateMolecularSequence(ctx context.Context, resource r4b.MolecularSequence) (update.Result[r4b.MolecularSequence], error)
}

// MolecularSequenceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type MolecularSequenceUpdateCapabilities interface {
	UpdateCapabilitiesMolecularSequence(ctx context.Context) (update.Capabilities, error)
}

// NamingSystemUpdate needs to be implemented to support the update interaction.
type NamingSystemUpdate interface {
	UpdateNamingSystem(ctx context.Context, resource r4b.NamingSystem) (update.Result[r4b.NamingSystem], error)
}

// NamingSystemUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type NamingSystemUpdateCapabilities interface {
	UpdateCapabilitiesNamingSystem(ctx context.Context) (update.Capabilities, error)
}

// NutritionOrderUpdate needs to be implemented to support the update interaction.
type NutritionOrderUpdate interface {
	UpdateNutritionOrder(ctx context.Context, resource r4b.NutritionOrder) (update.Result[r4b.NutritionOrder], error)
}

// NutritionOrderUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type NutritionOrderUpdateCapabilities interface {
	UpdateCapabilitiesNutritionOrder(ctx context.Context) (update.Capabilities, error)
}

// NutritionProductUpdate needs to be implemented to support the update interaction.
type NutritionProductUpdate interface {
	UpdateNutritionProduct(ctx context.Context, resource r4b.NutritionProduct) (update.Result[r4b.NutritionProduct], error)
}

// NutritionProductUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type NutritionProductUpdateCapabilities interface {
	UpdateCapabilitiesNutritionProduct(ctx context.Context) (update.Capabilities, error)
}

// ObservationUpdate needs to be implemented to support the update interaction.
type ObservationUpdate interface {
	UpdateObservation(ctx context.Context, resource r4b.Observation) (update.Result[r4b.Observation], error)
}

// ObservationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ObservationUpdateCapabilities interface {
	UpdateCapabilitiesObservation(ctx context.Context) (update.Capabilities, error)
}

// ObservationDefinitionUpdate needs to be implemented to support the update interaction.
type ObservationDefinitionUpdate interface {
	UpdateObservationDefinition(ctx context.Context, resource r4b.ObservationDefinition) (update.Result[r4b.ObservationDefinition], error)
}

// ObservationDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ObservationDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesObservationDefinition(ctx context.Context) (update.Capabilities, error)
}

// OperationDefinitionUpdate needs to be implemented to support the update interaction.
type OperationDefinitionUpdate interface {
	UpdateOperationDefinition(ctx context.Context, resource r4b.OperationDefinition) (update.Result[r4b.OperationDefinition], error)
}

// OperationDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type OperationDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesOperationDefinition(ctx context.Context) (update.Capabilities, error)
}

// OperationOutcomeUpdate needs to be implemented to support the update interaction.
type OperationOutcomeUpdate interface {
	UpdateOperationOutcome(ctx context.Context, resource r4b.OperationOutcome) (update.Result[r4b.OperationOutcome], error)
}

// OperationOutcomeUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type OperationOutcomeUpdateCapabilities interface {
	UpdateCapabilitiesOperationOutcome(ctx context.Context) (update.Capabilities, error)
}

// OrganizationUpdate needs to be implemented to support the update interaction.
type OrganizationUpdate interface {
	UpdateOrganization(ctx context.Context, resource r4b.Organization) (update.Result[r4b.Organization], error)
}

// OrganizationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type OrganizationUpdateCapabilities interface {
	UpdateCapabilitiesOrganization(ctx context.Context) (update.Capabilities, error)
}

// OrganizationAffiliationUpdate needs to be implemented to support the update interaction.
type OrganizationAffiliationUpdate interface {
	UpdateOrganizationAffiliation(ctx context.Context, resource r4b.OrganizationAffiliation) (update.Result[r4b.OrganizationAffiliation], error)
}

// OrganizationAffiliationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type OrganizationAffiliationUpdateCapabilities interface {
	UpdateCapabilitiesOrganizationAffiliation(ctx context.Context) (update.Capabilities, error)
}

// PackagedProductDefinitionUpdate needs to be implemented to support the update interaction.
type PackagedProductDefinitionUpdate interface {
	UpdatePackagedProductDefinition(ctx context.Context, resource r4b.PackagedProductDefinition) (update.Result[r4b.PackagedProductDefinition], error)
}

// PackagedProductDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PackagedProductDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesPackagedProductDefinition(ctx context.Context) (update.Capabilities, error)
}

// ParametersUpdate needs to be implemented to support the update interaction.
type ParametersUpdate interface {
	UpdateParameters(ctx context.Context, resource r4b.Parameters) (update.Result[r4b.Parameters], error)
}

// ParametersUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ParametersUpdateCapabilities interface {
	UpdateCapabilitiesParameters(ctx context.Context) (update.Capabilities, error)
}

// PatientUpdate needs to be implemented to support the update interaction.
type PatientUpdate interface {
	UpdatePatient(ctx context.Context, resource r4b.Patient) (update.Result[r4b.Patient], error)
}

// PatientUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PatientUpdateCapabilities interface {
	UpdateCapabilitiesPatient(ctx context.Context) (update.Capabilities, error)
}

// PaymentNoticeUpdate needs to be implemented to support the update interaction.
type PaymentNoticeUpdate interface {
	UpdatePaymentNotice(ctx context.Context, resource r4b.PaymentNotice) (update.Result[r4b.PaymentNotice], error)
}

// PaymentNoticeUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PaymentNoticeUpdateCapabilities interface {
	UpdateCapabilitiesPaymentNotice(ctx context.Context) (update.Capabilities, error)
}

// PaymentReconciliationUpdate needs to be implemented to support the update interaction.
type PaymentReconciliationUpdate interface {
	UpdatePaymentReconciliation(ctx context.Context, resource r4b.PaymentReconciliation) (update.Result[r4b.PaymentReconciliation], error)
}

// PaymentReconciliationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PaymentReconciliationUpdateCapabilities interface {
	UpdateCapabilitiesPaymentReconciliation(ctx context.Context) (update.Capabilities, error)
}

// PersonUpdate needs to be implemented to support the update interaction.
type PersonUpdate interface {
	UpdatePerson(ctx context.Context, resource r4b.Person) (update.Result[r4b.Person], error)
}

// PersonUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PersonUpdateCapabilities interface {
	UpdateCapabilitiesPerson(ctx context.Context) (update.Capabilities, error)
}

// PlanDefinitionUpdate needs to be implemented to support the update interaction.
type PlanDefinitionUpdate interface {
	UpdatePlanDefinition(ctx context.Context, resource r4b.PlanDefinition) (update.Result[r4b.PlanDefinition], error)
}

// PlanDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PlanDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesPlanDefinition(ctx context.Context) (update.Capabilities, error)
}

// PractitionerUpdate needs to be implemented to support the update interaction.
type PractitionerUpdate interface {
	UpdatePractitioner(ctx context.Context, resource r4b.Practitioner) (update.Result[r4b.Practitioner], error)
}

// PractitionerUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PractitionerUpdateCapabilities interface {
	UpdateCapabilitiesPractitioner(ctx context.Context) (update.Capabilities, error)
}

// PractitionerRoleUpdate needs to be implemented to support the update interaction.
type PractitionerRoleUpdate interface {
	UpdatePractitionerRole(ctx context.Context, resource r4b.PractitionerRole) (update.Result[r4b.PractitionerRole], error)
}

// PractitionerRoleUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type PractitionerRoleUpdateCapabilities interface {
	UpdateCapabilitiesPractitionerRole(ctx context.Context) (update.Capabilities, error)
}

// ProcedureUpdate needs to be implemented to support the update interaction.
type ProcedureUpdate interface {
	UpdateProcedure(ctx context.Context, resource r4b.Procedure) (update.Result[r4b.Procedure], error)
}

// ProcedureUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ProcedureUpdateCapabilities interface {
	UpdateCapabilitiesProcedure(ctx context.Context) (update.Capabilities, error)
}

// ProvenanceUpdate needs to be implemented to support the update interaction.
type ProvenanceUpdate interface {
	UpdateProvenance(ctx context.Context, resource r4b.Provenance) (update.Result[r4b.Provenance], error)
}

// ProvenanceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ProvenanceUpdateCapabilities interface {
	UpdateCapabilitiesProvenance(ctx context.Context) (update.Capabilities, error)
}

// QuestionnaireUpdate needs to be implemented to support the update interaction.
type QuestionnaireUpdate interface {
	UpdateQuestionnaire(ctx context.Context, resource r4b.Questionnaire) (update.Result[r4b.Questionnaire], error)
}

// QuestionnaireUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type QuestionnaireUpdateCapabilities interface {
	UpdateCapabilitiesQuestionnaire(ctx context.Context) (update.Capabilities, error)
}

// QuestionnaireResponseUpdate needs to be implemented to support the update interaction.
type QuestionnaireResponseUpdate interface {
	UpdateQuestionnaireResponse(ctx context.Context, resource r4b.QuestionnaireResponse) (update.Result[r4b.QuestionnaireResponse], error)
}

// QuestionnaireResponseUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type QuestionnaireResponseUpdateCapabilities interface {
	UpdateCapabilitiesQuestionnaireResponse(ctx context.Context) (update.Capabilities, error)
}

// RegulatedAuthorizationUpdate needs to be implemented to support the update interaction.
type RegulatedAuthorizationUpdate interface {
	UpdateRegulatedAuthorization(ctx context.Context, resource r4b.RegulatedAuthorization) (update.Result[r4b.RegulatedAuthorization], error)
}

// RegulatedAuthorizationUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type RegulatedAuthorizationUpdateCapabilities interface {
	UpdateCapabilitiesRegulatedAuthorization(ctx context.Context) (update.Capabilities, error)
}

// RelatedPersonUpdate needs to be implemented to support the update interaction.
type RelatedPersonUpdate interface {
	UpdateRelatedPerson(ctx context.Context, resource r4b.RelatedPerson) (update.Result[r4b.RelatedPerson], error)
}

// RelatedPersonUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type RelatedPersonUpdateCapabilities interface {
	UpdateCapabilitiesRelatedPerson(ctx context.Context) (update.Capabilities, error)
}

// RequestGroupUpdate needs to be implemented to support the update interaction.
type RequestGroupUpdate interface {
	UpdateRequestGroup(ctx context.Context, resource r4b.RequestGroup) (update.Result[r4b.RequestGroup], error)
}

// RequestGroupUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type RequestGroupUpdateCapabilities interface {
	UpdateCapabilitiesRequestGroup(ctx context.Context) (update.Capabilities, error)
}

// ResearchDefinitionUpdate needs to be implemented to support the update interaction.
type ResearchDefinitionUpdate interface {
	UpdateResearchDefinition(ctx context.Context, resource r4b.ResearchDefinition) (update.Result[r4b.ResearchDefinition], error)
}

// ResearchDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ResearchDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesResearchDefinition(ctx context.Context) (update.Capabilities, error)
}

// ResearchElementDefinitionUpdate needs to be implemented to support the update interaction.
type ResearchElementDefinitionUpdate interface {
	UpdateResearchElementDefinition(ctx context.Context, resource r4b.ResearchElementDefinition) (update.Result[r4b.ResearchElementDefinition], error)
}

// ResearchElementDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ResearchElementDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesResearchElementDefinition(ctx context.Context) (update.Capabilities, error)
}

// ResearchStudyUpdate needs to be implemented to support the update interaction.
type ResearchStudyUpdate interface {
	UpdateResearchStudy(ctx context.Context, resource r4b.ResearchStudy) (update.Result[r4b.ResearchStudy], error)
}

// ResearchStudyUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ResearchStudyUpdateCapabilities interface {
	UpdateCapabilitiesResearchStudy(ctx context.Context) (update.Capabilities, error)
}

// ResearchSubjectUpdate needs to be implemented to support the update interaction.
type ResearchSubjectUpdate interface {
	UpdateResearchSubject(ctx context.Context, resource r4b.ResearchSubject) (update.Result[r4b.ResearchSubject], error)
}

// ResearchSubjectUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ResearchSubjectUpdateCapabilities interface {
	UpdateCapabilitiesResearchSubject(ctx context.Context) (update.Capabilities, error)
}

// RiskAssessmentUpdate needs to be implemented to support the update interaction.
type RiskAssessmentUpdate interface {
	UpdateRiskAssessment(ctx context.Context, resource r4b.RiskAssessment) (update.Result[r4b.RiskAssessment], error)
}

// RiskAssessmentUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type RiskAssessmentUpdateCapabilities interface {
	UpdateCapabilitiesRiskAssessment(ctx context.Context) (update.Capabilities, error)
}

// ScheduleUpdate needs to be implemented to support the update interaction.
type ScheduleUpdate interface {
	UpdateSchedule(ctx context.Context, resource r4b.Schedule) (update.Result[r4b.Schedule], error)
}

// ScheduleUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ScheduleUpdateCapabilities interface {
	UpdateCapabilitiesSchedule(ctx context.Context) (update.Capabilities, error)
}

// SearchParameterUpdate needs to be implemented to support the update interaction.
type SearchParameterUpdate interface {
	UpdateSearchParameter(ctx context.Context, resource r4b.SearchParameter) (update.Result[r4b.SearchParameter], error)
}

// SearchParameterUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SearchParameterUpdateCapabilities interface {
	UpdateCapabilitiesSearchParameter(ctx context.Context) (update.Capabilities, error)
}

// ServiceRequestUpdate needs to be implemented to support the update interaction.
type ServiceRequestUpdate interface {
	UpdateServiceRequest(ctx context.Context, resource r4b.ServiceRequest) (update.Result[r4b.ServiceRequest], error)
}

// ServiceRequestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ServiceRequestUpdateCapabilities interface {
	UpdateCapabilitiesServiceRequest(ctx context.Context) (update.Capabilities, error)
}

// SlotUpdate needs to be implemented to support the update interaction.
type SlotUpdate interface {
	UpdateSlot(ctx context.Context, resource r4b.Slot) (update.Result[r4b.Slot], error)
}

// SlotUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SlotUpdateCapabilities interface {
	UpdateCapabilitiesSlot(ctx context.Context) (update.Capabilities, error)
}

// SpecimenUpdate needs to be implemented to support the update interaction.
type SpecimenUpdate interface {
	UpdateSpecimen(ctx context.Context, resource r4b.Specimen) (update.Result[r4b.Specimen], error)
}

// SpecimenUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SpecimenUpdateCapabilities interface {
	UpdateCapabilitiesSpecimen(ctx context.Context) (update.Capabilities, error)
}

// SpecimenDefinitionUpdate needs to be implemented to support the update interaction.
type SpecimenDefinitionUpdate interface {
	UpdateSpecimenDefinition(ctx context.Context, resource r4b.SpecimenDefinition) (update.Result[r4b.SpecimenDefinition], error)
}

// SpecimenDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SpecimenDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesSpecimenDefinition(ctx context.Context) (update.Capabilities, error)
}

// StructureDefinitionUpdate needs to be implemented to support the update interaction.
type StructureDefinitionUpdate interface {
	UpdateStructureDefinition(ctx context.Context, resource r4b.StructureDefinition) (update.Result[r4b.StructureDefinition], error)
}

// StructureDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type StructureDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesStructureDefinition(ctx context.Context) (update.Capabilities, error)
}

// StructureMapUpdate needs to be implemented to support the update interaction.
type StructureMapUpdate interface {
	UpdateStructureMap(ctx context.Context, resource r4b.StructureMap) (update.Result[r4b.StructureMap], error)
}

// StructureMapUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type StructureMapUpdateCapabilities interface {
	UpdateCapabilitiesStructureMap(ctx context.Context) (update.Capabilities, error)
}

// SubscriptionUpdate needs to be implemented to support the update interaction.
type SubscriptionUpdate interface {
	UpdateSubscription(ctx context.Context, resource r4b.Subscription) (update.Result[r4b.Subscription], error)
}

// SubscriptionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SubscriptionUpdateCapabilities interface {
	UpdateCapabilitiesSubscription(ctx context.Context) (update.Capabilities, error)
}

// SubscriptionStatusUpdate needs to be implemented to support the update interaction.
type SubscriptionStatusUpdate interface {
	UpdateSubscriptionStatus(ctx context.Context, resource r4b.SubscriptionStatus) (update.Result[r4b.SubscriptionStatus], error)
}

// SubscriptionStatusUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SubscriptionStatusUpdateCapabilities interface {
	UpdateCapabilitiesSubscriptionStatus(ctx context.Context) (update.Capabilities, error)
}

// SubscriptionTopicUpdate needs to be implemented to support the update interaction.
type SubscriptionTopicUpdate interface {
	UpdateSubscriptionTopic(ctx context.Context, resource r4b.SubscriptionTopic) (update.Result[r4b.SubscriptionTopic], error)
}

// SubscriptionTopicUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SubscriptionTopicUpdateCapabilities interface {
	UpdateCapabilitiesSubscriptionTopic(ctx context.Context) (update.Capabilities, error)
}

// SubstanceUpdate needs to be implemented to support the update interaction.
type SubstanceUpdate interface {
	UpdateSubstance(ctx context.Context, resource r4b.Substance) (update.Result[r4b.Substance], error)
}

// SubstanceUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SubstanceUpdateCapabilities interface {
	UpdateCapabilitiesSubstance(ctx context.Context) (update.Capabilities, error)
}

// SubstanceDefinitionUpdate needs to be implemented to support the update interaction.
type SubstanceDefinitionUpdate interface {
	UpdateSubstanceDefinition(ctx context.Context, resource r4b.SubstanceDefinition) (update.Result[r4b.SubstanceDefinition], error)
}

// SubstanceDefinitionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SubstanceDefinitionUpdateCapabilities interface {
	UpdateCapabilitiesSubstanceDefinition(ctx context.Context) (update.Capabilities, error)
}

// SupplyDeliveryUpdate needs to be implemented to support the update interaction.
type SupplyDeliveryUpdate interface {
	UpdateSupplyDelivery(ctx context.Context, resource r4b.SupplyDelivery) (update.Result[r4b.SupplyDelivery], error)
}

// SupplyDeliveryUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SupplyDeliveryUpdateCapabilities interface {
	UpdateCapabilitiesSupplyDelivery(ctx context.Context) (update.Capabilities, error)
}

// SupplyRequestUpdate needs to be implemented to support the update interaction.
type SupplyRequestUpdate interface {
	UpdateSupplyRequest(ctx context.Context, resource r4b.SupplyRequest) (update.Result[r4b.SupplyRequest], error)
}

// SupplyRequestUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type SupplyRequestUpdateCapabilities interface {
	UpdateCapabilitiesSupplyRequest(ctx context.Context) (update.Capabilities, error)
}

// TaskUpdate needs to be implemented to support the update interaction.
type TaskUpdate interface {
	UpdateTask(ctx context.Context, resource r4b.Task) (update.Result[r4b.Task], error)
}

// TaskUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type TaskUpdateCapabilities interface {
	UpdateCapabilitiesTask(ctx context.Context) (update.Capabilities, error)
}

// TerminologyCapabilitiesUpdate needs to be implemented to support the update interaction.
type TerminologyCapabilitiesUpdate interface {
	UpdateTerminologyCapabilities(ctx context.Context, resource r4b.TerminologyCapabilities) (update.Result[r4b.TerminologyCapabilities], error)
}

// TerminologyCapabilitiesUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type TerminologyCapabilitiesUpdateCapabilities interface {
	UpdateCapabilitiesTerminologyCapabilities(ctx context.Context) (update.Capabilities, error)
}

// TestReportUpdate needs to be implemented to support the update interaction.
type TestReportUpdate interface {
	UpdateTestReport(ctx context.Context, resource r4b.TestReport) (update.Result[r4b.TestReport], error)
}

// TestReportUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type TestReportUpdateCapabilities interface {
	UpdateCapabilitiesTestReport(ctx context.Context) (update.Capabilities, error)
}

// TestScriptUpdate needs to be implemented to support the update interaction.
type TestScriptUpdate interface {
	UpdateTestScript(ctx context.Context, resource r4b.TestScript) (update.Result[r4b.TestScript], error)
}

// TestScriptUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type TestScriptUpdateCapabilities interface {
	UpdateCapabilitiesTestScript(ctx context.Context) (update.Capabilities, error)
}

// ValueSetUpdate needs to be implemented to support the update interaction.
type ValueSetUpdate interface {
	UpdateValueSet(ctx context.Context, resource r4b.ValueSet) (update.Result[r4b.ValueSet], error)
}

// ValueSetUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type ValueSetUpdateCapabilities interface {
	UpdateCapabilitiesValueSet(ctx context.Context) (update.Capabilities, error)
}

// VerificationResultUpdate needs to be implemented to support the update interaction.
type VerificationResultUpdate interface {
	UpdateVerificationResult(ctx context.Context, resource r4b.VerificationResult) (update.Result[r4b.VerificationResult], error)
}

// VerificationResultUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type VerificationResultUpdateCapabilities interface {
	UpdateCapabilitiesVerificationResult(ctx context.Context) (update.Capabilities, error)
}

// VisionPrescriptionUpdate needs to be implemented to support the update interaction.
type VisionPrescriptionUpdate interface {
	UpdateVisionPrescription(ctx context.Context, resource r4b.VisionPrescription) (update.Result[r4b.VisionPrescription], error)
}

// VisionPrescriptionUpdateCapabilities is optional and only needs to be implemented if the backend deviates from the default behavior.
type VisionPrescriptionUpdateCapabilities interface {
	UpdateCapabilitiesVisionPrescription(ctx context.Context) (update.Capabilities, error)
}
