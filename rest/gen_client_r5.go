// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.
//go:build r5 || !(r4 || r4b || r5)

package rest

import (
	"context"
	"fmt"
	"github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	"github.com/DAMEDIC/fhir-toolbox-go/capabilities/update"
	"github.com/DAMEDIC/fhir-toolbox-go/model"
	"github.com/DAMEDIC/fhir-toolbox-go/model/gen/basic"
	"github.com/DAMEDIC/fhir-toolbox-go/model/gen/r5"
	"net/http"
	"net/url"
)

// ClientR5 provides both generic and resource-specific FHIR client capabilities.
type ClientR5 struct {
	// BaseURL is the base URL of the FHIR server
	BaseURL *url.URL
	// Client is the HTTP client to use for requests. If nil, http.DefaultClient is used.
	Client *http.Client
	// Format specifies the request/response format (JSON or XML). Defaults to JSON if not set.
	Format Format
}

// httpClient returns the HTTP client, using http.DefaultClient if none is set.
func (c *ClientR5) httpClient() *http.Client {
	if c.Client != nil {
		return c.Client
	}
	return http.DefaultClient
}

// CapabilityStatement retrieves the server's CapabilityStatement.
func (c *ClientR5) CapabilityStatement(ctx context.Context) (basic.CapabilityStatement, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.CapabilityStatement(ctx)
}

// Create creates a new resource.
func (c *ClientR5) Create(ctx context.Context, resource model.Resource) (model.Resource, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Create(ctx, resource)
}

// Read retrieves a resource by type and ID.
func (c *ClientR5) Read(ctx context.Context, resourceType string, id string) (model.Resource, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Read(ctx, resourceType, id)
}

// Update updates an existing resource.
func (c *ClientR5) Update(ctx context.Context, resource model.Resource) (update.Result[model.Resource], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Update(ctx, resource)
}

// Delete deletes a resource by type and ID.
func (c *ClientR5) Delete(ctx context.Context, resourceType string, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, resourceType, id)
}

// Search performs a search operation for the given resource type.
func (c *ClientR5) Search(ctx context.Context, resourceType string, parameters search.Parameters, options search.Options) (search.Result[model.Resource], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Search(ctx, resourceType, parameters, options)
}

// CreateAccount creates a new Account resource.
func (c *ClientR5) CreateAccount(ctx context.Context, resource r5.Account) (r5.Account, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Account{}, err
	}
	typed, ok := result.(r5.Account)
	if !ok {
		return r5.Account{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAccount retrieves a Account resource by ID.
func (c *ClientR5) ReadAccount(ctx context.Context, id string) (r5.Account, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Account", id)
	if err != nil {
		return r5.Account{}, err
	}
	typed, ok := result.(r5.Account)
	if !ok {
		return r5.Account{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAccount updates an existing Account resource.
func (c *ClientR5) UpdateAccount(ctx context.Context, resource r5.Account) (update.Result[r5.Account], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Account]{}, err
	}
	typed, ok := result.Resource.(r5.Account)
	if !ok {
		return update.Result[r5.Account]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Account]{Resource: typed, Created: result.Created}, nil
}

// DeleteAccount deletes a Account resource by ID.
func (c *ClientR5) DeleteAccount(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Account", id)
}

// SearchAccount performs a search for Account resources.
func (c *ClientR5) SearchAccount(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Account], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Account", parameters, options)
	if err != nil {
		return search.Result[r5.Account]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Account, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Account)
		if !ok {
			return search.Result[r5.Account]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Account]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateActivityDefinition creates a new ActivityDefinition resource.
func (c *ClientR5) CreateActivityDefinition(ctx context.Context, resource r5.ActivityDefinition) (r5.ActivityDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ActivityDefinition{}, err
	}
	typed, ok := result.(r5.ActivityDefinition)
	if !ok {
		return r5.ActivityDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadActivityDefinition retrieves a ActivityDefinition resource by ID.
func (c *ClientR5) ReadActivityDefinition(ctx context.Context, id string) (r5.ActivityDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r5.ActivityDefinition{}, err
	}
	typed, ok := result.(r5.ActivityDefinition)
	if !ok {
		return r5.ActivityDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateActivityDefinition updates an existing ActivityDefinition resource.
func (c *ClientR5) UpdateActivityDefinition(ctx context.Context, resource r5.ActivityDefinition) (update.Result[r5.ActivityDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ActivityDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.ActivityDefinition)
	if !ok {
		return update.Result[r5.ActivityDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ActivityDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteActivityDefinition deletes a ActivityDefinition resource by ID.
func (c *ClientR5) DeleteActivityDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ActivityDefinition", id)
}

// SearchActivityDefinition performs a search for ActivityDefinition resources.
func (c *ClientR5) SearchActivityDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ActivityDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ActivityDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.ActivityDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ActivityDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ActivityDefinition)
		if !ok {
			return search.Result[r5.ActivityDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ActivityDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateActorDefinition creates a new ActorDefinition resource.
func (c *ClientR5) CreateActorDefinition(ctx context.Context, resource r5.ActorDefinition) (r5.ActorDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ActorDefinition{}, err
	}
	typed, ok := result.(r5.ActorDefinition)
	if !ok {
		return r5.ActorDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadActorDefinition retrieves a ActorDefinition resource by ID.
func (c *ClientR5) ReadActorDefinition(ctx context.Context, id string) (r5.ActorDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ActorDefinition", id)
	if err != nil {
		return r5.ActorDefinition{}, err
	}
	typed, ok := result.(r5.ActorDefinition)
	if !ok {
		return r5.ActorDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateActorDefinition updates an existing ActorDefinition resource.
func (c *ClientR5) UpdateActorDefinition(ctx context.Context, resource r5.ActorDefinition) (update.Result[r5.ActorDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ActorDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.ActorDefinition)
	if !ok {
		return update.Result[r5.ActorDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ActorDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteActorDefinition deletes a ActorDefinition resource by ID.
func (c *ClientR5) DeleteActorDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ActorDefinition", id)
}

// SearchActorDefinition performs a search for ActorDefinition resources.
func (c *ClientR5) SearchActorDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ActorDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ActorDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.ActorDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ActorDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ActorDefinition)
		if !ok {
			return search.Result[r5.ActorDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ActorDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAdministrableProductDefinition creates a new AdministrableProductDefinition resource.
func (c *ClientR5) CreateAdministrableProductDefinition(ctx context.Context, resource r5.AdministrableProductDefinition) (r5.AdministrableProductDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.AdministrableProductDefinition{}, err
	}
	typed, ok := result.(r5.AdministrableProductDefinition)
	if !ok {
		return r5.AdministrableProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAdministrableProductDefinition retrieves a AdministrableProductDefinition resource by ID.
func (c *ClientR5) ReadAdministrableProductDefinition(ctx context.Context, id string) (r5.AdministrableProductDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AdministrableProductDefinition", id)
	if err != nil {
		return r5.AdministrableProductDefinition{}, err
	}
	typed, ok := result.(r5.AdministrableProductDefinition)
	if !ok {
		return r5.AdministrableProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAdministrableProductDefinition updates an existing AdministrableProductDefinition resource.
func (c *ClientR5) UpdateAdministrableProductDefinition(ctx context.Context, resource r5.AdministrableProductDefinition) (update.Result[r5.AdministrableProductDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.AdministrableProductDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.AdministrableProductDefinition)
	if !ok {
		return update.Result[r5.AdministrableProductDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.AdministrableProductDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteAdministrableProductDefinition deletes a AdministrableProductDefinition resource by ID.
func (c *ClientR5) DeleteAdministrableProductDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AdministrableProductDefinition", id)
}

// SearchAdministrableProductDefinition performs a search for AdministrableProductDefinition resources.
func (c *ClientR5) SearchAdministrableProductDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.AdministrableProductDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AdministrableProductDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.AdministrableProductDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.AdministrableProductDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.AdministrableProductDefinition)
		if !ok {
			return search.Result[r5.AdministrableProductDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.AdministrableProductDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAdverseEvent creates a new AdverseEvent resource.
func (c *ClientR5) CreateAdverseEvent(ctx context.Context, resource r5.AdverseEvent) (r5.AdverseEvent, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.AdverseEvent{}, err
	}
	typed, ok := result.(r5.AdverseEvent)
	if !ok {
		return r5.AdverseEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAdverseEvent retrieves a AdverseEvent resource by ID.
func (c *ClientR5) ReadAdverseEvent(ctx context.Context, id string) (r5.AdverseEvent, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r5.AdverseEvent{}, err
	}
	typed, ok := result.(r5.AdverseEvent)
	if !ok {
		return r5.AdverseEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAdverseEvent updates an existing AdverseEvent resource.
func (c *ClientR5) UpdateAdverseEvent(ctx context.Context, resource r5.AdverseEvent) (update.Result[r5.AdverseEvent], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.AdverseEvent]{}, err
	}
	typed, ok := result.Resource.(r5.AdverseEvent)
	if !ok {
		return update.Result[r5.AdverseEvent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.AdverseEvent]{Resource: typed, Created: result.Created}, nil
}

// DeleteAdverseEvent deletes a AdverseEvent resource by ID.
func (c *ClientR5) DeleteAdverseEvent(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AdverseEvent", id)
}

// SearchAdverseEvent performs a search for AdverseEvent resources.
func (c *ClientR5) SearchAdverseEvent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.AdverseEvent], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AdverseEvent", parameters, options)
	if err != nil {
		return search.Result[r5.AdverseEvent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.AdverseEvent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.AdverseEvent)
		if !ok {
			return search.Result[r5.AdverseEvent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.AdverseEvent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAllergyIntolerance creates a new AllergyIntolerance resource.
func (c *ClientR5) CreateAllergyIntolerance(ctx context.Context, resource r5.AllergyIntolerance) (r5.AllergyIntolerance, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.AllergyIntolerance{}, err
	}
	typed, ok := result.(r5.AllergyIntolerance)
	if !ok {
		return r5.AllergyIntolerance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAllergyIntolerance retrieves a AllergyIntolerance resource by ID.
func (c *ClientR5) ReadAllergyIntolerance(ctx context.Context, id string) (r5.AllergyIntolerance, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r5.AllergyIntolerance{}, err
	}
	typed, ok := result.(r5.AllergyIntolerance)
	if !ok {
		return r5.AllergyIntolerance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAllergyIntolerance updates an existing AllergyIntolerance resource.
func (c *ClientR5) UpdateAllergyIntolerance(ctx context.Context, resource r5.AllergyIntolerance) (update.Result[r5.AllergyIntolerance], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.AllergyIntolerance]{}, err
	}
	typed, ok := result.Resource.(r5.AllergyIntolerance)
	if !ok {
		return update.Result[r5.AllergyIntolerance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.AllergyIntolerance]{Resource: typed, Created: result.Created}, nil
}

// DeleteAllergyIntolerance deletes a AllergyIntolerance resource by ID.
func (c *ClientR5) DeleteAllergyIntolerance(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AllergyIntolerance", id)
}

// SearchAllergyIntolerance performs a search for AllergyIntolerance resources.
func (c *ClientR5) SearchAllergyIntolerance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.AllergyIntolerance], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AllergyIntolerance", parameters, options)
	if err != nil {
		return search.Result[r5.AllergyIntolerance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.AllergyIntolerance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.AllergyIntolerance)
		if !ok {
			return search.Result[r5.AllergyIntolerance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.AllergyIntolerance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAppointment creates a new Appointment resource.
func (c *ClientR5) CreateAppointment(ctx context.Context, resource r5.Appointment) (r5.Appointment, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Appointment{}, err
	}
	typed, ok := result.(r5.Appointment)
	if !ok {
		return r5.Appointment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAppointment retrieves a Appointment resource by ID.
func (c *ClientR5) ReadAppointment(ctx context.Context, id string) (r5.Appointment, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Appointment", id)
	if err != nil {
		return r5.Appointment{}, err
	}
	typed, ok := result.(r5.Appointment)
	if !ok {
		return r5.Appointment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAppointment updates an existing Appointment resource.
func (c *ClientR5) UpdateAppointment(ctx context.Context, resource r5.Appointment) (update.Result[r5.Appointment], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Appointment]{}, err
	}
	typed, ok := result.Resource.(r5.Appointment)
	if !ok {
		return update.Result[r5.Appointment]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Appointment]{Resource: typed, Created: result.Created}, nil
}

// DeleteAppointment deletes a Appointment resource by ID.
func (c *ClientR5) DeleteAppointment(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Appointment", id)
}

// SearchAppointment performs a search for Appointment resources.
func (c *ClientR5) SearchAppointment(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Appointment], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Appointment", parameters, options)
	if err != nil {
		return search.Result[r5.Appointment]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Appointment, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Appointment)
		if !ok {
			return search.Result[r5.Appointment]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Appointment]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAppointmentResponse creates a new AppointmentResponse resource.
func (c *ClientR5) CreateAppointmentResponse(ctx context.Context, resource r5.AppointmentResponse) (r5.AppointmentResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.AppointmentResponse{}, err
	}
	typed, ok := result.(r5.AppointmentResponse)
	if !ok {
		return r5.AppointmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAppointmentResponse retrieves a AppointmentResponse resource by ID.
func (c *ClientR5) ReadAppointmentResponse(ctx context.Context, id string) (r5.AppointmentResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r5.AppointmentResponse{}, err
	}
	typed, ok := result.(r5.AppointmentResponse)
	if !ok {
		return r5.AppointmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAppointmentResponse updates an existing AppointmentResponse resource.
func (c *ClientR5) UpdateAppointmentResponse(ctx context.Context, resource r5.AppointmentResponse) (update.Result[r5.AppointmentResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.AppointmentResponse]{}, err
	}
	typed, ok := result.Resource.(r5.AppointmentResponse)
	if !ok {
		return update.Result[r5.AppointmentResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.AppointmentResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteAppointmentResponse deletes a AppointmentResponse resource by ID.
func (c *ClientR5) DeleteAppointmentResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AppointmentResponse", id)
}

// SearchAppointmentResponse performs a search for AppointmentResponse resources.
func (c *ClientR5) SearchAppointmentResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.AppointmentResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AppointmentResponse", parameters, options)
	if err != nil {
		return search.Result[r5.AppointmentResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.AppointmentResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.AppointmentResponse)
		if !ok {
			return search.Result[r5.AppointmentResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.AppointmentResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateArtifactAssessment creates a new ArtifactAssessment resource.
func (c *ClientR5) CreateArtifactAssessment(ctx context.Context, resource r5.ArtifactAssessment) (r5.ArtifactAssessment, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ArtifactAssessment{}, err
	}
	typed, ok := result.(r5.ArtifactAssessment)
	if !ok {
		return r5.ArtifactAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadArtifactAssessment retrieves a ArtifactAssessment resource by ID.
func (c *ClientR5) ReadArtifactAssessment(ctx context.Context, id string) (r5.ArtifactAssessment, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ArtifactAssessment", id)
	if err != nil {
		return r5.ArtifactAssessment{}, err
	}
	typed, ok := result.(r5.ArtifactAssessment)
	if !ok {
		return r5.ArtifactAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateArtifactAssessment updates an existing ArtifactAssessment resource.
func (c *ClientR5) UpdateArtifactAssessment(ctx context.Context, resource r5.ArtifactAssessment) (update.Result[r5.ArtifactAssessment], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ArtifactAssessment]{}, err
	}
	typed, ok := result.Resource.(r5.ArtifactAssessment)
	if !ok {
		return update.Result[r5.ArtifactAssessment]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ArtifactAssessment]{Resource: typed, Created: result.Created}, nil
}

// DeleteArtifactAssessment deletes a ArtifactAssessment resource by ID.
func (c *ClientR5) DeleteArtifactAssessment(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ArtifactAssessment", id)
}

// SearchArtifactAssessment performs a search for ArtifactAssessment resources.
func (c *ClientR5) SearchArtifactAssessment(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ArtifactAssessment], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ArtifactAssessment", parameters, options)
	if err != nil {
		return search.Result[r5.ArtifactAssessment]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ArtifactAssessment, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ArtifactAssessment)
		if !ok {
			return search.Result[r5.ArtifactAssessment]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ArtifactAssessment]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAuditEvent creates a new AuditEvent resource.
func (c *ClientR5) CreateAuditEvent(ctx context.Context, resource r5.AuditEvent) (r5.AuditEvent, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.AuditEvent{}, err
	}
	typed, ok := result.(r5.AuditEvent)
	if !ok {
		return r5.AuditEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAuditEvent retrieves a AuditEvent resource by ID.
func (c *ClientR5) ReadAuditEvent(ctx context.Context, id string) (r5.AuditEvent, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r5.AuditEvent{}, err
	}
	typed, ok := result.(r5.AuditEvent)
	if !ok {
		return r5.AuditEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAuditEvent updates an existing AuditEvent resource.
func (c *ClientR5) UpdateAuditEvent(ctx context.Context, resource r5.AuditEvent) (update.Result[r5.AuditEvent], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.AuditEvent]{}, err
	}
	typed, ok := result.Resource.(r5.AuditEvent)
	if !ok {
		return update.Result[r5.AuditEvent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.AuditEvent]{Resource: typed, Created: result.Created}, nil
}

// DeleteAuditEvent deletes a AuditEvent resource by ID.
func (c *ClientR5) DeleteAuditEvent(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AuditEvent", id)
}

// SearchAuditEvent performs a search for AuditEvent resources.
func (c *ClientR5) SearchAuditEvent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.AuditEvent], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AuditEvent", parameters, options)
	if err != nil {
		return search.Result[r5.AuditEvent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.AuditEvent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.AuditEvent)
		if !ok {
			return search.Result[r5.AuditEvent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.AuditEvent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBasic creates a new Basic resource.
func (c *ClientR5) CreateBasic(ctx context.Context, resource r5.Basic) (r5.Basic, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Basic{}, err
	}
	typed, ok := result.(r5.Basic)
	if !ok {
		return r5.Basic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBasic retrieves a Basic resource by ID.
func (c *ClientR5) ReadBasic(ctx context.Context, id string) (r5.Basic, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Basic", id)
	if err != nil {
		return r5.Basic{}, err
	}
	typed, ok := result.(r5.Basic)
	if !ok {
		return r5.Basic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBasic updates an existing Basic resource.
func (c *ClientR5) UpdateBasic(ctx context.Context, resource r5.Basic) (update.Result[r5.Basic], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Basic]{}, err
	}
	typed, ok := result.Resource.(r5.Basic)
	if !ok {
		return update.Result[r5.Basic]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Basic]{Resource: typed, Created: result.Created}, nil
}

// DeleteBasic deletes a Basic resource by ID.
func (c *ClientR5) DeleteBasic(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Basic", id)
}

// SearchBasic performs a search for Basic resources.
func (c *ClientR5) SearchBasic(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Basic], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Basic", parameters, options)
	if err != nil {
		return search.Result[r5.Basic]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Basic, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Basic)
		if !ok {
			return search.Result[r5.Basic]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Basic]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBinary creates a new Binary resource.
func (c *ClientR5) CreateBinary(ctx context.Context, resource r5.Binary) (r5.Binary, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Binary{}, err
	}
	typed, ok := result.(r5.Binary)
	if !ok {
		return r5.Binary{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBinary retrieves a Binary resource by ID.
func (c *ClientR5) ReadBinary(ctx context.Context, id string) (r5.Binary, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Binary", id)
	if err != nil {
		return r5.Binary{}, err
	}
	typed, ok := result.(r5.Binary)
	if !ok {
		return r5.Binary{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBinary updates an existing Binary resource.
func (c *ClientR5) UpdateBinary(ctx context.Context, resource r5.Binary) (update.Result[r5.Binary], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Binary]{}, err
	}
	typed, ok := result.Resource.(r5.Binary)
	if !ok {
		return update.Result[r5.Binary]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Binary]{Resource: typed, Created: result.Created}, nil
}

// DeleteBinary deletes a Binary resource by ID.
func (c *ClientR5) DeleteBinary(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Binary", id)
}

// SearchBinary performs a search for Binary resources.
func (c *ClientR5) SearchBinary(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Binary], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Binary", parameters, options)
	if err != nil {
		return search.Result[r5.Binary]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Binary, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Binary)
		if !ok {
			return search.Result[r5.Binary]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Binary]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBiologicallyDerivedProduct creates a new BiologicallyDerivedProduct resource.
func (c *ClientR5) CreateBiologicallyDerivedProduct(ctx context.Context, resource r5.BiologicallyDerivedProduct) (r5.BiologicallyDerivedProduct, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.BiologicallyDerivedProduct{}, err
	}
	typed, ok := result.(r5.BiologicallyDerivedProduct)
	if !ok {
		return r5.BiologicallyDerivedProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBiologicallyDerivedProduct retrieves a BiologicallyDerivedProduct resource by ID.
func (c *ClientR5) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r5.BiologicallyDerivedProduct, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r5.BiologicallyDerivedProduct{}, err
	}
	typed, ok := result.(r5.BiologicallyDerivedProduct)
	if !ok {
		return r5.BiologicallyDerivedProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBiologicallyDerivedProduct updates an existing BiologicallyDerivedProduct resource.
func (c *ClientR5) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r5.BiologicallyDerivedProduct) (update.Result[r5.BiologicallyDerivedProduct], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.BiologicallyDerivedProduct]{}, err
	}
	typed, ok := result.Resource.(r5.BiologicallyDerivedProduct)
	if !ok {
		return update.Result[r5.BiologicallyDerivedProduct]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.BiologicallyDerivedProduct]{Resource: typed, Created: result.Created}, nil
}

// DeleteBiologicallyDerivedProduct deletes a BiologicallyDerivedProduct resource by ID.
func (c *ClientR5) DeleteBiologicallyDerivedProduct(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "BiologicallyDerivedProduct", id)
}

// SearchBiologicallyDerivedProduct performs a search for BiologicallyDerivedProduct resources.
func (c *ClientR5) SearchBiologicallyDerivedProduct(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.BiologicallyDerivedProduct], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "BiologicallyDerivedProduct", parameters, options)
	if err != nil {
		return search.Result[r5.BiologicallyDerivedProduct]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.BiologicallyDerivedProduct, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.BiologicallyDerivedProduct)
		if !ok {
			return search.Result[r5.BiologicallyDerivedProduct]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.BiologicallyDerivedProduct]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBiologicallyDerivedProductDispense creates a new BiologicallyDerivedProductDispense resource.
func (c *ClientR5) CreateBiologicallyDerivedProductDispense(ctx context.Context, resource r5.BiologicallyDerivedProductDispense) (r5.BiologicallyDerivedProductDispense, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.BiologicallyDerivedProductDispense{}, err
	}
	typed, ok := result.(r5.BiologicallyDerivedProductDispense)
	if !ok {
		return r5.BiologicallyDerivedProductDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBiologicallyDerivedProductDispense retrieves a BiologicallyDerivedProductDispense resource by ID.
func (c *ClientR5) ReadBiologicallyDerivedProductDispense(ctx context.Context, id string) (r5.BiologicallyDerivedProductDispense, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "BiologicallyDerivedProductDispense", id)
	if err != nil {
		return r5.BiologicallyDerivedProductDispense{}, err
	}
	typed, ok := result.(r5.BiologicallyDerivedProductDispense)
	if !ok {
		return r5.BiologicallyDerivedProductDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBiologicallyDerivedProductDispense updates an existing BiologicallyDerivedProductDispense resource.
func (c *ClientR5) UpdateBiologicallyDerivedProductDispense(ctx context.Context, resource r5.BiologicallyDerivedProductDispense) (update.Result[r5.BiologicallyDerivedProductDispense], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.BiologicallyDerivedProductDispense]{}, err
	}
	typed, ok := result.Resource.(r5.BiologicallyDerivedProductDispense)
	if !ok {
		return update.Result[r5.BiologicallyDerivedProductDispense]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.BiologicallyDerivedProductDispense]{Resource: typed, Created: result.Created}, nil
}

// DeleteBiologicallyDerivedProductDispense deletes a BiologicallyDerivedProductDispense resource by ID.
func (c *ClientR5) DeleteBiologicallyDerivedProductDispense(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "BiologicallyDerivedProductDispense", id)
}

// SearchBiologicallyDerivedProductDispense performs a search for BiologicallyDerivedProductDispense resources.
func (c *ClientR5) SearchBiologicallyDerivedProductDispense(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.BiologicallyDerivedProductDispense], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "BiologicallyDerivedProductDispense", parameters, options)
	if err != nil {
		return search.Result[r5.BiologicallyDerivedProductDispense]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.BiologicallyDerivedProductDispense, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.BiologicallyDerivedProductDispense)
		if !ok {
			return search.Result[r5.BiologicallyDerivedProductDispense]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.BiologicallyDerivedProductDispense]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBodyStructure creates a new BodyStructure resource.
func (c *ClientR5) CreateBodyStructure(ctx context.Context, resource r5.BodyStructure) (r5.BodyStructure, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.BodyStructure{}, err
	}
	typed, ok := result.(r5.BodyStructure)
	if !ok {
		return r5.BodyStructure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBodyStructure retrieves a BodyStructure resource by ID.
func (c *ClientR5) ReadBodyStructure(ctx context.Context, id string) (r5.BodyStructure, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r5.BodyStructure{}, err
	}
	typed, ok := result.(r5.BodyStructure)
	if !ok {
		return r5.BodyStructure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBodyStructure updates an existing BodyStructure resource.
func (c *ClientR5) UpdateBodyStructure(ctx context.Context, resource r5.BodyStructure) (update.Result[r5.BodyStructure], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.BodyStructure]{}, err
	}
	typed, ok := result.Resource.(r5.BodyStructure)
	if !ok {
		return update.Result[r5.BodyStructure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.BodyStructure]{Resource: typed, Created: result.Created}, nil
}

// DeleteBodyStructure deletes a BodyStructure resource by ID.
func (c *ClientR5) DeleteBodyStructure(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "BodyStructure", id)
}

// SearchBodyStructure performs a search for BodyStructure resources.
func (c *ClientR5) SearchBodyStructure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.BodyStructure], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "BodyStructure", parameters, options)
	if err != nil {
		return search.Result[r5.BodyStructure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.BodyStructure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.BodyStructure)
		if !ok {
			return search.Result[r5.BodyStructure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.BodyStructure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBundle creates a new Bundle resource.
func (c *ClientR5) CreateBundle(ctx context.Context, resource r5.Bundle) (r5.Bundle, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Bundle{}, err
	}
	typed, ok := result.(r5.Bundle)
	if !ok {
		return r5.Bundle{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBundle retrieves a Bundle resource by ID.
func (c *ClientR5) ReadBundle(ctx context.Context, id string) (r5.Bundle, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Bundle", id)
	if err != nil {
		return r5.Bundle{}, err
	}
	typed, ok := result.(r5.Bundle)
	if !ok {
		return r5.Bundle{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBundle updates an existing Bundle resource.
func (c *ClientR5) UpdateBundle(ctx context.Context, resource r5.Bundle) (update.Result[r5.Bundle], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Bundle]{}, err
	}
	typed, ok := result.Resource.(r5.Bundle)
	if !ok {
		return update.Result[r5.Bundle]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Bundle]{Resource: typed, Created: result.Created}, nil
}

// DeleteBundle deletes a Bundle resource by ID.
func (c *ClientR5) DeleteBundle(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Bundle", id)
}

// SearchBundle performs a search for Bundle resources.
func (c *ClientR5) SearchBundle(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Bundle], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Bundle", parameters, options)
	if err != nil {
		return search.Result[r5.Bundle]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Bundle, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Bundle)
		if !ok {
			return search.Result[r5.Bundle]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Bundle]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCapabilityStatement creates a new CapabilityStatement resource.
func (c *ClientR5) CreateCapabilityStatement(ctx context.Context, resource r5.CapabilityStatement) (r5.CapabilityStatement, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CapabilityStatement{}, err
	}
	typed, ok := result.(r5.CapabilityStatement)
	if !ok {
		return r5.CapabilityStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCapabilityStatement retrieves a CapabilityStatement resource by ID.
func (c *ClientR5) ReadCapabilityStatement(ctx context.Context, id string) (r5.CapabilityStatement, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r5.CapabilityStatement{}, err
	}
	typed, ok := result.(r5.CapabilityStatement)
	if !ok {
		return r5.CapabilityStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCapabilityStatement updates an existing CapabilityStatement resource.
func (c *ClientR5) UpdateCapabilityStatement(ctx context.Context, resource r5.CapabilityStatement) (update.Result[r5.CapabilityStatement], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CapabilityStatement]{}, err
	}
	typed, ok := result.Resource.(r5.CapabilityStatement)
	if !ok {
		return update.Result[r5.CapabilityStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CapabilityStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteCapabilityStatement deletes a CapabilityStatement resource by ID.
func (c *ClientR5) DeleteCapabilityStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CapabilityStatement", id)
}

// SearchCapabilityStatement performs a search for CapabilityStatement resources.
func (c *ClientR5) SearchCapabilityStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CapabilityStatement], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CapabilityStatement", parameters, options)
	if err != nil {
		return search.Result[r5.CapabilityStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CapabilityStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CapabilityStatement)
		if !ok {
			return search.Result[r5.CapabilityStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CapabilityStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCarePlan creates a new CarePlan resource.
func (c *ClientR5) CreateCarePlan(ctx context.Context, resource r5.CarePlan) (r5.CarePlan, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CarePlan{}, err
	}
	typed, ok := result.(r5.CarePlan)
	if !ok {
		return r5.CarePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCarePlan retrieves a CarePlan resource by ID.
func (c *ClientR5) ReadCarePlan(ctx context.Context, id string) (r5.CarePlan, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CarePlan", id)
	if err != nil {
		return r5.CarePlan{}, err
	}
	typed, ok := result.(r5.CarePlan)
	if !ok {
		return r5.CarePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCarePlan updates an existing CarePlan resource.
func (c *ClientR5) UpdateCarePlan(ctx context.Context, resource r5.CarePlan) (update.Result[r5.CarePlan], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CarePlan]{}, err
	}
	typed, ok := result.Resource.(r5.CarePlan)
	if !ok {
		return update.Result[r5.CarePlan]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CarePlan]{Resource: typed, Created: result.Created}, nil
}

// DeleteCarePlan deletes a CarePlan resource by ID.
func (c *ClientR5) DeleteCarePlan(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CarePlan", id)
}

// SearchCarePlan performs a search for CarePlan resources.
func (c *ClientR5) SearchCarePlan(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CarePlan], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CarePlan", parameters, options)
	if err != nil {
		return search.Result[r5.CarePlan]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CarePlan, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CarePlan)
		if !ok {
			return search.Result[r5.CarePlan]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CarePlan]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCareTeam creates a new CareTeam resource.
func (c *ClientR5) CreateCareTeam(ctx context.Context, resource r5.CareTeam) (r5.CareTeam, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CareTeam{}, err
	}
	typed, ok := result.(r5.CareTeam)
	if !ok {
		return r5.CareTeam{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCareTeam retrieves a CareTeam resource by ID.
func (c *ClientR5) ReadCareTeam(ctx context.Context, id string) (r5.CareTeam, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CareTeam", id)
	if err != nil {
		return r5.CareTeam{}, err
	}
	typed, ok := result.(r5.CareTeam)
	if !ok {
		return r5.CareTeam{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCareTeam updates an existing CareTeam resource.
func (c *ClientR5) UpdateCareTeam(ctx context.Context, resource r5.CareTeam) (update.Result[r5.CareTeam], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CareTeam]{}, err
	}
	typed, ok := result.Resource.(r5.CareTeam)
	if !ok {
		return update.Result[r5.CareTeam]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CareTeam]{Resource: typed, Created: result.Created}, nil
}

// DeleteCareTeam deletes a CareTeam resource by ID.
func (c *ClientR5) DeleteCareTeam(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CareTeam", id)
}

// SearchCareTeam performs a search for CareTeam resources.
func (c *ClientR5) SearchCareTeam(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CareTeam], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CareTeam", parameters, options)
	if err != nil {
		return search.Result[r5.CareTeam]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CareTeam, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CareTeam)
		if !ok {
			return search.Result[r5.CareTeam]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CareTeam]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateChargeItem creates a new ChargeItem resource.
func (c *ClientR5) CreateChargeItem(ctx context.Context, resource r5.ChargeItem) (r5.ChargeItem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ChargeItem{}, err
	}
	typed, ok := result.(r5.ChargeItem)
	if !ok {
		return r5.ChargeItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadChargeItem retrieves a ChargeItem resource by ID.
func (c *ClientR5) ReadChargeItem(ctx context.Context, id string) (r5.ChargeItem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r5.ChargeItem{}, err
	}
	typed, ok := result.(r5.ChargeItem)
	if !ok {
		return r5.ChargeItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateChargeItem updates an existing ChargeItem resource.
func (c *ClientR5) UpdateChargeItem(ctx context.Context, resource r5.ChargeItem) (update.Result[r5.ChargeItem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ChargeItem]{}, err
	}
	typed, ok := result.Resource.(r5.ChargeItem)
	if !ok {
		return update.Result[r5.ChargeItem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ChargeItem]{Resource: typed, Created: result.Created}, nil
}

// DeleteChargeItem deletes a ChargeItem resource by ID.
func (c *ClientR5) DeleteChargeItem(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ChargeItem", id)
}

// SearchChargeItem performs a search for ChargeItem resources.
func (c *ClientR5) SearchChargeItem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ChargeItem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ChargeItem", parameters, options)
	if err != nil {
		return search.Result[r5.ChargeItem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ChargeItem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ChargeItem)
		if !ok {
			return search.Result[r5.ChargeItem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ChargeItem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateChargeItemDefinition creates a new ChargeItemDefinition resource.
func (c *ClientR5) CreateChargeItemDefinition(ctx context.Context, resource r5.ChargeItemDefinition) (r5.ChargeItemDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ChargeItemDefinition{}, err
	}
	typed, ok := result.(r5.ChargeItemDefinition)
	if !ok {
		return r5.ChargeItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadChargeItemDefinition retrieves a ChargeItemDefinition resource by ID.
func (c *ClientR5) ReadChargeItemDefinition(ctx context.Context, id string) (r5.ChargeItemDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r5.ChargeItemDefinition{}, err
	}
	typed, ok := result.(r5.ChargeItemDefinition)
	if !ok {
		return r5.ChargeItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateChargeItemDefinition updates an existing ChargeItemDefinition resource.
func (c *ClientR5) UpdateChargeItemDefinition(ctx context.Context, resource r5.ChargeItemDefinition) (update.Result[r5.ChargeItemDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ChargeItemDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.ChargeItemDefinition)
	if !ok {
		return update.Result[r5.ChargeItemDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ChargeItemDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteChargeItemDefinition deletes a ChargeItemDefinition resource by ID.
func (c *ClientR5) DeleteChargeItemDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ChargeItemDefinition", id)
}

// SearchChargeItemDefinition performs a search for ChargeItemDefinition resources.
func (c *ClientR5) SearchChargeItemDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ChargeItemDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ChargeItemDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.ChargeItemDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ChargeItemDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ChargeItemDefinition)
		if !ok {
			return search.Result[r5.ChargeItemDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ChargeItemDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCitation creates a new Citation resource.
func (c *ClientR5) CreateCitation(ctx context.Context, resource r5.Citation) (r5.Citation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Citation{}, err
	}
	typed, ok := result.(r5.Citation)
	if !ok {
		return r5.Citation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCitation retrieves a Citation resource by ID.
func (c *ClientR5) ReadCitation(ctx context.Context, id string) (r5.Citation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Citation", id)
	if err != nil {
		return r5.Citation{}, err
	}
	typed, ok := result.(r5.Citation)
	if !ok {
		return r5.Citation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCitation updates an existing Citation resource.
func (c *ClientR5) UpdateCitation(ctx context.Context, resource r5.Citation) (update.Result[r5.Citation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Citation]{}, err
	}
	typed, ok := result.Resource.(r5.Citation)
	if !ok {
		return update.Result[r5.Citation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Citation]{Resource: typed, Created: result.Created}, nil
}

// DeleteCitation deletes a Citation resource by ID.
func (c *ClientR5) DeleteCitation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Citation", id)
}

// SearchCitation performs a search for Citation resources.
func (c *ClientR5) SearchCitation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Citation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Citation", parameters, options)
	if err != nil {
		return search.Result[r5.Citation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Citation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Citation)
		if !ok {
			return search.Result[r5.Citation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Citation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClaim creates a new Claim resource.
func (c *ClientR5) CreateClaim(ctx context.Context, resource r5.Claim) (r5.Claim, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Claim{}, err
	}
	typed, ok := result.(r5.Claim)
	if !ok {
		return r5.Claim{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClaim retrieves a Claim resource by ID.
func (c *ClientR5) ReadClaim(ctx context.Context, id string) (r5.Claim, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Claim", id)
	if err != nil {
		return r5.Claim{}, err
	}
	typed, ok := result.(r5.Claim)
	if !ok {
		return r5.Claim{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClaim updates an existing Claim resource.
func (c *ClientR5) UpdateClaim(ctx context.Context, resource r5.Claim) (update.Result[r5.Claim], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Claim]{}, err
	}
	typed, ok := result.Resource.(r5.Claim)
	if !ok {
		return update.Result[r5.Claim]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Claim]{Resource: typed, Created: result.Created}, nil
}

// DeleteClaim deletes a Claim resource by ID.
func (c *ClientR5) DeleteClaim(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Claim", id)
}

// SearchClaim performs a search for Claim resources.
func (c *ClientR5) SearchClaim(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Claim], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Claim", parameters, options)
	if err != nil {
		return search.Result[r5.Claim]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Claim, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Claim)
		if !ok {
			return search.Result[r5.Claim]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Claim]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClaimResponse creates a new ClaimResponse resource.
func (c *ClientR5) CreateClaimResponse(ctx context.Context, resource r5.ClaimResponse) (r5.ClaimResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ClaimResponse{}, err
	}
	typed, ok := result.(r5.ClaimResponse)
	if !ok {
		return r5.ClaimResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClaimResponse retrieves a ClaimResponse resource by ID.
func (c *ClientR5) ReadClaimResponse(ctx context.Context, id string) (r5.ClaimResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r5.ClaimResponse{}, err
	}
	typed, ok := result.(r5.ClaimResponse)
	if !ok {
		return r5.ClaimResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClaimResponse updates an existing ClaimResponse resource.
func (c *ClientR5) UpdateClaimResponse(ctx context.Context, resource r5.ClaimResponse) (update.Result[r5.ClaimResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ClaimResponse]{}, err
	}
	typed, ok := result.Resource.(r5.ClaimResponse)
	if !ok {
		return update.Result[r5.ClaimResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ClaimResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteClaimResponse deletes a ClaimResponse resource by ID.
func (c *ClientR5) DeleteClaimResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ClaimResponse", id)
}

// SearchClaimResponse performs a search for ClaimResponse resources.
func (c *ClientR5) SearchClaimResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ClaimResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ClaimResponse", parameters, options)
	if err != nil {
		return search.Result[r5.ClaimResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ClaimResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ClaimResponse)
		if !ok {
			return search.Result[r5.ClaimResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ClaimResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClinicalImpression creates a new ClinicalImpression resource.
func (c *ClientR5) CreateClinicalImpression(ctx context.Context, resource r5.ClinicalImpression) (r5.ClinicalImpression, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ClinicalImpression{}, err
	}
	typed, ok := result.(r5.ClinicalImpression)
	if !ok {
		return r5.ClinicalImpression{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClinicalImpression retrieves a ClinicalImpression resource by ID.
func (c *ClientR5) ReadClinicalImpression(ctx context.Context, id string) (r5.ClinicalImpression, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r5.ClinicalImpression{}, err
	}
	typed, ok := result.(r5.ClinicalImpression)
	if !ok {
		return r5.ClinicalImpression{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClinicalImpression updates an existing ClinicalImpression resource.
func (c *ClientR5) UpdateClinicalImpression(ctx context.Context, resource r5.ClinicalImpression) (update.Result[r5.ClinicalImpression], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ClinicalImpression]{}, err
	}
	typed, ok := result.Resource.(r5.ClinicalImpression)
	if !ok {
		return update.Result[r5.ClinicalImpression]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ClinicalImpression]{Resource: typed, Created: result.Created}, nil
}

// DeleteClinicalImpression deletes a ClinicalImpression resource by ID.
func (c *ClientR5) DeleteClinicalImpression(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ClinicalImpression", id)
}

// SearchClinicalImpression performs a search for ClinicalImpression resources.
func (c *ClientR5) SearchClinicalImpression(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ClinicalImpression], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ClinicalImpression", parameters, options)
	if err != nil {
		return search.Result[r5.ClinicalImpression]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ClinicalImpression, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ClinicalImpression)
		if !ok {
			return search.Result[r5.ClinicalImpression]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ClinicalImpression]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClinicalUseDefinition creates a new ClinicalUseDefinition resource.
func (c *ClientR5) CreateClinicalUseDefinition(ctx context.Context, resource r5.ClinicalUseDefinition) (r5.ClinicalUseDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ClinicalUseDefinition{}, err
	}
	typed, ok := result.(r5.ClinicalUseDefinition)
	if !ok {
		return r5.ClinicalUseDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClinicalUseDefinition retrieves a ClinicalUseDefinition resource by ID.
func (c *ClientR5) ReadClinicalUseDefinition(ctx context.Context, id string) (r5.ClinicalUseDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ClinicalUseDefinition", id)
	if err != nil {
		return r5.ClinicalUseDefinition{}, err
	}
	typed, ok := result.(r5.ClinicalUseDefinition)
	if !ok {
		return r5.ClinicalUseDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClinicalUseDefinition updates an existing ClinicalUseDefinition resource.
func (c *ClientR5) UpdateClinicalUseDefinition(ctx context.Context, resource r5.ClinicalUseDefinition) (update.Result[r5.ClinicalUseDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ClinicalUseDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.ClinicalUseDefinition)
	if !ok {
		return update.Result[r5.ClinicalUseDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ClinicalUseDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteClinicalUseDefinition deletes a ClinicalUseDefinition resource by ID.
func (c *ClientR5) DeleteClinicalUseDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ClinicalUseDefinition", id)
}

// SearchClinicalUseDefinition performs a search for ClinicalUseDefinition resources.
func (c *ClientR5) SearchClinicalUseDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ClinicalUseDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ClinicalUseDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.ClinicalUseDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ClinicalUseDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ClinicalUseDefinition)
		if !ok {
			return search.Result[r5.ClinicalUseDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ClinicalUseDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCodeSystem creates a new CodeSystem resource.
func (c *ClientR5) CreateCodeSystem(ctx context.Context, resource r5.CodeSystem) (r5.CodeSystem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CodeSystem{}, err
	}
	typed, ok := result.(r5.CodeSystem)
	if !ok {
		return r5.CodeSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCodeSystem retrieves a CodeSystem resource by ID.
func (c *ClientR5) ReadCodeSystem(ctx context.Context, id string) (r5.CodeSystem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r5.CodeSystem{}, err
	}
	typed, ok := result.(r5.CodeSystem)
	if !ok {
		return r5.CodeSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCodeSystem updates an existing CodeSystem resource.
func (c *ClientR5) UpdateCodeSystem(ctx context.Context, resource r5.CodeSystem) (update.Result[r5.CodeSystem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CodeSystem]{}, err
	}
	typed, ok := result.Resource.(r5.CodeSystem)
	if !ok {
		return update.Result[r5.CodeSystem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CodeSystem]{Resource: typed, Created: result.Created}, nil
}

// DeleteCodeSystem deletes a CodeSystem resource by ID.
func (c *ClientR5) DeleteCodeSystem(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CodeSystem", id)
}

// SearchCodeSystem performs a search for CodeSystem resources.
func (c *ClientR5) SearchCodeSystem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CodeSystem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CodeSystem", parameters, options)
	if err != nil {
		return search.Result[r5.CodeSystem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CodeSystem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CodeSystem)
		if !ok {
			return search.Result[r5.CodeSystem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CodeSystem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCommunication creates a new Communication resource.
func (c *ClientR5) CreateCommunication(ctx context.Context, resource r5.Communication) (r5.Communication, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Communication{}, err
	}
	typed, ok := result.(r5.Communication)
	if !ok {
		return r5.Communication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCommunication retrieves a Communication resource by ID.
func (c *ClientR5) ReadCommunication(ctx context.Context, id string) (r5.Communication, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Communication", id)
	if err != nil {
		return r5.Communication{}, err
	}
	typed, ok := result.(r5.Communication)
	if !ok {
		return r5.Communication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCommunication updates an existing Communication resource.
func (c *ClientR5) UpdateCommunication(ctx context.Context, resource r5.Communication) (update.Result[r5.Communication], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Communication]{}, err
	}
	typed, ok := result.Resource.(r5.Communication)
	if !ok {
		return update.Result[r5.Communication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Communication]{Resource: typed, Created: result.Created}, nil
}

// DeleteCommunication deletes a Communication resource by ID.
func (c *ClientR5) DeleteCommunication(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Communication", id)
}

// SearchCommunication performs a search for Communication resources.
func (c *ClientR5) SearchCommunication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Communication], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Communication", parameters, options)
	if err != nil {
		return search.Result[r5.Communication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Communication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Communication)
		if !ok {
			return search.Result[r5.Communication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Communication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCommunicationRequest creates a new CommunicationRequest resource.
func (c *ClientR5) CreateCommunicationRequest(ctx context.Context, resource r5.CommunicationRequest) (r5.CommunicationRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CommunicationRequest{}, err
	}
	typed, ok := result.(r5.CommunicationRequest)
	if !ok {
		return r5.CommunicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCommunicationRequest retrieves a CommunicationRequest resource by ID.
func (c *ClientR5) ReadCommunicationRequest(ctx context.Context, id string) (r5.CommunicationRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r5.CommunicationRequest{}, err
	}
	typed, ok := result.(r5.CommunicationRequest)
	if !ok {
		return r5.CommunicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCommunicationRequest updates an existing CommunicationRequest resource.
func (c *ClientR5) UpdateCommunicationRequest(ctx context.Context, resource r5.CommunicationRequest) (update.Result[r5.CommunicationRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CommunicationRequest]{}, err
	}
	typed, ok := result.Resource.(r5.CommunicationRequest)
	if !ok {
		return update.Result[r5.CommunicationRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CommunicationRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteCommunicationRequest deletes a CommunicationRequest resource by ID.
func (c *ClientR5) DeleteCommunicationRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CommunicationRequest", id)
}

// SearchCommunicationRequest performs a search for CommunicationRequest resources.
func (c *ClientR5) SearchCommunicationRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CommunicationRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CommunicationRequest", parameters, options)
	if err != nil {
		return search.Result[r5.CommunicationRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CommunicationRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CommunicationRequest)
		if !ok {
			return search.Result[r5.CommunicationRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CommunicationRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCompartmentDefinition creates a new CompartmentDefinition resource.
func (c *ClientR5) CreateCompartmentDefinition(ctx context.Context, resource r5.CompartmentDefinition) (r5.CompartmentDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CompartmentDefinition{}, err
	}
	typed, ok := result.(r5.CompartmentDefinition)
	if !ok {
		return r5.CompartmentDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCompartmentDefinition retrieves a CompartmentDefinition resource by ID.
func (c *ClientR5) ReadCompartmentDefinition(ctx context.Context, id string) (r5.CompartmentDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r5.CompartmentDefinition{}, err
	}
	typed, ok := result.(r5.CompartmentDefinition)
	if !ok {
		return r5.CompartmentDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCompartmentDefinition updates an existing CompartmentDefinition resource.
func (c *ClientR5) UpdateCompartmentDefinition(ctx context.Context, resource r5.CompartmentDefinition) (update.Result[r5.CompartmentDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CompartmentDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.CompartmentDefinition)
	if !ok {
		return update.Result[r5.CompartmentDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CompartmentDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteCompartmentDefinition deletes a CompartmentDefinition resource by ID.
func (c *ClientR5) DeleteCompartmentDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CompartmentDefinition", id)
}

// SearchCompartmentDefinition performs a search for CompartmentDefinition resources.
func (c *ClientR5) SearchCompartmentDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CompartmentDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CompartmentDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.CompartmentDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CompartmentDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CompartmentDefinition)
		if !ok {
			return search.Result[r5.CompartmentDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CompartmentDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateComposition creates a new Composition resource.
func (c *ClientR5) CreateComposition(ctx context.Context, resource r5.Composition) (r5.Composition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Composition{}, err
	}
	typed, ok := result.(r5.Composition)
	if !ok {
		return r5.Composition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadComposition retrieves a Composition resource by ID.
func (c *ClientR5) ReadComposition(ctx context.Context, id string) (r5.Composition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Composition", id)
	if err != nil {
		return r5.Composition{}, err
	}
	typed, ok := result.(r5.Composition)
	if !ok {
		return r5.Composition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateComposition updates an existing Composition resource.
func (c *ClientR5) UpdateComposition(ctx context.Context, resource r5.Composition) (update.Result[r5.Composition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Composition]{}, err
	}
	typed, ok := result.Resource.(r5.Composition)
	if !ok {
		return update.Result[r5.Composition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Composition]{Resource: typed, Created: result.Created}, nil
}

// DeleteComposition deletes a Composition resource by ID.
func (c *ClientR5) DeleteComposition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Composition", id)
}

// SearchComposition performs a search for Composition resources.
func (c *ClientR5) SearchComposition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Composition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Composition", parameters, options)
	if err != nil {
		return search.Result[r5.Composition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Composition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Composition)
		if !ok {
			return search.Result[r5.Composition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Composition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateConceptMap creates a new ConceptMap resource.
func (c *ClientR5) CreateConceptMap(ctx context.Context, resource r5.ConceptMap) (r5.ConceptMap, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ConceptMap{}, err
	}
	typed, ok := result.(r5.ConceptMap)
	if !ok {
		return r5.ConceptMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadConceptMap retrieves a ConceptMap resource by ID.
func (c *ClientR5) ReadConceptMap(ctx context.Context, id string) (r5.ConceptMap, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r5.ConceptMap{}, err
	}
	typed, ok := result.(r5.ConceptMap)
	if !ok {
		return r5.ConceptMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateConceptMap updates an existing ConceptMap resource.
func (c *ClientR5) UpdateConceptMap(ctx context.Context, resource r5.ConceptMap) (update.Result[r5.ConceptMap], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ConceptMap]{}, err
	}
	typed, ok := result.Resource.(r5.ConceptMap)
	if !ok {
		return update.Result[r5.ConceptMap]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ConceptMap]{Resource: typed, Created: result.Created}, nil
}

// DeleteConceptMap deletes a ConceptMap resource by ID.
func (c *ClientR5) DeleteConceptMap(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ConceptMap", id)
}

// SearchConceptMap performs a search for ConceptMap resources.
func (c *ClientR5) SearchConceptMap(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ConceptMap], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ConceptMap", parameters, options)
	if err != nil {
		return search.Result[r5.ConceptMap]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ConceptMap, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ConceptMap)
		if !ok {
			return search.Result[r5.ConceptMap]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ConceptMap]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCondition creates a new Condition resource.
func (c *ClientR5) CreateCondition(ctx context.Context, resource r5.Condition) (r5.Condition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Condition{}, err
	}
	typed, ok := result.(r5.Condition)
	if !ok {
		return r5.Condition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCondition retrieves a Condition resource by ID.
func (c *ClientR5) ReadCondition(ctx context.Context, id string) (r5.Condition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Condition", id)
	if err != nil {
		return r5.Condition{}, err
	}
	typed, ok := result.(r5.Condition)
	if !ok {
		return r5.Condition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCondition updates an existing Condition resource.
func (c *ClientR5) UpdateCondition(ctx context.Context, resource r5.Condition) (update.Result[r5.Condition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Condition]{}, err
	}
	typed, ok := result.Resource.(r5.Condition)
	if !ok {
		return update.Result[r5.Condition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Condition]{Resource: typed, Created: result.Created}, nil
}

// DeleteCondition deletes a Condition resource by ID.
func (c *ClientR5) DeleteCondition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Condition", id)
}

// SearchCondition performs a search for Condition resources.
func (c *ClientR5) SearchCondition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Condition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Condition", parameters, options)
	if err != nil {
		return search.Result[r5.Condition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Condition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Condition)
		if !ok {
			return search.Result[r5.Condition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Condition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateConditionDefinition creates a new ConditionDefinition resource.
func (c *ClientR5) CreateConditionDefinition(ctx context.Context, resource r5.ConditionDefinition) (r5.ConditionDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ConditionDefinition{}, err
	}
	typed, ok := result.(r5.ConditionDefinition)
	if !ok {
		return r5.ConditionDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadConditionDefinition retrieves a ConditionDefinition resource by ID.
func (c *ClientR5) ReadConditionDefinition(ctx context.Context, id string) (r5.ConditionDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ConditionDefinition", id)
	if err != nil {
		return r5.ConditionDefinition{}, err
	}
	typed, ok := result.(r5.ConditionDefinition)
	if !ok {
		return r5.ConditionDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateConditionDefinition updates an existing ConditionDefinition resource.
func (c *ClientR5) UpdateConditionDefinition(ctx context.Context, resource r5.ConditionDefinition) (update.Result[r5.ConditionDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ConditionDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.ConditionDefinition)
	if !ok {
		return update.Result[r5.ConditionDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ConditionDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteConditionDefinition deletes a ConditionDefinition resource by ID.
func (c *ClientR5) DeleteConditionDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ConditionDefinition", id)
}

// SearchConditionDefinition performs a search for ConditionDefinition resources.
func (c *ClientR5) SearchConditionDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ConditionDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ConditionDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.ConditionDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ConditionDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ConditionDefinition)
		if !ok {
			return search.Result[r5.ConditionDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ConditionDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateConsent creates a new Consent resource.
func (c *ClientR5) CreateConsent(ctx context.Context, resource r5.Consent) (r5.Consent, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Consent{}, err
	}
	typed, ok := result.(r5.Consent)
	if !ok {
		return r5.Consent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadConsent retrieves a Consent resource by ID.
func (c *ClientR5) ReadConsent(ctx context.Context, id string) (r5.Consent, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Consent", id)
	if err != nil {
		return r5.Consent{}, err
	}
	typed, ok := result.(r5.Consent)
	if !ok {
		return r5.Consent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateConsent updates an existing Consent resource.
func (c *ClientR5) UpdateConsent(ctx context.Context, resource r5.Consent) (update.Result[r5.Consent], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Consent]{}, err
	}
	typed, ok := result.Resource.(r5.Consent)
	if !ok {
		return update.Result[r5.Consent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Consent]{Resource: typed, Created: result.Created}, nil
}

// DeleteConsent deletes a Consent resource by ID.
func (c *ClientR5) DeleteConsent(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Consent", id)
}

// SearchConsent performs a search for Consent resources.
func (c *ClientR5) SearchConsent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Consent], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Consent", parameters, options)
	if err != nil {
		return search.Result[r5.Consent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Consent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Consent)
		if !ok {
			return search.Result[r5.Consent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Consent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateContract creates a new Contract resource.
func (c *ClientR5) CreateContract(ctx context.Context, resource r5.Contract) (r5.Contract, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Contract{}, err
	}
	typed, ok := result.(r5.Contract)
	if !ok {
		return r5.Contract{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadContract retrieves a Contract resource by ID.
func (c *ClientR5) ReadContract(ctx context.Context, id string) (r5.Contract, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Contract", id)
	if err != nil {
		return r5.Contract{}, err
	}
	typed, ok := result.(r5.Contract)
	if !ok {
		return r5.Contract{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateContract updates an existing Contract resource.
func (c *ClientR5) UpdateContract(ctx context.Context, resource r5.Contract) (update.Result[r5.Contract], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Contract]{}, err
	}
	typed, ok := result.Resource.(r5.Contract)
	if !ok {
		return update.Result[r5.Contract]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Contract]{Resource: typed, Created: result.Created}, nil
}

// DeleteContract deletes a Contract resource by ID.
func (c *ClientR5) DeleteContract(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Contract", id)
}

// SearchContract performs a search for Contract resources.
func (c *ClientR5) SearchContract(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Contract], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Contract", parameters, options)
	if err != nil {
		return search.Result[r5.Contract]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Contract, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Contract)
		if !ok {
			return search.Result[r5.Contract]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Contract]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverage creates a new Coverage resource.
func (c *ClientR5) CreateCoverage(ctx context.Context, resource r5.Coverage) (r5.Coverage, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Coverage{}, err
	}
	typed, ok := result.(r5.Coverage)
	if !ok {
		return r5.Coverage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverage retrieves a Coverage resource by ID.
func (c *ClientR5) ReadCoverage(ctx context.Context, id string) (r5.Coverage, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Coverage", id)
	if err != nil {
		return r5.Coverage{}, err
	}
	typed, ok := result.(r5.Coverage)
	if !ok {
		return r5.Coverage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverage updates an existing Coverage resource.
func (c *ClientR5) UpdateCoverage(ctx context.Context, resource r5.Coverage) (update.Result[r5.Coverage], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Coverage]{}, err
	}
	typed, ok := result.Resource.(r5.Coverage)
	if !ok {
		return update.Result[r5.Coverage]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Coverage]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverage deletes a Coverage resource by ID.
func (c *ClientR5) DeleteCoverage(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Coverage", id)
}

// SearchCoverage performs a search for Coverage resources.
func (c *ClientR5) SearchCoverage(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Coverage], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Coverage", parameters, options)
	if err != nil {
		return search.Result[r5.Coverage]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Coverage, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Coverage)
		if !ok {
			return search.Result[r5.Coverage]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Coverage]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverageEligibilityRequest creates a new CoverageEligibilityRequest resource.
func (c *ClientR5) CreateCoverageEligibilityRequest(ctx context.Context, resource r5.CoverageEligibilityRequest) (r5.CoverageEligibilityRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CoverageEligibilityRequest{}, err
	}
	typed, ok := result.(r5.CoverageEligibilityRequest)
	if !ok {
		return r5.CoverageEligibilityRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverageEligibilityRequest retrieves a CoverageEligibilityRequest resource by ID.
func (c *ClientR5) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r5.CoverageEligibilityRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r5.CoverageEligibilityRequest{}, err
	}
	typed, ok := result.(r5.CoverageEligibilityRequest)
	if !ok {
		return r5.CoverageEligibilityRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverageEligibilityRequest updates an existing CoverageEligibilityRequest resource.
func (c *ClientR5) UpdateCoverageEligibilityRequest(ctx context.Context, resource r5.CoverageEligibilityRequest) (update.Result[r5.CoverageEligibilityRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CoverageEligibilityRequest]{}, err
	}
	typed, ok := result.Resource.(r5.CoverageEligibilityRequest)
	if !ok {
		return update.Result[r5.CoverageEligibilityRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CoverageEligibilityRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverageEligibilityRequest deletes a CoverageEligibilityRequest resource by ID.
func (c *ClientR5) DeleteCoverageEligibilityRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CoverageEligibilityRequest", id)
}

// SearchCoverageEligibilityRequest performs a search for CoverageEligibilityRequest resources.
func (c *ClientR5) SearchCoverageEligibilityRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CoverageEligibilityRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CoverageEligibilityRequest", parameters, options)
	if err != nil {
		return search.Result[r5.CoverageEligibilityRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CoverageEligibilityRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CoverageEligibilityRequest)
		if !ok {
			return search.Result[r5.CoverageEligibilityRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CoverageEligibilityRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverageEligibilityResponse creates a new CoverageEligibilityResponse resource.
func (c *ClientR5) CreateCoverageEligibilityResponse(ctx context.Context, resource r5.CoverageEligibilityResponse) (r5.CoverageEligibilityResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.CoverageEligibilityResponse{}, err
	}
	typed, ok := result.(r5.CoverageEligibilityResponse)
	if !ok {
		return r5.CoverageEligibilityResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverageEligibilityResponse retrieves a CoverageEligibilityResponse resource by ID.
func (c *ClientR5) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r5.CoverageEligibilityResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r5.CoverageEligibilityResponse{}, err
	}
	typed, ok := result.(r5.CoverageEligibilityResponse)
	if !ok {
		return r5.CoverageEligibilityResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverageEligibilityResponse updates an existing CoverageEligibilityResponse resource.
func (c *ClientR5) UpdateCoverageEligibilityResponse(ctx context.Context, resource r5.CoverageEligibilityResponse) (update.Result[r5.CoverageEligibilityResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.CoverageEligibilityResponse]{}, err
	}
	typed, ok := result.Resource.(r5.CoverageEligibilityResponse)
	if !ok {
		return update.Result[r5.CoverageEligibilityResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.CoverageEligibilityResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverageEligibilityResponse deletes a CoverageEligibilityResponse resource by ID.
func (c *ClientR5) DeleteCoverageEligibilityResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CoverageEligibilityResponse", id)
}

// SearchCoverageEligibilityResponse performs a search for CoverageEligibilityResponse resources.
func (c *ClientR5) SearchCoverageEligibilityResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.CoverageEligibilityResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CoverageEligibilityResponse", parameters, options)
	if err != nil {
		return search.Result[r5.CoverageEligibilityResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.CoverageEligibilityResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.CoverageEligibilityResponse)
		if !ok {
			return search.Result[r5.CoverageEligibilityResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.CoverageEligibilityResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDetectedIssue creates a new DetectedIssue resource.
func (c *ClientR5) CreateDetectedIssue(ctx context.Context, resource r5.DetectedIssue) (r5.DetectedIssue, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DetectedIssue{}, err
	}
	typed, ok := result.(r5.DetectedIssue)
	if !ok {
		return r5.DetectedIssue{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDetectedIssue retrieves a DetectedIssue resource by ID.
func (c *ClientR5) ReadDetectedIssue(ctx context.Context, id string) (r5.DetectedIssue, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r5.DetectedIssue{}, err
	}
	typed, ok := result.(r5.DetectedIssue)
	if !ok {
		return r5.DetectedIssue{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDetectedIssue updates an existing DetectedIssue resource.
func (c *ClientR5) UpdateDetectedIssue(ctx context.Context, resource r5.DetectedIssue) (update.Result[r5.DetectedIssue], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DetectedIssue]{}, err
	}
	typed, ok := result.Resource.(r5.DetectedIssue)
	if !ok {
		return update.Result[r5.DetectedIssue]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DetectedIssue]{Resource: typed, Created: result.Created}, nil
}

// DeleteDetectedIssue deletes a DetectedIssue resource by ID.
func (c *ClientR5) DeleteDetectedIssue(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DetectedIssue", id)
}

// SearchDetectedIssue performs a search for DetectedIssue resources.
func (c *ClientR5) SearchDetectedIssue(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DetectedIssue], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DetectedIssue", parameters, options)
	if err != nil {
		return search.Result[r5.DetectedIssue]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DetectedIssue, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DetectedIssue)
		if !ok {
			return search.Result[r5.DetectedIssue]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DetectedIssue]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDevice creates a new Device resource.
func (c *ClientR5) CreateDevice(ctx context.Context, resource r5.Device) (r5.Device, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Device{}, err
	}
	typed, ok := result.(r5.Device)
	if !ok {
		return r5.Device{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDevice retrieves a Device resource by ID.
func (c *ClientR5) ReadDevice(ctx context.Context, id string) (r5.Device, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Device", id)
	if err != nil {
		return r5.Device{}, err
	}
	typed, ok := result.(r5.Device)
	if !ok {
		return r5.Device{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDevice updates an existing Device resource.
func (c *ClientR5) UpdateDevice(ctx context.Context, resource r5.Device) (update.Result[r5.Device], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Device]{}, err
	}
	typed, ok := result.Resource.(r5.Device)
	if !ok {
		return update.Result[r5.Device]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Device]{Resource: typed, Created: result.Created}, nil
}

// DeleteDevice deletes a Device resource by ID.
func (c *ClientR5) DeleteDevice(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Device", id)
}

// SearchDevice performs a search for Device resources.
func (c *ClientR5) SearchDevice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Device], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Device", parameters, options)
	if err != nil {
		return search.Result[r5.Device]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Device, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Device)
		if !ok {
			return search.Result[r5.Device]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Device]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceAssociation creates a new DeviceAssociation resource.
func (c *ClientR5) CreateDeviceAssociation(ctx context.Context, resource r5.DeviceAssociation) (r5.DeviceAssociation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DeviceAssociation{}, err
	}
	typed, ok := result.(r5.DeviceAssociation)
	if !ok {
		return r5.DeviceAssociation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceAssociation retrieves a DeviceAssociation resource by ID.
func (c *ClientR5) ReadDeviceAssociation(ctx context.Context, id string) (r5.DeviceAssociation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceAssociation", id)
	if err != nil {
		return r5.DeviceAssociation{}, err
	}
	typed, ok := result.(r5.DeviceAssociation)
	if !ok {
		return r5.DeviceAssociation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceAssociation updates an existing DeviceAssociation resource.
func (c *ClientR5) UpdateDeviceAssociation(ctx context.Context, resource r5.DeviceAssociation) (update.Result[r5.DeviceAssociation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DeviceAssociation]{}, err
	}
	typed, ok := result.Resource.(r5.DeviceAssociation)
	if !ok {
		return update.Result[r5.DeviceAssociation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DeviceAssociation]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceAssociation deletes a DeviceAssociation resource by ID.
func (c *ClientR5) DeleteDeviceAssociation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceAssociation", id)
}

// SearchDeviceAssociation performs a search for DeviceAssociation resources.
func (c *ClientR5) SearchDeviceAssociation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DeviceAssociation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceAssociation", parameters, options)
	if err != nil {
		return search.Result[r5.DeviceAssociation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DeviceAssociation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DeviceAssociation)
		if !ok {
			return search.Result[r5.DeviceAssociation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DeviceAssociation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceDefinition creates a new DeviceDefinition resource.
func (c *ClientR5) CreateDeviceDefinition(ctx context.Context, resource r5.DeviceDefinition) (r5.DeviceDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DeviceDefinition{}, err
	}
	typed, ok := result.(r5.DeviceDefinition)
	if !ok {
		return r5.DeviceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceDefinition retrieves a DeviceDefinition resource by ID.
func (c *ClientR5) ReadDeviceDefinition(ctx context.Context, id string) (r5.DeviceDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r5.DeviceDefinition{}, err
	}
	typed, ok := result.(r5.DeviceDefinition)
	if !ok {
		return r5.DeviceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceDefinition updates an existing DeviceDefinition resource.
func (c *ClientR5) UpdateDeviceDefinition(ctx context.Context, resource r5.DeviceDefinition) (update.Result[r5.DeviceDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DeviceDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.DeviceDefinition)
	if !ok {
		return update.Result[r5.DeviceDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DeviceDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceDefinition deletes a DeviceDefinition resource by ID.
func (c *ClientR5) DeleteDeviceDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceDefinition", id)
}

// SearchDeviceDefinition performs a search for DeviceDefinition resources.
func (c *ClientR5) SearchDeviceDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DeviceDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.DeviceDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DeviceDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DeviceDefinition)
		if !ok {
			return search.Result[r5.DeviceDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DeviceDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceDispense creates a new DeviceDispense resource.
func (c *ClientR5) CreateDeviceDispense(ctx context.Context, resource r5.DeviceDispense) (r5.DeviceDispense, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DeviceDispense{}, err
	}
	typed, ok := result.(r5.DeviceDispense)
	if !ok {
		return r5.DeviceDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceDispense retrieves a DeviceDispense resource by ID.
func (c *ClientR5) ReadDeviceDispense(ctx context.Context, id string) (r5.DeviceDispense, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceDispense", id)
	if err != nil {
		return r5.DeviceDispense{}, err
	}
	typed, ok := result.(r5.DeviceDispense)
	if !ok {
		return r5.DeviceDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceDispense updates an existing DeviceDispense resource.
func (c *ClientR5) UpdateDeviceDispense(ctx context.Context, resource r5.DeviceDispense) (update.Result[r5.DeviceDispense], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DeviceDispense]{}, err
	}
	typed, ok := result.Resource.(r5.DeviceDispense)
	if !ok {
		return update.Result[r5.DeviceDispense]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DeviceDispense]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceDispense deletes a DeviceDispense resource by ID.
func (c *ClientR5) DeleteDeviceDispense(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceDispense", id)
}

// SearchDeviceDispense performs a search for DeviceDispense resources.
func (c *ClientR5) SearchDeviceDispense(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DeviceDispense], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceDispense", parameters, options)
	if err != nil {
		return search.Result[r5.DeviceDispense]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DeviceDispense, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DeviceDispense)
		if !ok {
			return search.Result[r5.DeviceDispense]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DeviceDispense]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceMetric creates a new DeviceMetric resource.
func (c *ClientR5) CreateDeviceMetric(ctx context.Context, resource r5.DeviceMetric) (r5.DeviceMetric, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DeviceMetric{}, err
	}
	typed, ok := result.(r5.DeviceMetric)
	if !ok {
		return r5.DeviceMetric{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceMetric retrieves a DeviceMetric resource by ID.
func (c *ClientR5) ReadDeviceMetric(ctx context.Context, id string) (r5.DeviceMetric, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r5.DeviceMetric{}, err
	}
	typed, ok := result.(r5.DeviceMetric)
	if !ok {
		return r5.DeviceMetric{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceMetric updates an existing DeviceMetric resource.
func (c *ClientR5) UpdateDeviceMetric(ctx context.Context, resource r5.DeviceMetric) (update.Result[r5.DeviceMetric], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DeviceMetric]{}, err
	}
	typed, ok := result.Resource.(r5.DeviceMetric)
	if !ok {
		return update.Result[r5.DeviceMetric]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DeviceMetric]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceMetric deletes a DeviceMetric resource by ID.
func (c *ClientR5) DeleteDeviceMetric(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceMetric", id)
}

// SearchDeviceMetric performs a search for DeviceMetric resources.
func (c *ClientR5) SearchDeviceMetric(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DeviceMetric], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceMetric", parameters, options)
	if err != nil {
		return search.Result[r5.DeviceMetric]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DeviceMetric, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DeviceMetric)
		if !ok {
			return search.Result[r5.DeviceMetric]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DeviceMetric]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceRequest creates a new DeviceRequest resource.
func (c *ClientR5) CreateDeviceRequest(ctx context.Context, resource r5.DeviceRequest) (r5.DeviceRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DeviceRequest{}, err
	}
	typed, ok := result.(r5.DeviceRequest)
	if !ok {
		return r5.DeviceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceRequest retrieves a DeviceRequest resource by ID.
func (c *ClientR5) ReadDeviceRequest(ctx context.Context, id string) (r5.DeviceRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r5.DeviceRequest{}, err
	}
	typed, ok := result.(r5.DeviceRequest)
	if !ok {
		return r5.DeviceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceRequest updates an existing DeviceRequest resource.
func (c *ClientR5) UpdateDeviceRequest(ctx context.Context, resource r5.DeviceRequest) (update.Result[r5.DeviceRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DeviceRequest]{}, err
	}
	typed, ok := result.Resource.(r5.DeviceRequest)
	if !ok {
		return update.Result[r5.DeviceRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DeviceRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceRequest deletes a DeviceRequest resource by ID.
func (c *ClientR5) DeleteDeviceRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceRequest", id)
}

// SearchDeviceRequest performs a search for DeviceRequest resources.
func (c *ClientR5) SearchDeviceRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DeviceRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceRequest", parameters, options)
	if err != nil {
		return search.Result[r5.DeviceRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DeviceRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DeviceRequest)
		if !ok {
			return search.Result[r5.DeviceRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DeviceRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceUsage creates a new DeviceUsage resource.
func (c *ClientR5) CreateDeviceUsage(ctx context.Context, resource r5.DeviceUsage) (r5.DeviceUsage, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DeviceUsage{}, err
	}
	typed, ok := result.(r5.DeviceUsage)
	if !ok {
		return r5.DeviceUsage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceUsage retrieves a DeviceUsage resource by ID.
func (c *ClientR5) ReadDeviceUsage(ctx context.Context, id string) (r5.DeviceUsage, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceUsage", id)
	if err != nil {
		return r5.DeviceUsage{}, err
	}
	typed, ok := result.(r5.DeviceUsage)
	if !ok {
		return r5.DeviceUsage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceUsage updates an existing DeviceUsage resource.
func (c *ClientR5) UpdateDeviceUsage(ctx context.Context, resource r5.DeviceUsage) (update.Result[r5.DeviceUsage], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DeviceUsage]{}, err
	}
	typed, ok := result.Resource.(r5.DeviceUsage)
	if !ok {
		return update.Result[r5.DeviceUsage]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DeviceUsage]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceUsage deletes a DeviceUsage resource by ID.
func (c *ClientR5) DeleteDeviceUsage(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceUsage", id)
}

// SearchDeviceUsage performs a search for DeviceUsage resources.
func (c *ClientR5) SearchDeviceUsage(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DeviceUsage], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceUsage", parameters, options)
	if err != nil {
		return search.Result[r5.DeviceUsage]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DeviceUsage, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DeviceUsage)
		if !ok {
			return search.Result[r5.DeviceUsage]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DeviceUsage]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDiagnosticReport creates a new DiagnosticReport resource.
func (c *ClientR5) CreateDiagnosticReport(ctx context.Context, resource r5.DiagnosticReport) (r5.DiagnosticReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DiagnosticReport{}, err
	}
	typed, ok := result.(r5.DiagnosticReport)
	if !ok {
		return r5.DiagnosticReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDiagnosticReport retrieves a DiagnosticReport resource by ID.
func (c *ClientR5) ReadDiagnosticReport(ctx context.Context, id string) (r5.DiagnosticReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r5.DiagnosticReport{}, err
	}
	typed, ok := result.(r5.DiagnosticReport)
	if !ok {
		return r5.DiagnosticReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDiagnosticReport updates an existing DiagnosticReport resource.
func (c *ClientR5) UpdateDiagnosticReport(ctx context.Context, resource r5.DiagnosticReport) (update.Result[r5.DiagnosticReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DiagnosticReport]{}, err
	}
	typed, ok := result.Resource.(r5.DiagnosticReport)
	if !ok {
		return update.Result[r5.DiagnosticReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DiagnosticReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteDiagnosticReport deletes a DiagnosticReport resource by ID.
func (c *ClientR5) DeleteDiagnosticReport(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DiagnosticReport", id)
}

// SearchDiagnosticReport performs a search for DiagnosticReport resources.
func (c *ClientR5) SearchDiagnosticReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DiagnosticReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DiagnosticReport", parameters, options)
	if err != nil {
		return search.Result[r5.DiagnosticReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DiagnosticReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DiagnosticReport)
		if !ok {
			return search.Result[r5.DiagnosticReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DiagnosticReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDocumentReference creates a new DocumentReference resource.
func (c *ClientR5) CreateDocumentReference(ctx context.Context, resource r5.DocumentReference) (r5.DocumentReference, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.DocumentReference{}, err
	}
	typed, ok := result.(r5.DocumentReference)
	if !ok {
		return r5.DocumentReference{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDocumentReference retrieves a DocumentReference resource by ID.
func (c *ClientR5) ReadDocumentReference(ctx context.Context, id string) (r5.DocumentReference, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r5.DocumentReference{}, err
	}
	typed, ok := result.(r5.DocumentReference)
	if !ok {
		return r5.DocumentReference{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDocumentReference updates an existing DocumentReference resource.
func (c *ClientR5) UpdateDocumentReference(ctx context.Context, resource r5.DocumentReference) (update.Result[r5.DocumentReference], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.DocumentReference]{}, err
	}
	typed, ok := result.Resource.(r5.DocumentReference)
	if !ok {
		return update.Result[r5.DocumentReference]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.DocumentReference]{Resource: typed, Created: result.Created}, nil
}

// DeleteDocumentReference deletes a DocumentReference resource by ID.
func (c *ClientR5) DeleteDocumentReference(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DocumentReference", id)
}

// SearchDocumentReference performs a search for DocumentReference resources.
func (c *ClientR5) SearchDocumentReference(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.DocumentReference], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DocumentReference", parameters, options)
	if err != nil {
		return search.Result[r5.DocumentReference]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.DocumentReference, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.DocumentReference)
		if !ok {
			return search.Result[r5.DocumentReference]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.DocumentReference]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEncounter creates a new Encounter resource.
func (c *ClientR5) CreateEncounter(ctx context.Context, resource r5.Encounter) (r5.Encounter, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Encounter{}, err
	}
	typed, ok := result.(r5.Encounter)
	if !ok {
		return r5.Encounter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEncounter retrieves a Encounter resource by ID.
func (c *ClientR5) ReadEncounter(ctx context.Context, id string) (r5.Encounter, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Encounter", id)
	if err != nil {
		return r5.Encounter{}, err
	}
	typed, ok := result.(r5.Encounter)
	if !ok {
		return r5.Encounter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEncounter updates an existing Encounter resource.
func (c *ClientR5) UpdateEncounter(ctx context.Context, resource r5.Encounter) (update.Result[r5.Encounter], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Encounter]{}, err
	}
	typed, ok := result.Resource.(r5.Encounter)
	if !ok {
		return update.Result[r5.Encounter]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Encounter]{Resource: typed, Created: result.Created}, nil
}

// DeleteEncounter deletes a Encounter resource by ID.
func (c *ClientR5) DeleteEncounter(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Encounter", id)
}

// SearchEncounter performs a search for Encounter resources.
func (c *ClientR5) SearchEncounter(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Encounter], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Encounter", parameters, options)
	if err != nil {
		return search.Result[r5.Encounter]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Encounter, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Encounter)
		if !ok {
			return search.Result[r5.Encounter]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Encounter]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEncounterHistory creates a new EncounterHistory resource.
func (c *ClientR5) CreateEncounterHistory(ctx context.Context, resource r5.EncounterHistory) (r5.EncounterHistory, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.EncounterHistory{}, err
	}
	typed, ok := result.(r5.EncounterHistory)
	if !ok {
		return r5.EncounterHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEncounterHistory retrieves a EncounterHistory resource by ID.
func (c *ClientR5) ReadEncounterHistory(ctx context.Context, id string) (r5.EncounterHistory, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EncounterHistory", id)
	if err != nil {
		return r5.EncounterHistory{}, err
	}
	typed, ok := result.(r5.EncounterHistory)
	if !ok {
		return r5.EncounterHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEncounterHistory updates an existing EncounterHistory resource.
func (c *ClientR5) UpdateEncounterHistory(ctx context.Context, resource r5.EncounterHistory) (update.Result[r5.EncounterHistory], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.EncounterHistory]{}, err
	}
	typed, ok := result.Resource.(r5.EncounterHistory)
	if !ok {
		return update.Result[r5.EncounterHistory]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.EncounterHistory]{Resource: typed, Created: result.Created}, nil
}

// DeleteEncounterHistory deletes a EncounterHistory resource by ID.
func (c *ClientR5) DeleteEncounterHistory(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EncounterHistory", id)
}

// SearchEncounterHistory performs a search for EncounterHistory resources.
func (c *ClientR5) SearchEncounterHistory(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.EncounterHistory], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EncounterHistory", parameters, options)
	if err != nil {
		return search.Result[r5.EncounterHistory]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.EncounterHistory, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.EncounterHistory)
		if !ok {
			return search.Result[r5.EncounterHistory]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.EncounterHistory]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEndpoint creates a new Endpoint resource.
func (c *ClientR5) CreateEndpoint(ctx context.Context, resource r5.Endpoint) (r5.Endpoint, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Endpoint{}, err
	}
	typed, ok := result.(r5.Endpoint)
	if !ok {
		return r5.Endpoint{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEndpoint retrieves a Endpoint resource by ID.
func (c *ClientR5) ReadEndpoint(ctx context.Context, id string) (r5.Endpoint, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Endpoint", id)
	if err != nil {
		return r5.Endpoint{}, err
	}
	typed, ok := result.(r5.Endpoint)
	if !ok {
		return r5.Endpoint{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEndpoint updates an existing Endpoint resource.
func (c *ClientR5) UpdateEndpoint(ctx context.Context, resource r5.Endpoint) (update.Result[r5.Endpoint], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Endpoint]{}, err
	}
	typed, ok := result.Resource.(r5.Endpoint)
	if !ok {
		return update.Result[r5.Endpoint]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Endpoint]{Resource: typed, Created: result.Created}, nil
}

// DeleteEndpoint deletes a Endpoint resource by ID.
func (c *ClientR5) DeleteEndpoint(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Endpoint", id)
}

// SearchEndpoint performs a search for Endpoint resources.
func (c *ClientR5) SearchEndpoint(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Endpoint], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Endpoint", parameters, options)
	if err != nil {
		return search.Result[r5.Endpoint]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Endpoint, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Endpoint)
		if !ok {
			return search.Result[r5.Endpoint]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Endpoint]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEnrollmentRequest creates a new EnrollmentRequest resource.
func (c *ClientR5) CreateEnrollmentRequest(ctx context.Context, resource r5.EnrollmentRequest) (r5.EnrollmentRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.EnrollmentRequest{}, err
	}
	typed, ok := result.(r5.EnrollmentRequest)
	if !ok {
		return r5.EnrollmentRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEnrollmentRequest retrieves a EnrollmentRequest resource by ID.
func (c *ClientR5) ReadEnrollmentRequest(ctx context.Context, id string) (r5.EnrollmentRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r5.EnrollmentRequest{}, err
	}
	typed, ok := result.(r5.EnrollmentRequest)
	if !ok {
		return r5.EnrollmentRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEnrollmentRequest updates an existing EnrollmentRequest resource.
func (c *ClientR5) UpdateEnrollmentRequest(ctx context.Context, resource r5.EnrollmentRequest) (update.Result[r5.EnrollmentRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.EnrollmentRequest]{}, err
	}
	typed, ok := result.Resource.(r5.EnrollmentRequest)
	if !ok {
		return update.Result[r5.EnrollmentRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.EnrollmentRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteEnrollmentRequest deletes a EnrollmentRequest resource by ID.
func (c *ClientR5) DeleteEnrollmentRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EnrollmentRequest", id)
}

// SearchEnrollmentRequest performs a search for EnrollmentRequest resources.
func (c *ClientR5) SearchEnrollmentRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.EnrollmentRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EnrollmentRequest", parameters, options)
	if err != nil {
		return search.Result[r5.EnrollmentRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.EnrollmentRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.EnrollmentRequest)
		if !ok {
			return search.Result[r5.EnrollmentRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.EnrollmentRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEnrollmentResponse creates a new EnrollmentResponse resource.
func (c *ClientR5) CreateEnrollmentResponse(ctx context.Context, resource r5.EnrollmentResponse) (r5.EnrollmentResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.EnrollmentResponse{}, err
	}
	typed, ok := result.(r5.EnrollmentResponse)
	if !ok {
		return r5.EnrollmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEnrollmentResponse retrieves a EnrollmentResponse resource by ID.
func (c *ClientR5) ReadEnrollmentResponse(ctx context.Context, id string) (r5.EnrollmentResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r5.EnrollmentResponse{}, err
	}
	typed, ok := result.(r5.EnrollmentResponse)
	if !ok {
		return r5.EnrollmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEnrollmentResponse updates an existing EnrollmentResponse resource.
func (c *ClientR5) UpdateEnrollmentResponse(ctx context.Context, resource r5.EnrollmentResponse) (update.Result[r5.EnrollmentResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.EnrollmentResponse]{}, err
	}
	typed, ok := result.Resource.(r5.EnrollmentResponse)
	if !ok {
		return update.Result[r5.EnrollmentResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.EnrollmentResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteEnrollmentResponse deletes a EnrollmentResponse resource by ID.
func (c *ClientR5) DeleteEnrollmentResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EnrollmentResponse", id)
}

// SearchEnrollmentResponse performs a search for EnrollmentResponse resources.
func (c *ClientR5) SearchEnrollmentResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.EnrollmentResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EnrollmentResponse", parameters, options)
	if err != nil {
		return search.Result[r5.EnrollmentResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.EnrollmentResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.EnrollmentResponse)
		if !ok {
			return search.Result[r5.EnrollmentResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.EnrollmentResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEpisodeOfCare creates a new EpisodeOfCare resource.
func (c *ClientR5) CreateEpisodeOfCare(ctx context.Context, resource r5.EpisodeOfCare) (r5.EpisodeOfCare, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.EpisodeOfCare{}, err
	}
	typed, ok := result.(r5.EpisodeOfCare)
	if !ok {
		return r5.EpisodeOfCare{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEpisodeOfCare retrieves a EpisodeOfCare resource by ID.
func (c *ClientR5) ReadEpisodeOfCare(ctx context.Context, id string) (r5.EpisodeOfCare, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r5.EpisodeOfCare{}, err
	}
	typed, ok := result.(r5.EpisodeOfCare)
	if !ok {
		return r5.EpisodeOfCare{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEpisodeOfCare updates an existing EpisodeOfCare resource.
func (c *ClientR5) UpdateEpisodeOfCare(ctx context.Context, resource r5.EpisodeOfCare) (update.Result[r5.EpisodeOfCare], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.EpisodeOfCare]{}, err
	}
	typed, ok := result.Resource.(r5.EpisodeOfCare)
	if !ok {
		return update.Result[r5.EpisodeOfCare]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.EpisodeOfCare]{Resource: typed, Created: result.Created}, nil
}

// DeleteEpisodeOfCare deletes a EpisodeOfCare resource by ID.
func (c *ClientR5) DeleteEpisodeOfCare(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EpisodeOfCare", id)
}

// SearchEpisodeOfCare performs a search for EpisodeOfCare resources.
func (c *ClientR5) SearchEpisodeOfCare(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.EpisodeOfCare], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EpisodeOfCare", parameters, options)
	if err != nil {
		return search.Result[r5.EpisodeOfCare]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.EpisodeOfCare, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.EpisodeOfCare)
		if !ok {
			return search.Result[r5.EpisodeOfCare]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.EpisodeOfCare]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEventDefinition creates a new EventDefinition resource.
func (c *ClientR5) CreateEventDefinition(ctx context.Context, resource r5.EventDefinition) (r5.EventDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.EventDefinition{}, err
	}
	typed, ok := result.(r5.EventDefinition)
	if !ok {
		return r5.EventDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEventDefinition retrieves a EventDefinition resource by ID.
func (c *ClientR5) ReadEventDefinition(ctx context.Context, id string) (r5.EventDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r5.EventDefinition{}, err
	}
	typed, ok := result.(r5.EventDefinition)
	if !ok {
		return r5.EventDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEventDefinition updates an existing EventDefinition resource.
func (c *ClientR5) UpdateEventDefinition(ctx context.Context, resource r5.EventDefinition) (update.Result[r5.EventDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.EventDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.EventDefinition)
	if !ok {
		return update.Result[r5.EventDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.EventDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteEventDefinition deletes a EventDefinition resource by ID.
func (c *ClientR5) DeleteEventDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EventDefinition", id)
}

// SearchEventDefinition performs a search for EventDefinition resources.
func (c *ClientR5) SearchEventDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.EventDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EventDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.EventDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.EventDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.EventDefinition)
		if !ok {
			return search.Result[r5.EventDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.EventDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidence creates a new Evidence resource.
func (c *ClientR5) CreateEvidence(ctx context.Context, resource r5.Evidence) (r5.Evidence, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Evidence{}, err
	}
	typed, ok := result.(r5.Evidence)
	if !ok {
		return r5.Evidence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidence retrieves a Evidence resource by ID.
func (c *ClientR5) ReadEvidence(ctx context.Context, id string) (r5.Evidence, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Evidence", id)
	if err != nil {
		return r5.Evidence{}, err
	}
	typed, ok := result.(r5.Evidence)
	if !ok {
		return r5.Evidence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidence updates an existing Evidence resource.
func (c *ClientR5) UpdateEvidence(ctx context.Context, resource r5.Evidence) (update.Result[r5.Evidence], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Evidence]{}, err
	}
	typed, ok := result.Resource.(r5.Evidence)
	if !ok {
		return update.Result[r5.Evidence]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Evidence]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidence deletes a Evidence resource by ID.
func (c *ClientR5) DeleteEvidence(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Evidence", id)
}

// SearchEvidence performs a search for Evidence resources.
func (c *ClientR5) SearchEvidence(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Evidence], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Evidence", parameters, options)
	if err != nil {
		return search.Result[r5.Evidence]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Evidence, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Evidence)
		if !ok {
			return search.Result[r5.Evidence]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Evidence]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidenceReport creates a new EvidenceReport resource.
func (c *ClientR5) CreateEvidenceReport(ctx context.Context, resource r5.EvidenceReport) (r5.EvidenceReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.EvidenceReport{}, err
	}
	typed, ok := result.(r5.EvidenceReport)
	if !ok {
		return r5.EvidenceReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidenceReport retrieves a EvidenceReport resource by ID.
func (c *ClientR5) ReadEvidenceReport(ctx context.Context, id string) (r5.EvidenceReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EvidenceReport", id)
	if err != nil {
		return r5.EvidenceReport{}, err
	}
	typed, ok := result.(r5.EvidenceReport)
	if !ok {
		return r5.EvidenceReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidenceReport updates an existing EvidenceReport resource.
func (c *ClientR5) UpdateEvidenceReport(ctx context.Context, resource r5.EvidenceReport) (update.Result[r5.EvidenceReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.EvidenceReport]{}, err
	}
	typed, ok := result.Resource.(r5.EvidenceReport)
	if !ok {
		return update.Result[r5.EvidenceReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.EvidenceReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidenceReport deletes a EvidenceReport resource by ID.
func (c *ClientR5) DeleteEvidenceReport(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EvidenceReport", id)
}

// SearchEvidenceReport performs a search for EvidenceReport resources.
func (c *ClientR5) SearchEvidenceReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.EvidenceReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EvidenceReport", parameters, options)
	if err != nil {
		return search.Result[r5.EvidenceReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.EvidenceReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.EvidenceReport)
		if !ok {
			return search.Result[r5.EvidenceReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.EvidenceReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidenceVariable creates a new EvidenceVariable resource.
func (c *ClientR5) CreateEvidenceVariable(ctx context.Context, resource r5.EvidenceVariable) (r5.EvidenceVariable, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.EvidenceVariable{}, err
	}
	typed, ok := result.(r5.EvidenceVariable)
	if !ok {
		return r5.EvidenceVariable{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidenceVariable retrieves a EvidenceVariable resource by ID.
func (c *ClientR5) ReadEvidenceVariable(ctx context.Context, id string) (r5.EvidenceVariable, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r5.EvidenceVariable{}, err
	}
	typed, ok := result.(r5.EvidenceVariable)
	if !ok {
		return r5.EvidenceVariable{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidenceVariable updates an existing EvidenceVariable resource.
func (c *ClientR5) UpdateEvidenceVariable(ctx context.Context, resource r5.EvidenceVariable) (update.Result[r5.EvidenceVariable], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.EvidenceVariable]{}, err
	}
	typed, ok := result.Resource.(r5.EvidenceVariable)
	if !ok {
		return update.Result[r5.EvidenceVariable]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.EvidenceVariable]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidenceVariable deletes a EvidenceVariable resource by ID.
func (c *ClientR5) DeleteEvidenceVariable(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EvidenceVariable", id)
}

// SearchEvidenceVariable performs a search for EvidenceVariable resources.
func (c *ClientR5) SearchEvidenceVariable(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.EvidenceVariable], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EvidenceVariable", parameters, options)
	if err != nil {
		return search.Result[r5.EvidenceVariable]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.EvidenceVariable, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.EvidenceVariable)
		if !ok {
			return search.Result[r5.EvidenceVariable]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.EvidenceVariable]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateExampleScenario creates a new ExampleScenario resource.
func (c *ClientR5) CreateExampleScenario(ctx context.Context, resource r5.ExampleScenario) (r5.ExampleScenario, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ExampleScenario{}, err
	}
	typed, ok := result.(r5.ExampleScenario)
	if !ok {
		return r5.ExampleScenario{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadExampleScenario retrieves a ExampleScenario resource by ID.
func (c *ClientR5) ReadExampleScenario(ctx context.Context, id string) (r5.ExampleScenario, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r5.ExampleScenario{}, err
	}
	typed, ok := result.(r5.ExampleScenario)
	if !ok {
		return r5.ExampleScenario{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateExampleScenario updates an existing ExampleScenario resource.
func (c *ClientR5) UpdateExampleScenario(ctx context.Context, resource r5.ExampleScenario) (update.Result[r5.ExampleScenario], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ExampleScenario]{}, err
	}
	typed, ok := result.Resource.(r5.ExampleScenario)
	if !ok {
		return update.Result[r5.ExampleScenario]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ExampleScenario]{Resource: typed, Created: result.Created}, nil
}

// DeleteExampleScenario deletes a ExampleScenario resource by ID.
func (c *ClientR5) DeleteExampleScenario(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ExampleScenario", id)
}

// SearchExampleScenario performs a search for ExampleScenario resources.
func (c *ClientR5) SearchExampleScenario(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ExampleScenario], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ExampleScenario", parameters, options)
	if err != nil {
		return search.Result[r5.ExampleScenario]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ExampleScenario, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ExampleScenario)
		if !ok {
			return search.Result[r5.ExampleScenario]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ExampleScenario]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateExplanationOfBenefit creates a new ExplanationOfBenefit resource.
func (c *ClientR5) CreateExplanationOfBenefit(ctx context.Context, resource r5.ExplanationOfBenefit) (r5.ExplanationOfBenefit, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ExplanationOfBenefit{}, err
	}
	typed, ok := result.(r5.ExplanationOfBenefit)
	if !ok {
		return r5.ExplanationOfBenefit{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadExplanationOfBenefit retrieves a ExplanationOfBenefit resource by ID.
func (c *ClientR5) ReadExplanationOfBenefit(ctx context.Context, id string) (r5.ExplanationOfBenefit, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r5.ExplanationOfBenefit{}, err
	}
	typed, ok := result.(r5.ExplanationOfBenefit)
	if !ok {
		return r5.ExplanationOfBenefit{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateExplanationOfBenefit updates an existing ExplanationOfBenefit resource.
func (c *ClientR5) UpdateExplanationOfBenefit(ctx context.Context, resource r5.ExplanationOfBenefit) (update.Result[r5.ExplanationOfBenefit], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ExplanationOfBenefit]{}, err
	}
	typed, ok := result.Resource.(r5.ExplanationOfBenefit)
	if !ok {
		return update.Result[r5.ExplanationOfBenefit]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ExplanationOfBenefit]{Resource: typed, Created: result.Created}, nil
}

// DeleteExplanationOfBenefit deletes a ExplanationOfBenefit resource by ID.
func (c *ClientR5) DeleteExplanationOfBenefit(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ExplanationOfBenefit", id)
}

// SearchExplanationOfBenefit performs a search for ExplanationOfBenefit resources.
func (c *ClientR5) SearchExplanationOfBenefit(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ExplanationOfBenefit], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ExplanationOfBenefit", parameters, options)
	if err != nil {
		return search.Result[r5.ExplanationOfBenefit]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ExplanationOfBenefit, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ExplanationOfBenefit)
		if !ok {
			return search.Result[r5.ExplanationOfBenefit]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ExplanationOfBenefit]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateFamilyMemberHistory creates a new FamilyMemberHistory resource.
func (c *ClientR5) CreateFamilyMemberHistory(ctx context.Context, resource r5.FamilyMemberHistory) (r5.FamilyMemberHistory, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.FamilyMemberHistory{}, err
	}
	typed, ok := result.(r5.FamilyMemberHistory)
	if !ok {
		return r5.FamilyMemberHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadFamilyMemberHistory retrieves a FamilyMemberHistory resource by ID.
func (c *ClientR5) ReadFamilyMemberHistory(ctx context.Context, id string) (r5.FamilyMemberHistory, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r5.FamilyMemberHistory{}, err
	}
	typed, ok := result.(r5.FamilyMemberHistory)
	if !ok {
		return r5.FamilyMemberHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateFamilyMemberHistory updates an existing FamilyMemberHistory resource.
func (c *ClientR5) UpdateFamilyMemberHistory(ctx context.Context, resource r5.FamilyMemberHistory) (update.Result[r5.FamilyMemberHistory], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.FamilyMemberHistory]{}, err
	}
	typed, ok := result.Resource.(r5.FamilyMemberHistory)
	if !ok {
		return update.Result[r5.FamilyMemberHistory]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.FamilyMemberHistory]{Resource: typed, Created: result.Created}, nil
}

// DeleteFamilyMemberHistory deletes a FamilyMemberHistory resource by ID.
func (c *ClientR5) DeleteFamilyMemberHistory(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "FamilyMemberHistory", id)
}

// SearchFamilyMemberHistory performs a search for FamilyMemberHistory resources.
func (c *ClientR5) SearchFamilyMemberHistory(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.FamilyMemberHistory], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "FamilyMemberHistory", parameters, options)
	if err != nil {
		return search.Result[r5.FamilyMemberHistory]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.FamilyMemberHistory, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.FamilyMemberHistory)
		if !ok {
			return search.Result[r5.FamilyMemberHistory]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.FamilyMemberHistory]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateFlag creates a new Flag resource.
func (c *ClientR5) CreateFlag(ctx context.Context, resource r5.Flag) (r5.Flag, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Flag{}, err
	}
	typed, ok := result.(r5.Flag)
	if !ok {
		return r5.Flag{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadFlag retrieves a Flag resource by ID.
func (c *ClientR5) ReadFlag(ctx context.Context, id string) (r5.Flag, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Flag", id)
	if err != nil {
		return r5.Flag{}, err
	}
	typed, ok := result.(r5.Flag)
	if !ok {
		return r5.Flag{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateFlag updates an existing Flag resource.
func (c *ClientR5) UpdateFlag(ctx context.Context, resource r5.Flag) (update.Result[r5.Flag], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Flag]{}, err
	}
	typed, ok := result.Resource.(r5.Flag)
	if !ok {
		return update.Result[r5.Flag]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Flag]{Resource: typed, Created: result.Created}, nil
}

// DeleteFlag deletes a Flag resource by ID.
func (c *ClientR5) DeleteFlag(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Flag", id)
}

// SearchFlag performs a search for Flag resources.
func (c *ClientR5) SearchFlag(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Flag], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Flag", parameters, options)
	if err != nil {
		return search.Result[r5.Flag]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Flag, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Flag)
		if !ok {
			return search.Result[r5.Flag]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Flag]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateFormularyItem creates a new FormularyItem resource.
func (c *ClientR5) CreateFormularyItem(ctx context.Context, resource r5.FormularyItem) (r5.FormularyItem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.FormularyItem{}, err
	}
	typed, ok := result.(r5.FormularyItem)
	if !ok {
		return r5.FormularyItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadFormularyItem retrieves a FormularyItem resource by ID.
func (c *ClientR5) ReadFormularyItem(ctx context.Context, id string) (r5.FormularyItem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "FormularyItem", id)
	if err != nil {
		return r5.FormularyItem{}, err
	}
	typed, ok := result.(r5.FormularyItem)
	if !ok {
		return r5.FormularyItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateFormularyItem updates an existing FormularyItem resource.
func (c *ClientR5) UpdateFormularyItem(ctx context.Context, resource r5.FormularyItem) (update.Result[r5.FormularyItem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.FormularyItem]{}, err
	}
	typed, ok := result.Resource.(r5.FormularyItem)
	if !ok {
		return update.Result[r5.FormularyItem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.FormularyItem]{Resource: typed, Created: result.Created}, nil
}

// DeleteFormularyItem deletes a FormularyItem resource by ID.
func (c *ClientR5) DeleteFormularyItem(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "FormularyItem", id)
}

// SearchFormularyItem performs a search for FormularyItem resources.
func (c *ClientR5) SearchFormularyItem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.FormularyItem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "FormularyItem", parameters, options)
	if err != nil {
		return search.Result[r5.FormularyItem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.FormularyItem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.FormularyItem)
		if !ok {
			return search.Result[r5.FormularyItem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.FormularyItem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGenomicStudy creates a new GenomicStudy resource.
func (c *ClientR5) CreateGenomicStudy(ctx context.Context, resource r5.GenomicStudy) (r5.GenomicStudy, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.GenomicStudy{}, err
	}
	typed, ok := result.(r5.GenomicStudy)
	if !ok {
		return r5.GenomicStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGenomicStudy retrieves a GenomicStudy resource by ID.
func (c *ClientR5) ReadGenomicStudy(ctx context.Context, id string) (r5.GenomicStudy, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "GenomicStudy", id)
	if err != nil {
		return r5.GenomicStudy{}, err
	}
	typed, ok := result.(r5.GenomicStudy)
	if !ok {
		return r5.GenomicStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGenomicStudy updates an existing GenomicStudy resource.
func (c *ClientR5) UpdateGenomicStudy(ctx context.Context, resource r5.GenomicStudy) (update.Result[r5.GenomicStudy], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.GenomicStudy]{}, err
	}
	typed, ok := result.Resource.(r5.GenomicStudy)
	if !ok {
		return update.Result[r5.GenomicStudy]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.GenomicStudy]{Resource: typed, Created: result.Created}, nil
}

// DeleteGenomicStudy deletes a GenomicStudy resource by ID.
func (c *ClientR5) DeleteGenomicStudy(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "GenomicStudy", id)
}

// SearchGenomicStudy performs a search for GenomicStudy resources.
func (c *ClientR5) SearchGenomicStudy(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.GenomicStudy], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "GenomicStudy", parameters, options)
	if err != nil {
		return search.Result[r5.GenomicStudy]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.GenomicStudy, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.GenomicStudy)
		if !ok {
			return search.Result[r5.GenomicStudy]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.GenomicStudy]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGoal creates a new Goal resource.
func (c *ClientR5) CreateGoal(ctx context.Context, resource r5.Goal) (r5.Goal, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Goal{}, err
	}
	typed, ok := result.(r5.Goal)
	if !ok {
		return r5.Goal{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGoal retrieves a Goal resource by ID.
func (c *ClientR5) ReadGoal(ctx context.Context, id string) (r5.Goal, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Goal", id)
	if err != nil {
		return r5.Goal{}, err
	}
	typed, ok := result.(r5.Goal)
	if !ok {
		return r5.Goal{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGoal updates an existing Goal resource.
func (c *ClientR5) UpdateGoal(ctx context.Context, resource r5.Goal) (update.Result[r5.Goal], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Goal]{}, err
	}
	typed, ok := result.Resource.(r5.Goal)
	if !ok {
		return update.Result[r5.Goal]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Goal]{Resource: typed, Created: result.Created}, nil
}

// DeleteGoal deletes a Goal resource by ID.
func (c *ClientR5) DeleteGoal(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Goal", id)
}

// SearchGoal performs a search for Goal resources.
func (c *ClientR5) SearchGoal(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Goal], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Goal", parameters, options)
	if err != nil {
		return search.Result[r5.Goal]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Goal, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Goal)
		if !ok {
			return search.Result[r5.Goal]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Goal]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGraphDefinition creates a new GraphDefinition resource.
func (c *ClientR5) CreateGraphDefinition(ctx context.Context, resource r5.GraphDefinition) (r5.GraphDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.GraphDefinition{}, err
	}
	typed, ok := result.(r5.GraphDefinition)
	if !ok {
		return r5.GraphDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGraphDefinition retrieves a GraphDefinition resource by ID.
func (c *ClientR5) ReadGraphDefinition(ctx context.Context, id string) (r5.GraphDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r5.GraphDefinition{}, err
	}
	typed, ok := result.(r5.GraphDefinition)
	if !ok {
		return r5.GraphDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGraphDefinition updates an existing GraphDefinition resource.
func (c *ClientR5) UpdateGraphDefinition(ctx context.Context, resource r5.GraphDefinition) (update.Result[r5.GraphDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.GraphDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.GraphDefinition)
	if !ok {
		return update.Result[r5.GraphDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.GraphDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteGraphDefinition deletes a GraphDefinition resource by ID.
func (c *ClientR5) DeleteGraphDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "GraphDefinition", id)
}

// SearchGraphDefinition performs a search for GraphDefinition resources.
func (c *ClientR5) SearchGraphDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.GraphDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "GraphDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.GraphDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.GraphDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.GraphDefinition)
		if !ok {
			return search.Result[r5.GraphDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.GraphDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGroup creates a new Group resource.
func (c *ClientR5) CreateGroup(ctx context.Context, resource r5.Group) (r5.Group, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Group{}, err
	}
	typed, ok := result.(r5.Group)
	if !ok {
		return r5.Group{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGroup retrieves a Group resource by ID.
func (c *ClientR5) ReadGroup(ctx context.Context, id string) (r5.Group, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Group", id)
	if err != nil {
		return r5.Group{}, err
	}
	typed, ok := result.(r5.Group)
	if !ok {
		return r5.Group{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGroup updates an existing Group resource.
func (c *ClientR5) UpdateGroup(ctx context.Context, resource r5.Group) (update.Result[r5.Group], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Group]{}, err
	}
	typed, ok := result.Resource.(r5.Group)
	if !ok {
		return update.Result[r5.Group]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Group]{Resource: typed, Created: result.Created}, nil
}

// DeleteGroup deletes a Group resource by ID.
func (c *ClientR5) DeleteGroup(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Group", id)
}

// SearchGroup performs a search for Group resources.
func (c *ClientR5) SearchGroup(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Group], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Group", parameters, options)
	if err != nil {
		return search.Result[r5.Group]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Group, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Group)
		if !ok {
			return search.Result[r5.Group]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Group]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGuidanceResponse creates a new GuidanceResponse resource.
func (c *ClientR5) CreateGuidanceResponse(ctx context.Context, resource r5.GuidanceResponse) (r5.GuidanceResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.GuidanceResponse{}, err
	}
	typed, ok := result.(r5.GuidanceResponse)
	if !ok {
		return r5.GuidanceResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGuidanceResponse retrieves a GuidanceResponse resource by ID.
func (c *ClientR5) ReadGuidanceResponse(ctx context.Context, id string) (r5.GuidanceResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r5.GuidanceResponse{}, err
	}
	typed, ok := result.(r5.GuidanceResponse)
	if !ok {
		return r5.GuidanceResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGuidanceResponse updates an existing GuidanceResponse resource.
func (c *ClientR5) UpdateGuidanceResponse(ctx context.Context, resource r5.GuidanceResponse) (update.Result[r5.GuidanceResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.GuidanceResponse]{}, err
	}
	typed, ok := result.Resource.(r5.GuidanceResponse)
	if !ok {
		return update.Result[r5.GuidanceResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.GuidanceResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteGuidanceResponse deletes a GuidanceResponse resource by ID.
func (c *ClientR5) DeleteGuidanceResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "GuidanceResponse", id)
}

// SearchGuidanceResponse performs a search for GuidanceResponse resources.
func (c *ClientR5) SearchGuidanceResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.GuidanceResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "GuidanceResponse", parameters, options)
	if err != nil {
		return search.Result[r5.GuidanceResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.GuidanceResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.GuidanceResponse)
		if !ok {
			return search.Result[r5.GuidanceResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.GuidanceResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateHealthcareService creates a new HealthcareService resource.
func (c *ClientR5) CreateHealthcareService(ctx context.Context, resource r5.HealthcareService) (r5.HealthcareService, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.HealthcareService{}, err
	}
	typed, ok := result.(r5.HealthcareService)
	if !ok {
		return r5.HealthcareService{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadHealthcareService retrieves a HealthcareService resource by ID.
func (c *ClientR5) ReadHealthcareService(ctx context.Context, id string) (r5.HealthcareService, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r5.HealthcareService{}, err
	}
	typed, ok := result.(r5.HealthcareService)
	if !ok {
		return r5.HealthcareService{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateHealthcareService updates an existing HealthcareService resource.
func (c *ClientR5) UpdateHealthcareService(ctx context.Context, resource r5.HealthcareService) (update.Result[r5.HealthcareService], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.HealthcareService]{}, err
	}
	typed, ok := result.Resource.(r5.HealthcareService)
	if !ok {
		return update.Result[r5.HealthcareService]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.HealthcareService]{Resource: typed, Created: result.Created}, nil
}

// DeleteHealthcareService deletes a HealthcareService resource by ID.
func (c *ClientR5) DeleteHealthcareService(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "HealthcareService", id)
}

// SearchHealthcareService performs a search for HealthcareService resources.
func (c *ClientR5) SearchHealthcareService(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.HealthcareService], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "HealthcareService", parameters, options)
	if err != nil {
		return search.Result[r5.HealthcareService]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.HealthcareService, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.HealthcareService)
		if !ok {
			return search.Result[r5.HealthcareService]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.HealthcareService]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImagingSelection creates a new ImagingSelection resource.
func (c *ClientR5) CreateImagingSelection(ctx context.Context, resource r5.ImagingSelection) (r5.ImagingSelection, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ImagingSelection{}, err
	}
	typed, ok := result.(r5.ImagingSelection)
	if !ok {
		return r5.ImagingSelection{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImagingSelection retrieves a ImagingSelection resource by ID.
func (c *ClientR5) ReadImagingSelection(ctx context.Context, id string) (r5.ImagingSelection, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImagingSelection", id)
	if err != nil {
		return r5.ImagingSelection{}, err
	}
	typed, ok := result.(r5.ImagingSelection)
	if !ok {
		return r5.ImagingSelection{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImagingSelection updates an existing ImagingSelection resource.
func (c *ClientR5) UpdateImagingSelection(ctx context.Context, resource r5.ImagingSelection) (update.Result[r5.ImagingSelection], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ImagingSelection]{}, err
	}
	typed, ok := result.Resource.(r5.ImagingSelection)
	if !ok {
		return update.Result[r5.ImagingSelection]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ImagingSelection]{Resource: typed, Created: result.Created}, nil
}

// DeleteImagingSelection deletes a ImagingSelection resource by ID.
func (c *ClientR5) DeleteImagingSelection(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImagingSelection", id)
}

// SearchImagingSelection performs a search for ImagingSelection resources.
func (c *ClientR5) SearchImagingSelection(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ImagingSelection], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImagingSelection", parameters, options)
	if err != nil {
		return search.Result[r5.ImagingSelection]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ImagingSelection, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ImagingSelection)
		if !ok {
			return search.Result[r5.ImagingSelection]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ImagingSelection]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImagingStudy creates a new ImagingStudy resource.
func (c *ClientR5) CreateImagingStudy(ctx context.Context, resource r5.ImagingStudy) (r5.ImagingStudy, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ImagingStudy{}, err
	}
	typed, ok := result.(r5.ImagingStudy)
	if !ok {
		return r5.ImagingStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImagingStudy retrieves a ImagingStudy resource by ID.
func (c *ClientR5) ReadImagingStudy(ctx context.Context, id string) (r5.ImagingStudy, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r5.ImagingStudy{}, err
	}
	typed, ok := result.(r5.ImagingStudy)
	if !ok {
		return r5.ImagingStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImagingStudy updates an existing ImagingStudy resource.
func (c *ClientR5) UpdateImagingStudy(ctx context.Context, resource r5.ImagingStudy) (update.Result[r5.ImagingStudy], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ImagingStudy]{}, err
	}
	typed, ok := result.Resource.(r5.ImagingStudy)
	if !ok {
		return update.Result[r5.ImagingStudy]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ImagingStudy]{Resource: typed, Created: result.Created}, nil
}

// DeleteImagingStudy deletes a ImagingStudy resource by ID.
func (c *ClientR5) DeleteImagingStudy(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImagingStudy", id)
}

// SearchImagingStudy performs a search for ImagingStudy resources.
func (c *ClientR5) SearchImagingStudy(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ImagingStudy], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImagingStudy", parameters, options)
	if err != nil {
		return search.Result[r5.ImagingStudy]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ImagingStudy, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ImagingStudy)
		if !ok {
			return search.Result[r5.ImagingStudy]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ImagingStudy]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunization creates a new Immunization resource.
func (c *ClientR5) CreateImmunization(ctx context.Context, resource r5.Immunization) (r5.Immunization, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Immunization{}, err
	}
	typed, ok := result.(r5.Immunization)
	if !ok {
		return r5.Immunization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunization retrieves a Immunization resource by ID.
func (c *ClientR5) ReadImmunization(ctx context.Context, id string) (r5.Immunization, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Immunization", id)
	if err != nil {
		return r5.Immunization{}, err
	}
	typed, ok := result.(r5.Immunization)
	if !ok {
		return r5.Immunization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunization updates an existing Immunization resource.
func (c *ClientR5) UpdateImmunization(ctx context.Context, resource r5.Immunization) (update.Result[r5.Immunization], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Immunization]{}, err
	}
	typed, ok := result.Resource.(r5.Immunization)
	if !ok {
		return update.Result[r5.Immunization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Immunization]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunization deletes a Immunization resource by ID.
func (c *ClientR5) DeleteImmunization(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Immunization", id)
}

// SearchImmunization performs a search for Immunization resources.
func (c *ClientR5) SearchImmunization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Immunization], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Immunization", parameters, options)
	if err != nil {
		return search.Result[r5.Immunization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Immunization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Immunization)
		if !ok {
			return search.Result[r5.Immunization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Immunization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunizationEvaluation creates a new ImmunizationEvaluation resource.
func (c *ClientR5) CreateImmunizationEvaluation(ctx context.Context, resource r5.ImmunizationEvaluation) (r5.ImmunizationEvaluation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ImmunizationEvaluation{}, err
	}
	typed, ok := result.(r5.ImmunizationEvaluation)
	if !ok {
		return r5.ImmunizationEvaluation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunizationEvaluation retrieves a ImmunizationEvaluation resource by ID.
func (c *ClientR5) ReadImmunizationEvaluation(ctx context.Context, id string) (r5.ImmunizationEvaluation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r5.ImmunizationEvaluation{}, err
	}
	typed, ok := result.(r5.ImmunizationEvaluation)
	if !ok {
		return r5.ImmunizationEvaluation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunizationEvaluation updates an existing ImmunizationEvaluation resource.
func (c *ClientR5) UpdateImmunizationEvaluation(ctx context.Context, resource r5.ImmunizationEvaluation) (update.Result[r5.ImmunizationEvaluation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ImmunizationEvaluation]{}, err
	}
	typed, ok := result.Resource.(r5.ImmunizationEvaluation)
	if !ok {
		return update.Result[r5.ImmunizationEvaluation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ImmunizationEvaluation]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunizationEvaluation deletes a ImmunizationEvaluation resource by ID.
func (c *ClientR5) DeleteImmunizationEvaluation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImmunizationEvaluation", id)
}

// SearchImmunizationEvaluation performs a search for ImmunizationEvaluation resources.
func (c *ClientR5) SearchImmunizationEvaluation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ImmunizationEvaluation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImmunizationEvaluation", parameters, options)
	if err != nil {
		return search.Result[r5.ImmunizationEvaluation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ImmunizationEvaluation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ImmunizationEvaluation)
		if !ok {
			return search.Result[r5.ImmunizationEvaluation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ImmunizationEvaluation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunizationRecommendation creates a new ImmunizationRecommendation resource.
func (c *ClientR5) CreateImmunizationRecommendation(ctx context.Context, resource r5.ImmunizationRecommendation) (r5.ImmunizationRecommendation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ImmunizationRecommendation{}, err
	}
	typed, ok := result.(r5.ImmunizationRecommendation)
	if !ok {
		return r5.ImmunizationRecommendation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunizationRecommendation retrieves a ImmunizationRecommendation resource by ID.
func (c *ClientR5) ReadImmunizationRecommendation(ctx context.Context, id string) (r5.ImmunizationRecommendation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r5.ImmunizationRecommendation{}, err
	}
	typed, ok := result.(r5.ImmunizationRecommendation)
	if !ok {
		return r5.ImmunizationRecommendation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunizationRecommendation updates an existing ImmunizationRecommendation resource.
func (c *ClientR5) UpdateImmunizationRecommendation(ctx context.Context, resource r5.ImmunizationRecommendation) (update.Result[r5.ImmunizationRecommendation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ImmunizationRecommendation]{}, err
	}
	typed, ok := result.Resource.(r5.ImmunizationRecommendation)
	if !ok {
		return update.Result[r5.ImmunizationRecommendation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ImmunizationRecommendation]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunizationRecommendation deletes a ImmunizationRecommendation resource by ID.
func (c *ClientR5) DeleteImmunizationRecommendation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImmunizationRecommendation", id)
}

// SearchImmunizationRecommendation performs a search for ImmunizationRecommendation resources.
func (c *ClientR5) SearchImmunizationRecommendation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ImmunizationRecommendation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImmunizationRecommendation", parameters, options)
	if err != nil {
		return search.Result[r5.ImmunizationRecommendation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ImmunizationRecommendation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ImmunizationRecommendation)
		if !ok {
			return search.Result[r5.ImmunizationRecommendation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ImmunizationRecommendation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImplementationGuide creates a new ImplementationGuide resource.
func (c *ClientR5) CreateImplementationGuide(ctx context.Context, resource r5.ImplementationGuide) (r5.ImplementationGuide, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ImplementationGuide{}, err
	}
	typed, ok := result.(r5.ImplementationGuide)
	if !ok {
		return r5.ImplementationGuide{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImplementationGuide retrieves a ImplementationGuide resource by ID.
func (c *ClientR5) ReadImplementationGuide(ctx context.Context, id string) (r5.ImplementationGuide, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r5.ImplementationGuide{}, err
	}
	typed, ok := result.(r5.ImplementationGuide)
	if !ok {
		return r5.ImplementationGuide{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImplementationGuide updates an existing ImplementationGuide resource.
func (c *ClientR5) UpdateImplementationGuide(ctx context.Context, resource r5.ImplementationGuide) (update.Result[r5.ImplementationGuide], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ImplementationGuide]{}, err
	}
	typed, ok := result.Resource.(r5.ImplementationGuide)
	if !ok {
		return update.Result[r5.ImplementationGuide]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ImplementationGuide]{Resource: typed, Created: result.Created}, nil
}

// DeleteImplementationGuide deletes a ImplementationGuide resource by ID.
func (c *ClientR5) DeleteImplementationGuide(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImplementationGuide", id)
}

// SearchImplementationGuide performs a search for ImplementationGuide resources.
func (c *ClientR5) SearchImplementationGuide(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ImplementationGuide], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImplementationGuide", parameters, options)
	if err != nil {
		return search.Result[r5.ImplementationGuide]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ImplementationGuide, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ImplementationGuide)
		if !ok {
			return search.Result[r5.ImplementationGuide]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ImplementationGuide]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateIngredient creates a new Ingredient resource.
func (c *ClientR5) CreateIngredient(ctx context.Context, resource r5.Ingredient) (r5.Ingredient, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Ingredient{}, err
	}
	typed, ok := result.(r5.Ingredient)
	if !ok {
		return r5.Ingredient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadIngredient retrieves a Ingredient resource by ID.
func (c *ClientR5) ReadIngredient(ctx context.Context, id string) (r5.Ingredient, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Ingredient", id)
	if err != nil {
		return r5.Ingredient{}, err
	}
	typed, ok := result.(r5.Ingredient)
	if !ok {
		return r5.Ingredient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateIngredient updates an existing Ingredient resource.
func (c *ClientR5) UpdateIngredient(ctx context.Context, resource r5.Ingredient) (update.Result[r5.Ingredient], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Ingredient]{}, err
	}
	typed, ok := result.Resource.(r5.Ingredient)
	if !ok {
		return update.Result[r5.Ingredient]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Ingredient]{Resource: typed, Created: result.Created}, nil
}

// DeleteIngredient deletes a Ingredient resource by ID.
func (c *ClientR5) DeleteIngredient(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Ingredient", id)
}

// SearchIngredient performs a search for Ingredient resources.
func (c *ClientR5) SearchIngredient(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Ingredient], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Ingredient", parameters, options)
	if err != nil {
		return search.Result[r5.Ingredient]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Ingredient, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Ingredient)
		if !ok {
			return search.Result[r5.Ingredient]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Ingredient]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInsurancePlan creates a new InsurancePlan resource.
func (c *ClientR5) CreateInsurancePlan(ctx context.Context, resource r5.InsurancePlan) (r5.InsurancePlan, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.InsurancePlan{}, err
	}
	typed, ok := result.(r5.InsurancePlan)
	if !ok {
		return r5.InsurancePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInsurancePlan retrieves a InsurancePlan resource by ID.
func (c *ClientR5) ReadInsurancePlan(ctx context.Context, id string) (r5.InsurancePlan, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r5.InsurancePlan{}, err
	}
	typed, ok := result.(r5.InsurancePlan)
	if !ok {
		return r5.InsurancePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInsurancePlan updates an existing InsurancePlan resource.
func (c *ClientR5) UpdateInsurancePlan(ctx context.Context, resource r5.InsurancePlan) (update.Result[r5.InsurancePlan], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.InsurancePlan]{}, err
	}
	typed, ok := result.Resource.(r5.InsurancePlan)
	if !ok {
		return update.Result[r5.InsurancePlan]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.InsurancePlan]{Resource: typed, Created: result.Created}, nil
}

// DeleteInsurancePlan deletes a InsurancePlan resource by ID.
func (c *ClientR5) DeleteInsurancePlan(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "InsurancePlan", id)
}

// SearchInsurancePlan performs a search for InsurancePlan resources.
func (c *ClientR5) SearchInsurancePlan(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.InsurancePlan], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "InsurancePlan", parameters, options)
	if err != nil {
		return search.Result[r5.InsurancePlan]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.InsurancePlan, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.InsurancePlan)
		if !ok {
			return search.Result[r5.InsurancePlan]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.InsurancePlan]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInventoryItem creates a new InventoryItem resource.
func (c *ClientR5) CreateInventoryItem(ctx context.Context, resource r5.InventoryItem) (r5.InventoryItem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.InventoryItem{}, err
	}
	typed, ok := result.(r5.InventoryItem)
	if !ok {
		return r5.InventoryItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInventoryItem retrieves a InventoryItem resource by ID.
func (c *ClientR5) ReadInventoryItem(ctx context.Context, id string) (r5.InventoryItem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "InventoryItem", id)
	if err != nil {
		return r5.InventoryItem{}, err
	}
	typed, ok := result.(r5.InventoryItem)
	if !ok {
		return r5.InventoryItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInventoryItem updates an existing InventoryItem resource.
func (c *ClientR5) UpdateInventoryItem(ctx context.Context, resource r5.InventoryItem) (update.Result[r5.InventoryItem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.InventoryItem]{}, err
	}
	typed, ok := result.Resource.(r5.InventoryItem)
	if !ok {
		return update.Result[r5.InventoryItem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.InventoryItem]{Resource: typed, Created: result.Created}, nil
}

// DeleteInventoryItem deletes a InventoryItem resource by ID.
func (c *ClientR5) DeleteInventoryItem(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "InventoryItem", id)
}

// SearchInventoryItem performs a search for InventoryItem resources.
func (c *ClientR5) SearchInventoryItem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.InventoryItem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "InventoryItem", parameters, options)
	if err != nil {
		return search.Result[r5.InventoryItem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.InventoryItem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.InventoryItem)
		if !ok {
			return search.Result[r5.InventoryItem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.InventoryItem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInventoryReport creates a new InventoryReport resource.
func (c *ClientR5) CreateInventoryReport(ctx context.Context, resource r5.InventoryReport) (r5.InventoryReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.InventoryReport{}, err
	}
	typed, ok := result.(r5.InventoryReport)
	if !ok {
		return r5.InventoryReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInventoryReport retrieves a InventoryReport resource by ID.
func (c *ClientR5) ReadInventoryReport(ctx context.Context, id string) (r5.InventoryReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "InventoryReport", id)
	if err != nil {
		return r5.InventoryReport{}, err
	}
	typed, ok := result.(r5.InventoryReport)
	if !ok {
		return r5.InventoryReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInventoryReport updates an existing InventoryReport resource.
func (c *ClientR5) UpdateInventoryReport(ctx context.Context, resource r5.InventoryReport) (update.Result[r5.InventoryReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.InventoryReport]{}, err
	}
	typed, ok := result.Resource.(r5.InventoryReport)
	if !ok {
		return update.Result[r5.InventoryReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.InventoryReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteInventoryReport deletes a InventoryReport resource by ID.
func (c *ClientR5) DeleteInventoryReport(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "InventoryReport", id)
}

// SearchInventoryReport performs a search for InventoryReport resources.
func (c *ClientR5) SearchInventoryReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.InventoryReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "InventoryReport", parameters, options)
	if err != nil {
		return search.Result[r5.InventoryReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.InventoryReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.InventoryReport)
		if !ok {
			return search.Result[r5.InventoryReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.InventoryReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInvoice creates a new Invoice resource.
func (c *ClientR5) CreateInvoice(ctx context.Context, resource r5.Invoice) (r5.Invoice, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Invoice{}, err
	}
	typed, ok := result.(r5.Invoice)
	if !ok {
		return r5.Invoice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInvoice retrieves a Invoice resource by ID.
func (c *ClientR5) ReadInvoice(ctx context.Context, id string) (r5.Invoice, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Invoice", id)
	if err != nil {
		return r5.Invoice{}, err
	}
	typed, ok := result.(r5.Invoice)
	if !ok {
		return r5.Invoice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInvoice updates an existing Invoice resource.
func (c *ClientR5) UpdateInvoice(ctx context.Context, resource r5.Invoice) (update.Result[r5.Invoice], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Invoice]{}, err
	}
	typed, ok := result.Resource.(r5.Invoice)
	if !ok {
		return update.Result[r5.Invoice]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Invoice]{Resource: typed, Created: result.Created}, nil
}

// DeleteInvoice deletes a Invoice resource by ID.
func (c *ClientR5) DeleteInvoice(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Invoice", id)
}

// SearchInvoice performs a search for Invoice resources.
func (c *ClientR5) SearchInvoice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Invoice], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Invoice", parameters, options)
	if err != nil {
		return search.Result[r5.Invoice]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Invoice, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Invoice)
		if !ok {
			return search.Result[r5.Invoice]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Invoice]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLibrary creates a new Library resource.
func (c *ClientR5) CreateLibrary(ctx context.Context, resource r5.Library) (r5.Library, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Library{}, err
	}
	typed, ok := result.(r5.Library)
	if !ok {
		return r5.Library{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLibrary retrieves a Library resource by ID.
func (c *ClientR5) ReadLibrary(ctx context.Context, id string) (r5.Library, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Library", id)
	if err != nil {
		return r5.Library{}, err
	}
	typed, ok := result.(r5.Library)
	if !ok {
		return r5.Library{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLibrary updates an existing Library resource.
func (c *ClientR5) UpdateLibrary(ctx context.Context, resource r5.Library) (update.Result[r5.Library], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Library]{}, err
	}
	typed, ok := result.Resource.(r5.Library)
	if !ok {
		return update.Result[r5.Library]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Library]{Resource: typed, Created: result.Created}, nil
}

// DeleteLibrary deletes a Library resource by ID.
func (c *ClientR5) DeleteLibrary(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Library", id)
}

// SearchLibrary performs a search for Library resources.
func (c *ClientR5) SearchLibrary(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Library], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Library", parameters, options)
	if err != nil {
		return search.Result[r5.Library]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Library, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Library)
		if !ok {
			return search.Result[r5.Library]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Library]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLinkage creates a new Linkage resource.
func (c *ClientR5) CreateLinkage(ctx context.Context, resource r5.Linkage) (r5.Linkage, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Linkage{}, err
	}
	typed, ok := result.(r5.Linkage)
	if !ok {
		return r5.Linkage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLinkage retrieves a Linkage resource by ID.
func (c *ClientR5) ReadLinkage(ctx context.Context, id string) (r5.Linkage, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Linkage", id)
	if err != nil {
		return r5.Linkage{}, err
	}
	typed, ok := result.(r5.Linkage)
	if !ok {
		return r5.Linkage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLinkage updates an existing Linkage resource.
func (c *ClientR5) UpdateLinkage(ctx context.Context, resource r5.Linkage) (update.Result[r5.Linkage], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Linkage]{}, err
	}
	typed, ok := result.Resource.(r5.Linkage)
	if !ok {
		return update.Result[r5.Linkage]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Linkage]{Resource: typed, Created: result.Created}, nil
}

// DeleteLinkage deletes a Linkage resource by ID.
func (c *ClientR5) DeleteLinkage(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Linkage", id)
}

// SearchLinkage performs a search for Linkage resources.
func (c *ClientR5) SearchLinkage(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Linkage], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Linkage", parameters, options)
	if err != nil {
		return search.Result[r5.Linkage]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Linkage, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Linkage)
		if !ok {
			return search.Result[r5.Linkage]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Linkage]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateList creates a new List resource.
func (c *ClientR5) CreateList(ctx context.Context, resource r5.List) (r5.List, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.List{}, err
	}
	typed, ok := result.(r5.List)
	if !ok {
		return r5.List{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadList retrieves a List resource by ID.
func (c *ClientR5) ReadList(ctx context.Context, id string) (r5.List, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "List", id)
	if err != nil {
		return r5.List{}, err
	}
	typed, ok := result.(r5.List)
	if !ok {
		return r5.List{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateList updates an existing List resource.
func (c *ClientR5) UpdateList(ctx context.Context, resource r5.List) (update.Result[r5.List], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.List]{}, err
	}
	typed, ok := result.Resource.(r5.List)
	if !ok {
		return update.Result[r5.List]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.List]{Resource: typed, Created: result.Created}, nil
}

// DeleteList deletes a List resource by ID.
func (c *ClientR5) DeleteList(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "List", id)
}

// SearchList performs a search for List resources.
func (c *ClientR5) SearchList(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.List], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "List", parameters, options)
	if err != nil {
		return search.Result[r5.List]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.List, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.List)
		if !ok {
			return search.Result[r5.List]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.List]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLocation creates a new Location resource.
func (c *ClientR5) CreateLocation(ctx context.Context, resource r5.Location) (r5.Location, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Location{}, err
	}
	typed, ok := result.(r5.Location)
	if !ok {
		return r5.Location{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLocation retrieves a Location resource by ID.
func (c *ClientR5) ReadLocation(ctx context.Context, id string) (r5.Location, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Location", id)
	if err != nil {
		return r5.Location{}, err
	}
	typed, ok := result.(r5.Location)
	if !ok {
		return r5.Location{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLocation updates an existing Location resource.
func (c *ClientR5) UpdateLocation(ctx context.Context, resource r5.Location) (update.Result[r5.Location], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Location]{}, err
	}
	typed, ok := result.Resource.(r5.Location)
	if !ok {
		return update.Result[r5.Location]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Location]{Resource: typed, Created: result.Created}, nil
}

// DeleteLocation deletes a Location resource by ID.
func (c *ClientR5) DeleteLocation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Location", id)
}

// SearchLocation performs a search for Location resources.
func (c *ClientR5) SearchLocation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Location], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Location", parameters, options)
	if err != nil {
		return search.Result[r5.Location]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Location, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Location)
		if !ok {
			return search.Result[r5.Location]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Location]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateManufacturedItemDefinition creates a new ManufacturedItemDefinition resource.
func (c *ClientR5) CreateManufacturedItemDefinition(ctx context.Context, resource r5.ManufacturedItemDefinition) (r5.ManufacturedItemDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ManufacturedItemDefinition{}, err
	}
	typed, ok := result.(r5.ManufacturedItemDefinition)
	if !ok {
		return r5.ManufacturedItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadManufacturedItemDefinition retrieves a ManufacturedItemDefinition resource by ID.
func (c *ClientR5) ReadManufacturedItemDefinition(ctx context.Context, id string) (r5.ManufacturedItemDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ManufacturedItemDefinition", id)
	if err != nil {
		return r5.ManufacturedItemDefinition{}, err
	}
	typed, ok := result.(r5.ManufacturedItemDefinition)
	if !ok {
		return r5.ManufacturedItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateManufacturedItemDefinition updates an existing ManufacturedItemDefinition resource.
func (c *ClientR5) UpdateManufacturedItemDefinition(ctx context.Context, resource r5.ManufacturedItemDefinition) (update.Result[r5.ManufacturedItemDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ManufacturedItemDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.ManufacturedItemDefinition)
	if !ok {
		return update.Result[r5.ManufacturedItemDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ManufacturedItemDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteManufacturedItemDefinition deletes a ManufacturedItemDefinition resource by ID.
func (c *ClientR5) DeleteManufacturedItemDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ManufacturedItemDefinition", id)
}

// SearchManufacturedItemDefinition performs a search for ManufacturedItemDefinition resources.
func (c *ClientR5) SearchManufacturedItemDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ManufacturedItemDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ManufacturedItemDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.ManufacturedItemDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ManufacturedItemDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ManufacturedItemDefinition)
		if !ok {
			return search.Result[r5.ManufacturedItemDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ManufacturedItemDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMeasure creates a new Measure resource.
func (c *ClientR5) CreateMeasure(ctx context.Context, resource r5.Measure) (r5.Measure, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Measure{}, err
	}
	typed, ok := result.(r5.Measure)
	if !ok {
		return r5.Measure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMeasure retrieves a Measure resource by ID.
func (c *ClientR5) ReadMeasure(ctx context.Context, id string) (r5.Measure, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Measure", id)
	if err != nil {
		return r5.Measure{}, err
	}
	typed, ok := result.(r5.Measure)
	if !ok {
		return r5.Measure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMeasure updates an existing Measure resource.
func (c *ClientR5) UpdateMeasure(ctx context.Context, resource r5.Measure) (update.Result[r5.Measure], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Measure]{}, err
	}
	typed, ok := result.Resource.(r5.Measure)
	if !ok {
		return update.Result[r5.Measure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Measure]{Resource: typed, Created: result.Created}, nil
}

// DeleteMeasure deletes a Measure resource by ID.
func (c *ClientR5) DeleteMeasure(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Measure", id)
}

// SearchMeasure performs a search for Measure resources.
func (c *ClientR5) SearchMeasure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Measure], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Measure", parameters, options)
	if err != nil {
		return search.Result[r5.Measure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Measure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Measure)
		if !ok {
			return search.Result[r5.Measure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Measure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMeasureReport creates a new MeasureReport resource.
func (c *ClientR5) CreateMeasureReport(ctx context.Context, resource r5.MeasureReport) (r5.MeasureReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MeasureReport{}, err
	}
	typed, ok := result.(r5.MeasureReport)
	if !ok {
		return r5.MeasureReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMeasureReport retrieves a MeasureReport resource by ID.
func (c *ClientR5) ReadMeasureReport(ctx context.Context, id string) (r5.MeasureReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r5.MeasureReport{}, err
	}
	typed, ok := result.(r5.MeasureReport)
	if !ok {
		return r5.MeasureReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMeasureReport updates an existing MeasureReport resource.
func (c *ClientR5) UpdateMeasureReport(ctx context.Context, resource r5.MeasureReport) (update.Result[r5.MeasureReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MeasureReport]{}, err
	}
	typed, ok := result.Resource.(r5.MeasureReport)
	if !ok {
		return update.Result[r5.MeasureReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MeasureReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteMeasureReport deletes a MeasureReport resource by ID.
func (c *ClientR5) DeleteMeasureReport(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MeasureReport", id)
}

// SearchMeasureReport performs a search for MeasureReport resources.
func (c *ClientR5) SearchMeasureReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MeasureReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MeasureReport", parameters, options)
	if err != nil {
		return search.Result[r5.MeasureReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MeasureReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MeasureReport)
		if !ok {
			return search.Result[r5.MeasureReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MeasureReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedication creates a new Medication resource.
func (c *ClientR5) CreateMedication(ctx context.Context, resource r5.Medication) (r5.Medication, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Medication{}, err
	}
	typed, ok := result.(r5.Medication)
	if !ok {
		return r5.Medication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedication retrieves a Medication resource by ID.
func (c *ClientR5) ReadMedication(ctx context.Context, id string) (r5.Medication, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Medication", id)
	if err != nil {
		return r5.Medication{}, err
	}
	typed, ok := result.(r5.Medication)
	if !ok {
		return r5.Medication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedication updates an existing Medication resource.
func (c *ClientR5) UpdateMedication(ctx context.Context, resource r5.Medication) (update.Result[r5.Medication], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Medication]{}, err
	}
	typed, ok := result.Resource.(r5.Medication)
	if !ok {
		return update.Result[r5.Medication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Medication]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedication deletes a Medication resource by ID.
func (c *ClientR5) DeleteMedication(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Medication", id)
}

// SearchMedication performs a search for Medication resources.
func (c *ClientR5) SearchMedication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Medication], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Medication", parameters, options)
	if err != nil {
		return search.Result[r5.Medication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Medication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Medication)
		if !ok {
			return search.Result[r5.Medication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Medication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationAdministration creates a new MedicationAdministration resource.
func (c *ClientR5) CreateMedicationAdministration(ctx context.Context, resource r5.MedicationAdministration) (r5.MedicationAdministration, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MedicationAdministration{}, err
	}
	typed, ok := result.(r5.MedicationAdministration)
	if !ok {
		return r5.MedicationAdministration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationAdministration retrieves a MedicationAdministration resource by ID.
func (c *ClientR5) ReadMedicationAdministration(ctx context.Context, id string) (r5.MedicationAdministration, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r5.MedicationAdministration{}, err
	}
	typed, ok := result.(r5.MedicationAdministration)
	if !ok {
		return r5.MedicationAdministration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationAdministration updates an existing MedicationAdministration resource.
func (c *ClientR5) UpdateMedicationAdministration(ctx context.Context, resource r5.MedicationAdministration) (update.Result[r5.MedicationAdministration], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MedicationAdministration]{}, err
	}
	typed, ok := result.Resource.(r5.MedicationAdministration)
	if !ok {
		return update.Result[r5.MedicationAdministration]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MedicationAdministration]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationAdministration deletes a MedicationAdministration resource by ID.
func (c *ClientR5) DeleteMedicationAdministration(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationAdministration", id)
}

// SearchMedicationAdministration performs a search for MedicationAdministration resources.
func (c *ClientR5) SearchMedicationAdministration(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MedicationAdministration], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationAdministration", parameters, options)
	if err != nil {
		return search.Result[r5.MedicationAdministration]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MedicationAdministration, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MedicationAdministration)
		if !ok {
			return search.Result[r5.MedicationAdministration]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MedicationAdministration]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationDispense creates a new MedicationDispense resource.
func (c *ClientR5) CreateMedicationDispense(ctx context.Context, resource r5.MedicationDispense) (r5.MedicationDispense, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MedicationDispense{}, err
	}
	typed, ok := result.(r5.MedicationDispense)
	if !ok {
		return r5.MedicationDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationDispense retrieves a MedicationDispense resource by ID.
func (c *ClientR5) ReadMedicationDispense(ctx context.Context, id string) (r5.MedicationDispense, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r5.MedicationDispense{}, err
	}
	typed, ok := result.(r5.MedicationDispense)
	if !ok {
		return r5.MedicationDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationDispense updates an existing MedicationDispense resource.
func (c *ClientR5) UpdateMedicationDispense(ctx context.Context, resource r5.MedicationDispense) (update.Result[r5.MedicationDispense], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MedicationDispense]{}, err
	}
	typed, ok := result.Resource.(r5.MedicationDispense)
	if !ok {
		return update.Result[r5.MedicationDispense]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MedicationDispense]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationDispense deletes a MedicationDispense resource by ID.
func (c *ClientR5) DeleteMedicationDispense(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationDispense", id)
}

// SearchMedicationDispense performs a search for MedicationDispense resources.
func (c *ClientR5) SearchMedicationDispense(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MedicationDispense], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationDispense", parameters, options)
	if err != nil {
		return search.Result[r5.MedicationDispense]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MedicationDispense, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MedicationDispense)
		if !ok {
			return search.Result[r5.MedicationDispense]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MedicationDispense]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationKnowledge creates a new MedicationKnowledge resource.
func (c *ClientR5) CreateMedicationKnowledge(ctx context.Context, resource r5.MedicationKnowledge) (r5.MedicationKnowledge, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MedicationKnowledge{}, err
	}
	typed, ok := result.(r5.MedicationKnowledge)
	if !ok {
		return r5.MedicationKnowledge{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationKnowledge retrieves a MedicationKnowledge resource by ID.
func (c *ClientR5) ReadMedicationKnowledge(ctx context.Context, id string) (r5.MedicationKnowledge, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r5.MedicationKnowledge{}, err
	}
	typed, ok := result.(r5.MedicationKnowledge)
	if !ok {
		return r5.MedicationKnowledge{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationKnowledge updates an existing MedicationKnowledge resource.
func (c *ClientR5) UpdateMedicationKnowledge(ctx context.Context, resource r5.MedicationKnowledge) (update.Result[r5.MedicationKnowledge], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MedicationKnowledge]{}, err
	}
	typed, ok := result.Resource.(r5.MedicationKnowledge)
	if !ok {
		return update.Result[r5.MedicationKnowledge]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MedicationKnowledge]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationKnowledge deletes a MedicationKnowledge resource by ID.
func (c *ClientR5) DeleteMedicationKnowledge(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationKnowledge", id)
}

// SearchMedicationKnowledge performs a search for MedicationKnowledge resources.
func (c *ClientR5) SearchMedicationKnowledge(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MedicationKnowledge], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationKnowledge", parameters, options)
	if err != nil {
		return search.Result[r5.MedicationKnowledge]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MedicationKnowledge, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MedicationKnowledge)
		if !ok {
			return search.Result[r5.MedicationKnowledge]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MedicationKnowledge]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationRequest creates a new MedicationRequest resource.
func (c *ClientR5) CreateMedicationRequest(ctx context.Context, resource r5.MedicationRequest) (r5.MedicationRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MedicationRequest{}, err
	}
	typed, ok := result.(r5.MedicationRequest)
	if !ok {
		return r5.MedicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationRequest retrieves a MedicationRequest resource by ID.
func (c *ClientR5) ReadMedicationRequest(ctx context.Context, id string) (r5.MedicationRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r5.MedicationRequest{}, err
	}
	typed, ok := result.(r5.MedicationRequest)
	if !ok {
		return r5.MedicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationRequest updates an existing MedicationRequest resource.
func (c *ClientR5) UpdateMedicationRequest(ctx context.Context, resource r5.MedicationRequest) (update.Result[r5.MedicationRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MedicationRequest]{}, err
	}
	typed, ok := result.Resource.(r5.MedicationRequest)
	if !ok {
		return update.Result[r5.MedicationRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MedicationRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationRequest deletes a MedicationRequest resource by ID.
func (c *ClientR5) DeleteMedicationRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationRequest", id)
}

// SearchMedicationRequest performs a search for MedicationRequest resources.
func (c *ClientR5) SearchMedicationRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MedicationRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationRequest", parameters, options)
	if err != nil {
		return search.Result[r5.MedicationRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MedicationRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MedicationRequest)
		if !ok {
			return search.Result[r5.MedicationRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MedicationRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationStatement creates a new MedicationStatement resource.
func (c *ClientR5) CreateMedicationStatement(ctx context.Context, resource r5.MedicationStatement) (r5.MedicationStatement, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MedicationStatement{}, err
	}
	typed, ok := result.(r5.MedicationStatement)
	if !ok {
		return r5.MedicationStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationStatement retrieves a MedicationStatement resource by ID.
func (c *ClientR5) ReadMedicationStatement(ctx context.Context, id string) (r5.MedicationStatement, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r5.MedicationStatement{}, err
	}
	typed, ok := result.(r5.MedicationStatement)
	if !ok {
		return r5.MedicationStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationStatement updates an existing MedicationStatement resource.
func (c *ClientR5) UpdateMedicationStatement(ctx context.Context, resource r5.MedicationStatement) (update.Result[r5.MedicationStatement], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MedicationStatement]{}, err
	}
	typed, ok := result.Resource.(r5.MedicationStatement)
	if !ok {
		return update.Result[r5.MedicationStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MedicationStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationStatement deletes a MedicationStatement resource by ID.
func (c *ClientR5) DeleteMedicationStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationStatement", id)
}

// SearchMedicationStatement performs a search for MedicationStatement resources.
func (c *ClientR5) SearchMedicationStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MedicationStatement], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationStatement", parameters, options)
	if err != nil {
		return search.Result[r5.MedicationStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MedicationStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MedicationStatement)
		if !ok {
			return search.Result[r5.MedicationStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MedicationStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductDefinition creates a new MedicinalProductDefinition resource.
func (c *ClientR5) CreateMedicinalProductDefinition(ctx context.Context, resource r5.MedicinalProductDefinition) (r5.MedicinalProductDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MedicinalProductDefinition{}, err
	}
	typed, ok := result.(r5.MedicinalProductDefinition)
	if !ok {
		return r5.MedicinalProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductDefinition retrieves a MedicinalProductDefinition resource by ID.
func (c *ClientR5) ReadMedicinalProductDefinition(ctx context.Context, id string) (r5.MedicinalProductDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductDefinition", id)
	if err != nil {
		return r5.MedicinalProductDefinition{}, err
	}
	typed, ok := result.(r5.MedicinalProductDefinition)
	if !ok {
		return r5.MedicinalProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductDefinition updates an existing MedicinalProductDefinition resource.
func (c *ClientR5) UpdateMedicinalProductDefinition(ctx context.Context, resource r5.MedicinalProductDefinition) (update.Result[r5.MedicinalProductDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MedicinalProductDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.MedicinalProductDefinition)
	if !ok {
		return update.Result[r5.MedicinalProductDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MedicinalProductDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductDefinition deletes a MedicinalProductDefinition resource by ID.
func (c *ClientR5) DeleteMedicinalProductDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductDefinition", id)
}

// SearchMedicinalProductDefinition performs a search for MedicinalProductDefinition resources.
func (c *ClientR5) SearchMedicinalProductDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MedicinalProductDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.MedicinalProductDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MedicinalProductDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MedicinalProductDefinition)
		if !ok {
			return search.Result[r5.MedicinalProductDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MedicinalProductDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMessageDefinition creates a new MessageDefinition resource.
func (c *ClientR5) CreateMessageDefinition(ctx context.Context, resource r5.MessageDefinition) (r5.MessageDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MessageDefinition{}, err
	}
	typed, ok := result.(r5.MessageDefinition)
	if !ok {
		return r5.MessageDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMessageDefinition retrieves a MessageDefinition resource by ID.
func (c *ClientR5) ReadMessageDefinition(ctx context.Context, id string) (r5.MessageDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r5.MessageDefinition{}, err
	}
	typed, ok := result.(r5.MessageDefinition)
	if !ok {
		return r5.MessageDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMessageDefinition updates an existing MessageDefinition resource.
func (c *ClientR5) UpdateMessageDefinition(ctx context.Context, resource r5.MessageDefinition) (update.Result[r5.MessageDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MessageDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.MessageDefinition)
	if !ok {
		return update.Result[r5.MessageDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MessageDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteMessageDefinition deletes a MessageDefinition resource by ID.
func (c *ClientR5) DeleteMessageDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MessageDefinition", id)
}

// SearchMessageDefinition performs a search for MessageDefinition resources.
func (c *ClientR5) SearchMessageDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MessageDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MessageDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.MessageDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MessageDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MessageDefinition)
		if !ok {
			return search.Result[r5.MessageDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MessageDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMessageHeader creates a new MessageHeader resource.
func (c *ClientR5) CreateMessageHeader(ctx context.Context, resource r5.MessageHeader) (r5.MessageHeader, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MessageHeader{}, err
	}
	typed, ok := result.(r5.MessageHeader)
	if !ok {
		return r5.MessageHeader{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMessageHeader retrieves a MessageHeader resource by ID.
func (c *ClientR5) ReadMessageHeader(ctx context.Context, id string) (r5.MessageHeader, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r5.MessageHeader{}, err
	}
	typed, ok := result.(r5.MessageHeader)
	if !ok {
		return r5.MessageHeader{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMessageHeader updates an existing MessageHeader resource.
func (c *ClientR5) UpdateMessageHeader(ctx context.Context, resource r5.MessageHeader) (update.Result[r5.MessageHeader], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MessageHeader]{}, err
	}
	typed, ok := result.Resource.(r5.MessageHeader)
	if !ok {
		return update.Result[r5.MessageHeader]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MessageHeader]{Resource: typed, Created: result.Created}, nil
}

// DeleteMessageHeader deletes a MessageHeader resource by ID.
func (c *ClientR5) DeleteMessageHeader(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MessageHeader", id)
}

// SearchMessageHeader performs a search for MessageHeader resources.
func (c *ClientR5) SearchMessageHeader(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MessageHeader], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MessageHeader", parameters, options)
	if err != nil {
		return search.Result[r5.MessageHeader]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MessageHeader, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MessageHeader)
		if !ok {
			return search.Result[r5.MessageHeader]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MessageHeader]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMolecularSequence creates a new MolecularSequence resource.
func (c *ClientR5) CreateMolecularSequence(ctx context.Context, resource r5.MolecularSequence) (r5.MolecularSequence, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.MolecularSequence{}, err
	}
	typed, ok := result.(r5.MolecularSequence)
	if !ok {
		return r5.MolecularSequence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMolecularSequence retrieves a MolecularSequence resource by ID.
func (c *ClientR5) ReadMolecularSequence(ctx context.Context, id string) (r5.MolecularSequence, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r5.MolecularSequence{}, err
	}
	typed, ok := result.(r5.MolecularSequence)
	if !ok {
		return r5.MolecularSequence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMolecularSequence updates an existing MolecularSequence resource.
func (c *ClientR5) UpdateMolecularSequence(ctx context.Context, resource r5.MolecularSequence) (update.Result[r5.MolecularSequence], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.MolecularSequence]{}, err
	}
	typed, ok := result.Resource.(r5.MolecularSequence)
	if !ok {
		return update.Result[r5.MolecularSequence]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.MolecularSequence]{Resource: typed, Created: result.Created}, nil
}

// DeleteMolecularSequence deletes a MolecularSequence resource by ID.
func (c *ClientR5) DeleteMolecularSequence(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MolecularSequence", id)
}

// SearchMolecularSequence performs a search for MolecularSequence resources.
func (c *ClientR5) SearchMolecularSequence(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.MolecularSequence], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MolecularSequence", parameters, options)
	if err != nil {
		return search.Result[r5.MolecularSequence]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.MolecularSequence, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.MolecularSequence)
		if !ok {
			return search.Result[r5.MolecularSequence]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.MolecularSequence]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNamingSystem creates a new NamingSystem resource.
func (c *ClientR5) CreateNamingSystem(ctx context.Context, resource r5.NamingSystem) (r5.NamingSystem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.NamingSystem{}, err
	}
	typed, ok := result.(r5.NamingSystem)
	if !ok {
		return r5.NamingSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNamingSystem retrieves a NamingSystem resource by ID.
func (c *ClientR5) ReadNamingSystem(ctx context.Context, id string) (r5.NamingSystem, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r5.NamingSystem{}, err
	}
	typed, ok := result.(r5.NamingSystem)
	if !ok {
		return r5.NamingSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNamingSystem updates an existing NamingSystem resource.
func (c *ClientR5) UpdateNamingSystem(ctx context.Context, resource r5.NamingSystem) (update.Result[r5.NamingSystem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.NamingSystem]{}, err
	}
	typed, ok := result.Resource.(r5.NamingSystem)
	if !ok {
		return update.Result[r5.NamingSystem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.NamingSystem]{Resource: typed, Created: result.Created}, nil
}

// DeleteNamingSystem deletes a NamingSystem resource by ID.
func (c *ClientR5) DeleteNamingSystem(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "NamingSystem", id)
}

// SearchNamingSystem performs a search for NamingSystem resources.
func (c *ClientR5) SearchNamingSystem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.NamingSystem], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "NamingSystem", parameters, options)
	if err != nil {
		return search.Result[r5.NamingSystem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.NamingSystem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.NamingSystem)
		if !ok {
			return search.Result[r5.NamingSystem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.NamingSystem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNutritionIntake creates a new NutritionIntake resource.
func (c *ClientR5) CreateNutritionIntake(ctx context.Context, resource r5.NutritionIntake) (r5.NutritionIntake, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.NutritionIntake{}, err
	}
	typed, ok := result.(r5.NutritionIntake)
	if !ok {
		return r5.NutritionIntake{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNutritionIntake retrieves a NutritionIntake resource by ID.
func (c *ClientR5) ReadNutritionIntake(ctx context.Context, id string) (r5.NutritionIntake, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "NutritionIntake", id)
	if err != nil {
		return r5.NutritionIntake{}, err
	}
	typed, ok := result.(r5.NutritionIntake)
	if !ok {
		return r5.NutritionIntake{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNutritionIntake updates an existing NutritionIntake resource.
func (c *ClientR5) UpdateNutritionIntake(ctx context.Context, resource r5.NutritionIntake) (update.Result[r5.NutritionIntake], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.NutritionIntake]{}, err
	}
	typed, ok := result.Resource.(r5.NutritionIntake)
	if !ok {
		return update.Result[r5.NutritionIntake]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.NutritionIntake]{Resource: typed, Created: result.Created}, nil
}

// DeleteNutritionIntake deletes a NutritionIntake resource by ID.
func (c *ClientR5) DeleteNutritionIntake(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "NutritionIntake", id)
}

// SearchNutritionIntake performs a search for NutritionIntake resources.
func (c *ClientR5) SearchNutritionIntake(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.NutritionIntake], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "NutritionIntake", parameters, options)
	if err != nil {
		return search.Result[r5.NutritionIntake]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.NutritionIntake, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.NutritionIntake)
		if !ok {
			return search.Result[r5.NutritionIntake]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.NutritionIntake]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNutritionOrder creates a new NutritionOrder resource.
func (c *ClientR5) CreateNutritionOrder(ctx context.Context, resource r5.NutritionOrder) (r5.NutritionOrder, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.NutritionOrder{}, err
	}
	typed, ok := result.(r5.NutritionOrder)
	if !ok {
		return r5.NutritionOrder{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNutritionOrder retrieves a NutritionOrder resource by ID.
func (c *ClientR5) ReadNutritionOrder(ctx context.Context, id string) (r5.NutritionOrder, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r5.NutritionOrder{}, err
	}
	typed, ok := result.(r5.NutritionOrder)
	if !ok {
		return r5.NutritionOrder{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNutritionOrder updates an existing NutritionOrder resource.
func (c *ClientR5) UpdateNutritionOrder(ctx context.Context, resource r5.NutritionOrder) (update.Result[r5.NutritionOrder], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.NutritionOrder]{}, err
	}
	typed, ok := result.Resource.(r5.NutritionOrder)
	if !ok {
		return update.Result[r5.NutritionOrder]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.NutritionOrder]{Resource: typed, Created: result.Created}, nil
}

// DeleteNutritionOrder deletes a NutritionOrder resource by ID.
func (c *ClientR5) DeleteNutritionOrder(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "NutritionOrder", id)
}

// SearchNutritionOrder performs a search for NutritionOrder resources.
func (c *ClientR5) SearchNutritionOrder(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.NutritionOrder], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "NutritionOrder", parameters, options)
	if err != nil {
		return search.Result[r5.NutritionOrder]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.NutritionOrder, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.NutritionOrder)
		if !ok {
			return search.Result[r5.NutritionOrder]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.NutritionOrder]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNutritionProduct creates a new NutritionProduct resource.
func (c *ClientR5) CreateNutritionProduct(ctx context.Context, resource r5.NutritionProduct) (r5.NutritionProduct, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.NutritionProduct{}, err
	}
	typed, ok := result.(r5.NutritionProduct)
	if !ok {
		return r5.NutritionProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNutritionProduct retrieves a NutritionProduct resource by ID.
func (c *ClientR5) ReadNutritionProduct(ctx context.Context, id string) (r5.NutritionProduct, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "NutritionProduct", id)
	if err != nil {
		return r5.NutritionProduct{}, err
	}
	typed, ok := result.(r5.NutritionProduct)
	if !ok {
		return r5.NutritionProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNutritionProduct updates an existing NutritionProduct resource.
func (c *ClientR5) UpdateNutritionProduct(ctx context.Context, resource r5.NutritionProduct) (update.Result[r5.NutritionProduct], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.NutritionProduct]{}, err
	}
	typed, ok := result.Resource.(r5.NutritionProduct)
	if !ok {
		return update.Result[r5.NutritionProduct]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.NutritionProduct]{Resource: typed, Created: result.Created}, nil
}

// DeleteNutritionProduct deletes a NutritionProduct resource by ID.
func (c *ClientR5) DeleteNutritionProduct(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "NutritionProduct", id)
}

// SearchNutritionProduct performs a search for NutritionProduct resources.
func (c *ClientR5) SearchNutritionProduct(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.NutritionProduct], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "NutritionProduct", parameters, options)
	if err != nil {
		return search.Result[r5.NutritionProduct]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.NutritionProduct, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.NutritionProduct)
		if !ok {
			return search.Result[r5.NutritionProduct]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.NutritionProduct]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateObservation creates a new Observation resource.
func (c *ClientR5) CreateObservation(ctx context.Context, resource r5.Observation) (r5.Observation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Observation{}, err
	}
	typed, ok := result.(r5.Observation)
	if !ok {
		return r5.Observation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadObservation retrieves a Observation resource by ID.
func (c *ClientR5) ReadObservation(ctx context.Context, id string) (r5.Observation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Observation", id)
	if err != nil {
		return r5.Observation{}, err
	}
	typed, ok := result.(r5.Observation)
	if !ok {
		return r5.Observation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateObservation updates an existing Observation resource.
func (c *ClientR5) UpdateObservation(ctx context.Context, resource r5.Observation) (update.Result[r5.Observation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Observation]{}, err
	}
	typed, ok := result.Resource.(r5.Observation)
	if !ok {
		return update.Result[r5.Observation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Observation]{Resource: typed, Created: result.Created}, nil
}

// DeleteObservation deletes a Observation resource by ID.
func (c *ClientR5) DeleteObservation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Observation", id)
}

// SearchObservation performs a search for Observation resources.
func (c *ClientR5) SearchObservation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Observation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Observation", parameters, options)
	if err != nil {
		return search.Result[r5.Observation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Observation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Observation)
		if !ok {
			return search.Result[r5.Observation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Observation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateObservationDefinition creates a new ObservationDefinition resource.
func (c *ClientR5) CreateObservationDefinition(ctx context.Context, resource r5.ObservationDefinition) (r5.ObservationDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ObservationDefinition{}, err
	}
	typed, ok := result.(r5.ObservationDefinition)
	if !ok {
		return r5.ObservationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadObservationDefinition retrieves a ObservationDefinition resource by ID.
func (c *ClientR5) ReadObservationDefinition(ctx context.Context, id string) (r5.ObservationDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r5.ObservationDefinition{}, err
	}
	typed, ok := result.(r5.ObservationDefinition)
	if !ok {
		return r5.ObservationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateObservationDefinition updates an existing ObservationDefinition resource.
func (c *ClientR5) UpdateObservationDefinition(ctx context.Context, resource r5.ObservationDefinition) (update.Result[r5.ObservationDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ObservationDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.ObservationDefinition)
	if !ok {
		return update.Result[r5.ObservationDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ObservationDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteObservationDefinition deletes a ObservationDefinition resource by ID.
func (c *ClientR5) DeleteObservationDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ObservationDefinition", id)
}

// SearchObservationDefinition performs a search for ObservationDefinition resources.
func (c *ClientR5) SearchObservationDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ObservationDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ObservationDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.ObservationDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ObservationDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ObservationDefinition)
		if !ok {
			return search.Result[r5.ObservationDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ObservationDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOperationDefinition creates a new OperationDefinition resource.
func (c *ClientR5) CreateOperationDefinition(ctx context.Context, resource r5.OperationDefinition) (r5.OperationDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.OperationDefinition{}, err
	}
	typed, ok := result.(r5.OperationDefinition)
	if !ok {
		return r5.OperationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOperationDefinition retrieves a OperationDefinition resource by ID.
func (c *ClientR5) ReadOperationDefinition(ctx context.Context, id string) (r5.OperationDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r5.OperationDefinition{}, err
	}
	typed, ok := result.(r5.OperationDefinition)
	if !ok {
		return r5.OperationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOperationDefinition updates an existing OperationDefinition resource.
func (c *ClientR5) UpdateOperationDefinition(ctx context.Context, resource r5.OperationDefinition) (update.Result[r5.OperationDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.OperationDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.OperationDefinition)
	if !ok {
		return update.Result[r5.OperationDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.OperationDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteOperationDefinition deletes a OperationDefinition resource by ID.
func (c *ClientR5) DeleteOperationDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "OperationDefinition", id)
}

// SearchOperationDefinition performs a search for OperationDefinition resources.
func (c *ClientR5) SearchOperationDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.OperationDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "OperationDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.OperationDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.OperationDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.OperationDefinition)
		if !ok {
			return search.Result[r5.OperationDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.OperationDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOperationOutcome creates a new OperationOutcome resource.
func (c *ClientR5) CreateOperationOutcome(ctx context.Context, resource r5.OperationOutcome) (r5.OperationOutcome, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.OperationOutcome{}, err
	}
	typed, ok := result.(r5.OperationOutcome)
	if !ok {
		return r5.OperationOutcome{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOperationOutcome retrieves a OperationOutcome resource by ID.
func (c *ClientR5) ReadOperationOutcome(ctx context.Context, id string) (r5.OperationOutcome, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r5.OperationOutcome{}, err
	}
	typed, ok := result.(r5.OperationOutcome)
	if !ok {
		return r5.OperationOutcome{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOperationOutcome updates an existing OperationOutcome resource.
func (c *ClientR5) UpdateOperationOutcome(ctx context.Context, resource r5.OperationOutcome) (update.Result[r5.OperationOutcome], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.OperationOutcome]{}, err
	}
	typed, ok := result.Resource.(r5.OperationOutcome)
	if !ok {
		return update.Result[r5.OperationOutcome]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.OperationOutcome]{Resource: typed, Created: result.Created}, nil
}

// DeleteOperationOutcome deletes a OperationOutcome resource by ID.
func (c *ClientR5) DeleteOperationOutcome(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "OperationOutcome", id)
}

// SearchOperationOutcome performs a search for OperationOutcome resources.
func (c *ClientR5) SearchOperationOutcome(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.OperationOutcome], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "OperationOutcome", parameters, options)
	if err != nil {
		return search.Result[r5.OperationOutcome]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.OperationOutcome, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.OperationOutcome)
		if !ok {
			return search.Result[r5.OperationOutcome]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.OperationOutcome]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOrganization creates a new Organization resource.
func (c *ClientR5) CreateOrganization(ctx context.Context, resource r5.Organization) (r5.Organization, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Organization{}, err
	}
	typed, ok := result.(r5.Organization)
	if !ok {
		return r5.Organization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOrganization retrieves a Organization resource by ID.
func (c *ClientR5) ReadOrganization(ctx context.Context, id string) (r5.Organization, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Organization", id)
	if err != nil {
		return r5.Organization{}, err
	}
	typed, ok := result.(r5.Organization)
	if !ok {
		return r5.Organization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOrganization updates an existing Organization resource.
func (c *ClientR5) UpdateOrganization(ctx context.Context, resource r5.Organization) (update.Result[r5.Organization], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Organization]{}, err
	}
	typed, ok := result.Resource.(r5.Organization)
	if !ok {
		return update.Result[r5.Organization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Organization]{Resource: typed, Created: result.Created}, nil
}

// DeleteOrganization deletes a Organization resource by ID.
func (c *ClientR5) DeleteOrganization(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Organization", id)
}

// SearchOrganization performs a search for Organization resources.
func (c *ClientR5) SearchOrganization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Organization], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Organization", parameters, options)
	if err != nil {
		return search.Result[r5.Organization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Organization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Organization)
		if !ok {
			return search.Result[r5.Organization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Organization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOrganizationAffiliation creates a new OrganizationAffiliation resource.
func (c *ClientR5) CreateOrganizationAffiliation(ctx context.Context, resource r5.OrganizationAffiliation) (r5.OrganizationAffiliation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.OrganizationAffiliation{}, err
	}
	typed, ok := result.(r5.OrganizationAffiliation)
	if !ok {
		return r5.OrganizationAffiliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOrganizationAffiliation retrieves a OrganizationAffiliation resource by ID.
func (c *ClientR5) ReadOrganizationAffiliation(ctx context.Context, id string) (r5.OrganizationAffiliation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r5.OrganizationAffiliation{}, err
	}
	typed, ok := result.(r5.OrganizationAffiliation)
	if !ok {
		return r5.OrganizationAffiliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOrganizationAffiliation updates an existing OrganizationAffiliation resource.
func (c *ClientR5) UpdateOrganizationAffiliation(ctx context.Context, resource r5.OrganizationAffiliation) (update.Result[r5.OrganizationAffiliation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.OrganizationAffiliation]{}, err
	}
	typed, ok := result.Resource.(r5.OrganizationAffiliation)
	if !ok {
		return update.Result[r5.OrganizationAffiliation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.OrganizationAffiliation]{Resource: typed, Created: result.Created}, nil
}

// DeleteOrganizationAffiliation deletes a OrganizationAffiliation resource by ID.
func (c *ClientR5) DeleteOrganizationAffiliation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "OrganizationAffiliation", id)
}

// SearchOrganizationAffiliation performs a search for OrganizationAffiliation resources.
func (c *ClientR5) SearchOrganizationAffiliation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.OrganizationAffiliation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "OrganizationAffiliation", parameters, options)
	if err != nil {
		return search.Result[r5.OrganizationAffiliation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.OrganizationAffiliation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.OrganizationAffiliation)
		if !ok {
			return search.Result[r5.OrganizationAffiliation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.OrganizationAffiliation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePackagedProductDefinition creates a new PackagedProductDefinition resource.
func (c *ClientR5) CreatePackagedProductDefinition(ctx context.Context, resource r5.PackagedProductDefinition) (r5.PackagedProductDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.PackagedProductDefinition{}, err
	}
	typed, ok := result.(r5.PackagedProductDefinition)
	if !ok {
		return r5.PackagedProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPackagedProductDefinition retrieves a PackagedProductDefinition resource by ID.
func (c *ClientR5) ReadPackagedProductDefinition(ctx context.Context, id string) (r5.PackagedProductDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PackagedProductDefinition", id)
	if err != nil {
		return r5.PackagedProductDefinition{}, err
	}
	typed, ok := result.(r5.PackagedProductDefinition)
	if !ok {
		return r5.PackagedProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePackagedProductDefinition updates an existing PackagedProductDefinition resource.
func (c *ClientR5) UpdatePackagedProductDefinition(ctx context.Context, resource r5.PackagedProductDefinition) (update.Result[r5.PackagedProductDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.PackagedProductDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.PackagedProductDefinition)
	if !ok {
		return update.Result[r5.PackagedProductDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.PackagedProductDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeletePackagedProductDefinition deletes a PackagedProductDefinition resource by ID.
func (c *ClientR5) DeletePackagedProductDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PackagedProductDefinition", id)
}

// SearchPackagedProductDefinition performs a search for PackagedProductDefinition resources.
func (c *ClientR5) SearchPackagedProductDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.PackagedProductDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PackagedProductDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.PackagedProductDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.PackagedProductDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.PackagedProductDefinition)
		if !ok {
			return search.Result[r5.PackagedProductDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.PackagedProductDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateParameters creates a new Parameters resource.
func (c *ClientR5) CreateParameters(ctx context.Context, resource r5.Parameters) (r5.Parameters, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Parameters{}, err
	}
	typed, ok := result.(r5.Parameters)
	if !ok {
		return r5.Parameters{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadParameters retrieves a Parameters resource by ID.
func (c *ClientR5) ReadParameters(ctx context.Context, id string) (r5.Parameters, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Parameters", id)
	if err != nil {
		return r5.Parameters{}, err
	}
	typed, ok := result.(r5.Parameters)
	if !ok {
		return r5.Parameters{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateParameters updates an existing Parameters resource.
func (c *ClientR5) UpdateParameters(ctx context.Context, resource r5.Parameters) (update.Result[r5.Parameters], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Parameters]{}, err
	}
	typed, ok := result.Resource.(r5.Parameters)
	if !ok {
		return update.Result[r5.Parameters]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Parameters]{Resource: typed, Created: result.Created}, nil
}

// DeleteParameters deletes a Parameters resource by ID.
func (c *ClientR5) DeleteParameters(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Parameters", id)
}

// SearchParameters performs a search for Parameters resources.
func (c *ClientR5) SearchParameters(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Parameters], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Parameters", parameters, options)
	if err != nil {
		return search.Result[r5.Parameters]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Parameters, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Parameters)
		if !ok {
			return search.Result[r5.Parameters]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Parameters]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePatient creates a new Patient resource.
func (c *ClientR5) CreatePatient(ctx context.Context, resource r5.Patient) (r5.Patient, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Patient{}, err
	}
	typed, ok := result.(r5.Patient)
	if !ok {
		return r5.Patient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPatient retrieves a Patient resource by ID.
func (c *ClientR5) ReadPatient(ctx context.Context, id string) (r5.Patient, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Patient", id)
	if err != nil {
		return r5.Patient{}, err
	}
	typed, ok := result.(r5.Patient)
	if !ok {
		return r5.Patient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePatient updates an existing Patient resource.
func (c *ClientR5) UpdatePatient(ctx context.Context, resource r5.Patient) (update.Result[r5.Patient], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Patient]{}, err
	}
	typed, ok := result.Resource.(r5.Patient)
	if !ok {
		return update.Result[r5.Patient]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Patient]{Resource: typed, Created: result.Created}, nil
}

// DeletePatient deletes a Patient resource by ID.
func (c *ClientR5) DeletePatient(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Patient", id)
}

// SearchPatient performs a search for Patient resources.
func (c *ClientR5) SearchPatient(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Patient], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Patient", parameters, options)
	if err != nil {
		return search.Result[r5.Patient]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Patient, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Patient)
		if !ok {
			return search.Result[r5.Patient]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Patient]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePaymentNotice creates a new PaymentNotice resource.
func (c *ClientR5) CreatePaymentNotice(ctx context.Context, resource r5.PaymentNotice) (r5.PaymentNotice, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.PaymentNotice{}, err
	}
	typed, ok := result.(r5.PaymentNotice)
	if !ok {
		return r5.PaymentNotice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPaymentNotice retrieves a PaymentNotice resource by ID.
func (c *ClientR5) ReadPaymentNotice(ctx context.Context, id string) (r5.PaymentNotice, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r5.PaymentNotice{}, err
	}
	typed, ok := result.(r5.PaymentNotice)
	if !ok {
		return r5.PaymentNotice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePaymentNotice updates an existing PaymentNotice resource.
func (c *ClientR5) UpdatePaymentNotice(ctx context.Context, resource r5.PaymentNotice) (update.Result[r5.PaymentNotice], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.PaymentNotice]{}, err
	}
	typed, ok := result.Resource.(r5.PaymentNotice)
	if !ok {
		return update.Result[r5.PaymentNotice]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.PaymentNotice]{Resource: typed, Created: result.Created}, nil
}

// DeletePaymentNotice deletes a PaymentNotice resource by ID.
func (c *ClientR5) DeletePaymentNotice(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PaymentNotice", id)
}

// SearchPaymentNotice performs a search for PaymentNotice resources.
func (c *ClientR5) SearchPaymentNotice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.PaymentNotice], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PaymentNotice", parameters, options)
	if err != nil {
		return search.Result[r5.PaymentNotice]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.PaymentNotice, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.PaymentNotice)
		if !ok {
			return search.Result[r5.PaymentNotice]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.PaymentNotice]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePaymentReconciliation creates a new PaymentReconciliation resource.
func (c *ClientR5) CreatePaymentReconciliation(ctx context.Context, resource r5.PaymentReconciliation) (r5.PaymentReconciliation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.PaymentReconciliation{}, err
	}
	typed, ok := result.(r5.PaymentReconciliation)
	if !ok {
		return r5.PaymentReconciliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPaymentReconciliation retrieves a PaymentReconciliation resource by ID.
func (c *ClientR5) ReadPaymentReconciliation(ctx context.Context, id string) (r5.PaymentReconciliation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r5.PaymentReconciliation{}, err
	}
	typed, ok := result.(r5.PaymentReconciliation)
	if !ok {
		return r5.PaymentReconciliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePaymentReconciliation updates an existing PaymentReconciliation resource.
func (c *ClientR5) UpdatePaymentReconciliation(ctx context.Context, resource r5.PaymentReconciliation) (update.Result[r5.PaymentReconciliation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.PaymentReconciliation]{}, err
	}
	typed, ok := result.Resource.(r5.PaymentReconciliation)
	if !ok {
		return update.Result[r5.PaymentReconciliation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.PaymentReconciliation]{Resource: typed, Created: result.Created}, nil
}

// DeletePaymentReconciliation deletes a PaymentReconciliation resource by ID.
func (c *ClientR5) DeletePaymentReconciliation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PaymentReconciliation", id)
}

// SearchPaymentReconciliation performs a search for PaymentReconciliation resources.
func (c *ClientR5) SearchPaymentReconciliation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.PaymentReconciliation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PaymentReconciliation", parameters, options)
	if err != nil {
		return search.Result[r5.PaymentReconciliation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.PaymentReconciliation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.PaymentReconciliation)
		if !ok {
			return search.Result[r5.PaymentReconciliation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.PaymentReconciliation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePermission creates a new Permission resource.
func (c *ClientR5) CreatePermission(ctx context.Context, resource r5.Permission) (r5.Permission, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Permission{}, err
	}
	typed, ok := result.(r5.Permission)
	if !ok {
		return r5.Permission{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPermission retrieves a Permission resource by ID.
func (c *ClientR5) ReadPermission(ctx context.Context, id string) (r5.Permission, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Permission", id)
	if err != nil {
		return r5.Permission{}, err
	}
	typed, ok := result.(r5.Permission)
	if !ok {
		return r5.Permission{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePermission updates an existing Permission resource.
func (c *ClientR5) UpdatePermission(ctx context.Context, resource r5.Permission) (update.Result[r5.Permission], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Permission]{}, err
	}
	typed, ok := result.Resource.(r5.Permission)
	if !ok {
		return update.Result[r5.Permission]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Permission]{Resource: typed, Created: result.Created}, nil
}

// DeletePermission deletes a Permission resource by ID.
func (c *ClientR5) DeletePermission(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Permission", id)
}

// SearchPermission performs a search for Permission resources.
func (c *ClientR5) SearchPermission(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Permission], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Permission", parameters, options)
	if err != nil {
		return search.Result[r5.Permission]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Permission, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Permission)
		if !ok {
			return search.Result[r5.Permission]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Permission]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePerson creates a new Person resource.
func (c *ClientR5) CreatePerson(ctx context.Context, resource r5.Person) (r5.Person, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Person{}, err
	}
	typed, ok := result.(r5.Person)
	if !ok {
		return r5.Person{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPerson retrieves a Person resource by ID.
func (c *ClientR5) ReadPerson(ctx context.Context, id string) (r5.Person, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Person", id)
	if err != nil {
		return r5.Person{}, err
	}
	typed, ok := result.(r5.Person)
	if !ok {
		return r5.Person{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePerson updates an existing Person resource.
func (c *ClientR5) UpdatePerson(ctx context.Context, resource r5.Person) (update.Result[r5.Person], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Person]{}, err
	}
	typed, ok := result.Resource.(r5.Person)
	if !ok {
		return update.Result[r5.Person]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Person]{Resource: typed, Created: result.Created}, nil
}

// DeletePerson deletes a Person resource by ID.
func (c *ClientR5) DeletePerson(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Person", id)
}

// SearchPerson performs a search for Person resources.
func (c *ClientR5) SearchPerson(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Person], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Person", parameters, options)
	if err != nil {
		return search.Result[r5.Person]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Person, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Person)
		if !ok {
			return search.Result[r5.Person]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Person]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePlanDefinition creates a new PlanDefinition resource.
func (c *ClientR5) CreatePlanDefinition(ctx context.Context, resource r5.PlanDefinition) (r5.PlanDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.PlanDefinition{}, err
	}
	typed, ok := result.(r5.PlanDefinition)
	if !ok {
		return r5.PlanDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPlanDefinition retrieves a PlanDefinition resource by ID.
func (c *ClientR5) ReadPlanDefinition(ctx context.Context, id string) (r5.PlanDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r5.PlanDefinition{}, err
	}
	typed, ok := result.(r5.PlanDefinition)
	if !ok {
		return r5.PlanDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePlanDefinition updates an existing PlanDefinition resource.
func (c *ClientR5) UpdatePlanDefinition(ctx context.Context, resource r5.PlanDefinition) (update.Result[r5.PlanDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.PlanDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.PlanDefinition)
	if !ok {
		return update.Result[r5.PlanDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.PlanDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeletePlanDefinition deletes a PlanDefinition resource by ID.
func (c *ClientR5) DeletePlanDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PlanDefinition", id)
}

// SearchPlanDefinition performs a search for PlanDefinition resources.
func (c *ClientR5) SearchPlanDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.PlanDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PlanDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.PlanDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.PlanDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.PlanDefinition)
		if !ok {
			return search.Result[r5.PlanDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.PlanDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePractitioner creates a new Practitioner resource.
func (c *ClientR5) CreatePractitioner(ctx context.Context, resource r5.Practitioner) (r5.Practitioner, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Practitioner{}, err
	}
	typed, ok := result.(r5.Practitioner)
	if !ok {
		return r5.Practitioner{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPractitioner retrieves a Practitioner resource by ID.
func (c *ClientR5) ReadPractitioner(ctx context.Context, id string) (r5.Practitioner, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Practitioner", id)
	if err != nil {
		return r5.Practitioner{}, err
	}
	typed, ok := result.(r5.Practitioner)
	if !ok {
		return r5.Practitioner{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePractitioner updates an existing Practitioner resource.
func (c *ClientR5) UpdatePractitioner(ctx context.Context, resource r5.Practitioner) (update.Result[r5.Practitioner], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Practitioner]{}, err
	}
	typed, ok := result.Resource.(r5.Practitioner)
	if !ok {
		return update.Result[r5.Practitioner]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Practitioner]{Resource: typed, Created: result.Created}, nil
}

// DeletePractitioner deletes a Practitioner resource by ID.
func (c *ClientR5) DeletePractitioner(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Practitioner", id)
}

// SearchPractitioner performs a search for Practitioner resources.
func (c *ClientR5) SearchPractitioner(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Practitioner], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Practitioner", parameters, options)
	if err != nil {
		return search.Result[r5.Practitioner]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Practitioner, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Practitioner)
		if !ok {
			return search.Result[r5.Practitioner]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Practitioner]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePractitionerRole creates a new PractitionerRole resource.
func (c *ClientR5) CreatePractitionerRole(ctx context.Context, resource r5.PractitionerRole) (r5.PractitionerRole, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.PractitionerRole{}, err
	}
	typed, ok := result.(r5.PractitionerRole)
	if !ok {
		return r5.PractitionerRole{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPractitionerRole retrieves a PractitionerRole resource by ID.
func (c *ClientR5) ReadPractitionerRole(ctx context.Context, id string) (r5.PractitionerRole, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r5.PractitionerRole{}, err
	}
	typed, ok := result.(r5.PractitionerRole)
	if !ok {
		return r5.PractitionerRole{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePractitionerRole updates an existing PractitionerRole resource.
func (c *ClientR5) UpdatePractitionerRole(ctx context.Context, resource r5.PractitionerRole) (update.Result[r5.PractitionerRole], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.PractitionerRole]{}, err
	}
	typed, ok := result.Resource.(r5.PractitionerRole)
	if !ok {
		return update.Result[r5.PractitionerRole]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.PractitionerRole]{Resource: typed, Created: result.Created}, nil
}

// DeletePractitionerRole deletes a PractitionerRole resource by ID.
func (c *ClientR5) DeletePractitionerRole(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PractitionerRole", id)
}

// SearchPractitionerRole performs a search for PractitionerRole resources.
func (c *ClientR5) SearchPractitionerRole(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.PractitionerRole], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PractitionerRole", parameters, options)
	if err != nil {
		return search.Result[r5.PractitionerRole]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.PractitionerRole, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.PractitionerRole)
		if !ok {
			return search.Result[r5.PractitionerRole]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.PractitionerRole]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateProcedure creates a new Procedure resource.
func (c *ClientR5) CreateProcedure(ctx context.Context, resource r5.Procedure) (r5.Procedure, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Procedure{}, err
	}
	typed, ok := result.(r5.Procedure)
	if !ok {
		return r5.Procedure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadProcedure retrieves a Procedure resource by ID.
func (c *ClientR5) ReadProcedure(ctx context.Context, id string) (r5.Procedure, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Procedure", id)
	if err != nil {
		return r5.Procedure{}, err
	}
	typed, ok := result.(r5.Procedure)
	if !ok {
		return r5.Procedure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateProcedure updates an existing Procedure resource.
func (c *ClientR5) UpdateProcedure(ctx context.Context, resource r5.Procedure) (update.Result[r5.Procedure], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Procedure]{}, err
	}
	typed, ok := result.Resource.(r5.Procedure)
	if !ok {
		return update.Result[r5.Procedure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Procedure]{Resource: typed, Created: result.Created}, nil
}

// DeleteProcedure deletes a Procedure resource by ID.
func (c *ClientR5) DeleteProcedure(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Procedure", id)
}

// SearchProcedure performs a search for Procedure resources.
func (c *ClientR5) SearchProcedure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Procedure], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Procedure", parameters, options)
	if err != nil {
		return search.Result[r5.Procedure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Procedure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Procedure)
		if !ok {
			return search.Result[r5.Procedure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Procedure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateProvenance creates a new Provenance resource.
func (c *ClientR5) CreateProvenance(ctx context.Context, resource r5.Provenance) (r5.Provenance, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Provenance{}, err
	}
	typed, ok := result.(r5.Provenance)
	if !ok {
		return r5.Provenance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadProvenance retrieves a Provenance resource by ID.
func (c *ClientR5) ReadProvenance(ctx context.Context, id string) (r5.Provenance, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Provenance", id)
	if err != nil {
		return r5.Provenance{}, err
	}
	typed, ok := result.(r5.Provenance)
	if !ok {
		return r5.Provenance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateProvenance updates an existing Provenance resource.
func (c *ClientR5) UpdateProvenance(ctx context.Context, resource r5.Provenance) (update.Result[r5.Provenance], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Provenance]{}, err
	}
	typed, ok := result.Resource.(r5.Provenance)
	if !ok {
		return update.Result[r5.Provenance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Provenance]{Resource: typed, Created: result.Created}, nil
}

// DeleteProvenance deletes a Provenance resource by ID.
func (c *ClientR5) DeleteProvenance(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Provenance", id)
}

// SearchProvenance performs a search for Provenance resources.
func (c *ClientR5) SearchProvenance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Provenance], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Provenance", parameters, options)
	if err != nil {
		return search.Result[r5.Provenance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Provenance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Provenance)
		if !ok {
			return search.Result[r5.Provenance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Provenance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateQuestionnaire creates a new Questionnaire resource.
func (c *ClientR5) CreateQuestionnaire(ctx context.Context, resource r5.Questionnaire) (r5.Questionnaire, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Questionnaire{}, err
	}
	typed, ok := result.(r5.Questionnaire)
	if !ok {
		return r5.Questionnaire{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadQuestionnaire retrieves a Questionnaire resource by ID.
func (c *ClientR5) ReadQuestionnaire(ctx context.Context, id string) (r5.Questionnaire, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r5.Questionnaire{}, err
	}
	typed, ok := result.(r5.Questionnaire)
	if !ok {
		return r5.Questionnaire{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateQuestionnaire updates an existing Questionnaire resource.
func (c *ClientR5) UpdateQuestionnaire(ctx context.Context, resource r5.Questionnaire) (update.Result[r5.Questionnaire], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Questionnaire]{}, err
	}
	typed, ok := result.Resource.(r5.Questionnaire)
	if !ok {
		return update.Result[r5.Questionnaire]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Questionnaire]{Resource: typed, Created: result.Created}, nil
}

// DeleteQuestionnaire deletes a Questionnaire resource by ID.
func (c *ClientR5) DeleteQuestionnaire(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Questionnaire", id)
}

// SearchQuestionnaire performs a search for Questionnaire resources.
func (c *ClientR5) SearchQuestionnaire(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Questionnaire], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Questionnaire", parameters, options)
	if err != nil {
		return search.Result[r5.Questionnaire]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Questionnaire, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Questionnaire)
		if !ok {
			return search.Result[r5.Questionnaire]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Questionnaire]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateQuestionnaireResponse creates a new QuestionnaireResponse resource.
func (c *ClientR5) CreateQuestionnaireResponse(ctx context.Context, resource r5.QuestionnaireResponse) (r5.QuestionnaireResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.QuestionnaireResponse{}, err
	}
	typed, ok := result.(r5.QuestionnaireResponse)
	if !ok {
		return r5.QuestionnaireResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadQuestionnaireResponse retrieves a QuestionnaireResponse resource by ID.
func (c *ClientR5) ReadQuestionnaireResponse(ctx context.Context, id string) (r5.QuestionnaireResponse, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r5.QuestionnaireResponse{}, err
	}
	typed, ok := result.(r5.QuestionnaireResponse)
	if !ok {
		return r5.QuestionnaireResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateQuestionnaireResponse updates an existing QuestionnaireResponse resource.
func (c *ClientR5) UpdateQuestionnaireResponse(ctx context.Context, resource r5.QuestionnaireResponse) (update.Result[r5.QuestionnaireResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.QuestionnaireResponse]{}, err
	}
	typed, ok := result.Resource.(r5.QuestionnaireResponse)
	if !ok {
		return update.Result[r5.QuestionnaireResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.QuestionnaireResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteQuestionnaireResponse deletes a QuestionnaireResponse resource by ID.
func (c *ClientR5) DeleteQuestionnaireResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "QuestionnaireResponse", id)
}

// SearchQuestionnaireResponse performs a search for QuestionnaireResponse resources.
func (c *ClientR5) SearchQuestionnaireResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.QuestionnaireResponse], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "QuestionnaireResponse", parameters, options)
	if err != nil {
		return search.Result[r5.QuestionnaireResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.QuestionnaireResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.QuestionnaireResponse)
		if !ok {
			return search.Result[r5.QuestionnaireResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.QuestionnaireResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRegulatedAuthorization creates a new RegulatedAuthorization resource.
func (c *ClientR5) CreateRegulatedAuthorization(ctx context.Context, resource r5.RegulatedAuthorization) (r5.RegulatedAuthorization, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.RegulatedAuthorization{}, err
	}
	typed, ok := result.(r5.RegulatedAuthorization)
	if !ok {
		return r5.RegulatedAuthorization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRegulatedAuthorization retrieves a RegulatedAuthorization resource by ID.
func (c *ClientR5) ReadRegulatedAuthorization(ctx context.Context, id string) (r5.RegulatedAuthorization, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RegulatedAuthorization", id)
	if err != nil {
		return r5.RegulatedAuthorization{}, err
	}
	typed, ok := result.(r5.RegulatedAuthorization)
	if !ok {
		return r5.RegulatedAuthorization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRegulatedAuthorization updates an existing RegulatedAuthorization resource.
func (c *ClientR5) UpdateRegulatedAuthorization(ctx context.Context, resource r5.RegulatedAuthorization) (update.Result[r5.RegulatedAuthorization], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.RegulatedAuthorization]{}, err
	}
	typed, ok := result.Resource.(r5.RegulatedAuthorization)
	if !ok {
		return update.Result[r5.RegulatedAuthorization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.RegulatedAuthorization]{Resource: typed, Created: result.Created}, nil
}

// DeleteRegulatedAuthorization deletes a RegulatedAuthorization resource by ID.
func (c *ClientR5) DeleteRegulatedAuthorization(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RegulatedAuthorization", id)
}

// SearchRegulatedAuthorization performs a search for RegulatedAuthorization resources.
func (c *ClientR5) SearchRegulatedAuthorization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.RegulatedAuthorization], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RegulatedAuthorization", parameters, options)
	if err != nil {
		return search.Result[r5.RegulatedAuthorization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.RegulatedAuthorization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.RegulatedAuthorization)
		if !ok {
			return search.Result[r5.RegulatedAuthorization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.RegulatedAuthorization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRelatedPerson creates a new RelatedPerson resource.
func (c *ClientR5) CreateRelatedPerson(ctx context.Context, resource r5.RelatedPerson) (r5.RelatedPerson, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.RelatedPerson{}, err
	}
	typed, ok := result.(r5.RelatedPerson)
	if !ok {
		return r5.RelatedPerson{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRelatedPerson retrieves a RelatedPerson resource by ID.
func (c *ClientR5) ReadRelatedPerson(ctx context.Context, id string) (r5.RelatedPerson, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r5.RelatedPerson{}, err
	}
	typed, ok := result.(r5.RelatedPerson)
	if !ok {
		return r5.RelatedPerson{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRelatedPerson updates an existing RelatedPerson resource.
func (c *ClientR5) UpdateRelatedPerson(ctx context.Context, resource r5.RelatedPerson) (update.Result[r5.RelatedPerson], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.RelatedPerson]{}, err
	}
	typed, ok := result.Resource.(r5.RelatedPerson)
	if !ok {
		return update.Result[r5.RelatedPerson]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.RelatedPerson]{Resource: typed, Created: result.Created}, nil
}

// DeleteRelatedPerson deletes a RelatedPerson resource by ID.
func (c *ClientR5) DeleteRelatedPerson(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RelatedPerson", id)
}

// SearchRelatedPerson performs a search for RelatedPerson resources.
func (c *ClientR5) SearchRelatedPerson(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.RelatedPerson], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RelatedPerson", parameters, options)
	if err != nil {
		return search.Result[r5.RelatedPerson]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.RelatedPerson, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.RelatedPerson)
		if !ok {
			return search.Result[r5.RelatedPerson]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.RelatedPerson]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRequestOrchestration creates a new RequestOrchestration resource.
func (c *ClientR5) CreateRequestOrchestration(ctx context.Context, resource r5.RequestOrchestration) (r5.RequestOrchestration, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.RequestOrchestration{}, err
	}
	typed, ok := result.(r5.RequestOrchestration)
	if !ok {
		return r5.RequestOrchestration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRequestOrchestration retrieves a RequestOrchestration resource by ID.
func (c *ClientR5) ReadRequestOrchestration(ctx context.Context, id string) (r5.RequestOrchestration, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RequestOrchestration", id)
	if err != nil {
		return r5.RequestOrchestration{}, err
	}
	typed, ok := result.(r5.RequestOrchestration)
	if !ok {
		return r5.RequestOrchestration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRequestOrchestration updates an existing RequestOrchestration resource.
func (c *ClientR5) UpdateRequestOrchestration(ctx context.Context, resource r5.RequestOrchestration) (update.Result[r5.RequestOrchestration], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.RequestOrchestration]{}, err
	}
	typed, ok := result.Resource.(r5.RequestOrchestration)
	if !ok {
		return update.Result[r5.RequestOrchestration]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.RequestOrchestration]{Resource: typed, Created: result.Created}, nil
}

// DeleteRequestOrchestration deletes a RequestOrchestration resource by ID.
func (c *ClientR5) DeleteRequestOrchestration(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RequestOrchestration", id)
}

// SearchRequestOrchestration performs a search for RequestOrchestration resources.
func (c *ClientR5) SearchRequestOrchestration(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.RequestOrchestration], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RequestOrchestration", parameters, options)
	if err != nil {
		return search.Result[r5.RequestOrchestration]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.RequestOrchestration, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.RequestOrchestration)
		if !ok {
			return search.Result[r5.RequestOrchestration]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.RequestOrchestration]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRequirements creates a new Requirements resource.
func (c *ClientR5) CreateRequirements(ctx context.Context, resource r5.Requirements) (r5.Requirements, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Requirements{}, err
	}
	typed, ok := result.(r5.Requirements)
	if !ok {
		return r5.Requirements{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRequirements retrieves a Requirements resource by ID.
func (c *ClientR5) ReadRequirements(ctx context.Context, id string) (r5.Requirements, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Requirements", id)
	if err != nil {
		return r5.Requirements{}, err
	}
	typed, ok := result.(r5.Requirements)
	if !ok {
		return r5.Requirements{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRequirements updates an existing Requirements resource.
func (c *ClientR5) UpdateRequirements(ctx context.Context, resource r5.Requirements) (update.Result[r5.Requirements], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Requirements]{}, err
	}
	typed, ok := result.Resource.(r5.Requirements)
	if !ok {
		return update.Result[r5.Requirements]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Requirements]{Resource: typed, Created: result.Created}, nil
}

// DeleteRequirements deletes a Requirements resource by ID.
func (c *ClientR5) DeleteRequirements(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Requirements", id)
}

// SearchRequirements performs a search for Requirements resources.
func (c *ClientR5) SearchRequirements(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Requirements], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Requirements", parameters, options)
	if err != nil {
		return search.Result[r5.Requirements]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Requirements, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Requirements)
		if !ok {
			return search.Result[r5.Requirements]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Requirements]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchStudy creates a new ResearchStudy resource.
func (c *ClientR5) CreateResearchStudy(ctx context.Context, resource r5.ResearchStudy) (r5.ResearchStudy, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ResearchStudy{}, err
	}
	typed, ok := result.(r5.ResearchStudy)
	if !ok {
		return r5.ResearchStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchStudy retrieves a ResearchStudy resource by ID.
func (c *ClientR5) ReadResearchStudy(ctx context.Context, id string) (r5.ResearchStudy, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r5.ResearchStudy{}, err
	}
	typed, ok := result.(r5.ResearchStudy)
	if !ok {
		return r5.ResearchStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchStudy updates an existing ResearchStudy resource.
func (c *ClientR5) UpdateResearchStudy(ctx context.Context, resource r5.ResearchStudy) (update.Result[r5.ResearchStudy], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ResearchStudy]{}, err
	}
	typed, ok := result.Resource.(r5.ResearchStudy)
	if !ok {
		return update.Result[r5.ResearchStudy]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ResearchStudy]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchStudy deletes a ResearchStudy resource by ID.
func (c *ClientR5) DeleteResearchStudy(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ResearchStudy", id)
}

// SearchResearchStudy performs a search for ResearchStudy resources.
func (c *ClientR5) SearchResearchStudy(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ResearchStudy], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ResearchStudy", parameters, options)
	if err != nil {
		return search.Result[r5.ResearchStudy]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ResearchStudy, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ResearchStudy)
		if !ok {
			return search.Result[r5.ResearchStudy]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ResearchStudy]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchSubject creates a new ResearchSubject resource.
func (c *ClientR5) CreateResearchSubject(ctx context.Context, resource r5.ResearchSubject) (r5.ResearchSubject, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ResearchSubject{}, err
	}
	typed, ok := result.(r5.ResearchSubject)
	if !ok {
		return r5.ResearchSubject{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchSubject retrieves a ResearchSubject resource by ID.
func (c *ClientR5) ReadResearchSubject(ctx context.Context, id string) (r5.ResearchSubject, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r5.ResearchSubject{}, err
	}
	typed, ok := result.(r5.ResearchSubject)
	if !ok {
		return r5.ResearchSubject{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchSubject updates an existing ResearchSubject resource.
func (c *ClientR5) UpdateResearchSubject(ctx context.Context, resource r5.ResearchSubject) (update.Result[r5.ResearchSubject], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ResearchSubject]{}, err
	}
	typed, ok := result.Resource.(r5.ResearchSubject)
	if !ok {
		return update.Result[r5.ResearchSubject]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ResearchSubject]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchSubject deletes a ResearchSubject resource by ID.
func (c *ClientR5) DeleteResearchSubject(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ResearchSubject", id)
}

// SearchResearchSubject performs a search for ResearchSubject resources.
func (c *ClientR5) SearchResearchSubject(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ResearchSubject], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ResearchSubject", parameters, options)
	if err != nil {
		return search.Result[r5.ResearchSubject]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ResearchSubject, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ResearchSubject)
		if !ok {
			return search.Result[r5.ResearchSubject]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ResearchSubject]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRiskAssessment creates a new RiskAssessment resource.
func (c *ClientR5) CreateRiskAssessment(ctx context.Context, resource r5.RiskAssessment) (r5.RiskAssessment, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.RiskAssessment{}, err
	}
	typed, ok := result.(r5.RiskAssessment)
	if !ok {
		return r5.RiskAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRiskAssessment retrieves a RiskAssessment resource by ID.
func (c *ClientR5) ReadRiskAssessment(ctx context.Context, id string) (r5.RiskAssessment, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r5.RiskAssessment{}, err
	}
	typed, ok := result.(r5.RiskAssessment)
	if !ok {
		return r5.RiskAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRiskAssessment updates an existing RiskAssessment resource.
func (c *ClientR5) UpdateRiskAssessment(ctx context.Context, resource r5.RiskAssessment) (update.Result[r5.RiskAssessment], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.RiskAssessment]{}, err
	}
	typed, ok := result.Resource.(r5.RiskAssessment)
	if !ok {
		return update.Result[r5.RiskAssessment]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.RiskAssessment]{Resource: typed, Created: result.Created}, nil
}

// DeleteRiskAssessment deletes a RiskAssessment resource by ID.
func (c *ClientR5) DeleteRiskAssessment(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RiskAssessment", id)
}

// SearchRiskAssessment performs a search for RiskAssessment resources.
func (c *ClientR5) SearchRiskAssessment(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.RiskAssessment], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RiskAssessment", parameters, options)
	if err != nil {
		return search.Result[r5.RiskAssessment]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.RiskAssessment, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.RiskAssessment)
		if !ok {
			return search.Result[r5.RiskAssessment]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.RiskAssessment]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSchedule creates a new Schedule resource.
func (c *ClientR5) CreateSchedule(ctx context.Context, resource r5.Schedule) (r5.Schedule, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Schedule{}, err
	}
	typed, ok := result.(r5.Schedule)
	if !ok {
		return r5.Schedule{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSchedule retrieves a Schedule resource by ID.
func (c *ClientR5) ReadSchedule(ctx context.Context, id string) (r5.Schedule, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Schedule", id)
	if err != nil {
		return r5.Schedule{}, err
	}
	typed, ok := result.(r5.Schedule)
	if !ok {
		return r5.Schedule{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSchedule updates an existing Schedule resource.
func (c *ClientR5) UpdateSchedule(ctx context.Context, resource r5.Schedule) (update.Result[r5.Schedule], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Schedule]{}, err
	}
	typed, ok := result.Resource.(r5.Schedule)
	if !ok {
		return update.Result[r5.Schedule]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Schedule]{Resource: typed, Created: result.Created}, nil
}

// DeleteSchedule deletes a Schedule resource by ID.
func (c *ClientR5) DeleteSchedule(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Schedule", id)
}

// SearchSchedule performs a search for Schedule resources.
func (c *ClientR5) SearchSchedule(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Schedule], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Schedule", parameters, options)
	if err != nil {
		return search.Result[r5.Schedule]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Schedule, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Schedule)
		if !ok {
			return search.Result[r5.Schedule]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Schedule]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSearchParameter creates a new SearchParameter resource.
func (c *ClientR5) CreateSearchParameter(ctx context.Context, resource r5.SearchParameter) (r5.SearchParameter, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SearchParameter{}, err
	}
	typed, ok := result.(r5.SearchParameter)
	if !ok {
		return r5.SearchParameter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSearchParameter retrieves a SearchParameter resource by ID.
func (c *ClientR5) ReadSearchParameter(ctx context.Context, id string) (r5.SearchParameter, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r5.SearchParameter{}, err
	}
	typed, ok := result.(r5.SearchParameter)
	if !ok {
		return r5.SearchParameter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSearchParameter updates an existing SearchParameter resource.
func (c *ClientR5) UpdateSearchParameter(ctx context.Context, resource r5.SearchParameter) (update.Result[r5.SearchParameter], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SearchParameter]{}, err
	}
	typed, ok := result.Resource.(r5.SearchParameter)
	if !ok {
		return update.Result[r5.SearchParameter]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SearchParameter]{Resource: typed, Created: result.Created}, nil
}

// DeleteSearchParameter deletes a SearchParameter resource by ID.
func (c *ClientR5) DeleteSearchParameter(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SearchParameter", id)
}

// SearchSearchParameter performs a search for SearchParameter resources.
func (c *ClientR5) SearchSearchParameter(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SearchParameter], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SearchParameter", parameters, options)
	if err != nil {
		return search.Result[r5.SearchParameter]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SearchParameter, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SearchParameter)
		if !ok {
			return search.Result[r5.SearchParameter]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SearchParameter]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateServiceRequest creates a new ServiceRequest resource.
func (c *ClientR5) CreateServiceRequest(ctx context.Context, resource r5.ServiceRequest) (r5.ServiceRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ServiceRequest{}, err
	}
	typed, ok := result.(r5.ServiceRequest)
	if !ok {
		return r5.ServiceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadServiceRequest retrieves a ServiceRequest resource by ID.
func (c *ClientR5) ReadServiceRequest(ctx context.Context, id string) (r5.ServiceRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r5.ServiceRequest{}, err
	}
	typed, ok := result.(r5.ServiceRequest)
	if !ok {
		return r5.ServiceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateServiceRequest updates an existing ServiceRequest resource.
func (c *ClientR5) UpdateServiceRequest(ctx context.Context, resource r5.ServiceRequest) (update.Result[r5.ServiceRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ServiceRequest]{}, err
	}
	typed, ok := result.Resource.(r5.ServiceRequest)
	if !ok {
		return update.Result[r5.ServiceRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ServiceRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteServiceRequest deletes a ServiceRequest resource by ID.
func (c *ClientR5) DeleteServiceRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ServiceRequest", id)
}

// SearchServiceRequest performs a search for ServiceRequest resources.
func (c *ClientR5) SearchServiceRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ServiceRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ServiceRequest", parameters, options)
	if err != nil {
		return search.Result[r5.ServiceRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ServiceRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ServiceRequest)
		if !ok {
			return search.Result[r5.ServiceRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ServiceRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSlot creates a new Slot resource.
func (c *ClientR5) CreateSlot(ctx context.Context, resource r5.Slot) (r5.Slot, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Slot{}, err
	}
	typed, ok := result.(r5.Slot)
	if !ok {
		return r5.Slot{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSlot retrieves a Slot resource by ID.
func (c *ClientR5) ReadSlot(ctx context.Context, id string) (r5.Slot, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Slot", id)
	if err != nil {
		return r5.Slot{}, err
	}
	typed, ok := result.(r5.Slot)
	if !ok {
		return r5.Slot{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSlot updates an existing Slot resource.
func (c *ClientR5) UpdateSlot(ctx context.Context, resource r5.Slot) (update.Result[r5.Slot], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Slot]{}, err
	}
	typed, ok := result.Resource.(r5.Slot)
	if !ok {
		return update.Result[r5.Slot]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Slot]{Resource: typed, Created: result.Created}, nil
}

// DeleteSlot deletes a Slot resource by ID.
func (c *ClientR5) DeleteSlot(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Slot", id)
}

// SearchSlot performs a search for Slot resources.
func (c *ClientR5) SearchSlot(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Slot], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Slot", parameters, options)
	if err != nil {
		return search.Result[r5.Slot]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Slot, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Slot)
		if !ok {
			return search.Result[r5.Slot]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Slot]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSpecimen creates a new Specimen resource.
func (c *ClientR5) CreateSpecimen(ctx context.Context, resource r5.Specimen) (r5.Specimen, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Specimen{}, err
	}
	typed, ok := result.(r5.Specimen)
	if !ok {
		return r5.Specimen{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSpecimen retrieves a Specimen resource by ID.
func (c *ClientR5) ReadSpecimen(ctx context.Context, id string) (r5.Specimen, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Specimen", id)
	if err != nil {
		return r5.Specimen{}, err
	}
	typed, ok := result.(r5.Specimen)
	if !ok {
		return r5.Specimen{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSpecimen updates an existing Specimen resource.
func (c *ClientR5) UpdateSpecimen(ctx context.Context, resource r5.Specimen) (update.Result[r5.Specimen], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Specimen]{}, err
	}
	typed, ok := result.Resource.(r5.Specimen)
	if !ok {
		return update.Result[r5.Specimen]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Specimen]{Resource: typed, Created: result.Created}, nil
}

// DeleteSpecimen deletes a Specimen resource by ID.
func (c *ClientR5) DeleteSpecimen(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Specimen", id)
}

// SearchSpecimen performs a search for Specimen resources.
func (c *ClientR5) SearchSpecimen(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Specimen], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Specimen", parameters, options)
	if err != nil {
		return search.Result[r5.Specimen]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Specimen, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Specimen)
		if !ok {
			return search.Result[r5.Specimen]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Specimen]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSpecimenDefinition creates a new SpecimenDefinition resource.
func (c *ClientR5) CreateSpecimenDefinition(ctx context.Context, resource r5.SpecimenDefinition) (r5.SpecimenDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SpecimenDefinition{}, err
	}
	typed, ok := result.(r5.SpecimenDefinition)
	if !ok {
		return r5.SpecimenDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSpecimenDefinition retrieves a SpecimenDefinition resource by ID.
func (c *ClientR5) ReadSpecimenDefinition(ctx context.Context, id string) (r5.SpecimenDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r5.SpecimenDefinition{}, err
	}
	typed, ok := result.(r5.SpecimenDefinition)
	if !ok {
		return r5.SpecimenDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSpecimenDefinition updates an existing SpecimenDefinition resource.
func (c *ClientR5) UpdateSpecimenDefinition(ctx context.Context, resource r5.SpecimenDefinition) (update.Result[r5.SpecimenDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SpecimenDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.SpecimenDefinition)
	if !ok {
		return update.Result[r5.SpecimenDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SpecimenDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteSpecimenDefinition deletes a SpecimenDefinition resource by ID.
func (c *ClientR5) DeleteSpecimenDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SpecimenDefinition", id)
}

// SearchSpecimenDefinition performs a search for SpecimenDefinition resources.
func (c *ClientR5) SearchSpecimenDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SpecimenDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SpecimenDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.SpecimenDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SpecimenDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SpecimenDefinition)
		if !ok {
			return search.Result[r5.SpecimenDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SpecimenDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateStructureDefinition creates a new StructureDefinition resource.
func (c *ClientR5) CreateStructureDefinition(ctx context.Context, resource r5.StructureDefinition) (r5.StructureDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.StructureDefinition{}, err
	}
	typed, ok := result.(r5.StructureDefinition)
	if !ok {
		return r5.StructureDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadStructureDefinition retrieves a StructureDefinition resource by ID.
func (c *ClientR5) ReadStructureDefinition(ctx context.Context, id string) (r5.StructureDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r5.StructureDefinition{}, err
	}
	typed, ok := result.(r5.StructureDefinition)
	if !ok {
		return r5.StructureDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateStructureDefinition updates an existing StructureDefinition resource.
func (c *ClientR5) UpdateStructureDefinition(ctx context.Context, resource r5.StructureDefinition) (update.Result[r5.StructureDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.StructureDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.StructureDefinition)
	if !ok {
		return update.Result[r5.StructureDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.StructureDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteStructureDefinition deletes a StructureDefinition resource by ID.
func (c *ClientR5) DeleteStructureDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "StructureDefinition", id)
}

// SearchStructureDefinition performs a search for StructureDefinition resources.
func (c *ClientR5) SearchStructureDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.StructureDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "StructureDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.StructureDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.StructureDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.StructureDefinition)
		if !ok {
			return search.Result[r5.StructureDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.StructureDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateStructureMap creates a new StructureMap resource.
func (c *ClientR5) CreateStructureMap(ctx context.Context, resource r5.StructureMap) (r5.StructureMap, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.StructureMap{}, err
	}
	typed, ok := result.(r5.StructureMap)
	if !ok {
		return r5.StructureMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadStructureMap retrieves a StructureMap resource by ID.
func (c *ClientR5) ReadStructureMap(ctx context.Context, id string) (r5.StructureMap, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "StructureMap", id)
	if err != nil {
		return r5.StructureMap{}, err
	}
	typed, ok := result.(r5.StructureMap)
	if !ok {
		return r5.StructureMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateStructureMap updates an existing StructureMap resource.
func (c *ClientR5) UpdateStructureMap(ctx context.Context, resource r5.StructureMap) (update.Result[r5.StructureMap], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.StructureMap]{}, err
	}
	typed, ok := result.Resource.(r5.StructureMap)
	if !ok {
		return update.Result[r5.StructureMap]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.StructureMap]{Resource: typed, Created: result.Created}, nil
}

// DeleteStructureMap deletes a StructureMap resource by ID.
func (c *ClientR5) DeleteStructureMap(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "StructureMap", id)
}

// SearchStructureMap performs a search for StructureMap resources.
func (c *ClientR5) SearchStructureMap(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.StructureMap], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "StructureMap", parameters, options)
	if err != nil {
		return search.Result[r5.StructureMap]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.StructureMap, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.StructureMap)
		if !ok {
			return search.Result[r5.StructureMap]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.StructureMap]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubscription creates a new Subscription resource.
func (c *ClientR5) CreateSubscription(ctx context.Context, resource r5.Subscription) (r5.Subscription, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Subscription{}, err
	}
	typed, ok := result.(r5.Subscription)
	if !ok {
		return r5.Subscription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubscription retrieves a Subscription resource by ID.
func (c *ClientR5) ReadSubscription(ctx context.Context, id string) (r5.Subscription, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Subscription", id)
	if err != nil {
		return r5.Subscription{}, err
	}
	typed, ok := result.(r5.Subscription)
	if !ok {
		return r5.Subscription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubscription updates an existing Subscription resource.
func (c *ClientR5) UpdateSubscription(ctx context.Context, resource r5.Subscription) (update.Result[r5.Subscription], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Subscription]{}, err
	}
	typed, ok := result.Resource.(r5.Subscription)
	if !ok {
		return update.Result[r5.Subscription]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Subscription]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubscription deletes a Subscription resource by ID.
func (c *ClientR5) DeleteSubscription(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Subscription", id)
}

// SearchSubscription performs a search for Subscription resources.
func (c *ClientR5) SearchSubscription(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Subscription], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Subscription", parameters, options)
	if err != nil {
		return search.Result[r5.Subscription]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Subscription, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Subscription)
		if !ok {
			return search.Result[r5.Subscription]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Subscription]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubscriptionStatus creates a new SubscriptionStatus resource.
func (c *ClientR5) CreateSubscriptionStatus(ctx context.Context, resource r5.SubscriptionStatus) (r5.SubscriptionStatus, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubscriptionStatus{}, err
	}
	typed, ok := result.(r5.SubscriptionStatus)
	if !ok {
		return r5.SubscriptionStatus{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubscriptionStatus retrieves a SubscriptionStatus resource by ID.
func (c *ClientR5) ReadSubscriptionStatus(ctx context.Context, id string) (r5.SubscriptionStatus, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubscriptionStatus", id)
	if err != nil {
		return r5.SubscriptionStatus{}, err
	}
	typed, ok := result.(r5.SubscriptionStatus)
	if !ok {
		return r5.SubscriptionStatus{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubscriptionStatus updates an existing SubscriptionStatus resource.
func (c *ClientR5) UpdateSubscriptionStatus(ctx context.Context, resource r5.SubscriptionStatus) (update.Result[r5.SubscriptionStatus], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubscriptionStatus]{}, err
	}
	typed, ok := result.Resource.(r5.SubscriptionStatus)
	if !ok {
		return update.Result[r5.SubscriptionStatus]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubscriptionStatus]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubscriptionStatus deletes a SubscriptionStatus resource by ID.
func (c *ClientR5) DeleteSubscriptionStatus(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubscriptionStatus", id)
}

// SearchSubscriptionStatus performs a search for SubscriptionStatus resources.
func (c *ClientR5) SearchSubscriptionStatus(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubscriptionStatus], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubscriptionStatus", parameters, options)
	if err != nil {
		return search.Result[r5.SubscriptionStatus]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubscriptionStatus, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubscriptionStatus)
		if !ok {
			return search.Result[r5.SubscriptionStatus]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubscriptionStatus]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubscriptionTopic creates a new SubscriptionTopic resource.
func (c *ClientR5) CreateSubscriptionTopic(ctx context.Context, resource r5.SubscriptionTopic) (r5.SubscriptionTopic, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubscriptionTopic{}, err
	}
	typed, ok := result.(r5.SubscriptionTopic)
	if !ok {
		return r5.SubscriptionTopic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubscriptionTopic retrieves a SubscriptionTopic resource by ID.
func (c *ClientR5) ReadSubscriptionTopic(ctx context.Context, id string) (r5.SubscriptionTopic, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubscriptionTopic", id)
	if err != nil {
		return r5.SubscriptionTopic{}, err
	}
	typed, ok := result.(r5.SubscriptionTopic)
	if !ok {
		return r5.SubscriptionTopic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubscriptionTopic updates an existing SubscriptionTopic resource.
func (c *ClientR5) UpdateSubscriptionTopic(ctx context.Context, resource r5.SubscriptionTopic) (update.Result[r5.SubscriptionTopic], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubscriptionTopic]{}, err
	}
	typed, ok := result.Resource.(r5.SubscriptionTopic)
	if !ok {
		return update.Result[r5.SubscriptionTopic]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubscriptionTopic]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubscriptionTopic deletes a SubscriptionTopic resource by ID.
func (c *ClientR5) DeleteSubscriptionTopic(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubscriptionTopic", id)
}

// SearchSubscriptionTopic performs a search for SubscriptionTopic resources.
func (c *ClientR5) SearchSubscriptionTopic(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubscriptionTopic], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubscriptionTopic", parameters, options)
	if err != nil {
		return search.Result[r5.SubscriptionTopic]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubscriptionTopic, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubscriptionTopic)
		if !ok {
			return search.Result[r5.SubscriptionTopic]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubscriptionTopic]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstance creates a new Substance resource.
func (c *ClientR5) CreateSubstance(ctx context.Context, resource r5.Substance) (r5.Substance, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Substance{}, err
	}
	typed, ok := result.(r5.Substance)
	if !ok {
		return r5.Substance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstance retrieves a Substance resource by ID.
func (c *ClientR5) ReadSubstance(ctx context.Context, id string) (r5.Substance, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Substance", id)
	if err != nil {
		return r5.Substance{}, err
	}
	typed, ok := result.(r5.Substance)
	if !ok {
		return r5.Substance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstance updates an existing Substance resource.
func (c *ClientR5) UpdateSubstance(ctx context.Context, resource r5.Substance) (update.Result[r5.Substance], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Substance]{}, err
	}
	typed, ok := result.Resource.(r5.Substance)
	if !ok {
		return update.Result[r5.Substance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Substance]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstance deletes a Substance resource by ID.
func (c *ClientR5) DeleteSubstance(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Substance", id)
}

// SearchSubstance performs a search for Substance resources.
func (c *ClientR5) SearchSubstance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Substance], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Substance", parameters, options)
	if err != nil {
		return search.Result[r5.Substance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Substance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Substance)
		if !ok {
			return search.Result[r5.Substance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Substance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceDefinition creates a new SubstanceDefinition resource.
func (c *ClientR5) CreateSubstanceDefinition(ctx context.Context, resource r5.SubstanceDefinition) (r5.SubstanceDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceDefinition{}, err
	}
	typed, ok := result.(r5.SubstanceDefinition)
	if !ok {
		return r5.SubstanceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceDefinition retrieves a SubstanceDefinition resource by ID.
func (c *ClientR5) ReadSubstanceDefinition(ctx context.Context, id string) (r5.SubstanceDefinition, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceDefinition", id)
	if err != nil {
		return r5.SubstanceDefinition{}, err
	}
	typed, ok := result.(r5.SubstanceDefinition)
	if !ok {
		return r5.SubstanceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceDefinition updates an existing SubstanceDefinition resource.
func (c *ClientR5) UpdateSubstanceDefinition(ctx context.Context, resource r5.SubstanceDefinition) (update.Result[r5.SubstanceDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubstanceDefinition]{}, err
	}
	typed, ok := result.Resource.(r5.SubstanceDefinition)
	if !ok {
		return update.Result[r5.SubstanceDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubstanceDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceDefinition deletes a SubstanceDefinition resource by ID.
func (c *ClientR5) DeleteSubstanceDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceDefinition", id)
}

// SearchSubstanceDefinition performs a search for SubstanceDefinition resources.
func (c *ClientR5) SearchSubstanceDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubstanceDefinition], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceDefinition", parameters, options)
	if err != nil {
		return search.Result[r5.SubstanceDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubstanceDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubstanceDefinition)
		if !ok {
			return search.Result[r5.SubstanceDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubstanceDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceNucleicAcid creates a new SubstanceNucleicAcid resource.
func (c *ClientR5) CreateSubstanceNucleicAcid(ctx context.Context, resource r5.SubstanceNucleicAcid) (r5.SubstanceNucleicAcid, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceNucleicAcid{}, err
	}
	typed, ok := result.(r5.SubstanceNucleicAcid)
	if !ok {
		return r5.SubstanceNucleicAcid{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceNucleicAcid retrieves a SubstanceNucleicAcid resource by ID.
func (c *ClientR5) ReadSubstanceNucleicAcid(ctx context.Context, id string) (r5.SubstanceNucleicAcid, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceNucleicAcid", id)
	if err != nil {
		return r5.SubstanceNucleicAcid{}, err
	}
	typed, ok := result.(r5.SubstanceNucleicAcid)
	if !ok {
		return r5.SubstanceNucleicAcid{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceNucleicAcid updates an existing SubstanceNucleicAcid resource.
func (c *ClientR5) UpdateSubstanceNucleicAcid(ctx context.Context, resource r5.SubstanceNucleicAcid) (update.Result[r5.SubstanceNucleicAcid], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubstanceNucleicAcid]{}, err
	}
	typed, ok := result.Resource.(r5.SubstanceNucleicAcid)
	if !ok {
		return update.Result[r5.SubstanceNucleicAcid]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubstanceNucleicAcid]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceNucleicAcid deletes a SubstanceNucleicAcid resource by ID.
func (c *ClientR5) DeleteSubstanceNucleicAcid(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceNucleicAcid", id)
}

// SearchSubstanceNucleicAcid performs a search for SubstanceNucleicAcid resources.
func (c *ClientR5) SearchSubstanceNucleicAcid(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubstanceNucleicAcid], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceNucleicAcid", parameters, options)
	if err != nil {
		return search.Result[r5.SubstanceNucleicAcid]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubstanceNucleicAcid, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubstanceNucleicAcid)
		if !ok {
			return search.Result[r5.SubstanceNucleicAcid]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubstanceNucleicAcid]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstancePolymer creates a new SubstancePolymer resource.
func (c *ClientR5) CreateSubstancePolymer(ctx context.Context, resource r5.SubstancePolymer) (r5.SubstancePolymer, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubstancePolymer{}, err
	}
	typed, ok := result.(r5.SubstancePolymer)
	if !ok {
		return r5.SubstancePolymer{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstancePolymer retrieves a SubstancePolymer resource by ID.
func (c *ClientR5) ReadSubstancePolymer(ctx context.Context, id string) (r5.SubstancePolymer, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstancePolymer", id)
	if err != nil {
		return r5.SubstancePolymer{}, err
	}
	typed, ok := result.(r5.SubstancePolymer)
	if !ok {
		return r5.SubstancePolymer{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstancePolymer updates an existing SubstancePolymer resource.
func (c *ClientR5) UpdateSubstancePolymer(ctx context.Context, resource r5.SubstancePolymer) (update.Result[r5.SubstancePolymer], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubstancePolymer]{}, err
	}
	typed, ok := result.Resource.(r5.SubstancePolymer)
	if !ok {
		return update.Result[r5.SubstancePolymer]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubstancePolymer]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstancePolymer deletes a SubstancePolymer resource by ID.
func (c *ClientR5) DeleteSubstancePolymer(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstancePolymer", id)
}

// SearchSubstancePolymer performs a search for SubstancePolymer resources.
func (c *ClientR5) SearchSubstancePolymer(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubstancePolymer], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstancePolymer", parameters, options)
	if err != nil {
		return search.Result[r5.SubstancePolymer]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubstancePolymer, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubstancePolymer)
		if !ok {
			return search.Result[r5.SubstancePolymer]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubstancePolymer]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceProtein creates a new SubstanceProtein resource.
func (c *ClientR5) CreateSubstanceProtein(ctx context.Context, resource r5.SubstanceProtein) (r5.SubstanceProtein, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceProtein{}, err
	}
	typed, ok := result.(r5.SubstanceProtein)
	if !ok {
		return r5.SubstanceProtein{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceProtein retrieves a SubstanceProtein resource by ID.
func (c *ClientR5) ReadSubstanceProtein(ctx context.Context, id string) (r5.SubstanceProtein, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceProtein", id)
	if err != nil {
		return r5.SubstanceProtein{}, err
	}
	typed, ok := result.(r5.SubstanceProtein)
	if !ok {
		return r5.SubstanceProtein{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceProtein updates an existing SubstanceProtein resource.
func (c *ClientR5) UpdateSubstanceProtein(ctx context.Context, resource r5.SubstanceProtein) (update.Result[r5.SubstanceProtein], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubstanceProtein]{}, err
	}
	typed, ok := result.Resource.(r5.SubstanceProtein)
	if !ok {
		return update.Result[r5.SubstanceProtein]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubstanceProtein]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceProtein deletes a SubstanceProtein resource by ID.
func (c *ClientR5) DeleteSubstanceProtein(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceProtein", id)
}

// SearchSubstanceProtein performs a search for SubstanceProtein resources.
func (c *ClientR5) SearchSubstanceProtein(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubstanceProtein], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceProtein", parameters, options)
	if err != nil {
		return search.Result[r5.SubstanceProtein]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubstanceProtein, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubstanceProtein)
		if !ok {
			return search.Result[r5.SubstanceProtein]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubstanceProtein]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceReferenceInformation creates a new SubstanceReferenceInformation resource.
func (c *ClientR5) CreateSubstanceReferenceInformation(ctx context.Context, resource r5.SubstanceReferenceInformation) (r5.SubstanceReferenceInformation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceReferenceInformation{}, err
	}
	typed, ok := result.(r5.SubstanceReferenceInformation)
	if !ok {
		return r5.SubstanceReferenceInformation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceReferenceInformation retrieves a SubstanceReferenceInformation resource by ID.
func (c *ClientR5) ReadSubstanceReferenceInformation(ctx context.Context, id string) (r5.SubstanceReferenceInformation, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceReferenceInformation", id)
	if err != nil {
		return r5.SubstanceReferenceInformation{}, err
	}
	typed, ok := result.(r5.SubstanceReferenceInformation)
	if !ok {
		return r5.SubstanceReferenceInformation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceReferenceInformation updates an existing SubstanceReferenceInformation resource.
func (c *ClientR5) UpdateSubstanceReferenceInformation(ctx context.Context, resource r5.SubstanceReferenceInformation) (update.Result[r5.SubstanceReferenceInformation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubstanceReferenceInformation]{}, err
	}
	typed, ok := result.Resource.(r5.SubstanceReferenceInformation)
	if !ok {
		return update.Result[r5.SubstanceReferenceInformation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubstanceReferenceInformation]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceReferenceInformation deletes a SubstanceReferenceInformation resource by ID.
func (c *ClientR5) DeleteSubstanceReferenceInformation(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceReferenceInformation", id)
}

// SearchSubstanceReferenceInformation performs a search for SubstanceReferenceInformation resources.
func (c *ClientR5) SearchSubstanceReferenceInformation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubstanceReferenceInformation], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceReferenceInformation", parameters, options)
	if err != nil {
		return search.Result[r5.SubstanceReferenceInformation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubstanceReferenceInformation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubstanceReferenceInformation)
		if !ok {
			return search.Result[r5.SubstanceReferenceInformation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubstanceReferenceInformation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceSourceMaterial creates a new SubstanceSourceMaterial resource.
func (c *ClientR5) CreateSubstanceSourceMaterial(ctx context.Context, resource r5.SubstanceSourceMaterial) (r5.SubstanceSourceMaterial, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SubstanceSourceMaterial{}, err
	}
	typed, ok := result.(r5.SubstanceSourceMaterial)
	if !ok {
		return r5.SubstanceSourceMaterial{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceSourceMaterial retrieves a SubstanceSourceMaterial resource by ID.
func (c *ClientR5) ReadSubstanceSourceMaterial(ctx context.Context, id string) (r5.SubstanceSourceMaterial, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceSourceMaterial", id)
	if err != nil {
		return r5.SubstanceSourceMaterial{}, err
	}
	typed, ok := result.(r5.SubstanceSourceMaterial)
	if !ok {
		return r5.SubstanceSourceMaterial{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceSourceMaterial updates an existing SubstanceSourceMaterial resource.
func (c *ClientR5) UpdateSubstanceSourceMaterial(ctx context.Context, resource r5.SubstanceSourceMaterial) (update.Result[r5.SubstanceSourceMaterial], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SubstanceSourceMaterial]{}, err
	}
	typed, ok := result.Resource.(r5.SubstanceSourceMaterial)
	if !ok {
		return update.Result[r5.SubstanceSourceMaterial]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SubstanceSourceMaterial]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceSourceMaterial deletes a SubstanceSourceMaterial resource by ID.
func (c *ClientR5) DeleteSubstanceSourceMaterial(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceSourceMaterial", id)
}

// SearchSubstanceSourceMaterial performs a search for SubstanceSourceMaterial resources.
func (c *ClientR5) SearchSubstanceSourceMaterial(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SubstanceSourceMaterial], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceSourceMaterial", parameters, options)
	if err != nil {
		return search.Result[r5.SubstanceSourceMaterial]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SubstanceSourceMaterial, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SubstanceSourceMaterial)
		if !ok {
			return search.Result[r5.SubstanceSourceMaterial]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SubstanceSourceMaterial]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSupplyDelivery creates a new SupplyDelivery resource.
func (c *ClientR5) CreateSupplyDelivery(ctx context.Context, resource r5.SupplyDelivery) (r5.SupplyDelivery, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SupplyDelivery{}, err
	}
	typed, ok := result.(r5.SupplyDelivery)
	if !ok {
		return r5.SupplyDelivery{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSupplyDelivery retrieves a SupplyDelivery resource by ID.
func (c *ClientR5) ReadSupplyDelivery(ctx context.Context, id string) (r5.SupplyDelivery, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r5.SupplyDelivery{}, err
	}
	typed, ok := result.(r5.SupplyDelivery)
	if !ok {
		return r5.SupplyDelivery{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSupplyDelivery updates an existing SupplyDelivery resource.
func (c *ClientR5) UpdateSupplyDelivery(ctx context.Context, resource r5.SupplyDelivery) (update.Result[r5.SupplyDelivery], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SupplyDelivery]{}, err
	}
	typed, ok := result.Resource.(r5.SupplyDelivery)
	if !ok {
		return update.Result[r5.SupplyDelivery]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SupplyDelivery]{Resource: typed, Created: result.Created}, nil
}

// DeleteSupplyDelivery deletes a SupplyDelivery resource by ID.
func (c *ClientR5) DeleteSupplyDelivery(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SupplyDelivery", id)
}

// SearchSupplyDelivery performs a search for SupplyDelivery resources.
func (c *ClientR5) SearchSupplyDelivery(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SupplyDelivery], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SupplyDelivery", parameters, options)
	if err != nil {
		return search.Result[r5.SupplyDelivery]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SupplyDelivery, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SupplyDelivery)
		if !ok {
			return search.Result[r5.SupplyDelivery]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SupplyDelivery]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSupplyRequest creates a new SupplyRequest resource.
func (c *ClientR5) CreateSupplyRequest(ctx context.Context, resource r5.SupplyRequest) (r5.SupplyRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.SupplyRequest{}, err
	}
	typed, ok := result.(r5.SupplyRequest)
	if !ok {
		return r5.SupplyRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSupplyRequest retrieves a SupplyRequest resource by ID.
func (c *ClientR5) ReadSupplyRequest(ctx context.Context, id string) (r5.SupplyRequest, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r5.SupplyRequest{}, err
	}
	typed, ok := result.(r5.SupplyRequest)
	if !ok {
		return r5.SupplyRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSupplyRequest updates an existing SupplyRequest resource.
func (c *ClientR5) UpdateSupplyRequest(ctx context.Context, resource r5.SupplyRequest) (update.Result[r5.SupplyRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.SupplyRequest]{}, err
	}
	typed, ok := result.Resource.(r5.SupplyRequest)
	if !ok {
		return update.Result[r5.SupplyRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.SupplyRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteSupplyRequest deletes a SupplyRequest resource by ID.
func (c *ClientR5) DeleteSupplyRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SupplyRequest", id)
}

// SearchSupplyRequest performs a search for SupplyRequest resources.
func (c *ClientR5) SearchSupplyRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.SupplyRequest], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SupplyRequest", parameters, options)
	if err != nil {
		return search.Result[r5.SupplyRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.SupplyRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.SupplyRequest)
		if !ok {
			return search.Result[r5.SupplyRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.SupplyRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTask creates a new Task resource.
func (c *ClientR5) CreateTask(ctx context.Context, resource r5.Task) (r5.Task, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Task{}, err
	}
	typed, ok := result.(r5.Task)
	if !ok {
		return r5.Task{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTask retrieves a Task resource by ID.
func (c *ClientR5) ReadTask(ctx context.Context, id string) (r5.Task, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Task", id)
	if err != nil {
		return r5.Task{}, err
	}
	typed, ok := result.(r5.Task)
	if !ok {
		return r5.Task{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTask updates an existing Task resource.
func (c *ClientR5) UpdateTask(ctx context.Context, resource r5.Task) (update.Result[r5.Task], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Task]{}, err
	}
	typed, ok := result.Resource.(r5.Task)
	if !ok {
		return update.Result[r5.Task]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Task]{Resource: typed, Created: result.Created}, nil
}

// DeleteTask deletes a Task resource by ID.
func (c *ClientR5) DeleteTask(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Task", id)
}

// SearchTask performs a search for Task resources.
func (c *ClientR5) SearchTask(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Task], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Task", parameters, options)
	if err != nil {
		return search.Result[r5.Task]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Task, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Task)
		if !ok {
			return search.Result[r5.Task]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Task]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTerminologyCapabilities creates a new TerminologyCapabilities resource.
func (c *ClientR5) CreateTerminologyCapabilities(ctx context.Context, resource r5.TerminologyCapabilities) (r5.TerminologyCapabilities, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.TerminologyCapabilities{}, err
	}
	typed, ok := result.(r5.TerminologyCapabilities)
	if !ok {
		return r5.TerminologyCapabilities{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTerminologyCapabilities retrieves a TerminologyCapabilities resource by ID.
func (c *ClientR5) ReadTerminologyCapabilities(ctx context.Context, id string) (r5.TerminologyCapabilities, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r5.TerminologyCapabilities{}, err
	}
	typed, ok := result.(r5.TerminologyCapabilities)
	if !ok {
		return r5.TerminologyCapabilities{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTerminologyCapabilities updates an existing TerminologyCapabilities resource.
func (c *ClientR5) UpdateTerminologyCapabilities(ctx context.Context, resource r5.TerminologyCapabilities) (update.Result[r5.TerminologyCapabilities], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.TerminologyCapabilities]{}, err
	}
	typed, ok := result.Resource.(r5.TerminologyCapabilities)
	if !ok {
		return update.Result[r5.TerminologyCapabilities]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.TerminologyCapabilities]{Resource: typed, Created: result.Created}, nil
}

// DeleteTerminologyCapabilities deletes a TerminologyCapabilities resource by ID.
func (c *ClientR5) DeleteTerminologyCapabilities(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "TerminologyCapabilities", id)
}

// SearchTerminologyCapabilities performs a search for TerminologyCapabilities resources.
func (c *ClientR5) SearchTerminologyCapabilities(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.TerminologyCapabilities], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "TerminologyCapabilities", parameters, options)
	if err != nil {
		return search.Result[r5.TerminologyCapabilities]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.TerminologyCapabilities, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.TerminologyCapabilities)
		if !ok {
			return search.Result[r5.TerminologyCapabilities]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.TerminologyCapabilities]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTestPlan creates a new TestPlan resource.
func (c *ClientR5) CreateTestPlan(ctx context.Context, resource r5.TestPlan) (r5.TestPlan, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.TestPlan{}, err
	}
	typed, ok := result.(r5.TestPlan)
	if !ok {
		return r5.TestPlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTestPlan retrieves a TestPlan resource by ID.
func (c *ClientR5) ReadTestPlan(ctx context.Context, id string) (r5.TestPlan, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "TestPlan", id)
	if err != nil {
		return r5.TestPlan{}, err
	}
	typed, ok := result.(r5.TestPlan)
	if !ok {
		return r5.TestPlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTestPlan updates an existing TestPlan resource.
func (c *ClientR5) UpdateTestPlan(ctx context.Context, resource r5.TestPlan) (update.Result[r5.TestPlan], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.TestPlan]{}, err
	}
	typed, ok := result.Resource.(r5.TestPlan)
	if !ok {
		return update.Result[r5.TestPlan]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.TestPlan]{Resource: typed, Created: result.Created}, nil
}

// DeleteTestPlan deletes a TestPlan resource by ID.
func (c *ClientR5) DeleteTestPlan(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "TestPlan", id)
}

// SearchTestPlan performs a search for TestPlan resources.
func (c *ClientR5) SearchTestPlan(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.TestPlan], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "TestPlan", parameters, options)
	if err != nil {
		return search.Result[r5.TestPlan]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.TestPlan, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.TestPlan)
		if !ok {
			return search.Result[r5.TestPlan]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.TestPlan]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTestReport creates a new TestReport resource.
func (c *ClientR5) CreateTestReport(ctx context.Context, resource r5.TestReport) (r5.TestReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.TestReport{}, err
	}
	typed, ok := result.(r5.TestReport)
	if !ok {
		return r5.TestReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTestReport retrieves a TestReport resource by ID.
func (c *ClientR5) ReadTestReport(ctx context.Context, id string) (r5.TestReport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "TestReport", id)
	if err != nil {
		return r5.TestReport{}, err
	}
	typed, ok := result.(r5.TestReport)
	if !ok {
		return r5.TestReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTestReport updates an existing TestReport resource.
func (c *ClientR5) UpdateTestReport(ctx context.Context, resource r5.TestReport) (update.Result[r5.TestReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.TestReport]{}, err
	}
	typed, ok := result.Resource.(r5.TestReport)
	if !ok {
		return update.Result[r5.TestReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.TestReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteTestReport deletes a TestReport resource by ID.
func (c *ClientR5) DeleteTestReport(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "TestReport", id)
}

// SearchTestReport performs a search for TestReport resources.
func (c *ClientR5) SearchTestReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.TestReport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "TestReport", parameters, options)
	if err != nil {
		return search.Result[r5.TestReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.TestReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.TestReport)
		if !ok {
			return search.Result[r5.TestReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.TestReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTestScript creates a new TestScript resource.
func (c *ClientR5) CreateTestScript(ctx context.Context, resource r5.TestScript) (r5.TestScript, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.TestScript{}, err
	}
	typed, ok := result.(r5.TestScript)
	if !ok {
		return r5.TestScript{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTestScript retrieves a TestScript resource by ID.
func (c *ClientR5) ReadTestScript(ctx context.Context, id string) (r5.TestScript, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "TestScript", id)
	if err != nil {
		return r5.TestScript{}, err
	}
	typed, ok := result.(r5.TestScript)
	if !ok {
		return r5.TestScript{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTestScript updates an existing TestScript resource.
func (c *ClientR5) UpdateTestScript(ctx context.Context, resource r5.TestScript) (update.Result[r5.TestScript], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.TestScript]{}, err
	}
	typed, ok := result.Resource.(r5.TestScript)
	if !ok {
		return update.Result[r5.TestScript]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.TestScript]{Resource: typed, Created: result.Created}, nil
}

// DeleteTestScript deletes a TestScript resource by ID.
func (c *ClientR5) DeleteTestScript(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "TestScript", id)
}

// SearchTestScript performs a search for TestScript resources.
func (c *ClientR5) SearchTestScript(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.TestScript], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "TestScript", parameters, options)
	if err != nil {
		return search.Result[r5.TestScript]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.TestScript, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.TestScript)
		if !ok {
			return search.Result[r5.TestScript]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.TestScript]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTransport creates a new Transport resource.
func (c *ClientR5) CreateTransport(ctx context.Context, resource r5.Transport) (r5.Transport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.Transport{}, err
	}
	typed, ok := result.(r5.Transport)
	if !ok {
		return r5.Transport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTransport retrieves a Transport resource by ID.
func (c *ClientR5) ReadTransport(ctx context.Context, id string) (r5.Transport, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Transport", id)
	if err != nil {
		return r5.Transport{}, err
	}
	typed, ok := result.(r5.Transport)
	if !ok {
		return r5.Transport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTransport updates an existing Transport resource.
func (c *ClientR5) UpdateTransport(ctx context.Context, resource r5.Transport) (update.Result[r5.Transport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.Transport]{}, err
	}
	typed, ok := result.Resource.(r5.Transport)
	if !ok {
		return update.Result[r5.Transport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.Transport]{Resource: typed, Created: result.Created}, nil
}

// DeleteTransport deletes a Transport resource by ID.
func (c *ClientR5) DeleteTransport(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Transport", id)
}

// SearchTransport performs a search for Transport resources.
func (c *ClientR5) SearchTransport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.Transport], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Transport", parameters, options)
	if err != nil {
		return search.Result[r5.Transport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.Transport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.Transport)
		if !ok {
			return search.Result[r5.Transport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.Transport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateValueSet creates a new ValueSet resource.
func (c *ClientR5) CreateValueSet(ctx context.Context, resource r5.ValueSet) (r5.ValueSet, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.ValueSet{}, err
	}
	typed, ok := result.(r5.ValueSet)
	if !ok {
		return r5.ValueSet{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadValueSet retrieves a ValueSet resource by ID.
func (c *ClientR5) ReadValueSet(ctx context.Context, id string) (r5.ValueSet, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ValueSet", id)
	if err != nil {
		return r5.ValueSet{}, err
	}
	typed, ok := result.(r5.ValueSet)
	if !ok {
		return r5.ValueSet{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateValueSet updates an existing ValueSet resource.
func (c *ClientR5) UpdateValueSet(ctx context.Context, resource r5.ValueSet) (update.Result[r5.ValueSet], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.ValueSet]{}, err
	}
	typed, ok := result.Resource.(r5.ValueSet)
	if !ok {
		return update.Result[r5.ValueSet]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.ValueSet]{Resource: typed, Created: result.Created}, nil
}

// DeleteValueSet deletes a ValueSet resource by ID.
func (c *ClientR5) DeleteValueSet(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ValueSet", id)
}

// SearchValueSet performs a search for ValueSet resources.
func (c *ClientR5) SearchValueSet(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.ValueSet], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ValueSet", parameters, options)
	if err != nil {
		return search.Result[r5.ValueSet]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.ValueSet, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.ValueSet)
		if !ok {
			return search.Result[r5.ValueSet]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.ValueSet]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateVerificationResult creates a new VerificationResult resource.
func (c *ClientR5) CreateVerificationResult(ctx context.Context, resource r5.VerificationResult) (r5.VerificationResult, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.VerificationResult{}, err
	}
	typed, ok := result.(r5.VerificationResult)
	if !ok {
		return r5.VerificationResult{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadVerificationResult retrieves a VerificationResult resource by ID.
func (c *ClientR5) ReadVerificationResult(ctx context.Context, id string) (r5.VerificationResult, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r5.VerificationResult{}, err
	}
	typed, ok := result.(r5.VerificationResult)
	if !ok {
		return r5.VerificationResult{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateVerificationResult updates an existing VerificationResult resource.
func (c *ClientR5) UpdateVerificationResult(ctx context.Context, resource r5.VerificationResult) (update.Result[r5.VerificationResult], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.VerificationResult]{}, err
	}
	typed, ok := result.Resource.(r5.VerificationResult)
	if !ok {
		return update.Result[r5.VerificationResult]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.VerificationResult]{Resource: typed, Created: result.Created}, nil
}

// DeleteVerificationResult deletes a VerificationResult resource by ID.
func (c *ClientR5) DeleteVerificationResult(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "VerificationResult", id)
}

// SearchVerificationResult performs a search for VerificationResult resources.
func (c *ClientR5) SearchVerificationResult(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.VerificationResult], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "VerificationResult", parameters, options)
	if err != nil {
		return search.Result[r5.VerificationResult]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.VerificationResult, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.VerificationResult)
		if !ok {
			return search.Result[r5.VerificationResult]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.VerificationResult]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateVisionPrescription creates a new VisionPrescription resource.
func (c *ClientR5) CreateVisionPrescription(ctx context.Context, resource r5.VisionPrescription) (r5.VisionPrescription, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r5.VisionPrescription{}, err
	}
	typed, ok := result.(r5.VisionPrescription)
	if !ok {
		return r5.VisionPrescription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadVisionPrescription retrieves a VisionPrescription resource by ID.
func (c *ClientR5) ReadVisionPrescription(ctx context.Context, id string) (r5.VisionPrescription, error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r5.VisionPrescription{}, err
	}
	typed, ok := result.(r5.VisionPrescription)
	if !ok {
		return r5.VisionPrescription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateVisionPrescription updates an existing VisionPrescription resource.
func (c *ClientR5) UpdateVisionPrescription(ctx context.Context, resource r5.VisionPrescription) (update.Result[r5.VisionPrescription], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r5.VisionPrescription]{}, err
	}
	typed, ok := result.Resource.(r5.VisionPrescription)
	if !ok {
		return update.Result[r5.VisionPrescription]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r5.VisionPrescription]{Resource: typed, Created: result.Created}, nil
}

// DeleteVisionPrescription deletes a VisionPrescription resource by ID.
func (c *ClientR5) DeleteVisionPrescription(ctx context.Context, id string) error {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "VisionPrescription", id)
}

// SearchVisionPrescription performs a search for VisionPrescription resources.
func (c *ClientR5) SearchVisionPrescription(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r5.VisionPrescription], error) {
	client := &internalClient[model.R5]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "VisionPrescription", parameters, options)
	if err != nil {
		return search.Result[r5.VisionPrescription]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r5.VisionPrescription, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r5.VisionPrescription)
		if !ok {
			return search.Result[r5.VisionPrescription]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r5.VisionPrescription]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}
