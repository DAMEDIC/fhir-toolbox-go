// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.
//go:build r4 || !(r4 || r4b || r5)

package rest

import (
	"context"
	"fmt"
	"github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	"github.com/DAMEDIC/fhir-toolbox-go/capabilities/update"
	"github.com/DAMEDIC/fhir-toolbox-go/model"
	"github.com/DAMEDIC/fhir-toolbox-go/model/gen/basic"
	"github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4"
	"net/http"
	"net/url"
)

// ClientR4 provides both generic and resource-specific FHIR client capabilities.
type ClientR4 struct {
	// BaseURL is the base URL of the FHIR server
	BaseURL *url.URL
	// Client is the HTTP client to use for requests. If nil, http.DefaultClient is used.
	Client *http.Client
	// Format specifies the request/response format (JSON or XML). Defaults to JSON if not set.
	Format Format
}

// httpClient returns the HTTP client, using http.DefaultClient if none is set.
func (c *ClientR4) httpClient() *http.Client {
	if c.Client != nil {
		return c.Client
	}
	return http.DefaultClient
}

// CapabilityStatement retrieves the server's CapabilityStatement.
func (c *ClientR4) CapabilityStatement(ctx context.Context) (basic.CapabilityStatement, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.CapabilityStatement(ctx)
}

// Create creates a new resource.
func (c *ClientR4) Create(ctx context.Context, resource model.Resource) (model.Resource, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Create(ctx, resource)
}

// Read retrieves a resource by type and ID.
func (c *ClientR4) Read(ctx context.Context, resourceType string, id string) (model.Resource, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Read(ctx, resourceType, id)
}

// Update updates an existing resource.
func (c *ClientR4) Update(ctx context.Context, resource model.Resource) (update.Result[model.Resource], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Update(ctx, resource)
}

// Delete deletes a resource by type and ID.
func (c *ClientR4) Delete(ctx context.Context, resourceType string, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, resourceType, id)
}

// Search performs a search operation for the given resource type.
func (c *ClientR4) Search(ctx context.Context, resourceType string, parameters search.Parameters, options search.Options) (search.Result[model.Resource], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Search(ctx, resourceType, parameters, options)
}

// CreateAccount creates a new Account resource.
func (c *ClientR4) CreateAccount(ctx context.Context, resource r4.Account) (r4.Account, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Account{}, err
	}
	typed, ok := result.(r4.Account)
	if !ok {
		return r4.Account{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAccount retrieves a Account resource by ID.
func (c *ClientR4) ReadAccount(ctx context.Context, id string) (r4.Account, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Account", id)
	if err != nil {
		return r4.Account{}, err
	}
	typed, ok := result.(r4.Account)
	if !ok {
		return r4.Account{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAccount updates an existing Account resource.
func (c *ClientR4) UpdateAccount(ctx context.Context, resource r4.Account) (update.Result[r4.Account], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Account]{}, err
	}
	typed, ok := result.Resource.(r4.Account)
	if !ok {
		return update.Result[r4.Account]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Account]{Resource: typed, Created: result.Created}, nil
}

// DeleteAccount deletes a Account resource by ID.
func (c *ClientR4) DeleteAccount(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Account", id)
}

// SearchAccount performs a search for Account resources.
func (c *ClientR4) SearchAccount(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Account], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Account", parameters, options)
	if err != nil {
		return search.Result[r4.Account]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Account, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Account)
		if !ok {
			return search.Result[r4.Account]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Account]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateActivityDefinition creates a new ActivityDefinition resource.
func (c *ClientR4) CreateActivityDefinition(ctx context.Context, resource r4.ActivityDefinition) (r4.ActivityDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ActivityDefinition{}, err
	}
	typed, ok := result.(r4.ActivityDefinition)
	if !ok {
		return r4.ActivityDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadActivityDefinition retrieves a ActivityDefinition resource by ID.
func (c *ClientR4) ReadActivityDefinition(ctx context.Context, id string) (r4.ActivityDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r4.ActivityDefinition{}, err
	}
	typed, ok := result.(r4.ActivityDefinition)
	if !ok {
		return r4.ActivityDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateActivityDefinition updates an existing ActivityDefinition resource.
func (c *ClientR4) UpdateActivityDefinition(ctx context.Context, resource r4.ActivityDefinition) (update.Result[r4.ActivityDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ActivityDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.ActivityDefinition)
	if !ok {
		return update.Result[r4.ActivityDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ActivityDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteActivityDefinition deletes a ActivityDefinition resource by ID.
func (c *ClientR4) DeleteActivityDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ActivityDefinition", id)
}

// SearchActivityDefinition performs a search for ActivityDefinition resources.
func (c *ClientR4) SearchActivityDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ActivityDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ActivityDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.ActivityDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ActivityDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ActivityDefinition)
		if !ok {
			return search.Result[r4.ActivityDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ActivityDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAdverseEvent creates a new AdverseEvent resource.
func (c *ClientR4) CreateAdverseEvent(ctx context.Context, resource r4.AdverseEvent) (r4.AdverseEvent, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.AdverseEvent{}, err
	}
	typed, ok := result.(r4.AdverseEvent)
	if !ok {
		return r4.AdverseEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAdverseEvent retrieves a AdverseEvent resource by ID.
func (c *ClientR4) ReadAdverseEvent(ctx context.Context, id string) (r4.AdverseEvent, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r4.AdverseEvent{}, err
	}
	typed, ok := result.(r4.AdverseEvent)
	if !ok {
		return r4.AdverseEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAdverseEvent updates an existing AdverseEvent resource.
func (c *ClientR4) UpdateAdverseEvent(ctx context.Context, resource r4.AdverseEvent) (update.Result[r4.AdverseEvent], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.AdverseEvent]{}, err
	}
	typed, ok := result.Resource.(r4.AdverseEvent)
	if !ok {
		return update.Result[r4.AdverseEvent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.AdverseEvent]{Resource: typed, Created: result.Created}, nil
}

// DeleteAdverseEvent deletes a AdverseEvent resource by ID.
func (c *ClientR4) DeleteAdverseEvent(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AdverseEvent", id)
}

// SearchAdverseEvent performs a search for AdverseEvent resources.
func (c *ClientR4) SearchAdverseEvent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.AdverseEvent], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AdverseEvent", parameters, options)
	if err != nil {
		return search.Result[r4.AdverseEvent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.AdverseEvent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.AdverseEvent)
		if !ok {
			return search.Result[r4.AdverseEvent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.AdverseEvent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAllergyIntolerance creates a new AllergyIntolerance resource.
func (c *ClientR4) CreateAllergyIntolerance(ctx context.Context, resource r4.AllergyIntolerance) (r4.AllergyIntolerance, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.AllergyIntolerance{}, err
	}
	typed, ok := result.(r4.AllergyIntolerance)
	if !ok {
		return r4.AllergyIntolerance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAllergyIntolerance retrieves a AllergyIntolerance resource by ID.
func (c *ClientR4) ReadAllergyIntolerance(ctx context.Context, id string) (r4.AllergyIntolerance, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r4.AllergyIntolerance{}, err
	}
	typed, ok := result.(r4.AllergyIntolerance)
	if !ok {
		return r4.AllergyIntolerance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAllergyIntolerance updates an existing AllergyIntolerance resource.
func (c *ClientR4) UpdateAllergyIntolerance(ctx context.Context, resource r4.AllergyIntolerance) (update.Result[r4.AllergyIntolerance], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.AllergyIntolerance]{}, err
	}
	typed, ok := result.Resource.(r4.AllergyIntolerance)
	if !ok {
		return update.Result[r4.AllergyIntolerance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.AllergyIntolerance]{Resource: typed, Created: result.Created}, nil
}

// DeleteAllergyIntolerance deletes a AllergyIntolerance resource by ID.
func (c *ClientR4) DeleteAllergyIntolerance(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AllergyIntolerance", id)
}

// SearchAllergyIntolerance performs a search for AllergyIntolerance resources.
func (c *ClientR4) SearchAllergyIntolerance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.AllergyIntolerance], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AllergyIntolerance", parameters, options)
	if err != nil {
		return search.Result[r4.AllergyIntolerance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.AllergyIntolerance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.AllergyIntolerance)
		if !ok {
			return search.Result[r4.AllergyIntolerance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.AllergyIntolerance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAppointment creates a new Appointment resource.
func (c *ClientR4) CreateAppointment(ctx context.Context, resource r4.Appointment) (r4.Appointment, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Appointment{}, err
	}
	typed, ok := result.(r4.Appointment)
	if !ok {
		return r4.Appointment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAppointment retrieves a Appointment resource by ID.
func (c *ClientR4) ReadAppointment(ctx context.Context, id string) (r4.Appointment, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Appointment", id)
	if err != nil {
		return r4.Appointment{}, err
	}
	typed, ok := result.(r4.Appointment)
	if !ok {
		return r4.Appointment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAppointment updates an existing Appointment resource.
func (c *ClientR4) UpdateAppointment(ctx context.Context, resource r4.Appointment) (update.Result[r4.Appointment], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Appointment]{}, err
	}
	typed, ok := result.Resource.(r4.Appointment)
	if !ok {
		return update.Result[r4.Appointment]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Appointment]{Resource: typed, Created: result.Created}, nil
}

// DeleteAppointment deletes a Appointment resource by ID.
func (c *ClientR4) DeleteAppointment(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Appointment", id)
}

// SearchAppointment performs a search for Appointment resources.
func (c *ClientR4) SearchAppointment(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Appointment], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Appointment", parameters, options)
	if err != nil {
		return search.Result[r4.Appointment]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Appointment, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Appointment)
		if !ok {
			return search.Result[r4.Appointment]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Appointment]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAppointmentResponse creates a new AppointmentResponse resource.
func (c *ClientR4) CreateAppointmentResponse(ctx context.Context, resource r4.AppointmentResponse) (r4.AppointmentResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.AppointmentResponse{}, err
	}
	typed, ok := result.(r4.AppointmentResponse)
	if !ok {
		return r4.AppointmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAppointmentResponse retrieves a AppointmentResponse resource by ID.
func (c *ClientR4) ReadAppointmentResponse(ctx context.Context, id string) (r4.AppointmentResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r4.AppointmentResponse{}, err
	}
	typed, ok := result.(r4.AppointmentResponse)
	if !ok {
		return r4.AppointmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAppointmentResponse updates an existing AppointmentResponse resource.
func (c *ClientR4) UpdateAppointmentResponse(ctx context.Context, resource r4.AppointmentResponse) (update.Result[r4.AppointmentResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.AppointmentResponse]{}, err
	}
	typed, ok := result.Resource.(r4.AppointmentResponse)
	if !ok {
		return update.Result[r4.AppointmentResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.AppointmentResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteAppointmentResponse deletes a AppointmentResponse resource by ID.
func (c *ClientR4) DeleteAppointmentResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AppointmentResponse", id)
}

// SearchAppointmentResponse performs a search for AppointmentResponse resources.
func (c *ClientR4) SearchAppointmentResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.AppointmentResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AppointmentResponse", parameters, options)
	if err != nil {
		return search.Result[r4.AppointmentResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.AppointmentResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.AppointmentResponse)
		if !ok {
			return search.Result[r4.AppointmentResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.AppointmentResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAuditEvent creates a new AuditEvent resource.
func (c *ClientR4) CreateAuditEvent(ctx context.Context, resource r4.AuditEvent) (r4.AuditEvent, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.AuditEvent{}, err
	}
	typed, ok := result.(r4.AuditEvent)
	if !ok {
		return r4.AuditEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAuditEvent retrieves a AuditEvent resource by ID.
func (c *ClientR4) ReadAuditEvent(ctx context.Context, id string) (r4.AuditEvent, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r4.AuditEvent{}, err
	}
	typed, ok := result.(r4.AuditEvent)
	if !ok {
		return r4.AuditEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAuditEvent updates an existing AuditEvent resource.
func (c *ClientR4) UpdateAuditEvent(ctx context.Context, resource r4.AuditEvent) (update.Result[r4.AuditEvent], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.AuditEvent]{}, err
	}
	typed, ok := result.Resource.(r4.AuditEvent)
	if !ok {
		return update.Result[r4.AuditEvent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.AuditEvent]{Resource: typed, Created: result.Created}, nil
}

// DeleteAuditEvent deletes a AuditEvent resource by ID.
func (c *ClientR4) DeleteAuditEvent(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "AuditEvent", id)
}

// SearchAuditEvent performs a search for AuditEvent resources.
func (c *ClientR4) SearchAuditEvent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.AuditEvent], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "AuditEvent", parameters, options)
	if err != nil {
		return search.Result[r4.AuditEvent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.AuditEvent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.AuditEvent)
		if !ok {
			return search.Result[r4.AuditEvent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.AuditEvent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBasic creates a new Basic resource.
func (c *ClientR4) CreateBasic(ctx context.Context, resource r4.Basic) (r4.Basic, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Basic{}, err
	}
	typed, ok := result.(r4.Basic)
	if !ok {
		return r4.Basic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBasic retrieves a Basic resource by ID.
func (c *ClientR4) ReadBasic(ctx context.Context, id string) (r4.Basic, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Basic", id)
	if err != nil {
		return r4.Basic{}, err
	}
	typed, ok := result.(r4.Basic)
	if !ok {
		return r4.Basic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBasic updates an existing Basic resource.
func (c *ClientR4) UpdateBasic(ctx context.Context, resource r4.Basic) (update.Result[r4.Basic], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Basic]{}, err
	}
	typed, ok := result.Resource.(r4.Basic)
	if !ok {
		return update.Result[r4.Basic]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Basic]{Resource: typed, Created: result.Created}, nil
}

// DeleteBasic deletes a Basic resource by ID.
func (c *ClientR4) DeleteBasic(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Basic", id)
}

// SearchBasic performs a search for Basic resources.
func (c *ClientR4) SearchBasic(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Basic], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Basic", parameters, options)
	if err != nil {
		return search.Result[r4.Basic]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Basic, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Basic)
		if !ok {
			return search.Result[r4.Basic]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Basic]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBinary creates a new Binary resource.
func (c *ClientR4) CreateBinary(ctx context.Context, resource r4.Binary) (r4.Binary, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Binary{}, err
	}
	typed, ok := result.(r4.Binary)
	if !ok {
		return r4.Binary{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBinary retrieves a Binary resource by ID.
func (c *ClientR4) ReadBinary(ctx context.Context, id string) (r4.Binary, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Binary", id)
	if err != nil {
		return r4.Binary{}, err
	}
	typed, ok := result.(r4.Binary)
	if !ok {
		return r4.Binary{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBinary updates an existing Binary resource.
func (c *ClientR4) UpdateBinary(ctx context.Context, resource r4.Binary) (update.Result[r4.Binary], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Binary]{}, err
	}
	typed, ok := result.Resource.(r4.Binary)
	if !ok {
		return update.Result[r4.Binary]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Binary]{Resource: typed, Created: result.Created}, nil
}

// DeleteBinary deletes a Binary resource by ID.
func (c *ClientR4) DeleteBinary(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Binary", id)
}

// SearchBinary performs a search for Binary resources.
func (c *ClientR4) SearchBinary(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Binary], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Binary", parameters, options)
	if err != nil {
		return search.Result[r4.Binary]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Binary, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Binary)
		if !ok {
			return search.Result[r4.Binary]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Binary]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBiologicallyDerivedProduct creates a new BiologicallyDerivedProduct resource.
func (c *ClientR4) CreateBiologicallyDerivedProduct(ctx context.Context, resource r4.BiologicallyDerivedProduct) (r4.BiologicallyDerivedProduct, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.BiologicallyDerivedProduct{}, err
	}
	typed, ok := result.(r4.BiologicallyDerivedProduct)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBiologicallyDerivedProduct retrieves a BiologicallyDerivedProduct resource by ID.
func (c *ClientR4) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r4.BiologicallyDerivedProduct, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r4.BiologicallyDerivedProduct{}, err
	}
	typed, ok := result.(r4.BiologicallyDerivedProduct)
	if !ok {
		return r4.BiologicallyDerivedProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBiologicallyDerivedProduct updates an existing BiologicallyDerivedProduct resource.
func (c *ClientR4) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r4.BiologicallyDerivedProduct) (update.Result[r4.BiologicallyDerivedProduct], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.BiologicallyDerivedProduct]{}, err
	}
	typed, ok := result.Resource.(r4.BiologicallyDerivedProduct)
	if !ok {
		return update.Result[r4.BiologicallyDerivedProduct]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.BiologicallyDerivedProduct]{Resource: typed, Created: result.Created}, nil
}

// DeleteBiologicallyDerivedProduct deletes a BiologicallyDerivedProduct resource by ID.
func (c *ClientR4) DeleteBiologicallyDerivedProduct(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "BiologicallyDerivedProduct", id)
}

// SearchBiologicallyDerivedProduct performs a search for BiologicallyDerivedProduct resources.
func (c *ClientR4) SearchBiologicallyDerivedProduct(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.BiologicallyDerivedProduct], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "BiologicallyDerivedProduct", parameters, options)
	if err != nil {
		return search.Result[r4.BiologicallyDerivedProduct]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.BiologicallyDerivedProduct, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.BiologicallyDerivedProduct)
		if !ok {
			return search.Result[r4.BiologicallyDerivedProduct]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.BiologicallyDerivedProduct]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBodyStructure creates a new BodyStructure resource.
func (c *ClientR4) CreateBodyStructure(ctx context.Context, resource r4.BodyStructure) (r4.BodyStructure, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.BodyStructure{}, err
	}
	typed, ok := result.(r4.BodyStructure)
	if !ok {
		return r4.BodyStructure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBodyStructure retrieves a BodyStructure resource by ID.
func (c *ClientR4) ReadBodyStructure(ctx context.Context, id string) (r4.BodyStructure, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r4.BodyStructure{}, err
	}
	typed, ok := result.(r4.BodyStructure)
	if !ok {
		return r4.BodyStructure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBodyStructure updates an existing BodyStructure resource.
func (c *ClientR4) UpdateBodyStructure(ctx context.Context, resource r4.BodyStructure) (update.Result[r4.BodyStructure], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.BodyStructure]{}, err
	}
	typed, ok := result.Resource.(r4.BodyStructure)
	if !ok {
		return update.Result[r4.BodyStructure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.BodyStructure]{Resource: typed, Created: result.Created}, nil
}

// DeleteBodyStructure deletes a BodyStructure resource by ID.
func (c *ClientR4) DeleteBodyStructure(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "BodyStructure", id)
}

// SearchBodyStructure performs a search for BodyStructure resources.
func (c *ClientR4) SearchBodyStructure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.BodyStructure], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "BodyStructure", parameters, options)
	if err != nil {
		return search.Result[r4.BodyStructure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.BodyStructure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.BodyStructure)
		if !ok {
			return search.Result[r4.BodyStructure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.BodyStructure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBundle creates a new Bundle resource.
func (c *ClientR4) CreateBundle(ctx context.Context, resource r4.Bundle) (r4.Bundle, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Bundle{}, err
	}
	typed, ok := result.(r4.Bundle)
	if !ok {
		return r4.Bundle{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBundle retrieves a Bundle resource by ID.
func (c *ClientR4) ReadBundle(ctx context.Context, id string) (r4.Bundle, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Bundle", id)
	if err != nil {
		return r4.Bundle{}, err
	}
	typed, ok := result.(r4.Bundle)
	if !ok {
		return r4.Bundle{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBundle updates an existing Bundle resource.
func (c *ClientR4) UpdateBundle(ctx context.Context, resource r4.Bundle) (update.Result[r4.Bundle], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Bundle]{}, err
	}
	typed, ok := result.Resource.(r4.Bundle)
	if !ok {
		return update.Result[r4.Bundle]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Bundle]{Resource: typed, Created: result.Created}, nil
}

// DeleteBundle deletes a Bundle resource by ID.
func (c *ClientR4) DeleteBundle(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Bundle", id)
}

// SearchBundle performs a search for Bundle resources.
func (c *ClientR4) SearchBundle(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Bundle], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Bundle", parameters, options)
	if err != nil {
		return search.Result[r4.Bundle]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Bundle, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Bundle)
		if !ok {
			return search.Result[r4.Bundle]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Bundle]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCapabilityStatement creates a new CapabilityStatement resource.
func (c *ClientR4) CreateCapabilityStatement(ctx context.Context, resource r4.CapabilityStatement) (r4.CapabilityStatement, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CapabilityStatement{}, err
	}
	typed, ok := result.(r4.CapabilityStatement)
	if !ok {
		return r4.CapabilityStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCapabilityStatement retrieves a CapabilityStatement resource by ID.
func (c *ClientR4) ReadCapabilityStatement(ctx context.Context, id string) (r4.CapabilityStatement, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r4.CapabilityStatement{}, err
	}
	typed, ok := result.(r4.CapabilityStatement)
	if !ok {
		return r4.CapabilityStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCapabilityStatement updates an existing CapabilityStatement resource.
func (c *ClientR4) UpdateCapabilityStatement(ctx context.Context, resource r4.CapabilityStatement) (update.Result[r4.CapabilityStatement], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CapabilityStatement]{}, err
	}
	typed, ok := result.Resource.(r4.CapabilityStatement)
	if !ok {
		return update.Result[r4.CapabilityStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CapabilityStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteCapabilityStatement deletes a CapabilityStatement resource by ID.
func (c *ClientR4) DeleteCapabilityStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CapabilityStatement", id)
}

// SearchCapabilityStatement performs a search for CapabilityStatement resources.
func (c *ClientR4) SearchCapabilityStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CapabilityStatement], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CapabilityStatement", parameters, options)
	if err != nil {
		return search.Result[r4.CapabilityStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CapabilityStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CapabilityStatement)
		if !ok {
			return search.Result[r4.CapabilityStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CapabilityStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCarePlan creates a new CarePlan resource.
func (c *ClientR4) CreateCarePlan(ctx context.Context, resource r4.CarePlan) (r4.CarePlan, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CarePlan{}, err
	}
	typed, ok := result.(r4.CarePlan)
	if !ok {
		return r4.CarePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCarePlan retrieves a CarePlan resource by ID.
func (c *ClientR4) ReadCarePlan(ctx context.Context, id string) (r4.CarePlan, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CarePlan", id)
	if err != nil {
		return r4.CarePlan{}, err
	}
	typed, ok := result.(r4.CarePlan)
	if !ok {
		return r4.CarePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCarePlan updates an existing CarePlan resource.
func (c *ClientR4) UpdateCarePlan(ctx context.Context, resource r4.CarePlan) (update.Result[r4.CarePlan], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CarePlan]{}, err
	}
	typed, ok := result.Resource.(r4.CarePlan)
	if !ok {
		return update.Result[r4.CarePlan]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CarePlan]{Resource: typed, Created: result.Created}, nil
}

// DeleteCarePlan deletes a CarePlan resource by ID.
func (c *ClientR4) DeleteCarePlan(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CarePlan", id)
}

// SearchCarePlan performs a search for CarePlan resources.
func (c *ClientR4) SearchCarePlan(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CarePlan], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CarePlan", parameters, options)
	if err != nil {
		return search.Result[r4.CarePlan]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CarePlan, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CarePlan)
		if !ok {
			return search.Result[r4.CarePlan]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CarePlan]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCareTeam creates a new CareTeam resource.
func (c *ClientR4) CreateCareTeam(ctx context.Context, resource r4.CareTeam) (r4.CareTeam, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CareTeam{}, err
	}
	typed, ok := result.(r4.CareTeam)
	if !ok {
		return r4.CareTeam{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCareTeam retrieves a CareTeam resource by ID.
func (c *ClientR4) ReadCareTeam(ctx context.Context, id string) (r4.CareTeam, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CareTeam", id)
	if err != nil {
		return r4.CareTeam{}, err
	}
	typed, ok := result.(r4.CareTeam)
	if !ok {
		return r4.CareTeam{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCareTeam updates an existing CareTeam resource.
func (c *ClientR4) UpdateCareTeam(ctx context.Context, resource r4.CareTeam) (update.Result[r4.CareTeam], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CareTeam]{}, err
	}
	typed, ok := result.Resource.(r4.CareTeam)
	if !ok {
		return update.Result[r4.CareTeam]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CareTeam]{Resource: typed, Created: result.Created}, nil
}

// DeleteCareTeam deletes a CareTeam resource by ID.
func (c *ClientR4) DeleteCareTeam(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CareTeam", id)
}

// SearchCareTeam performs a search for CareTeam resources.
func (c *ClientR4) SearchCareTeam(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CareTeam], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CareTeam", parameters, options)
	if err != nil {
		return search.Result[r4.CareTeam]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CareTeam, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CareTeam)
		if !ok {
			return search.Result[r4.CareTeam]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CareTeam]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCatalogEntry creates a new CatalogEntry resource.
func (c *ClientR4) CreateCatalogEntry(ctx context.Context, resource r4.CatalogEntry) (r4.CatalogEntry, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CatalogEntry{}, err
	}
	typed, ok := result.(r4.CatalogEntry)
	if !ok {
		return r4.CatalogEntry{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCatalogEntry retrieves a CatalogEntry resource by ID.
func (c *ClientR4) ReadCatalogEntry(ctx context.Context, id string) (r4.CatalogEntry, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CatalogEntry", id)
	if err != nil {
		return r4.CatalogEntry{}, err
	}
	typed, ok := result.(r4.CatalogEntry)
	if !ok {
		return r4.CatalogEntry{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCatalogEntry updates an existing CatalogEntry resource.
func (c *ClientR4) UpdateCatalogEntry(ctx context.Context, resource r4.CatalogEntry) (update.Result[r4.CatalogEntry], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CatalogEntry]{}, err
	}
	typed, ok := result.Resource.(r4.CatalogEntry)
	if !ok {
		return update.Result[r4.CatalogEntry]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CatalogEntry]{Resource: typed, Created: result.Created}, nil
}

// DeleteCatalogEntry deletes a CatalogEntry resource by ID.
func (c *ClientR4) DeleteCatalogEntry(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CatalogEntry", id)
}

// SearchCatalogEntry performs a search for CatalogEntry resources.
func (c *ClientR4) SearchCatalogEntry(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CatalogEntry], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CatalogEntry", parameters, options)
	if err != nil {
		return search.Result[r4.CatalogEntry]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CatalogEntry, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CatalogEntry)
		if !ok {
			return search.Result[r4.CatalogEntry]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CatalogEntry]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateChargeItem creates a new ChargeItem resource.
func (c *ClientR4) CreateChargeItem(ctx context.Context, resource r4.ChargeItem) (r4.ChargeItem, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ChargeItem{}, err
	}
	typed, ok := result.(r4.ChargeItem)
	if !ok {
		return r4.ChargeItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadChargeItem retrieves a ChargeItem resource by ID.
func (c *ClientR4) ReadChargeItem(ctx context.Context, id string) (r4.ChargeItem, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r4.ChargeItem{}, err
	}
	typed, ok := result.(r4.ChargeItem)
	if !ok {
		return r4.ChargeItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateChargeItem updates an existing ChargeItem resource.
func (c *ClientR4) UpdateChargeItem(ctx context.Context, resource r4.ChargeItem) (update.Result[r4.ChargeItem], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ChargeItem]{}, err
	}
	typed, ok := result.Resource.(r4.ChargeItem)
	if !ok {
		return update.Result[r4.ChargeItem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ChargeItem]{Resource: typed, Created: result.Created}, nil
}

// DeleteChargeItem deletes a ChargeItem resource by ID.
func (c *ClientR4) DeleteChargeItem(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ChargeItem", id)
}

// SearchChargeItem performs a search for ChargeItem resources.
func (c *ClientR4) SearchChargeItem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ChargeItem], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ChargeItem", parameters, options)
	if err != nil {
		return search.Result[r4.ChargeItem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ChargeItem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ChargeItem)
		if !ok {
			return search.Result[r4.ChargeItem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ChargeItem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateChargeItemDefinition creates a new ChargeItemDefinition resource.
func (c *ClientR4) CreateChargeItemDefinition(ctx context.Context, resource r4.ChargeItemDefinition) (r4.ChargeItemDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ChargeItemDefinition{}, err
	}
	typed, ok := result.(r4.ChargeItemDefinition)
	if !ok {
		return r4.ChargeItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadChargeItemDefinition retrieves a ChargeItemDefinition resource by ID.
func (c *ClientR4) ReadChargeItemDefinition(ctx context.Context, id string) (r4.ChargeItemDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r4.ChargeItemDefinition{}, err
	}
	typed, ok := result.(r4.ChargeItemDefinition)
	if !ok {
		return r4.ChargeItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateChargeItemDefinition updates an existing ChargeItemDefinition resource.
func (c *ClientR4) UpdateChargeItemDefinition(ctx context.Context, resource r4.ChargeItemDefinition) (update.Result[r4.ChargeItemDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ChargeItemDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.ChargeItemDefinition)
	if !ok {
		return update.Result[r4.ChargeItemDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ChargeItemDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteChargeItemDefinition deletes a ChargeItemDefinition resource by ID.
func (c *ClientR4) DeleteChargeItemDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ChargeItemDefinition", id)
}

// SearchChargeItemDefinition performs a search for ChargeItemDefinition resources.
func (c *ClientR4) SearchChargeItemDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ChargeItemDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ChargeItemDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.ChargeItemDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ChargeItemDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ChargeItemDefinition)
		if !ok {
			return search.Result[r4.ChargeItemDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ChargeItemDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClaim creates a new Claim resource.
func (c *ClientR4) CreateClaim(ctx context.Context, resource r4.Claim) (r4.Claim, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Claim{}, err
	}
	typed, ok := result.(r4.Claim)
	if !ok {
		return r4.Claim{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClaim retrieves a Claim resource by ID.
func (c *ClientR4) ReadClaim(ctx context.Context, id string) (r4.Claim, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Claim", id)
	if err != nil {
		return r4.Claim{}, err
	}
	typed, ok := result.(r4.Claim)
	if !ok {
		return r4.Claim{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClaim updates an existing Claim resource.
func (c *ClientR4) UpdateClaim(ctx context.Context, resource r4.Claim) (update.Result[r4.Claim], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Claim]{}, err
	}
	typed, ok := result.Resource.(r4.Claim)
	if !ok {
		return update.Result[r4.Claim]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Claim]{Resource: typed, Created: result.Created}, nil
}

// DeleteClaim deletes a Claim resource by ID.
func (c *ClientR4) DeleteClaim(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Claim", id)
}

// SearchClaim performs a search for Claim resources.
func (c *ClientR4) SearchClaim(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Claim], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Claim", parameters, options)
	if err != nil {
		return search.Result[r4.Claim]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Claim, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Claim)
		if !ok {
			return search.Result[r4.Claim]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Claim]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClaimResponse creates a new ClaimResponse resource.
func (c *ClientR4) CreateClaimResponse(ctx context.Context, resource r4.ClaimResponse) (r4.ClaimResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ClaimResponse{}, err
	}
	typed, ok := result.(r4.ClaimResponse)
	if !ok {
		return r4.ClaimResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClaimResponse retrieves a ClaimResponse resource by ID.
func (c *ClientR4) ReadClaimResponse(ctx context.Context, id string) (r4.ClaimResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r4.ClaimResponse{}, err
	}
	typed, ok := result.(r4.ClaimResponse)
	if !ok {
		return r4.ClaimResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClaimResponse updates an existing ClaimResponse resource.
func (c *ClientR4) UpdateClaimResponse(ctx context.Context, resource r4.ClaimResponse) (update.Result[r4.ClaimResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ClaimResponse]{}, err
	}
	typed, ok := result.Resource.(r4.ClaimResponse)
	if !ok {
		return update.Result[r4.ClaimResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ClaimResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteClaimResponse deletes a ClaimResponse resource by ID.
func (c *ClientR4) DeleteClaimResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ClaimResponse", id)
}

// SearchClaimResponse performs a search for ClaimResponse resources.
func (c *ClientR4) SearchClaimResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ClaimResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ClaimResponse", parameters, options)
	if err != nil {
		return search.Result[r4.ClaimResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ClaimResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ClaimResponse)
		if !ok {
			return search.Result[r4.ClaimResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ClaimResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClinicalImpression creates a new ClinicalImpression resource.
func (c *ClientR4) CreateClinicalImpression(ctx context.Context, resource r4.ClinicalImpression) (r4.ClinicalImpression, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ClinicalImpression{}, err
	}
	typed, ok := result.(r4.ClinicalImpression)
	if !ok {
		return r4.ClinicalImpression{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClinicalImpression retrieves a ClinicalImpression resource by ID.
func (c *ClientR4) ReadClinicalImpression(ctx context.Context, id string) (r4.ClinicalImpression, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r4.ClinicalImpression{}, err
	}
	typed, ok := result.(r4.ClinicalImpression)
	if !ok {
		return r4.ClinicalImpression{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClinicalImpression updates an existing ClinicalImpression resource.
func (c *ClientR4) UpdateClinicalImpression(ctx context.Context, resource r4.ClinicalImpression) (update.Result[r4.ClinicalImpression], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ClinicalImpression]{}, err
	}
	typed, ok := result.Resource.(r4.ClinicalImpression)
	if !ok {
		return update.Result[r4.ClinicalImpression]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ClinicalImpression]{Resource: typed, Created: result.Created}, nil
}

// DeleteClinicalImpression deletes a ClinicalImpression resource by ID.
func (c *ClientR4) DeleteClinicalImpression(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ClinicalImpression", id)
}

// SearchClinicalImpression performs a search for ClinicalImpression resources.
func (c *ClientR4) SearchClinicalImpression(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ClinicalImpression], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ClinicalImpression", parameters, options)
	if err != nil {
		return search.Result[r4.ClinicalImpression]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ClinicalImpression, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ClinicalImpression)
		if !ok {
			return search.Result[r4.ClinicalImpression]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ClinicalImpression]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCodeSystem creates a new CodeSystem resource.
func (c *ClientR4) CreateCodeSystem(ctx context.Context, resource r4.CodeSystem) (r4.CodeSystem, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CodeSystem{}, err
	}
	typed, ok := result.(r4.CodeSystem)
	if !ok {
		return r4.CodeSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCodeSystem retrieves a CodeSystem resource by ID.
func (c *ClientR4) ReadCodeSystem(ctx context.Context, id string) (r4.CodeSystem, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r4.CodeSystem{}, err
	}
	typed, ok := result.(r4.CodeSystem)
	if !ok {
		return r4.CodeSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCodeSystem updates an existing CodeSystem resource.
func (c *ClientR4) UpdateCodeSystem(ctx context.Context, resource r4.CodeSystem) (update.Result[r4.CodeSystem], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CodeSystem]{}, err
	}
	typed, ok := result.Resource.(r4.CodeSystem)
	if !ok {
		return update.Result[r4.CodeSystem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CodeSystem]{Resource: typed, Created: result.Created}, nil
}

// DeleteCodeSystem deletes a CodeSystem resource by ID.
func (c *ClientR4) DeleteCodeSystem(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CodeSystem", id)
}

// SearchCodeSystem performs a search for CodeSystem resources.
func (c *ClientR4) SearchCodeSystem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CodeSystem], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CodeSystem", parameters, options)
	if err != nil {
		return search.Result[r4.CodeSystem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CodeSystem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CodeSystem)
		if !ok {
			return search.Result[r4.CodeSystem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CodeSystem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCommunication creates a new Communication resource.
func (c *ClientR4) CreateCommunication(ctx context.Context, resource r4.Communication) (r4.Communication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Communication{}, err
	}
	typed, ok := result.(r4.Communication)
	if !ok {
		return r4.Communication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCommunication retrieves a Communication resource by ID.
func (c *ClientR4) ReadCommunication(ctx context.Context, id string) (r4.Communication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Communication", id)
	if err != nil {
		return r4.Communication{}, err
	}
	typed, ok := result.(r4.Communication)
	if !ok {
		return r4.Communication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCommunication updates an existing Communication resource.
func (c *ClientR4) UpdateCommunication(ctx context.Context, resource r4.Communication) (update.Result[r4.Communication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Communication]{}, err
	}
	typed, ok := result.Resource.(r4.Communication)
	if !ok {
		return update.Result[r4.Communication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Communication]{Resource: typed, Created: result.Created}, nil
}

// DeleteCommunication deletes a Communication resource by ID.
func (c *ClientR4) DeleteCommunication(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Communication", id)
}

// SearchCommunication performs a search for Communication resources.
func (c *ClientR4) SearchCommunication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Communication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Communication", parameters, options)
	if err != nil {
		return search.Result[r4.Communication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Communication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Communication)
		if !ok {
			return search.Result[r4.Communication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Communication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCommunicationRequest creates a new CommunicationRequest resource.
func (c *ClientR4) CreateCommunicationRequest(ctx context.Context, resource r4.CommunicationRequest) (r4.CommunicationRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CommunicationRequest{}, err
	}
	typed, ok := result.(r4.CommunicationRequest)
	if !ok {
		return r4.CommunicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCommunicationRequest retrieves a CommunicationRequest resource by ID.
func (c *ClientR4) ReadCommunicationRequest(ctx context.Context, id string) (r4.CommunicationRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r4.CommunicationRequest{}, err
	}
	typed, ok := result.(r4.CommunicationRequest)
	if !ok {
		return r4.CommunicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCommunicationRequest updates an existing CommunicationRequest resource.
func (c *ClientR4) UpdateCommunicationRequest(ctx context.Context, resource r4.CommunicationRequest) (update.Result[r4.CommunicationRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CommunicationRequest]{}, err
	}
	typed, ok := result.Resource.(r4.CommunicationRequest)
	if !ok {
		return update.Result[r4.CommunicationRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CommunicationRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteCommunicationRequest deletes a CommunicationRequest resource by ID.
func (c *ClientR4) DeleteCommunicationRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CommunicationRequest", id)
}

// SearchCommunicationRequest performs a search for CommunicationRequest resources.
func (c *ClientR4) SearchCommunicationRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CommunicationRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CommunicationRequest", parameters, options)
	if err != nil {
		return search.Result[r4.CommunicationRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CommunicationRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CommunicationRequest)
		if !ok {
			return search.Result[r4.CommunicationRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CommunicationRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCompartmentDefinition creates a new CompartmentDefinition resource.
func (c *ClientR4) CreateCompartmentDefinition(ctx context.Context, resource r4.CompartmentDefinition) (r4.CompartmentDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CompartmentDefinition{}, err
	}
	typed, ok := result.(r4.CompartmentDefinition)
	if !ok {
		return r4.CompartmentDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCompartmentDefinition retrieves a CompartmentDefinition resource by ID.
func (c *ClientR4) ReadCompartmentDefinition(ctx context.Context, id string) (r4.CompartmentDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r4.CompartmentDefinition{}, err
	}
	typed, ok := result.(r4.CompartmentDefinition)
	if !ok {
		return r4.CompartmentDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCompartmentDefinition updates an existing CompartmentDefinition resource.
func (c *ClientR4) UpdateCompartmentDefinition(ctx context.Context, resource r4.CompartmentDefinition) (update.Result[r4.CompartmentDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CompartmentDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.CompartmentDefinition)
	if !ok {
		return update.Result[r4.CompartmentDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CompartmentDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteCompartmentDefinition deletes a CompartmentDefinition resource by ID.
func (c *ClientR4) DeleteCompartmentDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CompartmentDefinition", id)
}

// SearchCompartmentDefinition performs a search for CompartmentDefinition resources.
func (c *ClientR4) SearchCompartmentDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CompartmentDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CompartmentDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.CompartmentDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CompartmentDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CompartmentDefinition)
		if !ok {
			return search.Result[r4.CompartmentDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CompartmentDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateComposition creates a new Composition resource.
func (c *ClientR4) CreateComposition(ctx context.Context, resource r4.Composition) (r4.Composition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Composition{}, err
	}
	typed, ok := result.(r4.Composition)
	if !ok {
		return r4.Composition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadComposition retrieves a Composition resource by ID.
func (c *ClientR4) ReadComposition(ctx context.Context, id string) (r4.Composition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Composition", id)
	if err != nil {
		return r4.Composition{}, err
	}
	typed, ok := result.(r4.Composition)
	if !ok {
		return r4.Composition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateComposition updates an existing Composition resource.
func (c *ClientR4) UpdateComposition(ctx context.Context, resource r4.Composition) (update.Result[r4.Composition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Composition]{}, err
	}
	typed, ok := result.Resource.(r4.Composition)
	if !ok {
		return update.Result[r4.Composition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Composition]{Resource: typed, Created: result.Created}, nil
}

// DeleteComposition deletes a Composition resource by ID.
func (c *ClientR4) DeleteComposition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Composition", id)
}

// SearchComposition performs a search for Composition resources.
func (c *ClientR4) SearchComposition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Composition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Composition", parameters, options)
	if err != nil {
		return search.Result[r4.Composition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Composition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Composition)
		if !ok {
			return search.Result[r4.Composition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Composition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateConceptMap creates a new ConceptMap resource.
func (c *ClientR4) CreateConceptMap(ctx context.Context, resource r4.ConceptMap) (r4.ConceptMap, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ConceptMap{}, err
	}
	typed, ok := result.(r4.ConceptMap)
	if !ok {
		return r4.ConceptMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadConceptMap retrieves a ConceptMap resource by ID.
func (c *ClientR4) ReadConceptMap(ctx context.Context, id string) (r4.ConceptMap, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r4.ConceptMap{}, err
	}
	typed, ok := result.(r4.ConceptMap)
	if !ok {
		return r4.ConceptMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateConceptMap updates an existing ConceptMap resource.
func (c *ClientR4) UpdateConceptMap(ctx context.Context, resource r4.ConceptMap) (update.Result[r4.ConceptMap], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ConceptMap]{}, err
	}
	typed, ok := result.Resource.(r4.ConceptMap)
	if !ok {
		return update.Result[r4.ConceptMap]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ConceptMap]{Resource: typed, Created: result.Created}, nil
}

// DeleteConceptMap deletes a ConceptMap resource by ID.
func (c *ClientR4) DeleteConceptMap(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ConceptMap", id)
}

// SearchConceptMap performs a search for ConceptMap resources.
func (c *ClientR4) SearchConceptMap(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ConceptMap], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ConceptMap", parameters, options)
	if err != nil {
		return search.Result[r4.ConceptMap]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ConceptMap, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ConceptMap)
		if !ok {
			return search.Result[r4.ConceptMap]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ConceptMap]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCondition creates a new Condition resource.
func (c *ClientR4) CreateCondition(ctx context.Context, resource r4.Condition) (r4.Condition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Condition{}, err
	}
	typed, ok := result.(r4.Condition)
	if !ok {
		return r4.Condition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCondition retrieves a Condition resource by ID.
func (c *ClientR4) ReadCondition(ctx context.Context, id string) (r4.Condition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Condition", id)
	if err != nil {
		return r4.Condition{}, err
	}
	typed, ok := result.(r4.Condition)
	if !ok {
		return r4.Condition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCondition updates an existing Condition resource.
func (c *ClientR4) UpdateCondition(ctx context.Context, resource r4.Condition) (update.Result[r4.Condition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Condition]{}, err
	}
	typed, ok := result.Resource.(r4.Condition)
	if !ok {
		return update.Result[r4.Condition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Condition]{Resource: typed, Created: result.Created}, nil
}

// DeleteCondition deletes a Condition resource by ID.
func (c *ClientR4) DeleteCondition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Condition", id)
}

// SearchCondition performs a search for Condition resources.
func (c *ClientR4) SearchCondition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Condition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Condition", parameters, options)
	if err != nil {
		return search.Result[r4.Condition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Condition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Condition)
		if !ok {
			return search.Result[r4.Condition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Condition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateConsent creates a new Consent resource.
func (c *ClientR4) CreateConsent(ctx context.Context, resource r4.Consent) (r4.Consent, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Consent{}, err
	}
	typed, ok := result.(r4.Consent)
	if !ok {
		return r4.Consent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadConsent retrieves a Consent resource by ID.
func (c *ClientR4) ReadConsent(ctx context.Context, id string) (r4.Consent, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Consent", id)
	if err != nil {
		return r4.Consent{}, err
	}
	typed, ok := result.(r4.Consent)
	if !ok {
		return r4.Consent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateConsent updates an existing Consent resource.
func (c *ClientR4) UpdateConsent(ctx context.Context, resource r4.Consent) (update.Result[r4.Consent], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Consent]{}, err
	}
	typed, ok := result.Resource.(r4.Consent)
	if !ok {
		return update.Result[r4.Consent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Consent]{Resource: typed, Created: result.Created}, nil
}

// DeleteConsent deletes a Consent resource by ID.
func (c *ClientR4) DeleteConsent(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Consent", id)
}

// SearchConsent performs a search for Consent resources.
func (c *ClientR4) SearchConsent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Consent], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Consent", parameters, options)
	if err != nil {
		return search.Result[r4.Consent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Consent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Consent)
		if !ok {
			return search.Result[r4.Consent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Consent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateContract creates a new Contract resource.
func (c *ClientR4) CreateContract(ctx context.Context, resource r4.Contract) (r4.Contract, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Contract{}, err
	}
	typed, ok := result.(r4.Contract)
	if !ok {
		return r4.Contract{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadContract retrieves a Contract resource by ID.
func (c *ClientR4) ReadContract(ctx context.Context, id string) (r4.Contract, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Contract", id)
	if err != nil {
		return r4.Contract{}, err
	}
	typed, ok := result.(r4.Contract)
	if !ok {
		return r4.Contract{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateContract updates an existing Contract resource.
func (c *ClientR4) UpdateContract(ctx context.Context, resource r4.Contract) (update.Result[r4.Contract], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Contract]{}, err
	}
	typed, ok := result.Resource.(r4.Contract)
	if !ok {
		return update.Result[r4.Contract]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Contract]{Resource: typed, Created: result.Created}, nil
}

// DeleteContract deletes a Contract resource by ID.
func (c *ClientR4) DeleteContract(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Contract", id)
}

// SearchContract performs a search for Contract resources.
func (c *ClientR4) SearchContract(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Contract], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Contract", parameters, options)
	if err != nil {
		return search.Result[r4.Contract]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Contract, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Contract)
		if !ok {
			return search.Result[r4.Contract]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Contract]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverage creates a new Coverage resource.
func (c *ClientR4) CreateCoverage(ctx context.Context, resource r4.Coverage) (r4.Coverage, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Coverage{}, err
	}
	typed, ok := result.(r4.Coverage)
	if !ok {
		return r4.Coverage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverage retrieves a Coverage resource by ID.
func (c *ClientR4) ReadCoverage(ctx context.Context, id string) (r4.Coverage, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Coverage", id)
	if err != nil {
		return r4.Coverage{}, err
	}
	typed, ok := result.(r4.Coverage)
	if !ok {
		return r4.Coverage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverage updates an existing Coverage resource.
func (c *ClientR4) UpdateCoverage(ctx context.Context, resource r4.Coverage) (update.Result[r4.Coverage], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Coverage]{}, err
	}
	typed, ok := result.Resource.(r4.Coverage)
	if !ok {
		return update.Result[r4.Coverage]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Coverage]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverage deletes a Coverage resource by ID.
func (c *ClientR4) DeleteCoverage(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Coverage", id)
}

// SearchCoverage performs a search for Coverage resources.
func (c *ClientR4) SearchCoverage(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Coverage], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Coverage", parameters, options)
	if err != nil {
		return search.Result[r4.Coverage]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Coverage, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Coverage)
		if !ok {
			return search.Result[r4.Coverage]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Coverage]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverageEligibilityRequest creates a new CoverageEligibilityRequest resource.
func (c *ClientR4) CreateCoverageEligibilityRequest(ctx context.Context, resource r4.CoverageEligibilityRequest) (r4.CoverageEligibilityRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CoverageEligibilityRequest{}, err
	}
	typed, ok := result.(r4.CoverageEligibilityRequest)
	if !ok {
		return r4.CoverageEligibilityRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverageEligibilityRequest retrieves a CoverageEligibilityRequest resource by ID.
func (c *ClientR4) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r4.CoverageEligibilityRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r4.CoverageEligibilityRequest{}, err
	}
	typed, ok := result.(r4.CoverageEligibilityRequest)
	if !ok {
		return r4.CoverageEligibilityRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverageEligibilityRequest updates an existing CoverageEligibilityRequest resource.
func (c *ClientR4) UpdateCoverageEligibilityRequest(ctx context.Context, resource r4.CoverageEligibilityRequest) (update.Result[r4.CoverageEligibilityRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CoverageEligibilityRequest]{}, err
	}
	typed, ok := result.Resource.(r4.CoverageEligibilityRequest)
	if !ok {
		return update.Result[r4.CoverageEligibilityRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CoverageEligibilityRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverageEligibilityRequest deletes a CoverageEligibilityRequest resource by ID.
func (c *ClientR4) DeleteCoverageEligibilityRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CoverageEligibilityRequest", id)
}

// SearchCoverageEligibilityRequest performs a search for CoverageEligibilityRequest resources.
func (c *ClientR4) SearchCoverageEligibilityRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CoverageEligibilityRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CoverageEligibilityRequest", parameters, options)
	if err != nil {
		return search.Result[r4.CoverageEligibilityRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CoverageEligibilityRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CoverageEligibilityRequest)
		if !ok {
			return search.Result[r4.CoverageEligibilityRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CoverageEligibilityRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverageEligibilityResponse creates a new CoverageEligibilityResponse resource.
func (c *ClientR4) CreateCoverageEligibilityResponse(ctx context.Context, resource r4.CoverageEligibilityResponse) (r4.CoverageEligibilityResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.CoverageEligibilityResponse{}, err
	}
	typed, ok := result.(r4.CoverageEligibilityResponse)
	if !ok {
		return r4.CoverageEligibilityResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverageEligibilityResponse retrieves a CoverageEligibilityResponse resource by ID.
func (c *ClientR4) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r4.CoverageEligibilityResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r4.CoverageEligibilityResponse{}, err
	}
	typed, ok := result.(r4.CoverageEligibilityResponse)
	if !ok {
		return r4.CoverageEligibilityResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverageEligibilityResponse updates an existing CoverageEligibilityResponse resource.
func (c *ClientR4) UpdateCoverageEligibilityResponse(ctx context.Context, resource r4.CoverageEligibilityResponse) (update.Result[r4.CoverageEligibilityResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.CoverageEligibilityResponse]{}, err
	}
	typed, ok := result.Resource.(r4.CoverageEligibilityResponse)
	if !ok {
		return update.Result[r4.CoverageEligibilityResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.CoverageEligibilityResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverageEligibilityResponse deletes a CoverageEligibilityResponse resource by ID.
func (c *ClientR4) DeleteCoverageEligibilityResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "CoverageEligibilityResponse", id)
}

// SearchCoverageEligibilityResponse performs a search for CoverageEligibilityResponse resources.
func (c *ClientR4) SearchCoverageEligibilityResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.CoverageEligibilityResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "CoverageEligibilityResponse", parameters, options)
	if err != nil {
		return search.Result[r4.CoverageEligibilityResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.CoverageEligibilityResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.CoverageEligibilityResponse)
		if !ok {
			return search.Result[r4.CoverageEligibilityResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.CoverageEligibilityResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDetectedIssue creates a new DetectedIssue resource.
func (c *ClientR4) CreateDetectedIssue(ctx context.Context, resource r4.DetectedIssue) (r4.DetectedIssue, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DetectedIssue{}, err
	}
	typed, ok := result.(r4.DetectedIssue)
	if !ok {
		return r4.DetectedIssue{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDetectedIssue retrieves a DetectedIssue resource by ID.
func (c *ClientR4) ReadDetectedIssue(ctx context.Context, id string) (r4.DetectedIssue, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r4.DetectedIssue{}, err
	}
	typed, ok := result.(r4.DetectedIssue)
	if !ok {
		return r4.DetectedIssue{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDetectedIssue updates an existing DetectedIssue resource.
func (c *ClientR4) UpdateDetectedIssue(ctx context.Context, resource r4.DetectedIssue) (update.Result[r4.DetectedIssue], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DetectedIssue]{}, err
	}
	typed, ok := result.Resource.(r4.DetectedIssue)
	if !ok {
		return update.Result[r4.DetectedIssue]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DetectedIssue]{Resource: typed, Created: result.Created}, nil
}

// DeleteDetectedIssue deletes a DetectedIssue resource by ID.
func (c *ClientR4) DeleteDetectedIssue(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DetectedIssue", id)
}

// SearchDetectedIssue performs a search for DetectedIssue resources.
func (c *ClientR4) SearchDetectedIssue(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DetectedIssue], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DetectedIssue", parameters, options)
	if err != nil {
		return search.Result[r4.DetectedIssue]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DetectedIssue, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DetectedIssue)
		if !ok {
			return search.Result[r4.DetectedIssue]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DetectedIssue]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDevice creates a new Device resource.
func (c *ClientR4) CreateDevice(ctx context.Context, resource r4.Device) (r4.Device, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Device{}, err
	}
	typed, ok := result.(r4.Device)
	if !ok {
		return r4.Device{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDevice retrieves a Device resource by ID.
func (c *ClientR4) ReadDevice(ctx context.Context, id string) (r4.Device, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Device", id)
	if err != nil {
		return r4.Device{}, err
	}
	typed, ok := result.(r4.Device)
	if !ok {
		return r4.Device{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDevice updates an existing Device resource.
func (c *ClientR4) UpdateDevice(ctx context.Context, resource r4.Device) (update.Result[r4.Device], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Device]{}, err
	}
	typed, ok := result.Resource.(r4.Device)
	if !ok {
		return update.Result[r4.Device]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Device]{Resource: typed, Created: result.Created}, nil
}

// DeleteDevice deletes a Device resource by ID.
func (c *ClientR4) DeleteDevice(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Device", id)
}

// SearchDevice performs a search for Device resources.
func (c *ClientR4) SearchDevice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Device], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Device", parameters, options)
	if err != nil {
		return search.Result[r4.Device]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Device, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Device)
		if !ok {
			return search.Result[r4.Device]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Device]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceDefinition creates a new DeviceDefinition resource.
func (c *ClientR4) CreateDeviceDefinition(ctx context.Context, resource r4.DeviceDefinition) (r4.DeviceDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DeviceDefinition{}, err
	}
	typed, ok := result.(r4.DeviceDefinition)
	if !ok {
		return r4.DeviceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceDefinition retrieves a DeviceDefinition resource by ID.
func (c *ClientR4) ReadDeviceDefinition(ctx context.Context, id string) (r4.DeviceDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r4.DeviceDefinition{}, err
	}
	typed, ok := result.(r4.DeviceDefinition)
	if !ok {
		return r4.DeviceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceDefinition updates an existing DeviceDefinition resource.
func (c *ClientR4) UpdateDeviceDefinition(ctx context.Context, resource r4.DeviceDefinition) (update.Result[r4.DeviceDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DeviceDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.DeviceDefinition)
	if !ok {
		return update.Result[r4.DeviceDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DeviceDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceDefinition deletes a DeviceDefinition resource by ID.
func (c *ClientR4) DeleteDeviceDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceDefinition", id)
}

// SearchDeviceDefinition performs a search for DeviceDefinition resources.
func (c *ClientR4) SearchDeviceDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DeviceDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.DeviceDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DeviceDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DeviceDefinition)
		if !ok {
			return search.Result[r4.DeviceDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DeviceDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceMetric creates a new DeviceMetric resource.
func (c *ClientR4) CreateDeviceMetric(ctx context.Context, resource r4.DeviceMetric) (r4.DeviceMetric, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DeviceMetric{}, err
	}
	typed, ok := result.(r4.DeviceMetric)
	if !ok {
		return r4.DeviceMetric{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceMetric retrieves a DeviceMetric resource by ID.
func (c *ClientR4) ReadDeviceMetric(ctx context.Context, id string) (r4.DeviceMetric, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r4.DeviceMetric{}, err
	}
	typed, ok := result.(r4.DeviceMetric)
	if !ok {
		return r4.DeviceMetric{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceMetric updates an existing DeviceMetric resource.
func (c *ClientR4) UpdateDeviceMetric(ctx context.Context, resource r4.DeviceMetric) (update.Result[r4.DeviceMetric], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DeviceMetric]{}, err
	}
	typed, ok := result.Resource.(r4.DeviceMetric)
	if !ok {
		return update.Result[r4.DeviceMetric]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DeviceMetric]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceMetric deletes a DeviceMetric resource by ID.
func (c *ClientR4) DeleteDeviceMetric(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceMetric", id)
}

// SearchDeviceMetric performs a search for DeviceMetric resources.
func (c *ClientR4) SearchDeviceMetric(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DeviceMetric], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceMetric", parameters, options)
	if err != nil {
		return search.Result[r4.DeviceMetric]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DeviceMetric, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DeviceMetric)
		if !ok {
			return search.Result[r4.DeviceMetric]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DeviceMetric]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceRequest creates a new DeviceRequest resource.
func (c *ClientR4) CreateDeviceRequest(ctx context.Context, resource r4.DeviceRequest) (r4.DeviceRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DeviceRequest{}, err
	}
	typed, ok := result.(r4.DeviceRequest)
	if !ok {
		return r4.DeviceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceRequest retrieves a DeviceRequest resource by ID.
func (c *ClientR4) ReadDeviceRequest(ctx context.Context, id string) (r4.DeviceRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r4.DeviceRequest{}, err
	}
	typed, ok := result.(r4.DeviceRequest)
	if !ok {
		return r4.DeviceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceRequest updates an existing DeviceRequest resource.
func (c *ClientR4) UpdateDeviceRequest(ctx context.Context, resource r4.DeviceRequest) (update.Result[r4.DeviceRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DeviceRequest]{}, err
	}
	typed, ok := result.Resource.(r4.DeviceRequest)
	if !ok {
		return update.Result[r4.DeviceRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DeviceRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceRequest deletes a DeviceRequest resource by ID.
func (c *ClientR4) DeleteDeviceRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceRequest", id)
}

// SearchDeviceRequest performs a search for DeviceRequest resources.
func (c *ClientR4) SearchDeviceRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DeviceRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceRequest", parameters, options)
	if err != nil {
		return search.Result[r4.DeviceRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DeviceRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DeviceRequest)
		if !ok {
			return search.Result[r4.DeviceRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DeviceRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceUseStatement creates a new DeviceUseStatement resource.
func (c *ClientR4) CreateDeviceUseStatement(ctx context.Context, resource r4.DeviceUseStatement) (r4.DeviceUseStatement, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DeviceUseStatement{}, err
	}
	typed, ok := result.(r4.DeviceUseStatement)
	if !ok {
		return r4.DeviceUseStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceUseStatement retrieves a DeviceUseStatement resource by ID.
func (c *ClientR4) ReadDeviceUseStatement(ctx context.Context, id string) (r4.DeviceUseStatement, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DeviceUseStatement", id)
	if err != nil {
		return r4.DeviceUseStatement{}, err
	}
	typed, ok := result.(r4.DeviceUseStatement)
	if !ok {
		return r4.DeviceUseStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceUseStatement updates an existing DeviceUseStatement resource.
func (c *ClientR4) UpdateDeviceUseStatement(ctx context.Context, resource r4.DeviceUseStatement) (update.Result[r4.DeviceUseStatement], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DeviceUseStatement]{}, err
	}
	typed, ok := result.Resource.(r4.DeviceUseStatement)
	if !ok {
		return update.Result[r4.DeviceUseStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DeviceUseStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceUseStatement deletes a DeviceUseStatement resource by ID.
func (c *ClientR4) DeleteDeviceUseStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DeviceUseStatement", id)
}

// SearchDeviceUseStatement performs a search for DeviceUseStatement resources.
func (c *ClientR4) SearchDeviceUseStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DeviceUseStatement], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DeviceUseStatement", parameters, options)
	if err != nil {
		return search.Result[r4.DeviceUseStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DeviceUseStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DeviceUseStatement)
		if !ok {
			return search.Result[r4.DeviceUseStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DeviceUseStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDiagnosticReport creates a new DiagnosticReport resource.
func (c *ClientR4) CreateDiagnosticReport(ctx context.Context, resource r4.DiagnosticReport) (r4.DiagnosticReport, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DiagnosticReport{}, err
	}
	typed, ok := result.(r4.DiagnosticReport)
	if !ok {
		return r4.DiagnosticReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDiagnosticReport retrieves a DiagnosticReport resource by ID.
func (c *ClientR4) ReadDiagnosticReport(ctx context.Context, id string) (r4.DiagnosticReport, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r4.DiagnosticReport{}, err
	}
	typed, ok := result.(r4.DiagnosticReport)
	if !ok {
		return r4.DiagnosticReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDiagnosticReport updates an existing DiagnosticReport resource.
func (c *ClientR4) UpdateDiagnosticReport(ctx context.Context, resource r4.DiagnosticReport) (update.Result[r4.DiagnosticReport], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DiagnosticReport]{}, err
	}
	typed, ok := result.Resource.(r4.DiagnosticReport)
	if !ok {
		return update.Result[r4.DiagnosticReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DiagnosticReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteDiagnosticReport deletes a DiagnosticReport resource by ID.
func (c *ClientR4) DeleteDiagnosticReport(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DiagnosticReport", id)
}

// SearchDiagnosticReport performs a search for DiagnosticReport resources.
func (c *ClientR4) SearchDiagnosticReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DiagnosticReport], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DiagnosticReport", parameters, options)
	if err != nil {
		return search.Result[r4.DiagnosticReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DiagnosticReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DiagnosticReport)
		if !ok {
			return search.Result[r4.DiagnosticReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DiagnosticReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDocumentManifest creates a new DocumentManifest resource.
func (c *ClientR4) CreateDocumentManifest(ctx context.Context, resource r4.DocumentManifest) (r4.DocumentManifest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DocumentManifest{}, err
	}
	typed, ok := result.(r4.DocumentManifest)
	if !ok {
		return r4.DocumentManifest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDocumentManifest retrieves a DocumentManifest resource by ID.
func (c *ClientR4) ReadDocumentManifest(ctx context.Context, id string) (r4.DocumentManifest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DocumentManifest", id)
	if err != nil {
		return r4.DocumentManifest{}, err
	}
	typed, ok := result.(r4.DocumentManifest)
	if !ok {
		return r4.DocumentManifest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDocumentManifest updates an existing DocumentManifest resource.
func (c *ClientR4) UpdateDocumentManifest(ctx context.Context, resource r4.DocumentManifest) (update.Result[r4.DocumentManifest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DocumentManifest]{}, err
	}
	typed, ok := result.Resource.(r4.DocumentManifest)
	if !ok {
		return update.Result[r4.DocumentManifest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DocumentManifest]{Resource: typed, Created: result.Created}, nil
}

// DeleteDocumentManifest deletes a DocumentManifest resource by ID.
func (c *ClientR4) DeleteDocumentManifest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DocumentManifest", id)
}

// SearchDocumentManifest performs a search for DocumentManifest resources.
func (c *ClientR4) SearchDocumentManifest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DocumentManifest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DocumentManifest", parameters, options)
	if err != nil {
		return search.Result[r4.DocumentManifest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DocumentManifest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DocumentManifest)
		if !ok {
			return search.Result[r4.DocumentManifest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DocumentManifest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDocumentReference creates a new DocumentReference resource.
func (c *ClientR4) CreateDocumentReference(ctx context.Context, resource r4.DocumentReference) (r4.DocumentReference, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.DocumentReference{}, err
	}
	typed, ok := result.(r4.DocumentReference)
	if !ok {
		return r4.DocumentReference{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDocumentReference retrieves a DocumentReference resource by ID.
func (c *ClientR4) ReadDocumentReference(ctx context.Context, id string) (r4.DocumentReference, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r4.DocumentReference{}, err
	}
	typed, ok := result.(r4.DocumentReference)
	if !ok {
		return r4.DocumentReference{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDocumentReference updates an existing DocumentReference resource.
func (c *ClientR4) UpdateDocumentReference(ctx context.Context, resource r4.DocumentReference) (update.Result[r4.DocumentReference], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.DocumentReference]{}, err
	}
	typed, ok := result.Resource.(r4.DocumentReference)
	if !ok {
		return update.Result[r4.DocumentReference]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.DocumentReference]{Resource: typed, Created: result.Created}, nil
}

// DeleteDocumentReference deletes a DocumentReference resource by ID.
func (c *ClientR4) DeleteDocumentReference(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "DocumentReference", id)
}

// SearchDocumentReference performs a search for DocumentReference resources.
func (c *ClientR4) SearchDocumentReference(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.DocumentReference], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "DocumentReference", parameters, options)
	if err != nil {
		return search.Result[r4.DocumentReference]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.DocumentReference, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.DocumentReference)
		if !ok {
			return search.Result[r4.DocumentReference]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.DocumentReference]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEffectEvidenceSynthesis creates a new EffectEvidenceSynthesis resource.
func (c *ClientR4) CreateEffectEvidenceSynthesis(ctx context.Context, resource r4.EffectEvidenceSynthesis) (r4.EffectEvidenceSynthesis, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.EffectEvidenceSynthesis{}, err
	}
	typed, ok := result.(r4.EffectEvidenceSynthesis)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEffectEvidenceSynthesis retrieves a EffectEvidenceSynthesis resource by ID.
func (c *ClientR4) ReadEffectEvidenceSynthesis(ctx context.Context, id string) (r4.EffectEvidenceSynthesis, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EffectEvidenceSynthesis", id)
	if err != nil {
		return r4.EffectEvidenceSynthesis{}, err
	}
	typed, ok := result.(r4.EffectEvidenceSynthesis)
	if !ok {
		return r4.EffectEvidenceSynthesis{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEffectEvidenceSynthesis updates an existing EffectEvidenceSynthesis resource.
func (c *ClientR4) UpdateEffectEvidenceSynthesis(ctx context.Context, resource r4.EffectEvidenceSynthesis) (update.Result[r4.EffectEvidenceSynthesis], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.EffectEvidenceSynthesis]{}, err
	}
	typed, ok := result.Resource.(r4.EffectEvidenceSynthesis)
	if !ok {
		return update.Result[r4.EffectEvidenceSynthesis]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.EffectEvidenceSynthesis]{Resource: typed, Created: result.Created}, nil
}

// DeleteEffectEvidenceSynthesis deletes a EffectEvidenceSynthesis resource by ID.
func (c *ClientR4) DeleteEffectEvidenceSynthesis(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EffectEvidenceSynthesis", id)
}

// SearchEffectEvidenceSynthesis performs a search for EffectEvidenceSynthesis resources.
func (c *ClientR4) SearchEffectEvidenceSynthesis(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.EffectEvidenceSynthesis], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EffectEvidenceSynthesis", parameters, options)
	if err != nil {
		return search.Result[r4.EffectEvidenceSynthesis]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.EffectEvidenceSynthesis, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.EffectEvidenceSynthesis)
		if !ok {
			return search.Result[r4.EffectEvidenceSynthesis]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.EffectEvidenceSynthesis]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEncounter creates a new Encounter resource.
func (c *ClientR4) CreateEncounter(ctx context.Context, resource r4.Encounter) (r4.Encounter, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Encounter{}, err
	}
	typed, ok := result.(r4.Encounter)
	if !ok {
		return r4.Encounter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEncounter retrieves a Encounter resource by ID.
func (c *ClientR4) ReadEncounter(ctx context.Context, id string) (r4.Encounter, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Encounter", id)
	if err != nil {
		return r4.Encounter{}, err
	}
	typed, ok := result.(r4.Encounter)
	if !ok {
		return r4.Encounter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEncounter updates an existing Encounter resource.
func (c *ClientR4) UpdateEncounter(ctx context.Context, resource r4.Encounter) (update.Result[r4.Encounter], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Encounter]{}, err
	}
	typed, ok := result.Resource.(r4.Encounter)
	if !ok {
		return update.Result[r4.Encounter]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Encounter]{Resource: typed, Created: result.Created}, nil
}

// DeleteEncounter deletes a Encounter resource by ID.
func (c *ClientR4) DeleteEncounter(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Encounter", id)
}

// SearchEncounter performs a search for Encounter resources.
func (c *ClientR4) SearchEncounter(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Encounter], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Encounter", parameters, options)
	if err != nil {
		return search.Result[r4.Encounter]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Encounter, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Encounter)
		if !ok {
			return search.Result[r4.Encounter]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Encounter]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEndpoint creates a new Endpoint resource.
func (c *ClientR4) CreateEndpoint(ctx context.Context, resource r4.Endpoint) (r4.Endpoint, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Endpoint{}, err
	}
	typed, ok := result.(r4.Endpoint)
	if !ok {
		return r4.Endpoint{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEndpoint retrieves a Endpoint resource by ID.
func (c *ClientR4) ReadEndpoint(ctx context.Context, id string) (r4.Endpoint, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Endpoint", id)
	if err != nil {
		return r4.Endpoint{}, err
	}
	typed, ok := result.(r4.Endpoint)
	if !ok {
		return r4.Endpoint{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEndpoint updates an existing Endpoint resource.
func (c *ClientR4) UpdateEndpoint(ctx context.Context, resource r4.Endpoint) (update.Result[r4.Endpoint], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Endpoint]{}, err
	}
	typed, ok := result.Resource.(r4.Endpoint)
	if !ok {
		return update.Result[r4.Endpoint]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Endpoint]{Resource: typed, Created: result.Created}, nil
}

// DeleteEndpoint deletes a Endpoint resource by ID.
func (c *ClientR4) DeleteEndpoint(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Endpoint", id)
}

// SearchEndpoint performs a search for Endpoint resources.
func (c *ClientR4) SearchEndpoint(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Endpoint], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Endpoint", parameters, options)
	if err != nil {
		return search.Result[r4.Endpoint]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Endpoint, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Endpoint)
		if !ok {
			return search.Result[r4.Endpoint]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Endpoint]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEnrollmentRequest creates a new EnrollmentRequest resource.
func (c *ClientR4) CreateEnrollmentRequest(ctx context.Context, resource r4.EnrollmentRequest) (r4.EnrollmentRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.EnrollmentRequest{}, err
	}
	typed, ok := result.(r4.EnrollmentRequest)
	if !ok {
		return r4.EnrollmentRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEnrollmentRequest retrieves a EnrollmentRequest resource by ID.
func (c *ClientR4) ReadEnrollmentRequest(ctx context.Context, id string) (r4.EnrollmentRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r4.EnrollmentRequest{}, err
	}
	typed, ok := result.(r4.EnrollmentRequest)
	if !ok {
		return r4.EnrollmentRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEnrollmentRequest updates an existing EnrollmentRequest resource.
func (c *ClientR4) UpdateEnrollmentRequest(ctx context.Context, resource r4.EnrollmentRequest) (update.Result[r4.EnrollmentRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.EnrollmentRequest]{}, err
	}
	typed, ok := result.Resource.(r4.EnrollmentRequest)
	if !ok {
		return update.Result[r4.EnrollmentRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.EnrollmentRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteEnrollmentRequest deletes a EnrollmentRequest resource by ID.
func (c *ClientR4) DeleteEnrollmentRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EnrollmentRequest", id)
}

// SearchEnrollmentRequest performs a search for EnrollmentRequest resources.
func (c *ClientR4) SearchEnrollmentRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.EnrollmentRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EnrollmentRequest", parameters, options)
	if err != nil {
		return search.Result[r4.EnrollmentRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.EnrollmentRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.EnrollmentRequest)
		if !ok {
			return search.Result[r4.EnrollmentRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.EnrollmentRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEnrollmentResponse creates a new EnrollmentResponse resource.
func (c *ClientR4) CreateEnrollmentResponse(ctx context.Context, resource r4.EnrollmentResponse) (r4.EnrollmentResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.EnrollmentResponse{}, err
	}
	typed, ok := result.(r4.EnrollmentResponse)
	if !ok {
		return r4.EnrollmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEnrollmentResponse retrieves a EnrollmentResponse resource by ID.
func (c *ClientR4) ReadEnrollmentResponse(ctx context.Context, id string) (r4.EnrollmentResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r4.EnrollmentResponse{}, err
	}
	typed, ok := result.(r4.EnrollmentResponse)
	if !ok {
		return r4.EnrollmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEnrollmentResponse updates an existing EnrollmentResponse resource.
func (c *ClientR4) UpdateEnrollmentResponse(ctx context.Context, resource r4.EnrollmentResponse) (update.Result[r4.EnrollmentResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.EnrollmentResponse]{}, err
	}
	typed, ok := result.Resource.(r4.EnrollmentResponse)
	if !ok {
		return update.Result[r4.EnrollmentResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.EnrollmentResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteEnrollmentResponse deletes a EnrollmentResponse resource by ID.
func (c *ClientR4) DeleteEnrollmentResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EnrollmentResponse", id)
}

// SearchEnrollmentResponse performs a search for EnrollmentResponse resources.
func (c *ClientR4) SearchEnrollmentResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.EnrollmentResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EnrollmentResponse", parameters, options)
	if err != nil {
		return search.Result[r4.EnrollmentResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.EnrollmentResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.EnrollmentResponse)
		if !ok {
			return search.Result[r4.EnrollmentResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.EnrollmentResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEpisodeOfCare creates a new EpisodeOfCare resource.
func (c *ClientR4) CreateEpisodeOfCare(ctx context.Context, resource r4.EpisodeOfCare) (r4.EpisodeOfCare, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.EpisodeOfCare{}, err
	}
	typed, ok := result.(r4.EpisodeOfCare)
	if !ok {
		return r4.EpisodeOfCare{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEpisodeOfCare retrieves a EpisodeOfCare resource by ID.
func (c *ClientR4) ReadEpisodeOfCare(ctx context.Context, id string) (r4.EpisodeOfCare, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r4.EpisodeOfCare{}, err
	}
	typed, ok := result.(r4.EpisodeOfCare)
	if !ok {
		return r4.EpisodeOfCare{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEpisodeOfCare updates an existing EpisodeOfCare resource.
func (c *ClientR4) UpdateEpisodeOfCare(ctx context.Context, resource r4.EpisodeOfCare) (update.Result[r4.EpisodeOfCare], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.EpisodeOfCare]{}, err
	}
	typed, ok := result.Resource.(r4.EpisodeOfCare)
	if !ok {
		return update.Result[r4.EpisodeOfCare]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.EpisodeOfCare]{Resource: typed, Created: result.Created}, nil
}

// DeleteEpisodeOfCare deletes a EpisodeOfCare resource by ID.
func (c *ClientR4) DeleteEpisodeOfCare(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EpisodeOfCare", id)
}

// SearchEpisodeOfCare performs a search for EpisodeOfCare resources.
func (c *ClientR4) SearchEpisodeOfCare(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.EpisodeOfCare], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EpisodeOfCare", parameters, options)
	if err != nil {
		return search.Result[r4.EpisodeOfCare]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.EpisodeOfCare, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.EpisodeOfCare)
		if !ok {
			return search.Result[r4.EpisodeOfCare]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.EpisodeOfCare]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEventDefinition creates a new EventDefinition resource.
func (c *ClientR4) CreateEventDefinition(ctx context.Context, resource r4.EventDefinition) (r4.EventDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.EventDefinition{}, err
	}
	typed, ok := result.(r4.EventDefinition)
	if !ok {
		return r4.EventDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEventDefinition retrieves a EventDefinition resource by ID.
func (c *ClientR4) ReadEventDefinition(ctx context.Context, id string) (r4.EventDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r4.EventDefinition{}, err
	}
	typed, ok := result.(r4.EventDefinition)
	if !ok {
		return r4.EventDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEventDefinition updates an existing EventDefinition resource.
func (c *ClientR4) UpdateEventDefinition(ctx context.Context, resource r4.EventDefinition) (update.Result[r4.EventDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.EventDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.EventDefinition)
	if !ok {
		return update.Result[r4.EventDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.EventDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteEventDefinition deletes a EventDefinition resource by ID.
func (c *ClientR4) DeleteEventDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EventDefinition", id)
}

// SearchEventDefinition performs a search for EventDefinition resources.
func (c *ClientR4) SearchEventDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.EventDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EventDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.EventDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.EventDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.EventDefinition)
		if !ok {
			return search.Result[r4.EventDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.EventDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidence creates a new Evidence resource.
func (c *ClientR4) CreateEvidence(ctx context.Context, resource r4.Evidence) (r4.Evidence, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Evidence{}, err
	}
	typed, ok := result.(r4.Evidence)
	if !ok {
		return r4.Evidence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidence retrieves a Evidence resource by ID.
func (c *ClientR4) ReadEvidence(ctx context.Context, id string) (r4.Evidence, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Evidence", id)
	if err != nil {
		return r4.Evidence{}, err
	}
	typed, ok := result.(r4.Evidence)
	if !ok {
		return r4.Evidence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidence updates an existing Evidence resource.
func (c *ClientR4) UpdateEvidence(ctx context.Context, resource r4.Evidence) (update.Result[r4.Evidence], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Evidence]{}, err
	}
	typed, ok := result.Resource.(r4.Evidence)
	if !ok {
		return update.Result[r4.Evidence]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Evidence]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidence deletes a Evidence resource by ID.
func (c *ClientR4) DeleteEvidence(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Evidence", id)
}

// SearchEvidence performs a search for Evidence resources.
func (c *ClientR4) SearchEvidence(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Evidence], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Evidence", parameters, options)
	if err != nil {
		return search.Result[r4.Evidence]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Evidence, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Evidence)
		if !ok {
			return search.Result[r4.Evidence]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Evidence]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidenceVariable creates a new EvidenceVariable resource.
func (c *ClientR4) CreateEvidenceVariable(ctx context.Context, resource r4.EvidenceVariable) (r4.EvidenceVariable, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.EvidenceVariable{}, err
	}
	typed, ok := result.(r4.EvidenceVariable)
	if !ok {
		return r4.EvidenceVariable{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidenceVariable retrieves a EvidenceVariable resource by ID.
func (c *ClientR4) ReadEvidenceVariable(ctx context.Context, id string) (r4.EvidenceVariable, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r4.EvidenceVariable{}, err
	}
	typed, ok := result.(r4.EvidenceVariable)
	if !ok {
		return r4.EvidenceVariable{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidenceVariable updates an existing EvidenceVariable resource.
func (c *ClientR4) UpdateEvidenceVariable(ctx context.Context, resource r4.EvidenceVariable) (update.Result[r4.EvidenceVariable], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.EvidenceVariable]{}, err
	}
	typed, ok := result.Resource.(r4.EvidenceVariable)
	if !ok {
		return update.Result[r4.EvidenceVariable]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.EvidenceVariable]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidenceVariable deletes a EvidenceVariable resource by ID.
func (c *ClientR4) DeleteEvidenceVariable(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "EvidenceVariable", id)
}

// SearchEvidenceVariable performs a search for EvidenceVariable resources.
func (c *ClientR4) SearchEvidenceVariable(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.EvidenceVariable], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "EvidenceVariable", parameters, options)
	if err != nil {
		return search.Result[r4.EvidenceVariable]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.EvidenceVariable, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.EvidenceVariable)
		if !ok {
			return search.Result[r4.EvidenceVariable]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.EvidenceVariable]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateExampleScenario creates a new ExampleScenario resource.
func (c *ClientR4) CreateExampleScenario(ctx context.Context, resource r4.ExampleScenario) (r4.ExampleScenario, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ExampleScenario{}, err
	}
	typed, ok := result.(r4.ExampleScenario)
	if !ok {
		return r4.ExampleScenario{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadExampleScenario retrieves a ExampleScenario resource by ID.
func (c *ClientR4) ReadExampleScenario(ctx context.Context, id string) (r4.ExampleScenario, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r4.ExampleScenario{}, err
	}
	typed, ok := result.(r4.ExampleScenario)
	if !ok {
		return r4.ExampleScenario{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateExampleScenario updates an existing ExampleScenario resource.
func (c *ClientR4) UpdateExampleScenario(ctx context.Context, resource r4.ExampleScenario) (update.Result[r4.ExampleScenario], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ExampleScenario]{}, err
	}
	typed, ok := result.Resource.(r4.ExampleScenario)
	if !ok {
		return update.Result[r4.ExampleScenario]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ExampleScenario]{Resource: typed, Created: result.Created}, nil
}

// DeleteExampleScenario deletes a ExampleScenario resource by ID.
func (c *ClientR4) DeleteExampleScenario(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ExampleScenario", id)
}

// SearchExampleScenario performs a search for ExampleScenario resources.
func (c *ClientR4) SearchExampleScenario(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ExampleScenario], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ExampleScenario", parameters, options)
	if err != nil {
		return search.Result[r4.ExampleScenario]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ExampleScenario, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ExampleScenario)
		if !ok {
			return search.Result[r4.ExampleScenario]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ExampleScenario]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateExplanationOfBenefit creates a new ExplanationOfBenefit resource.
func (c *ClientR4) CreateExplanationOfBenefit(ctx context.Context, resource r4.ExplanationOfBenefit) (r4.ExplanationOfBenefit, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ExplanationOfBenefit{}, err
	}
	typed, ok := result.(r4.ExplanationOfBenefit)
	if !ok {
		return r4.ExplanationOfBenefit{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadExplanationOfBenefit retrieves a ExplanationOfBenefit resource by ID.
func (c *ClientR4) ReadExplanationOfBenefit(ctx context.Context, id string) (r4.ExplanationOfBenefit, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r4.ExplanationOfBenefit{}, err
	}
	typed, ok := result.(r4.ExplanationOfBenefit)
	if !ok {
		return r4.ExplanationOfBenefit{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateExplanationOfBenefit updates an existing ExplanationOfBenefit resource.
func (c *ClientR4) UpdateExplanationOfBenefit(ctx context.Context, resource r4.ExplanationOfBenefit) (update.Result[r4.ExplanationOfBenefit], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ExplanationOfBenefit]{}, err
	}
	typed, ok := result.Resource.(r4.ExplanationOfBenefit)
	if !ok {
		return update.Result[r4.ExplanationOfBenefit]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ExplanationOfBenefit]{Resource: typed, Created: result.Created}, nil
}

// DeleteExplanationOfBenefit deletes a ExplanationOfBenefit resource by ID.
func (c *ClientR4) DeleteExplanationOfBenefit(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ExplanationOfBenefit", id)
}

// SearchExplanationOfBenefit performs a search for ExplanationOfBenefit resources.
func (c *ClientR4) SearchExplanationOfBenefit(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ExplanationOfBenefit], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ExplanationOfBenefit", parameters, options)
	if err != nil {
		return search.Result[r4.ExplanationOfBenefit]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ExplanationOfBenefit, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ExplanationOfBenefit)
		if !ok {
			return search.Result[r4.ExplanationOfBenefit]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ExplanationOfBenefit]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateFamilyMemberHistory creates a new FamilyMemberHistory resource.
func (c *ClientR4) CreateFamilyMemberHistory(ctx context.Context, resource r4.FamilyMemberHistory) (r4.FamilyMemberHistory, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.FamilyMemberHistory{}, err
	}
	typed, ok := result.(r4.FamilyMemberHistory)
	if !ok {
		return r4.FamilyMemberHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadFamilyMemberHistory retrieves a FamilyMemberHistory resource by ID.
func (c *ClientR4) ReadFamilyMemberHistory(ctx context.Context, id string) (r4.FamilyMemberHistory, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r4.FamilyMemberHistory{}, err
	}
	typed, ok := result.(r4.FamilyMemberHistory)
	if !ok {
		return r4.FamilyMemberHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateFamilyMemberHistory updates an existing FamilyMemberHistory resource.
func (c *ClientR4) UpdateFamilyMemberHistory(ctx context.Context, resource r4.FamilyMemberHistory) (update.Result[r4.FamilyMemberHistory], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.FamilyMemberHistory]{}, err
	}
	typed, ok := result.Resource.(r4.FamilyMemberHistory)
	if !ok {
		return update.Result[r4.FamilyMemberHistory]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.FamilyMemberHistory]{Resource: typed, Created: result.Created}, nil
}

// DeleteFamilyMemberHistory deletes a FamilyMemberHistory resource by ID.
func (c *ClientR4) DeleteFamilyMemberHistory(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "FamilyMemberHistory", id)
}

// SearchFamilyMemberHistory performs a search for FamilyMemberHistory resources.
func (c *ClientR4) SearchFamilyMemberHistory(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.FamilyMemberHistory], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "FamilyMemberHistory", parameters, options)
	if err != nil {
		return search.Result[r4.FamilyMemberHistory]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.FamilyMemberHistory, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.FamilyMemberHistory)
		if !ok {
			return search.Result[r4.FamilyMemberHistory]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.FamilyMemberHistory]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateFlag creates a new Flag resource.
func (c *ClientR4) CreateFlag(ctx context.Context, resource r4.Flag) (r4.Flag, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Flag{}, err
	}
	typed, ok := result.(r4.Flag)
	if !ok {
		return r4.Flag{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadFlag retrieves a Flag resource by ID.
func (c *ClientR4) ReadFlag(ctx context.Context, id string) (r4.Flag, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Flag", id)
	if err != nil {
		return r4.Flag{}, err
	}
	typed, ok := result.(r4.Flag)
	if !ok {
		return r4.Flag{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateFlag updates an existing Flag resource.
func (c *ClientR4) UpdateFlag(ctx context.Context, resource r4.Flag) (update.Result[r4.Flag], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Flag]{}, err
	}
	typed, ok := result.Resource.(r4.Flag)
	if !ok {
		return update.Result[r4.Flag]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Flag]{Resource: typed, Created: result.Created}, nil
}

// DeleteFlag deletes a Flag resource by ID.
func (c *ClientR4) DeleteFlag(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Flag", id)
}

// SearchFlag performs a search for Flag resources.
func (c *ClientR4) SearchFlag(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Flag], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Flag", parameters, options)
	if err != nil {
		return search.Result[r4.Flag]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Flag, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Flag)
		if !ok {
			return search.Result[r4.Flag]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Flag]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGoal creates a new Goal resource.
func (c *ClientR4) CreateGoal(ctx context.Context, resource r4.Goal) (r4.Goal, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Goal{}, err
	}
	typed, ok := result.(r4.Goal)
	if !ok {
		return r4.Goal{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGoal retrieves a Goal resource by ID.
func (c *ClientR4) ReadGoal(ctx context.Context, id string) (r4.Goal, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Goal", id)
	if err != nil {
		return r4.Goal{}, err
	}
	typed, ok := result.(r4.Goal)
	if !ok {
		return r4.Goal{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGoal updates an existing Goal resource.
func (c *ClientR4) UpdateGoal(ctx context.Context, resource r4.Goal) (update.Result[r4.Goal], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Goal]{}, err
	}
	typed, ok := result.Resource.(r4.Goal)
	if !ok {
		return update.Result[r4.Goal]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Goal]{Resource: typed, Created: result.Created}, nil
}

// DeleteGoal deletes a Goal resource by ID.
func (c *ClientR4) DeleteGoal(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Goal", id)
}

// SearchGoal performs a search for Goal resources.
func (c *ClientR4) SearchGoal(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Goal], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Goal", parameters, options)
	if err != nil {
		return search.Result[r4.Goal]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Goal, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Goal)
		if !ok {
			return search.Result[r4.Goal]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Goal]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGraphDefinition creates a new GraphDefinition resource.
func (c *ClientR4) CreateGraphDefinition(ctx context.Context, resource r4.GraphDefinition) (r4.GraphDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.GraphDefinition{}, err
	}
	typed, ok := result.(r4.GraphDefinition)
	if !ok {
		return r4.GraphDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGraphDefinition retrieves a GraphDefinition resource by ID.
func (c *ClientR4) ReadGraphDefinition(ctx context.Context, id string) (r4.GraphDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r4.GraphDefinition{}, err
	}
	typed, ok := result.(r4.GraphDefinition)
	if !ok {
		return r4.GraphDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGraphDefinition updates an existing GraphDefinition resource.
func (c *ClientR4) UpdateGraphDefinition(ctx context.Context, resource r4.GraphDefinition) (update.Result[r4.GraphDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.GraphDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.GraphDefinition)
	if !ok {
		return update.Result[r4.GraphDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.GraphDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteGraphDefinition deletes a GraphDefinition resource by ID.
func (c *ClientR4) DeleteGraphDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "GraphDefinition", id)
}

// SearchGraphDefinition performs a search for GraphDefinition resources.
func (c *ClientR4) SearchGraphDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.GraphDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "GraphDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.GraphDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.GraphDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.GraphDefinition)
		if !ok {
			return search.Result[r4.GraphDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.GraphDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGroup creates a new Group resource.
func (c *ClientR4) CreateGroup(ctx context.Context, resource r4.Group) (r4.Group, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Group{}, err
	}
	typed, ok := result.(r4.Group)
	if !ok {
		return r4.Group{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGroup retrieves a Group resource by ID.
func (c *ClientR4) ReadGroup(ctx context.Context, id string) (r4.Group, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Group", id)
	if err != nil {
		return r4.Group{}, err
	}
	typed, ok := result.(r4.Group)
	if !ok {
		return r4.Group{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGroup updates an existing Group resource.
func (c *ClientR4) UpdateGroup(ctx context.Context, resource r4.Group) (update.Result[r4.Group], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Group]{}, err
	}
	typed, ok := result.Resource.(r4.Group)
	if !ok {
		return update.Result[r4.Group]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Group]{Resource: typed, Created: result.Created}, nil
}

// DeleteGroup deletes a Group resource by ID.
func (c *ClientR4) DeleteGroup(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Group", id)
}

// SearchGroup performs a search for Group resources.
func (c *ClientR4) SearchGroup(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Group], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Group", parameters, options)
	if err != nil {
		return search.Result[r4.Group]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Group, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Group)
		if !ok {
			return search.Result[r4.Group]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Group]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGuidanceResponse creates a new GuidanceResponse resource.
func (c *ClientR4) CreateGuidanceResponse(ctx context.Context, resource r4.GuidanceResponse) (r4.GuidanceResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.GuidanceResponse{}, err
	}
	typed, ok := result.(r4.GuidanceResponse)
	if !ok {
		return r4.GuidanceResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGuidanceResponse retrieves a GuidanceResponse resource by ID.
func (c *ClientR4) ReadGuidanceResponse(ctx context.Context, id string) (r4.GuidanceResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r4.GuidanceResponse{}, err
	}
	typed, ok := result.(r4.GuidanceResponse)
	if !ok {
		return r4.GuidanceResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGuidanceResponse updates an existing GuidanceResponse resource.
func (c *ClientR4) UpdateGuidanceResponse(ctx context.Context, resource r4.GuidanceResponse) (update.Result[r4.GuidanceResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.GuidanceResponse]{}, err
	}
	typed, ok := result.Resource.(r4.GuidanceResponse)
	if !ok {
		return update.Result[r4.GuidanceResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.GuidanceResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteGuidanceResponse deletes a GuidanceResponse resource by ID.
func (c *ClientR4) DeleteGuidanceResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "GuidanceResponse", id)
}

// SearchGuidanceResponse performs a search for GuidanceResponse resources.
func (c *ClientR4) SearchGuidanceResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.GuidanceResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "GuidanceResponse", parameters, options)
	if err != nil {
		return search.Result[r4.GuidanceResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.GuidanceResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.GuidanceResponse)
		if !ok {
			return search.Result[r4.GuidanceResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.GuidanceResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateHealthcareService creates a new HealthcareService resource.
func (c *ClientR4) CreateHealthcareService(ctx context.Context, resource r4.HealthcareService) (r4.HealthcareService, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.HealthcareService{}, err
	}
	typed, ok := result.(r4.HealthcareService)
	if !ok {
		return r4.HealthcareService{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadHealthcareService retrieves a HealthcareService resource by ID.
func (c *ClientR4) ReadHealthcareService(ctx context.Context, id string) (r4.HealthcareService, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r4.HealthcareService{}, err
	}
	typed, ok := result.(r4.HealthcareService)
	if !ok {
		return r4.HealthcareService{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateHealthcareService updates an existing HealthcareService resource.
func (c *ClientR4) UpdateHealthcareService(ctx context.Context, resource r4.HealthcareService) (update.Result[r4.HealthcareService], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.HealthcareService]{}, err
	}
	typed, ok := result.Resource.(r4.HealthcareService)
	if !ok {
		return update.Result[r4.HealthcareService]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.HealthcareService]{Resource: typed, Created: result.Created}, nil
}

// DeleteHealthcareService deletes a HealthcareService resource by ID.
func (c *ClientR4) DeleteHealthcareService(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "HealthcareService", id)
}

// SearchHealthcareService performs a search for HealthcareService resources.
func (c *ClientR4) SearchHealthcareService(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.HealthcareService], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "HealthcareService", parameters, options)
	if err != nil {
		return search.Result[r4.HealthcareService]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.HealthcareService, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.HealthcareService)
		if !ok {
			return search.Result[r4.HealthcareService]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.HealthcareService]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImagingStudy creates a new ImagingStudy resource.
func (c *ClientR4) CreateImagingStudy(ctx context.Context, resource r4.ImagingStudy) (r4.ImagingStudy, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ImagingStudy{}, err
	}
	typed, ok := result.(r4.ImagingStudy)
	if !ok {
		return r4.ImagingStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImagingStudy retrieves a ImagingStudy resource by ID.
func (c *ClientR4) ReadImagingStudy(ctx context.Context, id string) (r4.ImagingStudy, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r4.ImagingStudy{}, err
	}
	typed, ok := result.(r4.ImagingStudy)
	if !ok {
		return r4.ImagingStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImagingStudy updates an existing ImagingStudy resource.
func (c *ClientR4) UpdateImagingStudy(ctx context.Context, resource r4.ImagingStudy) (update.Result[r4.ImagingStudy], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ImagingStudy]{}, err
	}
	typed, ok := result.Resource.(r4.ImagingStudy)
	if !ok {
		return update.Result[r4.ImagingStudy]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ImagingStudy]{Resource: typed, Created: result.Created}, nil
}

// DeleteImagingStudy deletes a ImagingStudy resource by ID.
func (c *ClientR4) DeleteImagingStudy(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImagingStudy", id)
}

// SearchImagingStudy performs a search for ImagingStudy resources.
func (c *ClientR4) SearchImagingStudy(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ImagingStudy], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImagingStudy", parameters, options)
	if err != nil {
		return search.Result[r4.ImagingStudy]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ImagingStudy, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ImagingStudy)
		if !ok {
			return search.Result[r4.ImagingStudy]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ImagingStudy]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunization creates a new Immunization resource.
func (c *ClientR4) CreateImmunization(ctx context.Context, resource r4.Immunization) (r4.Immunization, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Immunization{}, err
	}
	typed, ok := result.(r4.Immunization)
	if !ok {
		return r4.Immunization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunization retrieves a Immunization resource by ID.
func (c *ClientR4) ReadImmunization(ctx context.Context, id string) (r4.Immunization, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Immunization", id)
	if err != nil {
		return r4.Immunization{}, err
	}
	typed, ok := result.(r4.Immunization)
	if !ok {
		return r4.Immunization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunization updates an existing Immunization resource.
func (c *ClientR4) UpdateImmunization(ctx context.Context, resource r4.Immunization) (update.Result[r4.Immunization], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Immunization]{}, err
	}
	typed, ok := result.Resource.(r4.Immunization)
	if !ok {
		return update.Result[r4.Immunization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Immunization]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunization deletes a Immunization resource by ID.
func (c *ClientR4) DeleteImmunization(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Immunization", id)
}

// SearchImmunization performs a search for Immunization resources.
func (c *ClientR4) SearchImmunization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Immunization], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Immunization", parameters, options)
	if err != nil {
		return search.Result[r4.Immunization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Immunization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Immunization)
		if !ok {
			return search.Result[r4.Immunization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Immunization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunizationEvaluation creates a new ImmunizationEvaluation resource.
func (c *ClientR4) CreateImmunizationEvaluation(ctx context.Context, resource r4.ImmunizationEvaluation) (r4.ImmunizationEvaluation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ImmunizationEvaluation{}, err
	}
	typed, ok := result.(r4.ImmunizationEvaluation)
	if !ok {
		return r4.ImmunizationEvaluation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunizationEvaluation retrieves a ImmunizationEvaluation resource by ID.
func (c *ClientR4) ReadImmunizationEvaluation(ctx context.Context, id string) (r4.ImmunizationEvaluation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r4.ImmunizationEvaluation{}, err
	}
	typed, ok := result.(r4.ImmunizationEvaluation)
	if !ok {
		return r4.ImmunizationEvaluation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunizationEvaluation updates an existing ImmunizationEvaluation resource.
func (c *ClientR4) UpdateImmunizationEvaluation(ctx context.Context, resource r4.ImmunizationEvaluation) (update.Result[r4.ImmunizationEvaluation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ImmunizationEvaluation]{}, err
	}
	typed, ok := result.Resource.(r4.ImmunizationEvaluation)
	if !ok {
		return update.Result[r4.ImmunizationEvaluation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ImmunizationEvaluation]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunizationEvaluation deletes a ImmunizationEvaluation resource by ID.
func (c *ClientR4) DeleteImmunizationEvaluation(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImmunizationEvaluation", id)
}

// SearchImmunizationEvaluation performs a search for ImmunizationEvaluation resources.
func (c *ClientR4) SearchImmunizationEvaluation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ImmunizationEvaluation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImmunizationEvaluation", parameters, options)
	if err != nil {
		return search.Result[r4.ImmunizationEvaluation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ImmunizationEvaluation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ImmunizationEvaluation)
		if !ok {
			return search.Result[r4.ImmunizationEvaluation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ImmunizationEvaluation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunizationRecommendation creates a new ImmunizationRecommendation resource.
func (c *ClientR4) CreateImmunizationRecommendation(ctx context.Context, resource r4.ImmunizationRecommendation) (r4.ImmunizationRecommendation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ImmunizationRecommendation{}, err
	}
	typed, ok := result.(r4.ImmunizationRecommendation)
	if !ok {
		return r4.ImmunizationRecommendation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunizationRecommendation retrieves a ImmunizationRecommendation resource by ID.
func (c *ClientR4) ReadImmunizationRecommendation(ctx context.Context, id string) (r4.ImmunizationRecommendation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r4.ImmunizationRecommendation{}, err
	}
	typed, ok := result.(r4.ImmunizationRecommendation)
	if !ok {
		return r4.ImmunizationRecommendation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunizationRecommendation updates an existing ImmunizationRecommendation resource.
func (c *ClientR4) UpdateImmunizationRecommendation(ctx context.Context, resource r4.ImmunizationRecommendation) (update.Result[r4.ImmunizationRecommendation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ImmunizationRecommendation]{}, err
	}
	typed, ok := result.Resource.(r4.ImmunizationRecommendation)
	if !ok {
		return update.Result[r4.ImmunizationRecommendation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ImmunizationRecommendation]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunizationRecommendation deletes a ImmunizationRecommendation resource by ID.
func (c *ClientR4) DeleteImmunizationRecommendation(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImmunizationRecommendation", id)
}

// SearchImmunizationRecommendation performs a search for ImmunizationRecommendation resources.
func (c *ClientR4) SearchImmunizationRecommendation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ImmunizationRecommendation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImmunizationRecommendation", parameters, options)
	if err != nil {
		return search.Result[r4.ImmunizationRecommendation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ImmunizationRecommendation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ImmunizationRecommendation)
		if !ok {
			return search.Result[r4.ImmunizationRecommendation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ImmunizationRecommendation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImplementationGuide creates a new ImplementationGuide resource.
func (c *ClientR4) CreateImplementationGuide(ctx context.Context, resource r4.ImplementationGuide) (r4.ImplementationGuide, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ImplementationGuide{}, err
	}
	typed, ok := result.(r4.ImplementationGuide)
	if !ok {
		return r4.ImplementationGuide{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImplementationGuide retrieves a ImplementationGuide resource by ID.
func (c *ClientR4) ReadImplementationGuide(ctx context.Context, id string) (r4.ImplementationGuide, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r4.ImplementationGuide{}, err
	}
	typed, ok := result.(r4.ImplementationGuide)
	if !ok {
		return r4.ImplementationGuide{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImplementationGuide updates an existing ImplementationGuide resource.
func (c *ClientR4) UpdateImplementationGuide(ctx context.Context, resource r4.ImplementationGuide) (update.Result[r4.ImplementationGuide], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ImplementationGuide]{}, err
	}
	typed, ok := result.Resource.(r4.ImplementationGuide)
	if !ok {
		return update.Result[r4.ImplementationGuide]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ImplementationGuide]{Resource: typed, Created: result.Created}, nil
}

// DeleteImplementationGuide deletes a ImplementationGuide resource by ID.
func (c *ClientR4) DeleteImplementationGuide(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ImplementationGuide", id)
}

// SearchImplementationGuide performs a search for ImplementationGuide resources.
func (c *ClientR4) SearchImplementationGuide(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ImplementationGuide], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ImplementationGuide", parameters, options)
	if err != nil {
		return search.Result[r4.ImplementationGuide]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ImplementationGuide, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ImplementationGuide)
		if !ok {
			return search.Result[r4.ImplementationGuide]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ImplementationGuide]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInsurancePlan creates a new InsurancePlan resource.
func (c *ClientR4) CreateInsurancePlan(ctx context.Context, resource r4.InsurancePlan) (r4.InsurancePlan, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.InsurancePlan{}, err
	}
	typed, ok := result.(r4.InsurancePlan)
	if !ok {
		return r4.InsurancePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInsurancePlan retrieves a InsurancePlan resource by ID.
func (c *ClientR4) ReadInsurancePlan(ctx context.Context, id string) (r4.InsurancePlan, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r4.InsurancePlan{}, err
	}
	typed, ok := result.(r4.InsurancePlan)
	if !ok {
		return r4.InsurancePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInsurancePlan updates an existing InsurancePlan resource.
func (c *ClientR4) UpdateInsurancePlan(ctx context.Context, resource r4.InsurancePlan) (update.Result[r4.InsurancePlan], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.InsurancePlan]{}, err
	}
	typed, ok := result.Resource.(r4.InsurancePlan)
	if !ok {
		return update.Result[r4.InsurancePlan]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.InsurancePlan]{Resource: typed, Created: result.Created}, nil
}

// DeleteInsurancePlan deletes a InsurancePlan resource by ID.
func (c *ClientR4) DeleteInsurancePlan(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "InsurancePlan", id)
}

// SearchInsurancePlan performs a search for InsurancePlan resources.
func (c *ClientR4) SearchInsurancePlan(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.InsurancePlan], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "InsurancePlan", parameters, options)
	if err != nil {
		return search.Result[r4.InsurancePlan]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.InsurancePlan, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.InsurancePlan)
		if !ok {
			return search.Result[r4.InsurancePlan]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.InsurancePlan]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInvoice creates a new Invoice resource.
func (c *ClientR4) CreateInvoice(ctx context.Context, resource r4.Invoice) (r4.Invoice, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Invoice{}, err
	}
	typed, ok := result.(r4.Invoice)
	if !ok {
		return r4.Invoice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInvoice retrieves a Invoice resource by ID.
func (c *ClientR4) ReadInvoice(ctx context.Context, id string) (r4.Invoice, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Invoice", id)
	if err != nil {
		return r4.Invoice{}, err
	}
	typed, ok := result.(r4.Invoice)
	if !ok {
		return r4.Invoice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInvoice updates an existing Invoice resource.
func (c *ClientR4) UpdateInvoice(ctx context.Context, resource r4.Invoice) (update.Result[r4.Invoice], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Invoice]{}, err
	}
	typed, ok := result.Resource.(r4.Invoice)
	if !ok {
		return update.Result[r4.Invoice]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Invoice]{Resource: typed, Created: result.Created}, nil
}

// DeleteInvoice deletes a Invoice resource by ID.
func (c *ClientR4) DeleteInvoice(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Invoice", id)
}

// SearchInvoice performs a search for Invoice resources.
func (c *ClientR4) SearchInvoice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Invoice], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Invoice", parameters, options)
	if err != nil {
		return search.Result[r4.Invoice]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Invoice, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Invoice)
		if !ok {
			return search.Result[r4.Invoice]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Invoice]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLibrary creates a new Library resource.
func (c *ClientR4) CreateLibrary(ctx context.Context, resource r4.Library) (r4.Library, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Library{}, err
	}
	typed, ok := result.(r4.Library)
	if !ok {
		return r4.Library{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLibrary retrieves a Library resource by ID.
func (c *ClientR4) ReadLibrary(ctx context.Context, id string) (r4.Library, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Library", id)
	if err != nil {
		return r4.Library{}, err
	}
	typed, ok := result.(r4.Library)
	if !ok {
		return r4.Library{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLibrary updates an existing Library resource.
func (c *ClientR4) UpdateLibrary(ctx context.Context, resource r4.Library) (update.Result[r4.Library], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Library]{}, err
	}
	typed, ok := result.Resource.(r4.Library)
	if !ok {
		return update.Result[r4.Library]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Library]{Resource: typed, Created: result.Created}, nil
}

// DeleteLibrary deletes a Library resource by ID.
func (c *ClientR4) DeleteLibrary(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Library", id)
}

// SearchLibrary performs a search for Library resources.
func (c *ClientR4) SearchLibrary(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Library], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Library", parameters, options)
	if err != nil {
		return search.Result[r4.Library]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Library, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Library)
		if !ok {
			return search.Result[r4.Library]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Library]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLinkage creates a new Linkage resource.
func (c *ClientR4) CreateLinkage(ctx context.Context, resource r4.Linkage) (r4.Linkage, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Linkage{}, err
	}
	typed, ok := result.(r4.Linkage)
	if !ok {
		return r4.Linkage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLinkage retrieves a Linkage resource by ID.
func (c *ClientR4) ReadLinkage(ctx context.Context, id string) (r4.Linkage, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Linkage", id)
	if err != nil {
		return r4.Linkage{}, err
	}
	typed, ok := result.(r4.Linkage)
	if !ok {
		return r4.Linkage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLinkage updates an existing Linkage resource.
func (c *ClientR4) UpdateLinkage(ctx context.Context, resource r4.Linkage) (update.Result[r4.Linkage], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Linkage]{}, err
	}
	typed, ok := result.Resource.(r4.Linkage)
	if !ok {
		return update.Result[r4.Linkage]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Linkage]{Resource: typed, Created: result.Created}, nil
}

// DeleteLinkage deletes a Linkage resource by ID.
func (c *ClientR4) DeleteLinkage(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Linkage", id)
}

// SearchLinkage performs a search for Linkage resources.
func (c *ClientR4) SearchLinkage(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Linkage], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Linkage", parameters, options)
	if err != nil {
		return search.Result[r4.Linkage]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Linkage, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Linkage)
		if !ok {
			return search.Result[r4.Linkage]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Linkage]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateList creates a new List resource.
func (c *ClientR4) CreateList(ctx context.Context, resource r4.List) (r4.List, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.List{}, err
	}
	typed, ok := result.(r4.List)
	if !ok {
		return r4.List{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadList retrieves a List resource by ID.
func (c *ClientR4) ReadList(ctx context.Context, id string) (r4.List, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "List", id)
	if err != nil {
		return r4.List{}, err
	}
	typed, ok := result.(r4.List)
	if !ok {
		return r4.List{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateList updates an existing List resource.
func (c *ClientR4) UpdateList(ctx context.Context, resource r4.List) (update.Result[r4.List], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.List]{}, err
	}
	typed, ok := result.Resource.(r4.List)
	if !ok {
		return update.Result[r4.List]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.List]{Resource: typed, Created: result.Created}, nil
}

// DeleteList deletes a List resource by ID.
func (c *ClientR4) DeleteList(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "List", id)
}

// SearchList performs a search for List resources.
func (c *ClientR4) SearchList(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.List], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "List", parameters, options)
	if err != nil {
		return search.Result[r4.List]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.List, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.List)
		if !ok {
			return search.Result[r4.List]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.List]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLocation creates a new Location resource.
func (c *ClientR4) CreateLocation(ctx context.Context, resource r4.Location) (r4.Location, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Location{}, err
	}
	typed, ok := result.(r4.Location)
	if !ok {
		return r4.Location{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLocation retrieves a Location resource by ID.
func (c *ClientR4) ReadLocation(ctx context.Context, id string) (r4.Location, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Location", id)
	if err != nil {
		return r4.Location{}, err
	}
	typed, ok := result.(r4.Location)
	if !ok {
		return r4.Location{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLocation updates an existing Location resource.
func (c *ClientR4) UpdateLocation(ctx context.Context, resource r4.Location) (update.Result[r4.Location], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Location]{}, err
	}
	typed, ok := result.Resource.(r4.Location)
	if !ok {
		return update.Result[r4.Location]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Location]{Resource: typed, Created: result.Created}, nil
}

// DeleteLocation deletes a Location resource by ID.
func (c *ClientR4) DeleteLocation(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Location", id)
}

// SearchLocation performs a search for Location resources.
func (c *ClientR4) SearchLocation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Location], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Location", parameters, options)
	if err != nil {
		return search.Result[r4.Location]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Location, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Location)
		if !ok {
			return search.Result[r4.Location]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Location]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMeasure creates a new Measure resource.
func (c *ClientR4) CreateMeasure(ctx context.Context, resource r4.Measure) (r4.Measure, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Measure{}, err
	}
	typed, ok := result.(r4.Measure)
	if !ok {
		return r4.Measure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMeasure retrieves a Measure resource by ID.
func (c *ClientR4) ReadMeasure(ctx context.Context, id string) (r4.Measure, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Measure", id)
	if err != nil {
		return r4.Measure{}, err
	}
	typed, ok := result.(r4.Measure)
	if !ok {
		return r4.Measure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMeasure updates an existing Measure resource.
func (c *ClientR4) UpdateMeasure(ctx context.Context, resource r4.Measure) (update.Result[r4.Measure], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Measure]{}, err
	}
	typed, ok := result.Resource.(r4.Measure)
	if !ok {
		return update.Result[r4.Measure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Measure]{Resource: typed, Created: result.Created}, nil
}

// DeleteMeasure deletes a Measure resource by ID.
func (c *ClientR4) DeleteMeasure(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Measure", id)
}

// SearchMeasure performs a search for Measure resources.
func (c *ClientR4) SearchMeasure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Measure], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Measure", parameters, options)
	if err != nil {
		return search.Result[r4.Measure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Measure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Measure)
		if !ok {
			return search.Result[r4.Measure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Measure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMeasureReport creates a new MeasureReport resource.
func (c *ClientR4) CreateMeasureReport(ctx context.Context, resource r4.MeasureReport) (r4.MeasureReport, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MeasureReport{}, err
	}
	typed, ok := result.(r4.MeasureReport)
	if !ok {
		return r4.MeasureReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMeasureReport retrieves a MeasureReport resource by ID.
func (c *ClientR4) ReadMeasureReport(ctx context.Context, id string) (r4.MeasureReport, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r4.MeasureReport{}, err
	}
	typed, ok := result.(r4.MeasureReport)
	if !ok {
		return r4.MeasureReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMeasureReport updates an existing MeasureReport resource.
func (c *ClientR4) UpdateMeasureReport(ctx context.Context, resource r4.MeasureReport) (update.Result[r4.MeasureReport], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MeasureReport]{}, err
	}
	typed, ok := result.Resource.(r4.MeasureReport)
	if !ok {
		return update.Result[r4.MeasureReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MeasureReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteMeasureReport deletes a MeasureReport resource by ID.
func (c *ClientR4) DeleteMeasureReport(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MeasureReport", id)
}

// SearchMeasureReport performs a search for MeasureReport resources.
func (c *ClientR4) SearchMeasureReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MeasureReport], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MeasureReport", parameters, options)
	if err != nil {
		return search.Result[r4.MeasureReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MeasureReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MeasureReport)
		if !ok {
			return search.Result[r4.MeasureReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MeasureReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedia creates a new Media resource.
func (c *ClientR4) CreateMedia(ctx context.Context, resource r4.Media) (r4.Media, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Media{}, err
	}
	typed, ok := result.(r4.Media)
	if !ok {
		return r4.Media{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedia retrieves a Media resource by ID.
func (c *ClientR4) ReadMedia(ctx context.Context, id string) (r4.Media, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Media", id)
	if err != nil {
		return r4.Media{}, err
	}
	typed, ok := result.(r4.Media)
	if !ok {
		return r4.Media{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedia updates an existing Media resource.
func (c *ClientR4) UpdateMedia(ctx context.Context, resource r4.Media) (update.Result[r4.Media], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Media]{}, err
	}
	typed, ok := result.Resource.(r4.Media)
	if !ok {
		return update.Result[r4.Media]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Media]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedia deletes a Media resource by ID.
func (c *ClientR4) DeleteMedia(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Media", id)
}

// SearchMedia performs a search for Media resources.
func (c *ClientR4) SearchMedia(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Media], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Media", parameters, options)
	if err != nil {
		return search.Result[r4.Media]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Media, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Media)
		if !ok {
			return search.Result[r4.Media]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Media]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedication creates a new Medication resource.
func (c *ClientR4) CreateMedication(ctx context.Context, resource r4.Medication) (r4.Medication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Medication{}, err
	}
	typed, ok := result.(r4.Medication)
	if !ok {
		return r4.Medication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedication retrieves a Medication resource by ID.
func (c *ClientR4) ReadMedication(ctx context.Context, id string) (r4.Medication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Medication", id)
	if err != nil {
		return r4.Medication{}, err
	}
	typed, ok := result.(r4.Medication)
	if !ok {
		return r4.Medication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedication updates an existing Medication resource.
func (c *ClientR4) UpdateMedication(ctx context.Context, resource r4.Medication) (update.Result[r4.Medication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Medication]{}, err
	}
	typed, ok := result.Resource.(r4.Medication)
	if !ok {
		return update.Result[r4.Medication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Medication]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedication deletes a Medication resource by ID.
func (c *ClientR4) DeleteMedication(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Medication", id)
}

// SearchMedication performs a search for Medication resources.
func (c *ClientR4) SearchMedication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Medication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Medication", parameters, options)
	if err != nil {
		return search.Result[r4.Medication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Medication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Medication)
		if !ok {
			return search.Result[r4.Medication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Medication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationAdministration creates a new MedicationAdministration resource.
func (c *ClientR4) CreateMedicationAdministration(ctx context.Context, resource r4.MedicationAdministration) (r4.MedicationAdministration, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicationAdministration{}, err
	}
	typed, ok := result.(r4.MedicationAdministration)
	if !ok {
		return r4.MedicationAdministration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationAdministration retrieves a MedicationAdministration resource by ID.
func (c *ClientR4) ReadMedicationAdministration(ctx context.Context, id string) (r4.MedicationAdministration, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r4.MedicationAdministration{}, err
	}
	typed, ok := result.(r4.MedicationAdministration)
	if !ok {
		return r4.MedicationAdministration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationAdministration updates an existing MedicationAdministration resource.
func (c *ClientR4) UpdateMedicationAdministration(ctx context.Context, resource r4.MedicationAdministration) (update.Result[r4.MedicationAdministration], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicationAdministration]{}, err
	}
	typed, ok := result.Resource.(r4.MedicationAdministration)
	if !ok {
		return update.Result[r4.MedicationAdministration]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicationAdministration]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationAdministration deletes a MedicationAdministration resource by ID.
func (c *ClientR4) DeleteMedicationAdministration(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationAdministration", id)
}

// SearchMedicationAdministration performs a search for MedicationAdministration resources.
func (c *ClientR4) SearchMedicationAdministration(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicationAdministration], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationAdministration", parameters, options)
	if err != nil {
		return search.Result[r4.MedicationAdministration]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicationAdministration, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicationAdministration)
		if !ok {
			return search.Result[r4.MedicationAdministration]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicationAdministration]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationDispense creates a new MedicationDispense resource.
func (c *ClientR4) CreateMedicationDispense(ctx context.Context, resource r4.MedicationDispense) (r4.MedicationDispense, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicationDispense{}, err
	}
	typed, ok := result.(r4.MedicationDispense)
	if !ok {
		return r4.MedicationDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationDispense retrieves a MedicationDispense resource by ID.
func (c *ClientR4) ReadMedicationDispense(ctx context.Context, id string) (r4.MedicationDispense, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r4.MedicationDispense{}, err
	}
	typed, ok := result.(r4.MedicationDispense)
	if !ok {
		return r4.MedicationDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationDispense updates an existing MedicationDispense resource.
func (c *ClientR4) UpdateMedicationDispense(ctx context.Context, resource r4.MedicationDispense) (update.Result[r4.MedicationDispense], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicationDispense]{}, err
	}
	typed, ok := result.Resource.(r4.MedicationDispense)
	if !ok {
		return update.Result[r4.MedicationDispense]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicationDispense]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationDispense deletes a MedicationDispense resource by ID.
func (c *ClientR4) DeleteMedicationDispense(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationDispense", id)
}

// SearchMedicationDispense performs a search for MedicationDispense resources.
func (c *ClientR4) SearchMedicationDispense(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicationDispense], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationDispense", parameters, options)
	if err != nil {
		return search.Result[r4.MedicationDispense]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicationDispense, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicationDispense)
		if !ok {
			return search.Result[r4.MedicationDispense]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicationDispense]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationKnowledge creates a new MedicationKnowledge resource.
func (c *ClientR4) CreateMedicationKnowledge(ctx context.Context, resource r4.MedicationKnowledge) (r4.MedicationKnowledge, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicationKnowledge{}, err
	}
	typed, ok := result.(r4.MedicationKnowledge)
	if !ok {
		return r4.MedicationKnowledge{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationKnowledge retrieves a MedicationKnowledge resource by ID.
func (c *ClientR4) ReadMedicationKnowledge(ctx context.Context, id string) (r4.MedicationKnowledge, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r4.MedicationKnowledge{}, err
	}
	typed, ok := result.(r4.MedicationKnowledge)
	if !ok {
		return r4.MedicationKnowledge{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationKnowledge updates an existing MedicationKnowledge resource.
func (c *ClientR4) UpdateMedicationKnowledge(ctx context.Context, resource r4.MedicationKnowledge) (update.Result[r4.MedicationKnowledge], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicationKnowledge]{}, err
	}
	typed, ok := result.Resource.(r4.MedicationKnowledge)
	if !ok {
		return update.Result[r4.MedicationKnowledge]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicationKnowledge]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationKnowledge deletes a MedicationKnowledge resource by ID.
func (c *ClientR4) DeleteMedicationKnowledge(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationKnowledge", id)
}

// SearchMedicationKnowledge performs a search for MedicationKnowledge resources.
func (c *ClientR4) SearchMedicationKnowledge(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicationKnowledge], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationKnowledge", parameters, options)
	if err != nil {
		return search.Result[r4.MedicationKnowledge]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicationKnowledge, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicationKnowledge)
		if !ok {
			return search.Result[r4.MedicationKnowledge]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicationKnowledge]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationRequest creates a new MedicationRequest resource.
func (c *ClientR4) CreateMedicationRequest(ctx context.Context, resource r4.MedicationRequest) (r4.MedicationRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicationRequest{}, err
	}
	typed, ok := result.(r4.MedicationRequest)
	if !ok {
		return r4.MedicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationRequest retrieves a MedicationRequest resource by ID.
func (c *ClientR4) ReadMedicationRequest(ctx context.Context, id string) (r4.MedicationRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r4.MedicationRequest{}, err
	}
	typed, ok := result.(r4.MedicationRequest)
	if !ok {
		return r4.MedicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationRequest updates an existing MedicationRequest resource.
func (c *ClientR4) UpdateMedicationRequest(ctx context.Context, resource r4.MedicationRequest) (update.Result[r4.MedicationRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicationRequest]{}, err
	}
	typed, ok := result.Resource.(r4.MedicationRequest)
	if !ok {
		return update.Result[r4.MedicationRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicationRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationRequest deletes a MedicationRequest resource by ID.
func (c *ClientR4) DeleteMedicationRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationRequest", id)
}

// SearchMedicationRequest performs a search for MedicationRequest resources.
func (c *ClientR4) SearchMedicationRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicationRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationRequest", parameters, options)
	if err != nil {
		return search.Result[r4.MedicationRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicationRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicationRequest)
		if !ok {
			return search.Result[r4.MedicationRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicationRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationStatement creates a new MedicationStatement resource.
func (c *ClientR4) CreateMedicationStatement(ctx context.Context, resource r4.MedicationStatement) (r4.MedicationStatement, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicationStatement{}, err
	}
	typed, ok := result.(r4.MedicationStatement)
	if !ok {
		return r4.MedicationStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationStatement retrieves a MedicationStatement resource by ID.
func (c *ClientR4) ReadMedicationStatement(ctx context.Context, id string) (r4.MedicationStatement, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r4.MedicationStatement{}, err
	}
	typed, ok := result.(r4.MedicationStatement)
	if !ok {
		return r4.MedicationStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationStatement updates an existing MedicationStatement resource.
func (c *ClientR4) UpdateMedicationStatement(ctx context.Context, resource r4.MedicationStatement) (update.Result[r4.MedicationStatement], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicationStatement]{}, err
	}
	typed, ok := result.Resource.(r4.MedicationStatement)
	if !ok {
		return update.Result[r4.MedicationStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicationStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationStatement deletes a MedicationStatement resource by ID.
func (c *ClientR4) DeleteMedicationStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicationStatement", id)
}

// SearchMedicationStatement performs a search for MedicationStatement resources.
func (c *ClientR4) SearchMedicationStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicationStatement], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicationStatement", parameters, options)
	if err != nil {
		return search.Result[r4.MedicationStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicationStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicationStatement)
		if !ok {
			return search.Result[r4.MedicationStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicationStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProduct creates a new MedicinalProduct resource.
func (c *ClientR4) CreateMedicinalProduct(ctx context.Context, resource r4.MedicinalProduct) (r4.MedicinalProduct, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProduct{}, err
	}
	typed, ok := result.(r4.MedicinalProduct)
	if !ok {
		return r4.MedicinalProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProduct retrieves a MedicinalProduct resource by ID.
func (c *ClientR4) ReadMedicinalProduct(ctx context.Context, id string) (r4.MedicinalProduct, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProduct", id)
	if err != nil {
		return r4.MedicinalProduct{}, err
	}
	typed, ok := result.(r4.MedicinalProduct)
	if !ok {
		return r4.MedicinalProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProduct updates an existing MedicinalProduct resource.
func (c *ClientR4) UpdateMedicinalProduct(ctx context.Context, resource r4.MedicinalProduct) (update.Result[r4.MedicinalProduct], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProduct]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProduct)
	if !ok {
		return update.Result[r4.MedicinalProduct]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProduct]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProduct deletes a MedicinalProduct resource by ID.
func (c *ClientR4) DeleteMedicinalProduct(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProduct", id)
}

// SearchMedicinalProduct performs a search for MedicinalProduct resources.
func (c *ClientR4) SearchMedicinalProduct(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProduct], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProduct", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProduct]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProduct, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProduct)
		if !ok {
			return search.Result[r4.MedicinalProduct]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProduct]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductAuthorization creates a new MedicinalProductAuthorization resource.
func (c *ClientR4) CreateMedicinalProductAuthorization(ctx context.Context, resource r4.MedicinalProductAuthorization) (r4.MedicinalProductAuthorization, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductAuthorization{}, err
	}
	typed, ok := result.(r4.MedicinalProductAuthorization)
	if !ok {
		return r4.MedicinalProductAuthorization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductAuthorization retrieves a MedicinalProductAuthorization resource by ID.
func (c *ClientR4) ReadMedicinalProductAuthorization(ctx context.Context, id string) (r4.MedicinalProductAuthorization, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductAuthorization", id)
	if err != nil {
		return r4.MedicinalProductAuthorization{}, err
	}
	typed, ok := result.(r4.MedicinalProductAuthorization)
	if !ok {
		return r4.MedicinalProductAuthorization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductAuthorization updates an existing MedicinalProductAuthorization resource.
func (c *ClientR4) UpdateMedicinalProductAuthorization(ctx context.Context, resource r4.MedicinalProductAuthorization) (update.Result[r4.MedicinalProductAuthorization], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductAuthorization]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductAuthorization)
	if !ok {
		return update.Result[r4.MedicinalProductAuthorization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductAuthorization]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductAuthorization deletes a MedicinalProductAuthorization resource by ID.
func (c *ClientR4) DeleteMedicinalProductAuthorization(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductAuthorization", id)
}

// SearchMedicinalProductAuthorization performs a search for MedicinalProductAuthorization resources.
func (c *ClientR4) SearchMedicinalProductAuthorization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductAuthorization], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductAuthorization", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductAuthorization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductAuthorization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductAuthorization)
		if !ok {
			return search.Result[r4.MedicinalProductAuthorization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductAuthorization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductContraindication creates a new MedicinalProductContraindication resource.
func (c *ClientR4) CreateMedicinalProductContraindication(ctx context.Context, resource r4.MedicinalProductContraindication) (r4.MedicinalProductContraindication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductContraindication{}, err
	}
	typed, ok := result.(r4.MedicinalProductContraindication)
	if !ok {
		return r4.MedicinalProductContraindication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductContraindication retrieves a MedicinalProductContraindication resource by ID.
func (c *ClientR4) ReadMedicinalProductContraindication(ctx context.Context, id string) (r4.MedicinalProductContraindication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductContraindication", id)
	if err != nil {
		return r4.MedicinalProductContraindication{}, err
	}
	typed, ok := result.(r4.MedicinalProductContraindication)
	if !ok {
		return r4.MedicinalProductContraindication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductContraindication updates an existing MedicinalProductContraindication resource.
func (c *ClientR4) UpdateMedicinalProductContraindication(ctx context.Context, resource r4.MedicinalProductContraindication) (update.Result[r4.MedicinalProductContraindication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductContraindication]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductContraindication)
	if !ok {
		return update.Result[r4.MedicinalProductContraindication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductContraindication]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductContraindication deletes a MedicinalProductContraindication resource by ID.
func (c *ClientR4) DeleteMedicinalProductContraindication(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductContraindication", id)
}

// SearchMedicinalProductContraindication performs a search for MedicinalProductContraindication resources.
func (c *ClientR4) SearchMedicinalProductContraindication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductContraindication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductContraindication", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductContraindication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductContraindication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductContraindication)
		if !ok {
			return search.Result[r4.MedicinalProductContraindication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductContraindication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductIndication creates a new MedicinalProductIndication resource.
func (c *ClientR4) CreateMedicinalProductIndication(ctx context.Context, resource r4.MedicinalProductIndication) (r4.MedicinalProductIndication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductIndication{}, err
	}
	typed, ok := result.(r4.MedicinalProductIndication)
	if !ok {
		return r4.MedicinalProductIndication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductIndication retrieves a MedicinalProductIndication resource by ID.
func (c *ClientR4) ReadMedicinalProductIndication(ctx context.Context, id string) (r4.MedicinalProductIndication, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductIndication", id)
	if err != nil {
		return r4.MedicinalProductIndication{}, err
	}
	typed, ok := result.(r4.MedicinalProductIndication)
	if !ok {
		return r4.MedicinalProductIndication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductIndication updates an existing MedicinalProductIndication resource.
func (c *ClientR4) UpdateMedicinalProductIndication(ctx context.Context, resource r4.MedicinalProductIndication) (update.Result[r4.MedicinalProductIndication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductIndication]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductIndication)
	if !ok {
		return update.Result[r4.MedicinalProductIndication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductIndication]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductIndication deletes a MedicinalProductIndication resource by ID.
func (c *ClientR4) DeleteMedicinalProductIndication(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductIndication", id)
}

// SearchMedicinalProductIndication performs a search for MedicinalProductIndication resources.
func (c *ClientR4) SearchMedicinalProductIndication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductIndication], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductIndication", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductIndication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductIndication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductIndication)
		if !ok {
			return search.Result[r4.MedicinalProductIndication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductIndication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductIngredient creates a new MedicinalProductIngredient resource.
func (c *ClientR4) CreateMedicinalProductIngredient(ctx context.Context, resource r4.MedicinalProductIngredient) (r4.MedicinalProductIngredient, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductIngredient{}, err
	}
	typed, ok := result.(r4.MedicinalProductIngredient)
	if !ok {
		return r4.MedicinalProductIngredient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductIngredient retrieves a MedicinalProductIngredient resource by ID.
func (c *ClientR4) ReadMedicinalProductIngredient(ctx context.Context, id string) (r4.MedicinalProductIngredient, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductIngredient", id)
	if err != nil {
		return r4.MedicinalProductIngredient{}, err
	}
	typed, ok := result.(r4.MedicinalProductIngredient)
	if !ok {
		return r4.MedicinalProductIngredient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductIngredient updates an existing MedicinalProductIngredient resource.
func (c *ClientR4) UpdateMedicinalProductIngredient(ctx context.Context, resource r4.MedicinalProductIngredient) (update.Result[r4.MedicinalProductIngredient], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductIngredient]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductIngredient)
	if !ok {
		return update.Result[r4.MedicinalProductIngredient]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductIngredient]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductIngredient deletes a MedicinalProductIngredient resource by ID.
func (c *ClientR4) DeleteMedicinalProductIngredient(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductIngredient", id)
}

// SearchMedicinalProductIngredient performs a search for MedicinalProductIngredient resources.
func (c *ClientR4) SearchMedicinalProductIngredient(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductIngredient], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductIngredient", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductIngredient]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductIngredient, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductIngredient)
		if !ok {
			return search.Result[r4.MedicinalProductIngredient]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductIngredient]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductInteraction creates a new MedicinalProductInteraction resource.
func (c *ClientR4) CreateMedicinalProductInteraction(ctx context.Context, resource r4.MedicinalProductInteraction) (r4.MedicinalProductInteraction, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductInteraction{}, err
	}
	typed, ok := result.(r4.MedicinalProductInteraction)
	if !ok {
		return r4.MedicinalProductInteraction{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductInteraction retrieves a MedicinalProductInteraction resource by ID.
func (c *ClientR4) ReadMedicinalProductInteraction(ctx context.Context, id string) (r4.MedicinalProductInteraction, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductInteraction", id)
	if err != nil {
		return r4.MedicinalProductInteraction{}, err
	}
	typed, ok := result.(r4.MedicinalProductInteraction)
	if !ok {
		return r4.MedicinalProductInteraction{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductInteraction updates an existing MedicinalProductInteraction resource.
func (c *ClientR4) UpdateMedicinalProductInteraction(ctx context.Context, resource r4.MedicinalProductInteraction) (update.Result[r4.MedicinalProductInteraction], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductInteraction]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductInteraction)
	if !ok {
		return update.Result[r4.MedicinalProductInteraction]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductInteraction]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductInteraction deletes a MedicinalProductInteraction resource by ID.
func (c *ClientR4) DeleteMedicinalProductInteraction(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductInteraction", id)
}

// SearchMedicinalProductInteraction performs a search for MedicinalProductInteraction resources.
func (c *ClientR4) SearchMedicinalProductInteraction(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductInteraction], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductInteraction", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductInteraction]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductInteraction, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductInteraction)
		if !ok {
			return search.Result[r4.MedicinalProductInteraction]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductInteraction]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductManufactured creates a new MedicinalProductManufactured resource.
func (c *ClientR4) CreateMedicinalProductManufactured(ctx context.Context, resource r4.MedicinalProductManufactured) (r4.MedicinalProductManufactured, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductManufactured{}, err
	}
	typed, ok := result.(r4.MedicinalProductManufactured)
	if !ok {
		return r4.MedicinalProductManufactured{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductManufactured retrieves a MedicinalProductManufactured resource by ID.
func (c *ClientR4) ReadMedicinalProductManufactured(ctx context.Context, id string) (r4.MedicinalProductManufactured, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductManufactured", id)
	if err != nil {
		return r4.MedicinalProductManufactured{}, err
	}
	typed, ok := result.(r4.MedicinalProductManufactured)
	if !ok {
		return r4.MedicinalProductManufactured{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductManufactured updates an existing MedicinalProductManufactured resource.
func (c *ClientR4) UpdateMedicinalProductManufactured(ctx context.Context, resource r4.MedicinalProductManufactured) (update.Result[r4.MedicinalProductManufactured], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductManufactured]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductManufactured)
	if !ok {
		return update.Result[r4.MedicinalProductManufactured]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductManufactured]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductManufactured deletes a MedicinalProductManufactured resource by ID.
func (c *ClientR4) DeleteMedicinalProductManufactured(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductManufactured", id)
}

// SearchMedicinalProductManufactured performs a search for MedicinalProductManufactured resources.
func (c *ClientR4) SearchMedicinalProductManufactured(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductManufactured], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductManufactured", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductManufactured]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductManufactured, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductManufactured)
		if !ok {
			return search.Result[r4.MedicinalProductManufactured]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductManufactured]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductPackaged creates a new MedicinalProductPackaged resource.
func (c *ClientR4) CreateMedicinalProductPackaged(ctx context.Context, resource r4.MedicinalProductPackaged) (r4.MedicinalProductPackaged, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductPackaged{}, err
	}
	typed, ok := result.(r4.MedicinalProductPackaged)
	if !ok {
		return r4.MedicinalProductPackaged{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductPackaged retrieves a MedicinalProductPackaged resource by ID.
func (c *ClientR4) ReadMedicinalProductPackaged(ctx context.Context, id string) (r4.MedicinalProductPackaged, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductPackaged", id)
	if err != nil {
		return r4.MedicinalProductPackaged{}, err
	}
	typed, ok := result.(r4.MedicinalProductPackaged)
	if !ok {
		return r4.MedicinalProductPackaged{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductPackaged updates an existing MedicinalProductPackaged resource.
func (c *ClientR4) UpdateMedicinalProductPackaged(ctx context.Context, resource r4.MedicinalProductPackaged) (update.Result[r4.MedicinalProductPackaged], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductPackaged]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductPackaged)
	if !ok {
		return update.Result[r4.MedicinalProductPackaged]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductPackaged]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductPackaged deletes a MedicinalProductPackaged resource by ID.
func (c *ClientR4) DeleteMedicinalProductPackaged(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductPackaged", id)
}

// SearchMedicinalProductPackaged performs a search for MedicinalProductPackaged resources.
func (c *ClientR4) SearchMedicinalProductPackaged(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductPackaged], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductPackaged", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductPackaged]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductPackaged, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductPackaged)
		if !ok {
			return search.Result[r4.MedicinalProductPackaged]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductPackaged]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductPharmaceutical creates a new MedicinalProductPharmaceutical resource.
func (c *ClientR4) CreateMedicinalProductPharmaceutical(ctx context.Context, resource r4.MedicinalProductPharmaceutical) (r4.MedicinalProductPharmaceutical, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductPharmaceutical{}, err
	}
	typed, ok := result.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductPharmaceutical retrieves a MedicinalProductPharmaceutical resource by ID.
func (c *ClientR4) ReadMedicinalProductPharmaceutical(ctx context.Context, id string) (r4.MedicinalProductPharmaceutical, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductPharmaceutical", id)
	if err != nil {
		return r4.MedicinalProductPharmaceutical{}, err
	}
	typed, ok := result.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return r4.MedicinalProductPharmaceutical{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductPharmaceutical updates an existing MedicinalProductPharmaceutical resource.
func (c *ClientR4) UpdateMedicinalProductPharmaceutical(ctx context.Context, resource r4.MedicinalProductPharmaceutical) (update.Result[r4.MedicinalProductPharmaceutical], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductPharmaceutical]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductPharmaceutical)
	if !ok {
		return update.Result[r4.MedicinalProductPharmaceutical]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductPharmaceutical]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductPharmaceutical deletes a MedicinalProductPharmaceutical resource by ID.
func (c *ClientR4) DeleteMedicinalProductPharmaceutical(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductPharmaceutical", id)
}

// SearchMedicinalProductPharmaceutical performs a search for MedicinalProductPharmaceutical resources.
func (c *ClientR4) SearchMedicinalProductPharmaceutical(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductPharmaceutical], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductPharmaceutical", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductPharmaceutical]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductPharmaceutical, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductPharmaceutical)
		if !ok {
			return search.Result[r4.MedicinalProductPharmaceutical]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductPharmaceutical]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductUndesirableEffect creates a new MedicinalProductUndesirableEffect resource.
func (c *ClientR4) CreateMedicinalProductUndesirableEffect(ctx context.Context, resource r4.MedicinalProductUndesirableEffect) (r4.MedicinalProductUndesirableEffect, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MedicinalProductUndesirableEffect{}, err
	}
	typed, ok := result.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductUndesirableEffect retrieves a MedicinalProductUndesirableEffect resource by ID.
func (c *ClientR4) ReadMedicinalProductUndesirableEffect(ctx context.Context, id string) (r4.MedicinalProductUndesirableEffect, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MedicinalProductUndesirableEffect", id)
	if err != nil {
		return r4.MedicinalProductUndesirableEffect{}, err
	}
	typed, ok := result.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return r4.MedicinalProductUndesirableEffect{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductUndesirableEffect updates an existing MedicinalProductUndesirableEffect resource.
func (c *ClientR4) UpdateMedicinalProductUndesirableEffect(ctx context.Context, resource r4.MedicinalProductUndesirableEffect) (update.Result[r4.MedicinalProductUndesirableEffect], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MedicinalProductUndesirableEffect]{}, err
	}
	typed, ok := result.Resource.(r4.MedicinalProductUndesirableEffect)
	if !ok {
		return update.Result[r4.MedicinalProductUndesirableEffect]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MedicinalProductUndesirableEffect]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductUndesirableEffect deletes a MedicinalProductUndesirableEffect resource by ID.
func (c *ClientR4) DeleteMedicinalProductUndesirableEffect(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MedicinalProductUndesirableEffect", id)
}

// SearchMedicinalProductUndesirableEffect performs a search for MedicinalProductUndesirableEffect resources.
func (c *ClientR4) SearchMedicinalProductUndesirableEffect(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MedicinalProductUndesirableEffect], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MedicinalProductUndesirableEffect", parameters, options)
	if err != nil {
		return search.Result[r4.MedicinalProductUndesirableEffect]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MedicinalProductUndesirableEffect, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MedicinalProductUndesirableEffect)
		if !ok {
			return search.Result[r4.MedicinalProductUndesirableEffect]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MedicinalProductUndesirableEffect]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMessageDefinition creates a new MessageDefinition resource.
func (c *ClientR4) CreateMessageDefinition(ctx context.Context, resource r4.MessageDefinition) (r4.MessageDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MessageDefinition{}, err
	}
	typed, ok := result.(r4.MessageDefinition)
	if !ok {
		return r4.MessageDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMessageDefinition retrieves a MessageDefinition resource by ID.
func (c *ClientR4) ReadMessageDefinition(ctx context.Context, id string) (r4.MessageDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r4.MessageDefinition{}, err
	}
	typed, ok := result.(r4.MessageDefinition)
	if !ok {
		return r4.MessageDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMessageDefinition updates an existing MessageDefinition resource.
func (c *ClientR4) UpdateMessageDefinition(ctx context.Context, resource r4.MessageDefinition) (update.Result[r4.MessageDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MessageDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.MessageDefinition)
	if !ok {
		return update.Result[r4.MessageDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MessageDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteMessageDefinition deletes a MessageDefinition resource by ID.
func (c *ClientR4) DeleteMessageDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MessageDefinition", id)
}

// SearchMessageDefinition performs a search for MessageDefinition resources.
func (c *ClientR4) SearchMessageDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MessageDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MessageDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.MessageDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MessageDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MessageDefinition)
		if !ok {
			return search.Result[r4.MessageDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MessageDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMessageHeader creates a new MessageHeader resource.
func (c *ClientR4) CreateMessageHeader(ctx context.Context, resource r4.MessageHeader) (r4.MessageHeader, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MessageHeader{}, err
	}
	typed, ok := result.(r4.MessageHeader)
	if !ok {
		return r4.MessageHeader{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMessageHeader retrieves a MessageHeader resource by ID.
func (c *ClientR4) ReadMessageHeader(ctx context.Context, id string) (r4.MessageHeader, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r4.MessageHeader{}, err
	}
	typed, ok := result.(r4.MessageHeader)
	if !ok {
		return r4.MessageHeader{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMessageHeader updates an existing MessageHeader resource.
func (c *ClientR4) UpdateMessageHeader(ctx context.Context, resource r4.MessageHeader) (update.Result[r4.MessageHeader], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MessageHeader]{}, err
	}
	typed, ok := result.Resource.(r4.MessageHeader)
	if !ok {
		return update.Result[r4.MessageHeader]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MessageHeader]{Resource: typed, Created: result.Created}, nil
}

// DeleteMessageHeader deletes a MessageHeader resource by ID.
func (c *ClientR4) DeleteMessageHeader(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MessageHeader", id)
}

// SearchMessageHeader performs a search for MessageHeader resources.
func (c *ClientR4) SearchMessageHeader(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MessageHeader], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MessageHeader", parameters, options)
	if err != nil {
		return search.Result[r4.MessageHeader]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MessageHeader, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MessageHeader)
		if !ok {
			return search.Result[r4.MessageHeader]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MessageHeader]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMolecularSequence creates a new MolecularSequence resource.
func (c *ClientR4) CreateMolecularSequence(ctx context.Context, resource r4.MolecularSequence) (r4.MolecularSequence, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.MolecularSequence{}, err
	}
	typed, ok := result.(r4.MolecularSequence)
	if !ok {
		return r4.MolecularSequence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMolecularSequence retrieves a MolecularSequence resource by ID.
func (c *ClientR4) ReadMolecularSequence(ctx context.Context, id string) (r4.MolecularSequence, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r4.MolecularSequence{}, err
	}
	typed, ok := result.(r4.MolecularSequence)
	if !ok {
		return r4.MolecularSequence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMolecularSequence updates an existing MolecularSequence resource.
func (c *ClientR4) UpdateMolecularSequence(ctx context.Context, resource r4.MolecularSequence) (update.Result[r4.MolecularSequence], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.MolecularSequence]{}, err
	}
	typed, ok := result.Resource.(r4.MolecularSequence)
	if !ok {
		return update.Result[r4.MolecularSequence]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.MolecularSequence]{Resource: typed, Created: result.Created}, nil
}

// DeleteMolecularSequence deletes a MolecularSequence resource by ID.
func (c *ClientR4) DeleteMolecularSequence(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "MolecularSequence", id)
}

// SearchMolecularSequence performs a search for MolecularSequence resources.
func (c *ClientR4) SearchMolecularSequence(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.MolecularSequence], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "MolecularSequence", parameters, options)
	if err != nil {
		return search.Result[r4.MolecularSequence]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.MolecularSequence, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.MolecularSequence)
		if !ok {
			return search.Result[r4.MolecularSequence]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.MolecularSequence]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNamingSystem creates a new NamingSystem resource.
func (c *ClientR4) CreateNamingSystem(ctx context.Context, resource r4.NamingSystem) (r4.NamingSystem, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.NamingSystem{}, err
	}
	typed, ok := result.(r4.NamingSystem)
	if !ok {
		return r4.NamingSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNamingSystem retrieves a NamingSystem resource by ID.
func (c *ClientR4) ReadNamingSystem(ctx context.Context, id string) (r4.NamingSystem, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r4.NamingSystem{}, err
	}
	typed, ok := result.(r4.NamingSystem)
	if !ok {
		return r4.NamingSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNamingSystem updates an existing NamingSystem resource.
func (c *ClientR4) UpdateNamingSystem(ctx context.Context, resource r4.NamingSystem) (update.Result[r4.NamingSystem], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.NamingSystem]{}, err
	}
	typed, ok := result.Resource.(r4.NamingSystem)
	if !ok {
		return update.Result[r4.NamingSystem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.NamingSystem]{Resource: typed, Created: result.Created}, nil
}

// DeleteNamingSystem deletes a NamingSystem resource by ID.
func (c *ClientR4) DeleteNamingSystem(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "NamingSystem", id)
}

// SearchNamingSystem performs a search for NamingSystem resources.
func (c *ClientR4) SearchNamingSystem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.NamingSystem], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "NamingSystem", parameters, options)
	if err != nil {
		return search.Result[r4.NamingSystem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.NamingSystem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.NamingSystem)
		if !ok {
			return search.Result[r4.NamingSystem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.NamingSystem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNutritionOrder creates a new NutritionOrder resource.
func (c *ClientR4) CreateNutritionOrder(ctx context.Context, resource r4.NutritionOrder) (r4.NutritionOrder, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.NutritionOrder{}, err
	}
	typed, ok := result.(r4.NutritionOrder)
	if !ok {
		return r4.NutritionOrder{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNutritionOrder retrieves a NutritionOrder resource by ID.
func (c *ClientR4) ReadNutritionOrder(ctx context.Context, id string) (r4.NutritionOrder, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r4.NutritionOrder{}, err
	}
	typed, ok := result.(r4.NutritionOrder)
	if !ok {
		return r4.NutritionOrder{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNutritionOrder updates an existing NutritionOrder resource.
func (c *ClientR4) UpdateNutritionOrder(ctx context.Context, resource r4.NutritionOrder) (update.Result[r4.NutritionOrder], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.NutritionOrder]{}, err
	}
	typed, ok := result.Resource.(r4.NutritionOrder)
	if !ok {
		return update.Result[r4.NutritionOrder]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.NutritionOrder]{Resource: typed, Created: result.Created}, nil
}

// DeleteNutritionOrder deletes a NutritionOrder resource by ID.
func (c *ClientR4) DeleteNutritionOrder(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "NutritionOrder", id)
}

// SearchNutritionOrder performs a search for NutritionOrder resources.
func (c *ClientR4) SearchNutritionOrder(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.NutritionOrder], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "NutritionOrder", parameters, options)
	if err != nil {
		return search.Result[r4.NutritionOrder]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.NutritionOrder, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.NutritionOrder)
		if !ok {
			return search.Result[r4.NutritionOrder]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.NutritionOrder]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateObservation creates a new Observation resource.
func (c *ClientR4) CreateObservation(ctx context.Context, resource r4.Observation) (r4.Observation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Observation{}, err
	}
	typed, ok := result.(r4.Observation)
	if !ok {
		return r4.Observation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadObservation retrieves a Observation resource by ID.
func (c *ClientR4) ReadObservation(ctx context.Context, id string) (r4.Observation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Observation", id)
	if err != nil {
		return r4.Observation{}, err
	}
	typed, ok := result.(r4.Observation)
	if !ok {
		return r4.Observation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateObservation updates an existing Observation resource.
func (c *ClientR4) UpdateObservation(ctx context.Context, resource r4.Observation) (update.Result[r4.Observation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Observation]{}, err
	}
	typed, ok := result.Resource.(r4.Observation)
	if !ok {
		return update.Result[r4.Observation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Observation]{Resource: typed, Created: result.Created}, nil
}

// DeleteObservation deletes a Observation resource by ID.
func (c *ClientR4) DeleteObservation(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Observation", id)
}

// SearchObservation performs a search for Observation resources.
func (c *ClientR4) SearchObservation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Observation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Observation", parameters, options)
	if err != nil {
		return search.Result[r4.Observation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Observation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Observation)
		if !ok {
			return search.Result[r4.Observation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Observation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateObservationDefinition creates a new ObservationDefinition resource.
func (c *ClientR4) CreateObservationDefinition(ctx context.Context, resource r4.ObservationDefinition) (r4.ObservationDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ObservationDefinition{}, err
	}
	typed, ok := result.(r4.ObservationDefinition)
	if !ok {
		return r4.ObservationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadObservationDefinition retrieves a ObservationDefinition resource by ID.
func (c *ClientR4) ReadObservationDefinition(ctx context.Context, id string) (r4.ObservationDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r4.ObservationDefinition{}, err
	}
	typed, ok := result.(r4.ObservationDefinition)
	if !ok {
		return r4.ObservationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateObservationDefinition updates an existing ObservationDefinition resource.
func (c *ClientR4) UpdateObservationDefinition(ctx context.Context, resource r4.ObservationDefinition) (update.Result[r4.ObservationDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ObservationDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.ObservationDefinition)
	if !ok {
		return update.Result[r4.ObservationDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ObservationDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteObservationDefinition deletes a ObservationDefinition resource by ID.
func (c *ClientR4) DeleteObservationDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ObservationDefinition", id)
}

// SearchObservationDefinition performs a search for ObservationDefinition resources.
func (c *ClientR4) SearchObservationDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ObservationDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ObservationDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.ObservationDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ObservationDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ObservationDefinition)
		if !ok {
			return search.Result[r4.ObservationDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ObservationDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOperationDefinition creates a new OperationDefinition resource.
func (c *ClientR4) CreateOperationDefinition(ctx context.Context, resource r4.OperationDefinition) (r4.OperationDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.OperationDefinition{}, err
	}
	typed, ok := result.(r4.OperationDefinition)
	if !ok {
		return r4.OperationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOperationDefinition retrieves a OperationDefinition resource by ID.
func (c *ClientR4) ReadOperationDefinition(ctx context.Context, id string) (r4.OperationDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r4.OperationDefinition{}, err
	}
	typed, ok := result.(r4.OperationDefinition)
	if !ok {
		return r4.OperationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOperationDefinition updates an existing OperationDefinition resource.
func (c *ClientR4) UpdateOperationDefinition(ctx context.Context, resource r4.OperationDefinition) (update.Result[r4.OperationDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.OperationDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.OperationDefinition)
	if !ok {
		return update.Result[r4.OperationDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.OperationDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteOperationDefinition deletes a OperationDefinition resource by ID.
func (c *ClientR4) DeleteOperationDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "OperationDefinition", id)
}

// SearchOperationDefinition performs a search for OperationDefinition resources.
func (c *ClientR4) SearchOperationDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.OperationDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "OperationDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.OperationDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.OperationDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.OperationDefinition)
		if !ok {
			return search.Result[r4.OperationDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.OperationDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOperationOutcome creates a new OperationOutcome resource.
func (c *ClientR4) CreateOperationOutcome(ctx context.Context, resource r4.OperationOutcome) (r4.OperationOutcome, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.OperationOutcome{}, err
	}
	typed, ok := result.(r4.OperationOutcome)
	if !ok {
		return r4.OperationOutcome{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOperationOutcome retrieves a OperationOutcome resource by ID.
func (c *ClientR4) ReadOperationOutcome(ctx context.Context, id string) (r4.OperationOutcome, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r4.OperationOutcome{}, err
	}
	typed, ok := result.(r4.OperationOutcome)
	if !ok {
		return r4.OperationOutcome{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOperationOutcome updates an existing OperationOutcome resource.
func (c *ClientR4) UpdateOperationOutcome(ctx context.Context, resource r4.OperationOutcome) (update.Result[r4.OperationOutcome], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.OperationOutcome]{}, err
	}
	typed, ok := result.Resource.(r4.OperationOutcome)
	if !ok {
		return update.Result[r4.OperationOutcome]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.OperationOutcome]{Resource: typed, Created: result.Created}, nil
}

// DeleteOperationOutcome deletes a OperationOutcome resource by ID.
func (c *ClientR4) DeleteOperationOutcome(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "OperationOutcome", id)
}

// SearchOperationOutcome performs a search for OperationOutcome resources.
func (c *ClientR4) SearchOperationOutcome(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.OperationOutcome], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "OperationOutcome", parameters, options)
	if err != nil {
		return search.Result[r4.OperationOutcome]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.OperationOutcome, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.OperationOutcome)
		if !ok {
			return search.Result[r4.OperationOutcome]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.OperationOutcome]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOrganization creates a new Organization resource.
func (c *ClientR4) CreateOrganization(ctx context.Context, resource r4.Organization) (r4.Organization, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Organization{}, err
	}
	typed, ok := result.(r4.Organization)
	if !ok {
		return r4.Organization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOrganization retrieves a Organization resource by ID.
func (c *ClientR4) ReadOrganization(ctx context.Context, id string) (r4.Organization, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Organization", id)
	if err != nil {
		return r4.Organization{}, err
	}
	typed, ok := result.(r4.Organization)
	if !ok {
		return r4.Organization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOrganization updates an existing Organization resource.
func (c *ClientR4) UpdateOrganization(ctx context.Context, resource r4.Organization) (update.Result[r4.Organization], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Organization]{}, err
	}
	typed, ok := result.Resource.(r4.Organization)
	if !ok {
		return update.Result[r4.Organization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Organization]{Resource: typed, Created: result.Created}, nil
}

// DeleteOrganization deletes a Organization resource by ID.
func (c *ClientR4) DeleteOrganization(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Organization", id)
}

// SearchOrganization performs a search for Organization resources.
func (c *ClientR4) SearchOrganization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Organization], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Organization", parameters, options)
	if err != nil {
		return search.Result[r4.Organization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Organization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Organization)
		if !ok {
			return search.Result[r4.Organization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Organization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOrganizationAffiliation creates a new OrganizationAffiliation resource.
func (c *ClientR4) CreateOrganizationAffiliation(ctx context.Context, resource r4.OrganizationAffiliation) (r4.OrganizationAffiliation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.OrganizationAffiliation{}, err
	}
	typed, ok := result.(r4.OrganizationAffiliation)
	if !ok {
		return r4.OrganizationAffiliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOrganizationAffiliation retrieves a OrganizationAffiliation resource by ID.
func (c *ClientR4) ReadOrganizationAffiliation(ctx context.Context, id string) (r4.OrganizationAffiliation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r4.OrganizationAffiliation{}, err
	}
	typed, ok := result.(r4.OrganizationAffiliation)
	if !ok {
		return r4.OrganizationAffiliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOrganizationAffiliation updates an existing OrganizationAffiliation resource.
func (c *ClientR4) UpdateOrganizationAffiliation(ctx context.Context, resource r4.OrganizationAffiliation) (update.Result[r4.OrganizationAffiliation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.OrganizationAffiliation]{}, err
	}
	typed, ok := result.Resource.(r4.OrganizationAffiliation)
	if !ok {
		return update.Result[r4.OrganizationAffiliation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.OrganizationAffiliation]{Resource: typed, Created: result.Created}, nil
}

// DeleteOrganizationAffiliation deletes a OrganizationAffiliation resource by ID.
func (c *ClientR4) DeleteOrganizationAffiliation(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "OrganizationAffiliation", id)
}

// SearchOrganizationAffiliation performs a search for OrganizationAffiliation resources.
func (c *ClientR4) SearchOrganizationAffiliation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.OrganizationAffiliation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "OrganizationAffiliation", parameters, options)
	if err != nil {
		return search.Result[r4.OrganizationAffiliation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.OrganizationAffiliation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.OrganizationAffiliation)
		if !ok {
			return search.Result[r4.OrganizationAffiliation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.OrganizationAffiliation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateParameters creates a new Parameters resource.
func (c *ClientR4) CreateParameters(ctx context.Context, resource r4.Parameters) (r4.Parameters, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Parameters{}, err
	}
	typed, ok := result.(r4.Parameters)
	if !ok {
		return r4.Parameters{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadParameters retrieves a Parameters resource by ID.
func (c *ClientR4) ReadParameters(ctx context.Context, id string) (r4.Parameters, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Parameters", id)
	if err != nil {
		return r4.Parameters{}, err
	}
	typed, ok := result.(r4.Parameters)
	if !ok {
		return r4.Parameters{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateParameters updates an existing Parameters resource.
func (c *ClientR4) UpdateParameters(ctx context.Context, resource r4.Parameters) (update.Result[r4.Parameters], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Parameters]{}, err
	}
	typed, ok := result.Resource.(r4.Parameters)
	if !ok {
		return update.Result[r4.Parameters]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Parameters]{Resource: typed, Created: result.Created}, nil
}

// DeleteParameters deletes a Parameters resource by ID.
func (c *ClientR4) DeleteParameters(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Parameters", id)
}

// SearchParameters performs a search for Parameters resources.
func (c *ClientR4) SearchParameters(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Parameters], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Parameters", parameters, options)
	if err != nil {
		return search.Result[r4.Parameters]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Parameters, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Parameters)
		if !ok {
			return search.Result[r4.Parameters]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Parameters]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePatient creates a new Patient resource.
func (c *ClientR4) CreatePatient(ctx context.Context, resource r4.Patient) (r4.Patient, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Patient{}, err
	}
	typed, ok := result.(r4.Patient)
	if !ok {
		return r4.Patient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPatient retrieves a Patient resource by ID.
func (c *ClientR4) ReadPatient(ctx context.Context, id string) (r4.Patient, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Patient", id)
	if err != nil {
		return r4.Patient{}, err
	}
	typed, ok := result.(r4.Patient)
	if !ok {
		return r4.Patient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePatient updates an existing Patient resource.
func (c *ClientR4) UpdatePatient(ctx context.Context, resource r4.Patient) (update.Result[r4.Patient], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Patient]{}, err
	}
	typed, ok := result.Resource.(r4.Patient)
	if !ok {
		return update.Result[r4.Patient]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Patient]{Resource: typed, Created: result.Created}, nil
}

// DeletePatient deletes a Patient resource by ID.
func (c *ClientR4) DeletePatient(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Patient", id)
}

// SearchPatient performs a search for Patient resources.
func (c *ClientR4) SearchPatient(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Patient], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Patient", parameters, options)
	if err != nil {
		return search.Result[r4.Patient]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Patient, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Patient)
		if !ok {
			return search.Result[r4.Patient]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Patient]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePaymentNotice creates a new PaymentNotice resource.
func (c *ClientR4) CreatePaymentNotice(ctx context.Context, resource r4.PaymentNotice) (r4.PaymentNotice, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.PaymentNotice{}, err
	}
	typed, ok := result.(r4.PaymentNotice)
	if !ok {
		return r4.PaymentNotice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPaymentNotice retrieves a PaymentNotice resource by ID.
func (c *ClientR4) ReadPaymentNotice(ctx context.Context, id string) (r4.PaymentNotice, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r4.PaymentNotice{}, err
	}
	typed, ok := result.(r4.PaymentNotice)
	if !ok {
		return r4.PaymentNotice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePaymentNotice updates an existing PaymentNotice resource.
func (c *ClientR4) UpdatePaymentNotice(ctx context.Context, resource r4.PaymentNotice) (update.Result[r4.PaymentNotice], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.PaymentNotice]{}, err
	}
	typed, ok := result.Resource.(r4.PaymentNotice)
	if !ok {
		return update.Result[r4.PaymentNotice]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.PaymentNotice]{Resource: typed, Created: result.Created}, nil
}

// DeletePaymentNotice deletes a PaymentNotice resource by ID.
func (c *ClientR4) DeletePaymentNotice(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PaymentNotice", id)
}

// SearchPaymentNotice performs a search for PaymentNotice resources.
func (c *ClientR4) SearchPaymentNotice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.PaymentNotice], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PaymentNotice", parameters, options)
	if err != nil {
		return search.Result[r4.PaymentNotice]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.PaymentNotice, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.PaymentNotice)
		if !ok {
			return search.Result[r4.PaymentNotice]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.PaymentNotice]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePaymentReconciliation creates a new PaymentReconciliation resource.
func (c *ClientR4) CreatePaymentReconciliation(ctx context.Context, resource r4.PaymentReconciliation) (r4.PaymentReconciliation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.PaymentReconciliation{}, err
	}
	typed, ok := result.(r4.PaymentReconciliation)
	if !ok {
		return r4.PaymentReconciliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPaymentReconciliation retrieves a PaymentReconciliation resource by ID.
func (c *ClientR4) ReadPaymentReconciliation(ctx context.Context, id string) (r4.PaymentReconciliation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r4.PaymentReconciliation{}, err
	}
	typed, ok := result.(r4.PaymentReconciliation)
	if !ok {
		return r4.PaymentReconciliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePaymentReconciliation updates an existing PaymentReconciliation resource.
func (c *ClientR4) UpdatePaymentReconciliation(ctx context.Context, resource r4.PaymentReconciliation) (update.Result[r4.PaymentReconciliation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.PaymentReconciliation]{}, err
	}
	typed, ok := result.Resource.(r4.PaymentReconciliation)
	if !ok {
		return update.Result[r4.PaymentReconciliation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.PaymentReconciliation]{Resource: typed, Created: result.Created}, nil
}

// DeletePaymentReconciliation deletes a PaymentReconciliation resource by ID.
func (c *ClientR4) DeletePaymentReconciliation(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PaymentReconciliation", id)
}

// SearchPaymentReconciliation performs a search for PaymentReconciliation resources.
func (c *ClientR4) SearchPaymentReconciliation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.PaymentReconciliation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PaymentReconciliation", parameters, options)
	if err != nil {
		return search.Result[r4.PaymentReconciliation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.PaymentReconciliation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.PaymentReconciliation)
		if !ok {
			return search.Result[r4.PaymentReconciliation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.PaymentReconciliation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePerson creates a new Person resource.
func (c *ClientR4) CreatePerson(ctx context.Context, resource r4.Person) (r4.Person, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Person{}, err
	}
	typed, ok := result.(r4.Person)
	if !ok {
		return r4.Person{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPerson retrieves a Person resource by ID.
func (c *ClientR4) ReadPerson(ctx context.Context, id string) (r4.Person, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Person", id)
	if err != nil {
		return r4.Person{}, err
	}
	typed, ok := result.(r4.Person)
	if !ok {
		return r4.Person{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePerson updates an existing Person resource.
func (c *ClientR4) UpdatePerson(ctx context.Context, resource r4.Person) (update.Result[r4.Person], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Person]{}, err
	}
	typed, ok := result.Resource.(r4.Person)
	if !ok {
		return update.Result[r4.Person]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Person]{Resource: typed, Created: result.Created}, nil
}

// DeletePerson deletes a Person resource by ID.
func (c *ClientR4) DeletePerson(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Person", id)
}

// SearchPerson performs a search for Person resources.
func (c *ClientR4) SearchPerson(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Person], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Person", parameters, options)
	if err != nil {
		return search.Result[r4.Person]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Person, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Person)
		if !ok {
			return search.Result[r4.Person]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Person]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePlanDefinition creates a new PlanDefinition resource.
func (c *ClientR4) CreatePlanDefinition(ctx context.Context, resource r4.PlanDefinition) (r4.PlanDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.PlanDefinition{}, err
	}
	typed, ok := result.(r4.PlanDefinition)
	if !ok {
		return r4.PlanDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPlanDefinition retrieves a PlanDefinition resource by ID.
func (c *ClientR4) ReadPlanDefinition(ctx context.Context, id string) (r4.PlanDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r4.PlanDefinition{}, err
	}
	typed, ok := result.(r4.PlanDefinition)
	if !ok {
		return r4.PlanDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePlanDefinition updates an existing PlanDefinition resource.
func (c *ClientR4) UpdatePlanDefinition(ctx context.Context, resource r4.PlanDefinition) (update.Result[r4.PlanDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.PlanDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.PlanDefinition)
	if !ok {
		return update.Result[r4.PlanDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.PlanDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeletePlanDefinition deletes a PlanDefinition resource by ID.
func (c *ClientR4) DeletePlanDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PlanDefinition", id)
}

// SearchPlanDefinition performs a search for PlanDefinition resources.
func (c *ClientR4) SearchPlanDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.PlanDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PlanDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.PlanDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.PlanDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.PlanDefinition)
		if !ok {
			return search.Result[r4.PlanDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.PlanDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePractitioner creates a new Practitioner resource.
func (c *ClientR4) CreatePractitioner(ctx context.Context, resource r4.Practitioner) (r4.Practitioner, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Practitioner{}, err
	}
	typed, ok := result.(r4.Practitioner)
	if !ok {
		return r4.Practitioner{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPractitioner retrieves a Practitioner resource by ID.
func (c *ClientR4) ReadPractitioner(ctx context.Context, id string) (r4.Practitioner, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Practitioner", id)
	if err != nil {
		return r4.Practitioner{}, err
	}
	typed, ok := result.(r4.Practitioner)
	if !ok {
		return r4.Practitioner{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePractitioner updates an existing Practitioner resource.
func (c *ClientR4) UpdatePractitioner(ctx context.Context, resource r4.Practitioner) (update.Result[r4.Practitioner], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Practitioner]{}, err
	}
	typed, ok := result.Resource.(r4.Practitioner)
	if !ok {
		return update.Result[r4.Practitioner]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Practitioner]{Resource: typed, Created: result.Created}, nil
}

// DeletePractitioner deletes a Practitioner resource by ID.
func (c *ClientR4) DeletePractitioner(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Practitioner", id)
}

// SearchPractitioner performs a search for Practitioner resources.
func (c *ClientR4) SearchPractitioner(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Practitioner], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Practitioner", parameters, options)
	if err != nil {
		return search.Result[r4.Practitioner]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Practitioner, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Practitioner)
		if !ok {
			return search.Result[r4.Practitioner]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Practitioner]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePractitionerRole creates a new PractitionerRole resource.
func (c *ClientR4) CreatePractitionerRole(ctx context.Context, resource r4.PractitionerRole) (r4.PractitionerRole, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.PractitionerRole{}, err
	}
	typed, ok := result.(r4.PractitionerRole)
	if !ok {
		return r4.PractitionerRole{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPractitionerRole retrieves a PractitionerRole resource by ID.
func (c *ClientR4) ReadPractitionerRole(ctx context.Context, id string) (r4.PractitionerRole, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r4.PractitionerRole{}, err
	}
	typed, ok := result.(r4.PractitionerRole)
	if !ok {
		return r4.PractitionerRole{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePractitionerRole updates an existing PractitionerRole resource.
func (c *ClientR4) UpdatePractitionerRole(ctx context.Context, resource r4.PractitionerRole) (update.Result[r4.PractitionerRole], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.PractitionerRole]{}, err
	}
	typed, ok := result.Resource.(r4.PractitionerRole)
	if !ok {
		return update.Result[r4.PractitionerRole]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.PractitionerRole]{Resource: typed, Created: result.Created}, nil
}

// DeletePractitionerRole deletes a PractitionerRole resource by ID.
func (c *ClientR4) DeletePractitionerRole(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "PractitionerRole", id)
}

// SearchPractitionerRole performs a search for PractitionerRole resources.
func (c *ClientR4) SearchPractitionerRole(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.PractitionerRole], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "PractitionerRole", parameters, options)
	if err != nil {
		return search.Result[r4.PractitionerRole]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.PractitionerRole, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.PractitionerRole)
		if !ok {
			return search.Result[r4.PractitionerRole]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.PractitionerRole]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateProcedure creates a new Procedure resource.
func (c *ClientR4) CreateProcedure(ctx context.Context, resource r4.Procedure) (r4.Procedure, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Procedure{}, err
	}
	typed, ok := result.(r4.Procedure)
	if !ok {
		return r4.Procedure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadProcedure retrieves a Procedure resource by ID.
func (c *ClientR4) ReadProcedure(ctx context.Context, id string) (r4.Procedure, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Procedure", id)
	if err != nil {
		return r4.Procedure{}, err
	}
	typed, ok := result.(r4.Procedure)
	if !ok {
		return r4.Procedure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateProcedure updates an existing Procedure resource.
func (c *ClientR4) UpdateProcedure(ctx context.Context, resource r4.Procedure) (update.Result[r4.Procedure], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Procedure]{}, err
	}
	typed, ok := result.Resource.(r4.Procedure)
	if !ok {
		return update.Result[r4.Procedure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Procedure]{Resource: typed, Created: result.Created}, nil
}

// DeleteProcedure deletes a Procedure resource by ID.
func (c *ClientR4) DeleteProcedure(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Procedure", id)
}

// SearchProcedure performs a search for Procedure resources.
func (c *ClientR4) SearchProcedure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Procedure], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Procedure", parameters, options)
	if err != nil {
		return search.Result[r4.Procedure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Procedure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Procedure)
		if !ok {
			return search.Result[r4.Procedure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Procedure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateProvenance creates a new Provenance resource.
func (c *ClientR4) CreateProvenance(ctx context.Context, resource r4.Provenance) (r4.Provenance, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Provenance{}, err
	}
	typed, ok := result.(r4.Provenance)
	if !ok {
		return r4.Provenance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadProvenance retrieves a Provenance resource by ID.
func (c *ClientR4) ReadProvenance(ctx context.Context, id string) (r4.Provenance, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Provenance", id)
	if err != nil {
		return r4.Provenance{}, err
	}
	typed, ok := result.(r4.Provenance)
	if !ok {
		return r4.Provenance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateProvenance updates an existing Provenance resource.
func (c *ClientR4) UpdateProvenance(ctx context.Context, resource r4.Provenance) (update.Result[r4.Provenance], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Provenance]{}, err
	}
	typed, ok := result.Resource.(r4.Provenance)
	if !ok {
		return update.Result[r4.Provenance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Provenance]{Resource: typed, Created: result.Created}, nil
}

// DeleteProvenance deletes a Provenance resource by ID.
func (c *ClientR4) DeleteProvenance(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Provenance", id)
}

// SearchProvenance performs a search for Provenance resources.
func (c *ClientR4) SearchProvenance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Provenance], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Provenance", parameters, options)
	if err != nil {
		return search.Result[r4.Provenance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Provenance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Provenance)
		if !ok {
			return search.Result[r4.Provenance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Provenance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateQuestionnaire creates a new Questionnaire resource.
func (c *ClientR4) CreateQuestionnaire(ctx context.Context, resource r4.Questionnaire) (r4.Questionnaire, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Questionnaire{}, err
	}
	typed, ok := result.(r4.Questionnaire)
	if !ok {
		return r4.Questionnaire{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadQuestionnaire retrieves a Questionnaire resource by ID.
func (c *ClientR4) ReadQuestionnaire(ctx context.Context, id string) (r4.Questionnaire, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r4.Questionnaire{}, err
	}
	typed, ok := result.(r4.Questionnaire)
	if !ok {
		return r4.Questionnaire{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateQuestionnaire updates an existing Questionnaire resource.
func (c *ClientR4) UpdateQuestionnaire(ctx context.Context, resource r4.Questionnaire) (update.Result[r4.Questionnaire], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Questionnaire]{}, err
	}
	typed, ok := result.Resource.(r4.Questionnaire)
	if !ok {
		return update.Result[r4.Questionnaire]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Questionnaire]{Resource: typed, Created: result.Created}, nil
}

// DeleteQuestionnaire deletes a Questionnaire resource by ID.
func (c *ClientR4) DeleteQuestionnaire(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Questionnaire", id)
}

// SearchQuestionnaire performs a search for Questionnaire resources.
func (c *ClientR4) SearchQuestionnaire(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Questionnaire], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Questionnaire", parameters, options)
	if err != nil {
		return search.Result[r4.Questionnaire]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Questionnaire, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Questionnaire)
		if !ok {
			return search.Result[r4.Questionnaire]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Questionnaire]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateQuestionnaireResponse creates a new QuestionnaireResponse resource.
func (c *ClientR4) CreateQuestionnaireResponse(ctx context.Context, resource r4.QuestionnaireResponse) (r4.QuestionnaireResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.QuestionnaireResponse{}, err
	}
	typed, ok := result.(r4.QuestionnaireResponse)
	if !ok {
		return r4.QuestionnaireResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadQuestionnaireResponse retrieves a QuestionnaireResponse resource by ID.
func (c *ClientR4) ReadQuestionnaireResponse(ctx context.Context, id string) (r4.QuestionnaireResponse, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r4.QuestionnaireResponse{}, err
	}
	typed, ok := result.(r4.QuestionnaireResponse)
	if !ok {
		return r4.QuestionnaireResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateQuestionnaireResponse updates an existing QuestionnaireResponse resource.
func (c *ClientR4) UpdateQuestionnaireResponse(ctx context.Context, resource r4.QuestionnaireResponse) (update.Result[r4.QuestionnaireResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.QuestionnaireResponse]{}, err
	}
	typed, ok := result.Resource.(r4.QuestionnaireResponse)
	if !ok {
		return update.Result[r4.QuestionnaireResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.QuestionnaireResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteQuestionnaireResponse deletes a QuestionnaireResponse resource by ID.
func (c *ClientR4) DeleteQuestionnaireResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "QuestionnaireResponse", id)
}

// SearchQuestionnaireResponse performs a search for QuestionnaireResponse resources.
func (c *ClientR4) SearchQuestionnaireResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.QuestionnaireResponse], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "QuestionnaireResponse", parameters, options)
	if err != nil {
		return search.Result[r4.QuestionnaireResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.QuestionnaireResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.QuestionnaireResponse)
		if !ok {
			return search.Result[r4.QuestionnaireResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.QuestionnaireResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRelatedPerson creates a new RelatedPerson resource.
func (c *ClientR4) CreateRelatedPerson(ctx context.Context, resource r4.RelatedPerson) (r4.RelatedPerson, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.RelatedPerson{}, err
	}
	typed, ok := result.(r4.RelatedPerson)
	if !ok {
		return r4.RelatedPerson{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRelatedPerson retrieves a RelatedPerson resource by ID.
func (c *ClientR4) ReadRelatedPerson(ctx context.Context, id string) (r4.RelatedPerson, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r4.RelatedPerson{}, err
	}
	typed, ok := result.(r4.RelatedPerson)
	if !ok {
		return r4.RelatedPerson{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRelatedPerson updates an existing RelatedPerson resource.
func (c *ClientR4) UpdateRelatedPerson(ctx context.Context, resource r4.RelatedPerson) (update.Result[r4.RelatedPerson], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.RelatedPerson]{}, err
	}
	typed, ok := result.Resource.(r4.RelatedPerson)
	if !ok {
		return update.Result[r4.RelatedPerson]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.RelatedPerson]{Resource: typed, Created: result.Created}, nil
}

// DeleteRelatedPerson deletes a RelatedPerson resource by ID.
func (c *ClientR4) DeleteRelatedPerson(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RelatedPerson", id)
}

// SearchRelatedPerson performs a search for RelatedPerson resources.
func (c *ClientR4) SearchRelatedPerson(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.RelatedPerson], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RelatedPerson", parameters, options)
	if err != nil {
		return search.Result[r4.RelatedPerson]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.RelatedPerson, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.RelatedPerson)
		if !ok {
			return search.Result[r4.RelatedPerson]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.RelatedPerson]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRequestGroup creates a new RequestGroup resource.
func (c *ClientR4) CreateRequestGroup(ctx context.Context, resource r4.RequestGroup) (r4.RequestGroup, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.RequestGroup{}, err
	}
	typed, ok := result.(r4.RequestGroup)
	if !ok {
		return r4.RequestGroup{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRequestGroup retrieves a RequestGroup resource by ID.
func (c *ClientR4) ReadRequestGroup(ctx context.Context, id string) (r4.RequestGroup, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RequestGroup", id)
	if err != nil {
		return r4.RequestGroup{}, err
	}
	typed, ok := result.(r4.RequestGroup)
	if !ok {
		return r4.RequestGroup{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRequestGroup updates an existing RequestGroup resource.
func (c *ClientR4) UpdateRequestGroup(ctx context.Context, resource r4.RequestGroup) (update.Result[r4.RequestGroup], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.RequestGroup]{}, err
	}
	typed, ok := result.Resource.(r4.RequestGroup)
	if !ok {
		return update.Result[r4.RequestGroup]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.RequestGroup]{Resource: typed, Created: result.Created}, nil
}

// DeleteRequestGroup deletes a RequestGroup resource by ID.
func (c *ClientR4) DeleteRequestGroup(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RequestGroup", id)
}

// SearchRequestGroup performs a search for RequestGroup resources.
func (c *ClientR4) SearchRequestGroup(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.RequestGroup], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RequestGroup", parameters, options)
	if err != nil {
		return search.Result[r4.RequestGroup]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.RequestGroup, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.RequestGroup)
		if !ok {
			return search.Result[r4.RequestGroup]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.RequestGroup]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchDefinition creates a new ResearchDefinition resource.
func (c *ClientR4) CreateResearchDefinition(ctx context.Context, resource r4.ResearchDefinition) (r4.ResearchDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ResearchDefinition{}, err
	}
	typed, ok := result.(r4.ResearchDefinition)
	if !ok {
		return r4.ResearchDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchDefinition retrieves a ResearchDefinition resource by ID.
func (c *ClientR4) ReadResearchDefinition(ctx context.Context, id string) (r4.ResearchDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ResearchDefinition", id)
	if err != nil {
		return r4.ResearchDefinition{}, err
	}
	typed, ok := result.(r4.ResearchDefinition)
	if !ok {
		return r4.ResearchDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchDefinition updates an existing ResearchDefinition resource.
func (c *ClientR4) UpdateResearchDefinition(ctx context.Context, resource r4.ResearchDefinition) (update.Result[r4.ResearchDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ResearchDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.ResearchDefinition)
	if !ok {
		return update.Result[r4.ResearchDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ResearchDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchDefinition deletes a ResearchDefinition resource by ID.
func (c *ClientR4) DeleteResearchDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ResearchDefinition", id)
}

// SearchResearchDefinition performs a search for ResearchDefinition resources.
func (c *ClientR4) SearchResearchDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ResearchDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ResearchDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.ResearchDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ResearchDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ResearchDefinition)
		if !ok {
			return search.Result[r4.ResearchDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ResearchDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchElementDefinition creates a new ResearchElementDefinition resource.
func (c *ClientR4) CreateResearchElementDefinition(ctx context.Context, resource r4.ResearchElementDefinition) (r4.ResearchElementDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ResearchElementDefinition{}, err
	}
	typed, ok := result.(r4.ResearchElementDefinition)
	if !ok {
		return r4.ResearchElementDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchElementDefinition retrieves a ResearchElementDefinition resource by ID.
func (c *ClientR4) ReadResearchElementDefinition(ctx context.Context, id string) (r4.ResearchElementDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ResearchElementDefinition", id)
	if err != nil {
		return r4.ResearchElementDefinition{}, err
	}
	typed, ok := result.(r4.ResearchElementDefinition)
	if !ok {
		return r4.ResearchElementDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchElementDefinition updates an existing ResearchElementDefinition resource.
func (c *ClientR4) UpdateResearchElementDefinition(ctx context.Context, resource r4.ResearchElementDefinition) (update.Result[r4.ResearchElementDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ResearchElementDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.ResearchElementDefinition)
	if !ok {
		return update.Result[r4.ResearchElementDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ResearchElementDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchElementDefinition deletes a ResearchElementDefinition resource by ID.
func (c *ClientR4) DeleteResearchElementDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ResearchElementDefinition", id)
}

// SearchResearchElementDefinition performs a search for ResearchElementDefinition resources.
func (c *ClientR4) SearchResearchElementDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ResearchElementDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ResearchElementDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.ResearchElementDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ResearchElementDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ResearchElementDefinition)
		if !ok {
			return search.Result[r4.ResearchElementDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ResearchElementDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchStudy creates a new ResearchStudy resource.
func (c *ClientR4) CreateResearchStudy(ctx context.Context, resource r4.ResearchStudy) (r4.ResearchStudy, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ResearchStudy{}, err
	}
	typed, ok := result.(r4.ResearchStudy)
	if !ok {
		return r4.ResearchStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchStudy retrieves a ResearchStudy resource by ID.
func (c *ClientR4) ReadResearchStudy(ctx context.Context, id string) (r4.ResearchStudy, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r4.ResearchStudy{}, err
	}
	typed, ok := result.(r4.ResearchStudy)
	if !ok {
		return r4.ResearchStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchStudy updates an existing ResearchStudy resource.
func (c *ClientR4) UpdateResearchStudy(ctx context.Context, resource r4.ResearchStudy) (update.Result[r4.ResearchStudy], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ResearchStudy]{}, err
	}
	typed, ok := result.Resource.(r4.ResearchStudy)
	if !ok {
		return update.Result[r4.ResearchStudy]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ResearchStudy]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchStudy deletes a ResearchStudy resource by ID.
func (c *ClientR4) DeleteResearchStudy(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ResearchStudy", id)
}

// SearchResearchStudy performs a search for ResearchStudy resources.
func (c *ClientR4) SearchResearchStudy(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ResearchStudy], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ResearchStudy", parameters, options)
	if err != nil {
		return search.Result[r4.ResearchStudy]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ResearchStudy, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ResearchStudy)
		if !ok {
			return search.Result[r4.ResearchStudy]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ResearchStudy]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchSubject creates a new ResearchSubject resource.
func (c *ClientR4) CreateResearchSubject(ctx context.Context, resource r4.ResearchSubject) (r4.ResearchSubject, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ResearchSubject{}, err
	}
	typed, ok := result.(r4.ResearchSubject)
	if !ok {
		return r4.ResearchSubject{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchSubject retrieves a ResearchSubject resource by ID.
func (c *ClientR4) ReadResearchSubject(ctx context.Context, id string) (r4.ResearchSubject, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r4.ResearchSubject{}, err
	}
	typed, ok := result.(r4.ResearchSubject)
	if !ok {
		return r4.ResearchSubject{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchSubject updates an existing ResearchSubject resource.
func (c *ClientR4) UpdateResearchSubject(ctx context.Context, resource r4.ResearchSubject) (update.Result[r4.ResearchSubject], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ResearchSubject]{}, err
	}
	typed, ok := result.Resource.(r4.ResearchSubject)
	if !ok {
		return update.Result[r4.ResearchSubject]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ResearchSubject]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchSubject deletes a ResearchSubject resource by ID.
func (c *ClientR4) DeleteResearchSubject(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ResearchSubject", id)
}

// SearchResearchSubject performs a search for ResearchSubject resources.
func (c *ClientR4) SearchResearchSubject(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ResearchSubject], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ResearchSubject", parameters, options)
	if err != nil {
		return search.Result[r4.ResearchSubject]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ResearchSubject, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ResearchSubject)
		if !ok {
			return search.Result[r4.ResearchSubject]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ResearchSubject]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRiskAssessment creates a new RiskAssessment resource.
func (c *ClientR4) CreateRiskAssessment(ctx context.Context, resource r4.RiskAssessment) (r4.RiskAssessment, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.RiskAssessment{}, err
	}
	typed, ok := result.(r4.RiskAssessment)
	if !ok {
		return r4.RiskAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRiskAssessment retrieves a RiskAssessment resource by ID.
func (c *ClientR4) ReadRiskAssessment(ctx context.Context, id string) (r4.RiskAssessment, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r4.RiskAssessment{}, err
	}
	typed, ok := result.(r4.RiskAssessment)
	if !ok {
		return r4.RiskAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRiskAssessment updates an existing RiskAssessment resource.
func (c *ClientR4) UpdateRiskAssessment(ctx context.Context, resource r4.RiskAssessment) (update.Result[r4.RiskAssessment], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.RiskAssessment]{}, err
	}
	typed, ok := result.Resource.(r4.RiskAssessment)
	if !ok {
		return update.Result[r4.RiskAssessment]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.RiskAssessment]{Resource: typed, Created: result.Created}, nil
}

// DeleteRiskAssessment deletes a RiskAssessment resource by ID.
func (c *ClientR4) DeleteRiskAssessment(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RiskAssessment", id)
}

// SearchRiskAssessment performs a search for RiskAssessment resources.
func (c *ClientR4) SearchRiskAssessment(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.RiskAssessment], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RiskAssessment", parameters, options)
	if err != nil {
		return search.Result[r4.RiskAssessment]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.RiskAssessment, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.RiskAssessment)
		if !ok {
			return search.Result[r4.RiskAssessment]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.RiskAssessment]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRiskEvidenceSynthesis creates a new RiskEvidenceSynthesis resource.
func (c *ClientR4) CreateRiskEvidenceSynthesis(ctx context.Context, resource r4.RiskEvidenceSynthesis) (r4.RiskEvidenceSynthesis, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.RiskEvidenceSynthesis{}, err
	}
	typed, ok := result.(r4.RiskEvidenceSynthesis)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRiskEvidenceSynthesis retrieves a RiskEvidenceSynthesis resource by ID.
func (c *ClientR4) ReadRiskEvidenceSynthesis(ctx context.Context, id string) (r4.RiskEvidenceSynthesis, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "RiskEvidenceSynthesis", id)
	if err != nil {
		return r4.RiskEvidenceSynthesis{}, err
	}
	typed, ok := result.(r4.RiskEvidenceSynthesis)
	if !ok {
		return r4.RiskEvidenceSynthesis{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRiskEvidenceSynthesis updates an existing RiskEvidenceSynthesis resource.
func (c *ClientR4) UpdateRiskEvidenceSynthesis(ctx context.Context, resource r4.RiskEvidenceSynthesis) (update.Result[r4.RiskEvidenceSynthesis], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.RiskEvidenceSynthesis]{}, err
	}
	typed, ok := result.Resource.(r4.RiskEvidenceSynthesis)
	if !ok {
		return update.Result[r4.RiskEvidenceSynthesis]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.RiskEvidenceSynthesis]{Resource: typed, Created: result.Created}, nil
}

// DeleteRiskEvidenceSynthesis deletes a RiskEvidenceSynthesis resource by ID.
func (c *ClientR4) DeleteRiskEvidenceSynthesis(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "RiskEvidenceSynthesis", id)
}

// SearchRiskEvidenceSynthesis performs a search for RiskEvidenceSynthesis resources.
func (c *ClientR4) SearchRiskEvidenceSynthesis(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.RiskEvidenceSynthesis], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "RiskEvidenceSynthesis", parameters, options)
	if err != nil {
		return search.Result[r4.RiskEvidenceSynthesis]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.RiskEvidenceSynthesis, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.RiskEvidenceSynthesis)
		if !ok {
			return search.Result[r4.RiskEvidenceSynthesis]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.RiskEvidenceSynthesis]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSchedule creates a new Schedule resource.
func (c *ClientR4) CreateSchedule(ctx context.Context, resource r4.Schedule) (r4.Schedule, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Schedule{}, err
	}
	typed, ok := result.(r4.Schedule)
	if !ok {
		return r4.Schedule{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSchedule retrieves a Schedule resource by ID.
func (c *ClientR4) ReadSchedule(ctx context.Context, id string) (r4.Schedule, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Schedule", id)
	if err != nil {
		return r4.Schedule{}, err
	}
	typed, ok := result.(r4.Schedule)
	if !ok {
		return r4.Schedule{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSchedule updates an existing Schedule resource.
func (c *ClientR4) UpdateSchedule(ctx context.Context, resource r4.Schedule) (update.Result[r4.Schedule], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Schedule]{}, err
	}
	typed, ok := result.Resource.(r4.Schedule)
	if !ok {
		return update.Result[r4.Schedule]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Schedule]{Resource: typed, Created: result.Created}, nil
}

// DeleteSchedule deletes a Schedule resource by ID.
func (c *ClientR4) DeleteSchedule(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Schedule", id)
}

// SearchSchedule performs a search for Schedule resources.
func (c *ClientR4) SearchSchedule(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Schedule], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Schedule", parameters, options)
	if err != nil {
		return search.Result[r4.Schedule]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Schedule, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Schedule)
		if !ok {
			return search.Result[r4.Schedule]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Schedule]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSearchParameter creates a new SearchParameter resource.
func (c *ClientR4) CreateSearchParameter(ctx context.Context, resource r4.SearchParameter) (r4.SearchParameter, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SearchParameter{}, err
	}
	typed, ok := result.(r4.SearchParameter)
	if !ok {
		return r4.SearchParameter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSearchParameter retrieves a SearchParameter resource by ID.
func (c *ClientR4) ReadSearchParameter(ctx context.Context, id string) (r4.SearchParameter, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r4.SearchParameter{}, err
	}
	typed, ok := result.(r4.SearchParameter)
	if !ok {
		return r4.SearchParameter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSearchParameter updates an existing SearchParameter resource.
func (c *ClientR4) UpdateSearchParameter(ctx context.Context, resource r4.SearchParameter) (update.Result[r4.SearchParameter], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SearchParameter]{}, err
	}
	typed, ok := result.Resource.(r4.SearchParameter)
	if !ok {
		return update.Result[r4.SearchParameter]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SearchParameter]{Resource: typed, Created: result.Created}, nil
}

// DeleteSearchParameter deletes a SearchParameter resource by ID.
func (c *ClientR4) DeleteSearchParameter(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SearchParameter", id)
}

// SearchSearchParameter performs a search for SearchParameter resources.
func (c *ClientR4) SearchSearchParameter(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SearchParameter], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SearchParameter", parameters, options)
	if err != nil {
		return search.Result[r4.SearchParameter]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SearchParameter, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SearchParameter)
		if !ok {
			return search.Result[r4.SearchParameter]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SearchParameter]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateServiceRequest creates a new ServiceRequest resource.
func (c *ClientR4) CreateServiceRequest(ctx context.Context, resource r4.ServiceRequest) (r4.ServiceRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ServiceRequest{}, err
	}
	typed, ok := result.(r4.ServiceRequest)
	if !ok {
		return r4.ServiceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadServiceRequest retrieves a ServiceRequest resource by ID.
func (c *ClientR4) ReadServiceRequest(ctx context.Context, id string) (r4.ServiceRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r4.ServiceRequest{}, err
	}
	typed, ok := result.(r4.ServiceRequest)
	if !ok {
		return r4.ServiceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateServiceRequest updates an existing ServiceRequest resource.
func (c *ClientR4) UpdateServiceRequest(ctx context.Context, resource r4.ServiceRequest) (update.Result[r4.ServiceRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ServiceRequest]{}, err
	}
	typed, ok := result.Resource.(r4.ServiceRequest)
	if !ok {
		return update.Result[r4.ServiceRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ServiceRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteServiceRequest deletes a ServiceRequest resource by ID.
func (c *ClientR4) DeleteServiceRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ServiceRequest", id)
}

// SearchServiceRequest performs a search for ServiceRequest resources.
func (c *ClientR4) SearchServiceRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ServiceRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ServiceRequest", parameters, options)
	if err != nil {
		return search.Result[r4.ServiceRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ServiceRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ServiceRequest)
		if !ok {
			return search.Result[r4.ServiceRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ServiceRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSlot creates a new Slot resource.
func (c *ClientR4) CreateSlot(ctx context.Context, resource r4.Slot) (r4.Slot, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Slot{}, err
	}
	typed, ok := result.(r4.Slot)
	if !ok {
		return r4.Slot{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSlot retrieves a Slot resource by ID.
func (c *ClientR4) ReadSlot(ctx context.Context, id string) (r4.Slot, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Slot", id)
	if err != nil {
		return r4.Slot{}, err
	}
	typed, ok := result.(r4.Slot)
	if !ok {
		return r4.Slot{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSlot updates an existing Slot resource.
func (c *ClientR4) UpdateSlot(ctx context.Context, resource r4.Slot) (update.Result[r4.Slot], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Slot]{}, err
	}
	typed, ok := result.Resource.(r4.Slot)
	if !ok {
		return update.Result[r4.Slot]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Slot]{Resource: typed, Created: result.Created}, nil
}

// DeleteSlot deletes a Slot resource by ID.
func (c *ClientR4) DeleteSlot(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Slot", id)
}

// SearchSlot performs a search for Slot resources.
func (c *ClientR4) SearchSlot(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Slot], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Slot", parameters, options)
	if err != nil {
		return search.Result[r4.Slot]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Slot, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Slot)
		if !ok {
			return search.Result[r4.Slot]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Slot]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSpecimen creates a new Specimen resource.
func (c *ClientR4) CreateSpecimen(ctx context.Context, resource r4.Specimen) (r4.Specimen, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Specimen{}, err
	}
	typed, ok := result.(r4.Specimen)
	if !ok {
		return r4.Specimen{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSpecimen retrieves a Specimen resource by ID.
func (c *ClientR4) ReadSpecimen(ctx context.Context, id string) (r4.Specimen, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Specimen", id)
	if err != nil {
		return r4.Specimen{}, err
	}
	typed, ok := result.(r4.Specimen)
	if !ok {
		return r4.Specimen{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSpecimen updates an existing Specimen resource.
func (c *ClientR4) UpdateSpecimen(ctx context.Context, resource r4.Specimen) (update.Result[r4.Specimen], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Specimen]{}, err
	}
	typed, ok := result.Resource.(r4.Specimen)
	if !ok {
		return update.Result[r4.Specimen]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Specimen]{Resource: typed, Created: result.Created}, nil
}

// DeleteSpecimen deletes a Specimen resource by ID.
func (c *ClientR4) DeleteSpecimen(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Specimen", id)
}

// SearchSpecimen performs a search for Specimen resources.
func (c *ClientR4) SearchSpecimen(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Specimen], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Specimen", parameters, options)
	if err != nil {
		return search.Result[r4.Specimen]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Specimen, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Specimen)
		if !ok {
			return search.Result[r4.Specimen]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Specimen]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSpecimenDefinition creates a new SpecimenDefinition resource.
func (c *ClientR4) CreateSpecimenDefinition(ctx context.Context, resource r4.SpecimenDefinition) (r4.SpecimenDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SpecimenDefinition{}, err
	}
	typed, ok := result.(r4.SpecimenDefinition)
	if !ok {
		return r4.SpecimenDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSpecimenDefinition retrieves a SpecimenDefinition resource by ID.
func (c *ClientR4) ReadSpecimenDefinition(ctx context.Context, id string) (r4.SpecimenDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r4.SpecimenDefinition{}, err
	}
	typed, ok := result.(r4.SpecimenDefinition)
	if !ok {
		return r4.SpecimenDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSpecimenDefinition updates an existing SpecimenDefinition resource.
func (c *ClientR4) UpdateSpecimenDefinition(ctx context.Context, resource r4.SpecimenDefinition) (update.Result[r4.SpecimenDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SpecimenDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.SpecimenDefinition)
	if !ok {
		return update.Result[r4.SpecimenDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SpecimenDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteSpecimenDefinition deletes a SpecimenDefinition resource by ID.
func (c *ClientR4) DeleteSpecimenDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SpecimenDefinition", id)
}

// SearchSpecimenDefinition performs a search for SpecimenDefinition resources.
func (c *ClientR4) SearchSpecimenDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SpecimenDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SpecimenDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.SpecimenDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SpecimenDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SpecimenDefinition)
		if !ok {
			return search.Result[r4.SpecimenDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SpecimenDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateStructureDefinition creates a new StructureDefinition resource.
func (c *ClientR4) CreateStructureDefinition(ctx context.Context, resource r4.StructureDefinition) (r4.StructureDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.StructureDefinition{}, err
	}
	typed, ok := result.(r4.StructureDefinition)
	if !ok {
		return r4.StructureDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadStructureDefinition retrieves a StructureDefinition resource by ID.
func (c *ClientR4) ReadStructureDefinition(ctx context.Context, id string) (r4.StructureDefinition, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r4.StructureDefinition{}, err
	}
	typed, ok := result.(r4.StructureDefinition)
	if !ok {
		return r4.StructureDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateStructureDefinition updates an existing StructureDefinition resource.
func (c *ClientR4) UpdateStructureDefinition(ctx context.Context, resource r4.StructureDefinition) (update.Result[r4.StructureDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.StructureDefinition]{}, err
	}
	typed, ok := result.Resource.(r4.StructureDefinition)
	if !ok {
		return update.Result[r4.StructureDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.StructureDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteStructureDefinition deletes a StructureDefinition resource by ID.
func (c *ClientR4) DeleteStructureDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "StructureDefinition", id)
}

// SearchStructureDefinition performs a search for StructureDefinition resources.
func (c *ClientR4) SearchStructureDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.StructureDefinition], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "StructureDefinition", parameters, options)
	if err != nil {
		return search.Result[r4.StructureDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.StructureDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.StructureDefinition)
		if !ok {
			return search.Result[r4.StructureDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.StructureDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateStructureMap creates a new StructureMap resource.
func (c *ClientR4) CreateStructureMap(ctx context.Context, resource r4.StructureMap) (r4.StructureMap, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.StructureMap{}, err
	}
	typed, ok := result.(r4.StructureMap)
	if !ok {
		return r4.StructureMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadStructureMap retrieves a StructureMap resource by ID.
func (c *ClientR4) ReadStructureMap(ctx context.Context, id string) (r4.StructureMap, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "StructureMap", id)
	if err != nil {
		return r4.StructureMap{}, err
	}
	typed, ok := result.(r4.StructureMap)
	if !ok {
		return r4.StructureMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateStructureMap updates an existing StructureMap resource.
func (c *ClientR4) UpdateStructureMap(ctx context.Context, resource r4.StructureMap) (update.Result[r4.StructureMap], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.StructureMap]{}, err
	}
	typed, ok := result.Resource.(r4.StructureMap)
	if !ok {
		return update.Result[r4.StructureMap]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.StructureMap]{Resource: typed, Created: result.Created}, nil
}

// DeleteStructureMap deletes a StructureMap resource by ID.
func (c *ClientR4) DeleteStructureMap(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "StructureMap", id)
}

// SearchStructureMap performs a search for StructureMap resources.
func (c *ClientR4) SearchStructureMap(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.StructureMap], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "StructureMap", parameters, options)
	if err != nil {
		return search.Result[r4.StructureMap]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.StructureMap, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.StructureMap)
		if !ok {
			return search.Result[r4.StructureMap]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.StructureMap]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubscription creates a new Subscription resource.
func (c *ClientR4) CreateSubscription(ctx context.Context, resource r4.Subscription) (r4.Subscription, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Subscription{}, err
	}
	typed, ok := result.(r4.Subscription)
	if !ok {
		return r4.Subscription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubscription retrieves a Subscription resource by ID.
func (c *ClientR4) ReadSubscription(ctx context.Context, id string) (r4.Subscription, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Subscription", id)
	if err != nil {
		return r4.Subscription{}, err
	}
	typed, ok := result.(r4.Subscription)
	if !ok {
		return r4.Subscription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubscription updates an existing Subscription resource.
func (c *ClientR4) UpdateSubscription(ctx context.Context, resource r4.Subscription) (update.Result[r4.Subscription], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Subscription]{}, err
	}
	typed, ok := result.Resource.(r4.Subscription)
	if !ok {
		return update.Result[r4.Subscription]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Subscription]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubscription deletes a Subscription resource by ID.
func (c *ClientR4) DeleteSubscription(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Subscription", id)
}

// SearchSubscription performs a search for Subscription resources.
func (c *ClientR4) SearchSubscription(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Subscription], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Subscription", parameters, options)
	if err != nil {
		return search.Result[r4.Subscription]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Subscription, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Subscription)
		if !ok {
			return search.Result[r4.Subscription]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Subscription]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstance creates a new Substance resource.
func (c *ClientR4) CreateSubstance(ctx context.Context, resource r4.Substance) (r4.Substance, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Substance{}, err
	}
	typed, ok := result.(r4.Substance)
	if !ok {
		return r4.Substance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstance retrieves a Substance resource by ID.
func (c *ClientR4) ReadSubstance(ctx context.Context, id string) (r4.Substance, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Substance", id)
	if err != nil {
		return r4.Substance{}, err
	}
	typed, ok := result.(r4.Substance)
	if !ok {
		return r4.Substance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstance updates an existing Substance resource.
func (c *ClientR4) UpdateSubstance(ctx context.Context, resource r4.Substance) (update.Result[r4.Substance], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Substance]{}, err
	}
	typed, ok := result.Resource.(r4.Substance)
	if !ok {
		return update.Result[r4.Substance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Substance]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstance deletes a Substance resource by ID.
func (c *ClientR4) DeleteSubstance(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Substance", id)
}

// SearchSubstance performs a search for Substance resources.
func (c *ClientR4) SearchSubstance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Substance], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Substance", parameters, options)
	if err != nil {
		return search.Result[r4.Substance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Substance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Substance)
		if !ok {
			return search.Result[r4.Substance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Substance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceNucleicAcid creates a new SubstanceNucleicAcid resource.
func (c *ClientR4) CreateSubstanceNucleicAcid(ctx context.Context, resource r4.SubstanceNucleicAcid) (r4.SubstanceNucleicAcid, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceNucleicAcid{}, err
	}
	typed, ok := result.(r4.SubstanceNucleicAcid)
	if !ok {
		return r4.SubstanceNucleicAcid{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceNucleicAcid retrieves a SubstanceNucleicAcid resource by ID.
func (c *ClientR4) ReadSubstanceNucleicAcid(ctx context.Context, id string) (r4.SubstanceNucleicAcid, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceNucleicAcid", id)
	if err != nil {
		return r4.SubstanceNucleicAcid{}, err
	}
	typed, ok := result.(r4.SubstanceNucleicAcid)
	if !ok {
		return r4.SubstanceNucleicAcid{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceNucleicAcid updates an existing SubstanceNucleicAcid resource.
func (c *ClientR4) UpdateSubstanceNucleicAcid(ctx context.Context, resource r4.SubstanceNucleicAcid) (update.Result[r4.SubstanceNucleicAcid], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SubstanceNucleicAcid]{}, err
	}
	typed, ok := result.Resource.(r4.SubstanceNucleicAcid)
	if !ok {
		return update.Result[r4.SubstanceNucleicAcid]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SubstanceNucleicAcid]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceNucleicAcid deletes a SubstanceNucleicAcid resource by ID.
func (c *ClientR4) DeleteSubstanceNucleicAcid(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceNucleicAcid", id)
}

// SearchSubstanceNucleicAcid performs a search for SubstanceNucleicAcid resources.
func (c *ClientR4) SearchSubstanceNucleicAcid(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SubstanceNucleicAcid], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceNucleicAcid", parameters, options)
	if err != nil {
		return search.Result[r4.SubstanceNucleicAcid]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SubstanceNucleicAcid, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SubstanceNucleicAcid)
		if !ok {
			return search.Result[r4.SubstanceNucleicAcid]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SubstanceNucleicAcid]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstancePolymer creates a new SubstancePolymer resource.
func (c *ClientR4) CreateSubstancePolymer(ctx context.Context, resource r4.SubstancePolymer) (r4.SubstancePolymer, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SubstancePolymer{}, err
	}
	typed, ok := result.(r4.SubstancePolymer)
	if !ok {
		return r4.SubstancePolymer{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstancePolymer retrieves a SubstancePolymer resource by ID.
func (c *ClientR4) ReadSubstancePolymer(ctx context.Context, id string) (r4.SubstancePolymer, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstancePolymer", id)
	if err != nil {
		return r4.SubstancePolymer{}, err
	}
	typed, ok := result.(r4.SubstancePolymer)
	if !ok {
		return r4.SubstancePolymer{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstancePolymer updates an existing SubstancePolymer resource.
func (c *ClientR4) UpdateSubstancePolymer(ctx context.Context, resource r4.SubstancePolymer) (update.Result[r4.SubstancePolymer], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SubstancePolymer]{}, err
	}
	typed, ok := result.Resource.(r4.SubstancePolymer)
	if !ok {
		return update.Result[r4.SubstancePolymer]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SubstancePolymer]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstancePolymer deletes a SubstancePolymer resource by ID.
func (c *ClientR4) DeleteSubstancePolymer(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstancePolymer", id)
}

// SearchSubstancePolymer performs a search for SubstancePolymer resources.
func (c *ClientR4) SearchSubstancePolymer(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SubstancePolymer], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstancePolymer", parameters, options)
	if err != nil {
		return search.Result[r4.SubstancePolymer]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SubstancePolymer, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SubstancePolymer)
		if !ok {
			return search.Result[r4.SubstancePolymer]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SubstancePolymer]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceProtein creates a new SubstanceProtein resource.
func (c *ClientR4) CreateSubstanceProtein(ctx context.Context, resource r4.SubstanceProtein) (r4.SubstanceProtein, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceProtein{}, err
	}
	typed, ok := result.(r4.SubstanceProtein)
	if !ok {
		return r4.SubstanceProtein{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceProtein retrieves a SubstanceProtein resource by ID.
func (c *ClientR4) ReadSubstanceProtein(ctx context.Context, id string) (r4.SubstanceProtein, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceProtein", id)
	if err != nil {
		return r4.SubstanceProtein{}, err
	}
	typed, ok := result.(r4.SubstanceProtein)
	if !ok {
		return r4.SubstanceProtein{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceProtein updates an existing SubstanceProtein resource.
func (c *ClientR4) UpdateSubstanceProtein(ctx context.Context, resource r4.SubstanceProtein) (update.Result[r4.SubstanceProtein], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SubstanceProtein]{}, err
	}
	typed, ok := result.Resource.(r4.SubstanceProtein)
	if !ok {
		return update.Result[r4.SubstanceProtein]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SubstanceProtein]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceProtein deletes a SubstanceProtein resource by ID.
func (c *ClientR4) DeleteSubstanceProtein(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceProtein", id)
}

// SearchSubstanceProtein performs a search for SubstanceProtein resources.
func (c *ClientR4) SearchSubstanceProtein(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SubstanceProtein], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceProtein", parameters, options)
	if err != nil {
		return search.Result[r4.SubstanceProtein]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SubstanceProtein, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SubstanceProtein)
		if !ok {
			return search.Result[r4.SubstanceProtein]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SubstanceProtein]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceReferenceInformation creates a new SubstanceReferenceInformation resource.
func (c *ClientR4) CreateSubstanceReferenceInformation(ctx context.Context, resource r4.SubstanceReferenceInformation) (r4.SubstanceReferenceInformation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceReferenceInformation{}, err
	}
	typed, ok := result.(r4.SubstanceReferenceInformation)
	if !ok {
		return r4.SubstanceReferenceInformation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceReferenceInformation retrieves a SubstanceReferenceInformation resource by ID.
func (c *ClientR4) ReadSubstanceReferenceInformation(ctx context.Context, id string) (r4.SubstanceReferenceInformation, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceReferenceInformation", id)
	if err != nil {
		return r4.SubstanceReferenceInformation{}, err
	}
	typed, ok := result.(r4.SubstanceReferenceInformation)
	if !ok {
		return r4.SubstanceReferenceInformation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceReferenceInformation updates an existing SubstanceReferenceInformation resource.
func (c *ClientR4) UpdateSubstanceReferenceInformation(ctx context.Context, resource r4.SubstanceReferenceInformation) (update.Result[r4.SubstanceReferenceInformation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SubstanceReferenceInformation]{}, err
	}
	typed, ok := result.Resource.(r4.SubstanceReferenceInformation)
	if !ok {
		return update.Result[r4.SubstanceReferenceInformation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SubstanceReferenceInformation]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceReferenceInformation deletes a SubstanceReferenceInformation resource by ID.
func (c *ClientR4) DeleteSubstanceReferenceInformation(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceReferenceInformation", id)
}

// SearchSubstanceReferenceInformation performs a search for SubstanceReferenceInformation resources.
func (c *ClientR4) SearchSubstanceReferenceInformation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SubstanceReferenceInformation], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceReferenceInformation", parameters, options)
	if err != nil {
		return search.Result[r4.SubstanceReferenceInformation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SubstanceReferenceInformation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SubstanceReferenceInformation)
		if !ok {
			return search.Result[r4.SubstanceReferenceInformation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SubstanceReferenceInformation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceSourceMaterial creates a new SubstanceSourceMaterial resource.
func (c *ClientR4) CreateSubstanceSourceMaterial(ctx context.Context, resource r4.SubstanceSourceMaterial) (r4.SubstanceSourceMaterial, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceSourceMaterial{}, err
	}
	typed, ok := result.(r4.SubstanceSourceMaterial)
	if !ok {
		return r4.SubstanceSourceMaterial{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceSourceMaterial retrieves a SubstanceSourceMaterial resource by ID.
func (c *ClientR4) ReadSubstanceSourceMaterial(ctx context.Context, id string) (r4.SubstanceSourceMaterial, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceSourceMaterial", id)
	if err != nil {
		return r4.SubstanceSourceMaterial{}, err
	}
	typed, ok := result.(r4.SubstanceSourceMaterial)
	if !ok {
		return r4.SubstanceSourceMaterial{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceSourceMaterial updates an existing SubstanceSourceMaterial resource.
func (c *ClientR4) UpdateSubstanceSourceMaterial(ctx context.Context, resource r4.SubstanceSourceMaterial) (update.Result[r4.SubstanceSourceMaterial], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SubstanceSourceMaterial]{}, err
	}
	typed, ok := result.Resource.(r4.SubstanceSourceMaterial)
	if !ok {
		return update.Result[r4.SubstanceSourceMaterial]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SubstanceSourceMaterial]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceSourceMaterial deletes a SubstanceSourceMaterial resource by ID.
func (c *ClientR4) DeleteSubstanceSourceMaterial(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceSourceMaterial", id)
}

// SearchSubstanceSourceMaterial performs a search for SubstanceSourceMaterial resources.
func (c *ClientR4) SearchSubstanceSourceMaterial(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SubstanceSourceMaterial], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceSourceMaterial", parameters, options)
	if err != nil {
		return search.Result[r4.SubstanceSourceMaterial]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SubstanceSourceMaterial, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SubstanceSourceMaterial)
		if !ok {
			return search.Result[r4.SubstanceSourceMaterial]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SubstanceSourceMaterial]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceSpecification creates a new SubstanceSpecification resource.
func (c *ClientR4) CreateSubstanceSpecification(ctx context.Context, resource r4.SubstanceSpecification) (r4.SubstanceSpecification, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SubstanceSpecification{}, err
	}
	typed, ok := result.(r4.SubstanceSpecification)
	if !ok {
		return r4.SubstanceSpecification{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceSpecification retrieves a SubstanceSpecification resource by ID.
func (c *ClientR4) ReadSubstanceSpecification(ctx context.Context, id string) (r4.SubstanceSpecification, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SubstanceSpecification", id)
	if err != nil {
		return r4.SubstanceSpecification{}, err
	}
	typed, ok := result.(r4.SubstanceSpecification)
	if !ok {
		return r4.SubstanceSpecification{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceSpecification updates an existing SubstanceSpecification resource.
func (c *ClientR4) UpdateSubstanceSpecification(ctx context.Context, resource r4.SubstanceSpecification) (update.Result[r4.SubstanceSpecification], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SubstanceSpecification]{}, err
	}
	typed, ok := result.Resource.(r4.SubstanceSpecification)
	if !ok {
		return update.Result[r4.SubstanceSpecification]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SubstanceSpecification]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceSpecification deletes a SubstanceSpecification resource by ID.
func (c *ClientR4) DeleteSubstanceSpecification(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SubstanceSpecification", id)
}

// SearchSubstanceSpecification performs a search for SubstanceSpecification resources.
func (c *ClientR4) SearchSubstanceSpecification(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SubstanceSpecification], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SubstanceSpecification", parameters, options)
	if err != nil {
		return search.Result[r4.SubstanceSpecification]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SubstanceSpecification, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SubstanceSpecification)
		if !ok {
			return search.Result[r4.SubstanceSpecification]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SubstanceSpecification]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSupplyDelivery creates a new SupplyDelivery resource.
func (c *ClientR4) CreateSupplyDelivery(ctx context.Context, resource r4.SupplyDelivery) (r4.SupplyDelivery, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SupplyDelivery{}, err
	}
	typed, ok := result.(r4.SupplyDelivery)
	if !ok {
		return r4.SupplyDelivery{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSupplyDelivery retrieves a SupplyDelivery resource by ID.
func (c *ClientR4) ReadSupplyDelivery(ctx context.Context, id string) (r4.SupplyDelivery, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r4.SupplyDelivery{}, err
	}
	typed, ok := result.(r4.SupplyDelivery)
	if !ok {
		return r4.SupplyDelivery{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSupplyDelivery updates an existing SupplyDelivery resource.
func (c *ClientR4) UpdateSupplyDelivery(ctx context.Context, resource r4.SupplyDelivery) (update.Result[r4.SupplyDelivery], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SupplyDelivery]{}, err
	}
	typed, ok := result.Resource.(r4.SupplyDelivery)
	if !ok {
		return update.Result[r4.SupplyDelivery]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SupplyDelivery]{Resource: typed, Created: result.Created}, nil
}

// DeleteSupplyDelivery deletes a SupplyDelivery resource by ID.
func (c *ClientR4) DeleteSupplyDelivery(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SupplyDelivery", id)
}

// SearchSupplyDelivery performs a search for SupplyDelivery resources.
func (c *ClientR4) SearchSupplyDelivery(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SupplyDelivery], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SupplyDelivery", parameters, options)
	if err != nil {
		return search.Result[r4.SupplyDelivery]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SupplyDelivery, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SupplyDelivery)
		if !ok {
			return search.Result[r4.SupplyDelivery]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SupplyDelivery]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSupplyRequest creates a new SupplyRequest resource.
func (c *ClientR4) CreateSupplyRequest(ctx context.Context, resource r4.SupplyRequest) (r4.SupplyRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.SupplyRequest{}, err
	}
	typed, ok := result.(r4.SupplyRequest)
	if !ok {
		return r4.SupplyRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSupplyRequest retrieves a SupplyRequest resource by ID.
func (c *ClientR4) ReadSupplyRequest(ctx context.Context, id string) (r4.SupplyRequest, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r4.SupplyRequest{}, err
	}
	typed, ok := result.(r4.SupplyRequest)
	if !ok {
		return r4.SupplyRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSupplyRequest updates an existing SupplyRequest resource.
func (c *ClientR4) UpdateSupplyRequest(ctx context.Context, resource r4.SupplyRequest) (update.Result[r4.SupplyRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.SupplyRequest]{}, err
	}
	typed, ok := result.Resource.(r4.SupplyRequest)
	if !ok {
		return update.Result[r4.SupplyRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.SupplyRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteSupplyRequest deletes a SupplyRequest resource by ID.
func (c *ClientR4) DeleteSupplyRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "SupplyRequest", id)
}

// SearchSupplyRequest performs a search for SupplyRequest resources.
func (c *ClientR4) SearchSupplyRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.SupplyRequest], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "SupplyRequest", parameters, options)
	if err != nil {
		return search.Result[r4.SupplyRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.SupplyRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.SupplyRequest)
		if !ok {
			return search.Result[r4.SupplyRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.SupplyRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTask creates a new Task resource.
func (c *ClientR4) CreateTask(ctx context.Context, resource r4.Task) (r4.Task, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.Task{}, err
	}
	typed, ok := result.(r4.Task)
	if !ok {
		return r4.Task{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTask retrieves a Task resource by ID.
func (c *ClientR4) ReadTask(ctx context.Context, id string) (r4.Task, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "Task", id)
	if err != nil {
		return r4.Task{}, err
	}
	typed, ok := result.(r4.Task)
	if !ok {
		return r4.Task{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTask updates an existing Task resource.
func (c *ClientR4) UpdateTask(ctx context.Context, resource r4.Task) (update.Result[r4.Task], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.Task]{}, err
	}
	typed, ok := result.Resource.(r4.Task)
	if !ok {
		return update.Result[r4.Task]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.Task]{Resource: typed, Created: result.Created}, nil
}

// DeleteTask deletes a Task resource by ID.
func (c *ClientR4) DeleteTask(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "Task", id)
}

// SearchTask performs a search for Task resources.
func (c *ClientR4) SearchTask(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.Task], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "Task", parameters, options)
	if err != nil {
		return search.Result[r4.Task]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.Task, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.Task)
		if !ok {
			return search.Result[r4.Task]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.Task]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTerminologyCapabilities creates a new TerminologyCapabilities resource.
func (c *ClientR4) CreateTerminologyCapabilities(ctx context.Context, resource r4.TerminologyCapabilities) (r4.TerminologyCapabilities, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.TerminologyCapabilities{}, err
	}
	typed, ok := result.(r4.TerminologyCapabilities)
	if !ok {
		return r4.TerminologyCapabilities{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTerminologyCapabilities retrieves a TerminologyCapabilities resource by ID.
func (c *ClientR4) ReadTerminologyCapabilities(ctx context.Context, id string) (r4.TerminologyCapabilities, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r4.TerminologyCapabilities{}, err
	}
	typed, ok := result.(r4.TerminologyCapabilities)
	if !ok {
		return r4.TerminologyCapabilities{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTerminologyCapabilities updates an existing TerminologyCapabilities resource.
func (c *ClientR4) UpdateTerminologyCapabilities(ctx context.Context, resource r4.TerminologyCapabilities) (update.Result[r4.TerminologyCapabilities], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.TerminologyCapabilities]{}, err
	}
	typed, ok := result.Resource.(r4.TerminologyCapabilities)
	if !ok {
		return update.Result[r4.TerminologyCapabilities]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.TerminologyCapabilities]{Resource: typed, Created: result.Created}, nil
}

// DeleteTerminologyCapabilities deletes a TerminologyCapabilities resource by ID.
func (c *ClientR4) DeleteTerminologyCapabilities(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "TerminologyCapabilities", id)
}

// SearchTerminologyCapabilities performs a search for TerminologyCapabilities resources.
func (c *ClientR4) SearchTerminologyCapabilities(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.TerminologyCapabilities], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "TerminologyCapabilities", parameters, options)
	if err != nil {
		return search.Result[r4.TerminologyCapabilities]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.TerminologyCapabilities, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.TerminologyCapabilities)
		if !ok {
			return search.Result[r4.TerminologyCapabilities]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.TerminologyCapabilities]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTestReport creates a new TestReport resource.
func (c *ClientR4) CreateTestReport(ctx context.Context, resource r4.TestReport) (r4.TestReport, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.TestReport{}, err
	}
	typed, ok := result.(r4.TestReport)
	if !ok {
		return r4.TestReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTestReport retrieves a TestReport resource by ID.
func (c *ClientR4) ReadTestReport(ctx context.Context, id string) (r4.TestReport, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "TestReport", id)
	if err != nil {
		return r4.TestReport{}, err
	}
	typed, ok := result.(r4.TestReport)
	if !ok {
		return r4.TestReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTestReport updates an existing TestReport resource.
func (c *ClientR4) UpdateTestReport(ctx context.Context, resource r4.TestReport) (update.Result[r4.TestReport], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.TestReport]{}, err
	}
	typed, ok := result.Resource.(r4.TestReport)
	if !ok {
		return update.Result[r4.TestReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.TestReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteTestReport deletes a TestReport resource by ID.
func (c *ClientR4) DeleteTestReport(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "TestReport", id)
}

// SearchTestReport performs a search for TestReport resources.
func (c *ClientR4) SearchTestReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.TestReport], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "TestReport", parameters, options)
	if err != nil {
		return search.Result[r4.TestReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.TestReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.TestReport)
		if !ok {
			return search.Result[r4.TestReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.TestReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTestScript creates a new TestScript resource.
func (c *ClientR4) CreateTestScript(ctx context.Context, resource r4.TestScript) (r4.TestScript, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.TestScript{}, err
	}
	typed, ok := result.(r4.TestScript)
	if !ok {
		return r4.TestScript{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTestScript retrieves a TestScript resource by ID.
func (c *ClientR4) ReadTestScript(ctx context.Context, id string) (r4.TestScript, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "TestScript", id)
	if err != nil {
		return r4.TestScript{}, err
	}
	typed, ok := result.(r4.TestScript)
	if !ok {
		return r4.TestScript{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTestScript updates an existing TestScript resource.
func (c *ClientR4) UpdateTestScript(ctx context.Context, resource r4.TestScript) (update.Result[r4.TestScript], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.TestScript]{}, err
	}
	typed, ok := result.Resource.(r4.TestScript)
	if !ok {
		return update.Result[r4.TestScript]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.TestScript]{Resource: typed, Created: result.Created}, nil
}

// DeleteTestScript deletes a TestScript resource by ID.
func (c *ClientR4) DeleteTestScript(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "TestScript", id)
}

// SearchTestScript performs a search for TestScript resources.
func (c *ClientR4) SearchTestScript(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.TestScript], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "TestScript", parameters, options)
	if err != nil {
		return search.Result[r4.TestScript]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.TestScript, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.TestScript)
		if !ok {
			return search.Result[r4.TestScript]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.TestScript]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateValueSet creates a new ValueSet resource.
func (c *ClientR4) CreateValueSet(ctx context.Context, resource r4.ValueSet) (r4.ValueSet, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.ValueSet{}, err
	}
	typed, ok := result.(r4.ValueSet)
	if !ok {
		return r4.ValueSet{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadValueSet retrieves a ValueSet resource by ID.
func (c *ClientR4) ReadValueSet(ctx context.Context, id string) (r4.ValueSet, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "ValueSet", id)
	if err != nil {
		return r4.ValueSet{}, err
	}
	typed, ok := result.(r4.ValueSet)
	if !ok {
		return r4.ValueSet{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateValueSet updates an existing ValueSet resource.
func (c *ClientR4) UpdateValueSet(ctx context.Context, resource r4.ValueSet) (update.Result[r4.ValueSet], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.ValueSet]{}, err
	}
	typed, ok := result.Resource.(r4.ValueSet)
	if !ok {
		return update.Result[r4.ValueSet]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.ValueSet]{Resource: typed, Created: result.Created}, nil
}

// DeleteValueSet deletes a ValueSet resource by ID.
func (c *ClientR4) DeleteValueSet(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "ValueSet", id)
}

// SearchValueSet performs a search for ValueSet resources.
func (c *ClientR4) SearchValueSet(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.ValueSet], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "ValueSet", parameters, options)
	if err != nil {
		return search.Result[r4.ValueSet]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.ValueSet, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.ValueSet)
		if !ok {
			return search.Result[r4.ValueSet]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.ValueSet]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateVerificationResult creates a new VerificationResult resource.
func (c *ClientR4) CreateVerificationResult(ctx context.Context, resource r4.VerificationResult) (r4.VerificationResult, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.VerificationResult{}, err
	}
	typed, ok := result.(r4.VerificationResult)
	if !ok {
		return r4.VerificationResult{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadVerificationResult retrieves a VerificationResult resource by ID.
func (c *ClientR4) ReadVerificationResult(ctx context.Context, id string) (r4.VerificationResult, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r4.VerificationResult{}, err
	}
	typed, ok := result.(r4.VerificationResult)
	if !ok {
		return r4.VerificationResult{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateVerificationResult updates an existing VerificationResult resource.
func (c *ClientR4) UpdateVerificationResult(ctx context.Context, resource r4.VerificationResult) (update.Result[r4.VerificationResult], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.VerificationResult]{}, err
	}
	typed, ok := result.Resource.(r4.VerificationResult)
	if !ok {
		return update.Result[r4.VerificationResult]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.VerificationResult]{Resource: typed, Created: result.Created}, nil
}

// DeleteVerificationResult deletes a VerificationResult resource by ID.
func (c *ClientR4) DeleteVerificationResult(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "VerificationResult", id)
}

// SearchVerificationResult performs a search for VerificationResult resources.
func (c *ClientR4) SearchVerificationResult(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.VerificationResult], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "VerificationResult", parameters, options)
	if err != nil {
		return search.Result[r4.VerificationResult]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.VerificationResult, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.VerificationResult)
		if !ok {
			return search.Result[r4.VerificationResult]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.VerificationResult]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateVisionPrescription creates a new VisionPrescription resource.
func (c *ClientR4) CreateVisionPrescription(ctx context.Context, resource r4.VisionPrescription) (r4.VisionPrescription, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4.VisionPrescription{}, err
	}
	typed, ok := result.(r4.VisionPrescription)
	if !ok {
		return r4.VisionPrescription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadVisionPrescription retrieves a VisionPrescription resource by ID.
func (c *ClientR4) ReadVisionPrescription(ctx context.Context, id string) (r4.VisionPrescription, error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r4.VisionPrescription{}, err
	}
	typed, ok := result.(r4.VisionPrescription)
	if !ok {
		return r4.VisionPrescription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateVisionPrescription updates an existing VisionPrescription resource.
func (c *ClientR4) UpdateVisionPrescription(ctx context.Context, resource r4.VisionPrescription) (update.Result[r4.VisionPrescription], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4.VisionPrescription]{}, err
	}
	typed, ok := result.Resource.(r4.VisionPrescription)
	if !ok {
		return update.Result[r4.VisionPrescription]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4.VisionPrescription]{Resource: typed, Created: result.Created}, nil
}

// DeleteVisionPrescription deletes a VisionPrescription resource by ID.
func (c *ClientR4) DeleteVisionPrescription(ctx context.Context, id string) error {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	return client.Delete(ctx, "VisionPrescription", id)
}

// SearchVisionPrescription performs a search for VisionPrescription resources.
func (c *ClientR4) SearchVisionPrescription(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4.VisionPrescription], error) {
	client := &internalClient[model.R4]{baseURL: c.BaseURL, client: c.httpClient(), format: c.Format}
	result, err := client.Search(ctx, "VisionPrescription", parameters, options)
	if err != nil {
		return search.Result[r4.VisionPrescription]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4.VisionPrescription, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4.VisionPrescription)
		if !ok {
			return search.Result[r4.VisionPrescription]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4.VisionPrescription]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}
