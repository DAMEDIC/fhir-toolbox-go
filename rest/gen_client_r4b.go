// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.
//go:build r4b || !(r4 || r4b || r5)

package rest

import (
	"context"
	"fmt"
	"github.com/DAMEDIC/fhir-toolbox-go/capabilities/search"
	"github.com/DAMEDIC/fhir-toolbox-go/capabilities/update"
	"github.com/DAMEDIC/fhir-toolbox-go/model"
	"github.com/DAMEDIC/fhir-toolbox-go/model/gen/basic"
	"github.com/DAMEDIC/fhir-toolbox-go/model/gen/r4b"
	"net/http"
	"net/url"
)

// ClientR4B provides both generic and resource-specific FHIR client capabilities.
type ClientR4B struct {
	BaseURL *url.URL
	Client  *http.Client
}

// httpClient returns the HTTP client, using http.DefaultClient if none is set.
func (c *ClientR4B) httpClient() *http.Client {
	if c.Client != nil {
		return c.Client
	}
	return http.DefaultClient
}

// NewClientR4B creates a new R4B FHIR client with the given base URL and HTTP client.
// If httpClient is nil, http.DefaultClient will be used.
func NewClientR4B(baseURL string, httpClient *http.Client) (*ClientR4B, error) {
	u, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	return &ClientR4B{BaseURL: u, Client: httpClient}, nil
}

// CapabilityStatement retrieves the server's CapabilityStatement.
func (c *ClientR4B) CapabilityStatement(ctx context.Context) (basic.CapabilityStatement, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.CapabilityStatement(ctx)
}

// Create creates a new resource.
func (c *ClientR4B) Create(ctx context.Context, resource model.Resource) (model.Resource, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Create(ctx, resource)
}

// Read retrieves a resource by type and ID.
func (c *ClientR4B) Read(ctx context.Context, resourceType string, id string) (model.Resource, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Read(ctx, resourceType, id)
}

// Update updates an existing resource.
func (c *ClientR4B) Update(ctx context.Context, resource model.Resource) (update.Result[model.Resource], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Update(ctx, resource)
}

// Delete deletes a resource by type and ID.
func (c *ClientR4B) Delete(ctx context.Context, resourceType string, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, resourceType, id)
}

// Search performs a search operation for the given resource type.
func (c *ClientR4B) Search(ctx context.Context, resourceType string, parameters search.Parameters, options search.Options) (search.Result[model.Resource], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Search(ctx, resourceType, parameters, options)
}

// CreateAccount creates a new Account resource.
func (c *ClientR4B) CreateAccount(ctx context.Context, resource r4b.Account) (r4b.Account, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Account{}, err
	}
	typed, ok := result.(r4b.Account)
	if !ok {
		return r4b.Account{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAccount retrieves a Account resource by ID.
func (c *ClientR4B) ReadAccount(ctx context.Context, id string) (r4b.Account, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Account", id)
	if err != nil {
		return r4b.Account{}, err
	}
	typed, ok := result.(r4b.Account)
	if !ok {
		return r4b.Account{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAccount updates an existing Account resource.
func (c *ClientR4B) UpdateAccount(ctx context.Context, resource r4b.Account) (update.Result[r4b.Account], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Account]{}, err
	}
	typed, ok := result.Resource.(r4b.Account)
	if !ok {
		return update.Result[r4b.Account]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Account]{Resource: typed, Created: result.Created}, nil
}

// DeleteAccount deletes a Account resource by ID.
func (c *ClientR4B) DeleteAccount(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Account", id)
}

// SearchAccount performs a search for Account resources.
func (c *ClientR4B) SearchAccount(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Account], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Account", parameters, options)
	if err != nil {
		return search.Result[r4b.Account]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Account, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Account)
		if !ok {
			return search.Result[r4b.Account]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Account]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateActivityDefinition creates a new ActivityDefinition resource.
func (c *ClientR4B) CreateActivityDefinition(ctx context.Context, resource r4b.ActivityDefinition) (r4b.ActivityDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ActivityDefinition{}, err
	}
	typed, ok := result.(r4b.ActivityDefinition)
	if !ok {
		return r4b.ActivityDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadActivityDefinition retrieves a ActivityDefinition resource by ID.
func (c *ClientR4B) ReadActivityDefinition(ctx context.Context, id string) (r4b.ActivityDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ActivityDefinition", id)
	if err != nil {
		return r4b.ActivityDefinition{}, err
	}
	typed, ok := result.(r4b.ActivityDefinition)
	if !ok {
		return r4b.ActivityDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateActivityDefinition updates an existing ActivityDefinition resource.
func (c *ClientR4B) UpdateActivityDefinition(ctx context.Context, resource r4b.ActivityDefinition) (update.Result[r4b.ActivityDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ActivityDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.ActivityDefinition)
	if !ok {
		return update.Result[r4b.ActivityDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ActivityDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteActivityDefinition deletes a ActivityDefinition resource by ID.
func (c *ClientR4B) DeleteActivityDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ActivityDefinition", id)
}

// SearchActivityDefinition performs a search for ActivityDefinition resources.
func (c *ClientR4B) SearchActivityDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ActivityDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ActivityDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.ActivityDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ActivityDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ActivityDefinition)
		if !ok {
			return search.Result[r4b.ActivityDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ActivityDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAdministrableProductDefinition creates a new AdministrableProductDefinition resource.
func (c *ClientR4B) CreateAdministrableProductDefinition(ctx context.Context, resource r4b.AdministrableProductDefinition) (r4b.AdministrableProductDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.AdministrableProductDefinition{}, err
	}
	typed, ok := result.(r4b.AdministrableProductDefinition)
	if !ok {
		return r4b.AdministrableProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAdministrableProductDefinition retrieves a AdministrableProductDefinition resource by ID.
func (c *ClientR4B) ReadAdministrableProductDefinition(ctx context.Context, id string) (r4b.AdministrableProductDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "AdministrableProductDefinition", id)
	if err != nil {
		return r4b.AdministrableProductDefinition{}, err
	}
	typed, ok := result.(r4b.AdministrableProductDefinition)
	if !ok {
		return r4b.AdministrableProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAdministrableProductDefinition updates an existing AdministrableProductDefinition resource.
func (c *ClientR4B) UpdateAdministrableProductDefinition(ctx context.Context, resource r4b.AdministrableProductDefinition) (update.Result[r4b.AdministrableProductDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AdministrableProductDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.AdministrableProductDefinition)
	if !ok {
		return update.Result[r4b.AdministrableProductDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.AdministrableProductDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteAdministrableProductDefinition deletes a AdministrableProductDefinition resource by ID.
func (c *ClientR4B) DeleteAdministrableProductDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "AdministrableProductDefinition", id)
}

// SearchAdministrableProductDefinition performs a search for AdministrableProductDefinition resources.
func (c *ClientR4B) SearchAdministrableProductDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.AdministrableProductDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "AdministrableProductDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.AdministrableProductDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.AdministrableProductDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.AdministrableProductDefinition)
		if !ok {
			return search.Result[r4b.AdministrableProductDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.AdministrableProductDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAdverseEvent creates a new AdverseEvent resource.
func (c *ClientR4B) CreateAdverseEvent(ctx context.Context, resource r4b.AdverseEvent) (r4b.AdverseEvent, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.AdverseEvent{}, err
	}
	typed, ok := result.(r4b.AdverseEvent)
	if !ok {
		return r4b.AdverseEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAdverseEvent retrieves a AdverseEvent resource by ID.
func (c *ClientR4B) ReadAdverseEvent(ctx context.Context, id string) (r4b.AdverseEvent, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "AdverseEvent", id)
	if err != nil {
		return r4b.AdverseEvent{}, err
	}
	typed, ok := result.(r4b.AdverseEvent)
	if !ok {
		return r4b.AdverseEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAdverseEvent updates an existing AdverseEvent resource.
func (c *ClientR4B) UpdateAdverseEvent(ctx context.Context, resource r4b.AdverseEvent) (update.Result[r4b.AdverseEvent], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AdverseEvent]{}, err
	}
	typed, ok := result.Resource.(r4b.AdverseEvent)
	if !ok {
		return update.Result[r4b.AdverseEvent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.AdverseEvent]{Resource: typed, Created: result.Created}, nil
}

// DeleteAdverseEvent deletes a AdverseEvent resource by ID.
func (c *ClientR4B) DeleteAdverseEvent(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "AdverseEvent", id)
}

// SearchAdverseEvent performs a search for AdverseEvent resources.
func (c *ClientR4B) SearchAdverseEvent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.AdverseEvent], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "AdverseEvent", parameters, options)
	if err != nil {
		return search.Result[r4b.AdverseEvent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.AdverseEvent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.AdverseEvent)
		if !ok {
			return search.Result[r4b.AdverseEvent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.AdverseEvent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAllergyIntolerance creates a new AllergyIntolerance resource.
func (c *ClientR4B) CreateAllergyIntolerance(ctx context.Context, resource r4b.AllergyIntolerance) (r4b.AllergyIntolerance, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.AllergyIntolerance{}, err
	}
	typed, ok := result.(r4b.AllergyIntolerance)
	if !ok {
		return r4b.AllergyIntolerance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAllergyIntolerance retrieves a AllergyIntolerance resource by ID.
func (c *ClientR4B) ReadAllergyIntolerance(ctx context.Context, id string) (r4b.AllergyIntolerance, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "AllergyIntolerance", id)
	if err != nil {
		return r4b.AllergyIntolerance{}, err
	}
	typed, ok := result.(r4b.AllergyIntolerance)
	if !ok {
		return r4b.AllergyIntolerance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAllergyIntolerance updates an existing AllergyIntolerance resource.
func (c *ClientR4B) UpdateAllergyIntolerance(ctx context.Context, resource r4b.AllergyIntolerance) (update.Result[r4b.AllergyIntolerance], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AllergyIntolerance]{}, err
	}
	typed, ok := result.Resource.(r4b.AllergyIntolerance)
	if !ok {
		return update.Result[r4b.AllergyIntolerance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.AllergyIntolerance]{Resource: typed, Created: result.Created}, nil
}

// DeleteAllergyIntolerance deletes a AllergyIntolerance resource by ID.
func (c *ClientR4B) DeleteAllergyIntolerance(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "AllergyIntolerance", id)
}

// SearchAllergyIntolerance performs a search for AllergyIntolerance resources.
func (c *ClientR4B) SearchAllergyIntolerance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.AllergyIntolerance], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "AllergyIntolerance", parameters, options)
	if err != nil {
		return search.Result[r4b.AllergyIntolerance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.AllergyIntolerance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.AllergyIntolerance)
		if !ok {
			return search.Result[r4b.AllergyIntolerance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.AllergyIntolerance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAppointment creates a new Appointment resource.
func (c *ClientR4B) CreateAppointment(ctx context.Context, resource r4b.Appointment) (r4b.Appointment, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Appointment{}, err
	}
	typed, ok := result.(r4b.Appointment)
	if !ok {
		return r4b.Appointment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAppointment retrieves a Appointment resource by ID.
func (c *ClientR4B) ReadAppointment(ctx context.Context, id string) (r4b.Appointment, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Appointment", id)
	if err != nil {
		return r4b.Appointment{}, err
	}
	typed, ok := result.(r4b.Appointment)
	if !ok {
		return r4b.Appointment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAppointment updates an existing Appointment resource.
func (c *ClientR4B) UpdateAppointment(ctx context.Context, resource r4b.Appointment) (update.Result[r4b.Appointment], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Appointment]{}, err
	}
	typed, ok := result.Resource.(r4b.Appointment)
	if !ok {
		return update.Result[r4b.Appointment]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Appointment]{Resource: typed, Created: result.Created}, nil
}

// DeleteAppointment deletes a Appointment resource by ID.
func (c *ClientR4B) DeleteAppointment(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Appointment", id)
}

// SearchAppointment performs a search for Appointment resources.
func (c *ClientR4B) SearchAppointment(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Appointment], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Appointment", parameters, options)
	if err != nil {
		return search.Result[r4b.Appointment]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Appointment, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Appointment)
		if !ok {
			return search.Result[r4b.Appointment]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Appointment]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAppointmentResponse creates a new AppointmentResponse resource.
func (c *ClientR4B) CreateAppointmentResponse(ctx context.Context, resource r4b.AppointmentResponse) (r4b.AppointmentResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.AppointmentResponse{}, err
	}
	typed, ok := result.(r4b.AppointmentResponse)
	if !ok {
		return r4b.AppointmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAppointmentResponse retrieves a AppointmentResponse resource by ID.
func (c *ClientR4B) ReadAppointmentResponse(ctx context.Context, id string) (r4b.AppointmentResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "AppointmentResponse", id)
	if err != nil {
		return r4b.AppointmentResponse{}, err
	}
	typed, ok := result.(r4b.AppointmentResponse)
	if !ok {
		return r4b.AppointmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAppointmentResponse updates an existing AppointmentResponse resource.
func (c *ClientR4B) UpdateAppointmentResponse(ctx context.Context, resource r4b.AppointmentResponse) (update.Result[r4b.AppointmentResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AppointmentResponse]{}, err
	}
	typed, ok := result.Resource.(r4b.AppointmentResponse)
	if !ok {
		return update.Result[r4b.AppointmentResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.AppointmentResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteAppointmentResponse deletes a AppointmentResponse resource by ID.
func (c *ClientR4B) DeleteAppointmentResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "AppointmentResponse", id)
}

// SearchAppointmentResponse performs a search for AppointmentResponse resources.
func (c *ClientR4B) SearchAppointmentResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.AppointmentResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "AppointmentResponse", parameters, options)
	if err != nil {
		return search.Result[r4b.AppointmentResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.AppointmentResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.AppointmentResponse)
		if !ok {
			return search.Result[r4b.AppointmentResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.AppointmentResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateAuditEvent creates a new AuditEvent resource.
func (c *ClientR4B) CreateAuditEvent(ctx context.Context, resource r4b.AuditEvent) (r4b.AuditEvent, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.AuditEvent{}, err
	}
	typed, ok := result.(r4b.AuditEvent)
	if !ok {
		return r4b.AuditEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadAuditEvent retrieves a AuditEvent resource by ID.
func (c *ClientR4B) ReadAuditEvent(ctx context.Context, id string) (r4b.AuditEvent, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "AuditEvent", id)
	if err != nil {
		return r4b.AuditEvent{}, err
	}
	typed, ok := result.(r4b.AuditEvent)
	if !ok {
		return r4b.AuditEvent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateAuditEvent updates an existing AuditEvent resource.
func (c *ClientR4B) UpdateAuditEvent(ctx context.Context, resource r4b.AuditEvent) (update.Result[r4b.AuditEvent], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.AuditEvent]{}, err
	}
	typed, ok := result.Resource.(r4b.AuditEvent)
	if !ok {
		return update.Result[r4b.AuditEvent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.AuditEvent]{Resource: typed, Created: result.Created}, nil
}

// DeleteAuditEvent deletes a AuditEvent resource by ID.
func (c *ClientR4B) DeleteAuditEvent(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "AuditEvent", id)
}

// SearchAuditEvent performs a search for AuditEvent resources.
func (c *ClientR4B) SearchAuditEvent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.AuditEvent], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "AuditEvent", parameters, options)
	if err != nil {
		return search.Result[r4b.AuditEvent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.AuditEvent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.AuditEvent)
		if !ok {
			return search.Result[r4b.AuditEvent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.AuditEvent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBasic creates a new Basic resource.
func (c *ClientR4B) CreateBasic(ctx context.Context, resource r4b.Basic) (r4b.Basic, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Basic{}, err
	}
	typed, ok := result.(r4b.Basic)
	if !ok {
		return r4b.Basic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBasic retrieves a Basic resource by ID.
func (c *ClientR4B) ReadBasic(ctx context.Context, id string) (r4b.Basic, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Basic", id)
	if err != nil {
		return r4b.Basic{}, err
	}
	typed, ok := result.(r4b.Basic)
	if !ok {
		return r4b.Basic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBasic updates an existing Basic resource.
func (c *ClientR4B) UpdateBasic(ctx context.Context, resource r4b.Basic) (update.Result[r4b.Basic], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Basic]{}, err
	}
	typed, ok := result.Resource.(r4b.Basic)
	if !ok {
		return update.Result[r4b.Basic]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Basic]{Resource: typed, Created: result.Created}, nil
}

// DeleteBasic deletes a Basic resource by ID.
func (c *ClientR4B) DeleteBasic(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Basic", id)
}

// SearchBasic performs a search for Basic resources.
func (c *ClientR4B) SearchBasic(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Basic], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Basic", parameters, options)
	if err != nil {
		return search.Result[r4b.Basic]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Basic, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Basic)
		if !ok {
			return search.Result[r4b.Basic]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Basic]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBinary creates a new Binary resource.
func (c *ClientR4B) CreateBinary(ctx context.Context, resource r4b.Binary) (r4b.Binary, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Binary{}, err
	}
	typed, ok := result.(r4b.Binary)
	if !ok {
		return r4b.Binary{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBinary retrieves a Binary resource by ID.
func (c *ClientR4B) ReadBinary(ctx context.Context, id string) (r4b.Binary, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Binary", id)
	if err != nil {
		return r4b.Binary{}, err
	}
	typed, ok := result.(r4b.Binary)
	if !ok {
		return r4b.Binary{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBinary updates an existing Binary resource.
func (c *ClientR4B) UpdateBinary(ctx context.Context, resource r4b.Binary) (update.Result[r4b.Binary], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Binary]{}, err
	}
	typed, ok := result.Resource.(r4b.Binary)
	if !ok {
		return update.Result[r4b.Binary]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Binary]{Resource: typed, Created: result.Created}, nil
}

// DeleteBinary deletes a Binary resource by ID.
func (c *ClientR4B) DeleteBinary(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Binary", id)
}

// SearchBinary performs a search for Binary resources.
func (c *ClientR4B) SearchBinary(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Binary], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Binary", parameters, options)
	if err != nil {
		return search.Result[r4b.Binary]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Binary, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Binary)
		if !ok {
			return search.Result[r4b.Binary]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Binary]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBiologicallyDerivedProduct creates a new BiologicallyDerivedProduct resource.
func (c *ClientR4B) CreateBiologicallyDerivedProduct(ctx context.Context, resource r4b.BiologicallyDerivedProduct) (r4b.BiologicallyDerivedProduct, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.BiologicallyDerivedProduct{}, err
	}
	typed, ok := result.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBiologicallyDerivedProduct retrieves a BiologicallyDerivedProduct resource by ID.
func (c *ClientR4B) ReadBiologicallyDerivedProduct(ctx context.Context, id string) (r4b.BiologicallyDerivedProduct, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "BiologicallyDerivedProduct", id)
	if err != nil {
		return r4b.BiologicallyDerivedProduct{}, err
	}
	typed, ok := result.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return r4b.BiologicallyDerivedProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBiologicallyDerivedProduct updates an existing BiologicallyDerivedProduct resource.
func (c *ClientR4B) UpdateBiologicallyDerivedProduct(ctx context.Context, resource r4b.BiologicallyDerivedProduct) (update.Result[r4b.BiologicallyDerivedProduct], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.BiologicallyDerivedProduct]{}, err
	}
	typed, ok := result.Resource.(r4b.BiologicallyDerivedProduct)
	if !ok {
		return update.Result[r4b.BiologicallyDerivedProduct]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.BiologicallyDerivedProduct]{Resource: typed, Created: result.Created}, nil
}

// DeleteBiologicallyDerivedProduct deletes a BiologicallyDerivedProduct resource by ID.
func (c *ClientR4B) DeleteBiologicallyDerivedProduct(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "BiologicallyDerivedProduct", id)
}

// SearchBiologicallyDerivedProduct performs a search for BiologicallyDerivedProduct resources.
func (c *ClientR4B) SearchBiologicallyDerivedProduct(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.BiologicallyDerivedProduct], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "BiologicallyDerivedProduct", parameters, options)
	if err != nil {
		return search.Result[r4b.BiologicallyDerivedProduct]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.BiologicallyDerivedProduct, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.BiologicallyDerivedProduct)
		if !ok {
			return search.Result[r4b.BiologicallyDerivedProduct]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.BiologicallyDerivedProduct]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBodyStructure creates a new BodyStructure resource.
func (c *ClientR4B) CreateBodyStructure(ctx context.Context, resource r4b.BodyStructure) (r4b.BodyStructure, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.BodyStructure{}, err
	}
	typed, ok := result.(r4b.BodyStructure)
	if !ok {
		return r4b.BodyStructure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBodyStructure retrieves a BodyStructure resource by ID.
func (c *ClientR4B) ReadBodyStructure(ctx context.Context, id string) (r4b.BodyStructure, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "BodyStructure", id)
	if err != nil {
		return r4b.BodyStructure{}, err
	}
	typed, ok := result.(r4b.BodyStructure)
	if !ok {
		return r4b.BodyStructure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBodyStructure updates an existing BodyStructure resource.
func (c *ClientR4B) UpdateBodyStructure(ctx context.Context, resource r4b.BodyStructure) (update.Result[r4b.BodyStructure], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.BodyStructure]{}, err
	}
	typed, ok := result.Resource.(r4b.BodyStructure)
	if !ok {
		return update.Result[r4b.BodyStructure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.BodyStructure]{Resource: typed, Created: result.Created}, nil
}

// DeleteBodyStructure deletes a BodyStructure resource by ID.
func (c *ClientR4B) DeleteBodyStructure(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "BodyStructure", id)
}

// SearchBodyStructure performs a search for BodyStructure resources.
func (c *ClientR4B) SearchBodyStructure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.BodyStructure], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "BodyStructure", parameters, options)
	if err != nil {
		return search.Result[r4b.BodyStructure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.BodyStructure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.BodyStructure)
		if !ok {
			return search.Result[r4b.BodyStructure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.BodyStructure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateBundle creates a new Bundle resource.
func (c *ClientR4B) CreateBundle(ctx context.Context, resource r4b.Bundle) (r4b.Bundle, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Bundle{}, err
	}
	typed, ok := result.(r4b.Bundle)
	if !ok {
		return r4b.Bundle{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadBundle retrieves a Bundle resource by ID.
func (c *ClientR4B) ReadBundle(ctx context.Context, id string) (r4b.Bundle, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Bundle", id)
	if err != nil {
		return r4b.Bundle{}, err
	}
	typed, ok := result.(r4b.Bundle)
	if !ok {
		return r4b.Bundle{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateBundle updates an existing Bundle resource.
func (c *ClientR4B) UpdateBundle(ctx context.Context, resource r4b.Bundle) (update.Result[r4b.Bundle], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Bundle]{}, err
	}
	typed, ok := result.Resource.(r4b.Bundle)
	if !ok {
		return update.Result[r4b.Bundle]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Bundle]{Resource: typed, Created: result.Created}, nil
}

// DeleteBundle deletes a Bundle resource by ID.
func (c *ClientR4B) DeleteBundle(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Bundle", id)
}

// SearchBundle performs a search for Bundle resources.
func (c *ClientR4B) SearchBundle(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Bundle], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Bundle", parameters, options)
	if err != nil {
		return search.Result[r4b.Bundle]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Bundle, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Bundle)
		if !ok {
			return search.Result[r4b.Bundle]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Bundle]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCapabilityStatement creates a new CapabilityStatement resource.
func (c *ClientR4B) CreateCapabilityStatement(ctx context.Context, resource r4b.CapabilityStatement) (r4b.CapabilityStatement, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CapabilityStatement{}, err
	}
	typed, ok := result.(r4b.CapabilityStatement)
	if !ok {
		return r4b.CapabilityStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCapabilityStatement retrieves a CapabilityStatement resource by ID.
func (c *ClientR4B) ReadCapabilityStatement(ctx context.Context, id string) (r4b.CapabilityStatement, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CapabilityStatement", id)
	if err != nil {
		return r4b.CapabilityStatement{}, err
	}
	typed, ok := result.(r4b.CapabilityStatement)
	if !ok {
		return r4b.CapabilityStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCapabilityStatement updates an existing CapabilityStatement resource.
func (c *ClientR4B) UpdateCapabilityStatement(ctx context.Context, resource r4b.CapabilityStatement) (update.Result[r4b.CapabilityStatement], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CapabilityStatement]{}, err
	}
	typed, ok := result.Resource.(r4b.CapabilityStatement)
	if !ok {
		return update.Result[r4b.CapabilityStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CapabilityStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteCapabilityStatement deletes a CapabilityStatement resource by ID.
func (c *ClientR4B) DeleteCapabilityStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CapabilityStatement", id)
}

// SearchCapabilityStatement performs a search for CapabilityStatement resources.
func (c *ClientR4B) SearchCapabilityStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CapabilityStatement], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CapabilityStatement", parameters, options)
	if err != nil {
		return search.Result[r4b.CapabilityStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CapabilityStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CapabilityStatement)
		if !ok {
			return search.Result[r4b.CapabilityStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CapabilityStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCarePlan creates a new CarePlan resource.
func (c *ClientR4B) CreateCarePlan(ctx context.Context, resource r4b.CarePlan) (r4b.CarePlan, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CarePlan{}, err
	}
	typed, ok := result.(r4b.CarePlan)
	if !ok {
		return r4b.CarePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCarePlan retrieves a CarePlan resource by ID.
func (c *ClientR4B) ReadCarePlan(ctx context.Context, id string) (r4b.CarePlan, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CarePlan", id)
	if err != nil {
		return r4b.CarePlan{}, err
	}
	typed, ok := result.(r4b.CarePlan)
	if !ok {
		return r4b.CarePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCarePlan updates an existing CarePlan resource.
func (c *ClientR4B) UpdateCarePlan(ctx context.Context, resource r4b.CarePlan) (update.Result[r4b.CarePlan], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CarePlan]{}, err
	}
	typed, ok := result.Resource.(r4b.CarePlan)
	if !ok {
		return update.Result[r4b.CarePlan]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CarePlan]{Resource: typed, Created: result.Created}, nil
}

// DeleteCarePlan deletes a CarePlan resource by ID.
func (c *ClientR4B) DeleteCarePlan(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CarePlan", id)
}

// SearchCarePlan performs a search for CarePlan resources.
func (c *ClientR4B) SearchCarePlan(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CarePlan], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CarePlan", parameters, options)
	if err != nil {
		return search.Result[r4b.CarePlan]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CarePlan, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CarePlan)
		if !ok {
			return search.Result[r4b.CarePlan]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CarePlan]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCareTeam creates a new CareTeam resource.
func (c *ClientR4B) CreateCareTeam(ctx context.Context, resource r4b.CareTeam) (r4b.CareTeam, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CareTeam{}, err
	}
	typed, ok := result.(r4b.CareTeam)
	if !ok {
		return r4b.CareTeam{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCareTeam retrieves a CareTeam resource by ID.
func (c *ClientR4B) ReadCareTeam(ctx context.Context, id string) (r4b.CareTeam, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CareTeam", id)
	if err != nil {
		return r4b.CareTeam{}, err
	}
	typed, ok := result.(r4b.CareTeam)
	if !ok {
		return r4b.CareTeam{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCareTeam updates an existing CareTeam resource.
func (c *ClientR4B) UpdateCareTeam(ctx context.Context, resource r4b.CareTeam) (update.Result[r4b.CareTeam], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CareTeam]{}, err
	}
	typed, ok := result.Resource.(r4b.CareTeam)
	if !ok {
		return update.Result[r4b.CareTeam]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CareTeam]{Resource: typed, Created: result.Created}, nil
}

// DeleteCareTeam deletes a CareTeam resource by ID.
func (c *ClientR4B) DeleteCareTeam(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CareTeam", id)
}

// SearchCareTeam performs a search for CareTeam resources.
func (c *ClientR4B) SearchCareTeam(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CareTeam], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CareTeam", parameters, options)
	if err != nil {
		return search.Result[r4b.CareTeam]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CareTeam, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CareTeam)
		if !ok {
			return search.Result[r4b.CareTeam]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CareTeam]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCatalogEntry creates a new CatalogEntry resource.
func (c *ClientR4B) CreateCatalogEntry(ctx context.Context, resource r4b.CatalogEntry) (r4b.CatalogEntry, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CatalogEntry{}, err
	}
	typed, ok := result.(r4b.CatalogEntry)
	if !ok {
		return r4b.CatalogEntry{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCatalogEntry retrieves a CatalogEntry resource by ID.
func (c *ClientR4B) ReadCatalogEntry(ctx context.Context, id string) (r4b.CatalogEntry, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CatalogEntry", id)
	if err != nil {
		return r4b.CatalogEntry{}, err
	}
	typed, ok := result.(r4b.CatalogEntry)
	if !ok {
		return r4b.CatalogEntry{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCatalogEntry updates an existing CatalogEntry resource.
func (c *ClientR4B) UpdateCatalogEntry(ctx context.Context, resource r4b.CatalogEntry) (update.Result[r4b.CatalogEntry], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CatalogEntry]{}, err
	}
	typed, ok := result.Resource.(r4b.CatalogEntry)
	if !ok {
		return update.Result[r4b.CatalogEntry]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CatalogEntry]{Resource: typed, Created: result.Created}, nil
}

// DeleteCatalogEntry deletes a CatalogEntry resource by ID.
func (c *ClientR4B) DeleteCatalogEntry(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CatalogEntry", id)
}

// SearchCatalogEntry performs a search for CatalogEntry resources.
func (c *ClientR4B) SearchCatalogEntry(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CatalogEntry], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CatalogEntry", parameters, options)
	if err != nil {
		return search.Result[r4b.CatalogEntry]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CatalogEntry, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CatalogEntry)
		if !ok {
			return search.Result[r4b.CatalogEntry]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CatalogEntry]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateChargeItem creates a new ChargeItem resource.
func (c *ClientR4B) CreateChargeItem(ctx context.Context, resource r4b.ChargeItem) (r4b.ChargeItem, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ChargeItem{}, err
	}
	typed, ok := result.(r4b.ChargeItem)
	if !ok {
		return r4b.ChargeItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadChargeItem retrieves a ChargeItem resource by ID.
func (c *ClientR4B) ReadChargeItem(ctx context.Context, id string) (r4b.ChargeItem, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ChargeItem", id)
	if err != nil {
		return r4b.ChargeItem{}, err
	}
	typed, ok := result.(r4b.ChargeItem)
	if !ok {
		return r4b.ChargeItem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateChargeItem updates an existing ChargeItem resource.
func (c *ClientR4B) UpdateChargeItem(ctx context.Context, resource r4b.ChargeItem) (update.Result[r4b.ChargeItem], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ChargeItem]{}, err
	}
	typed, ok := result.Resource.(r4b.ChargeItem)
	if !ok {
		return update.Result[r4b.ChargeItem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ChargeItem]{Resource: typed, Created: result.Created}, nil
}

// DeleteChargeItem deletes a ChargeItem resource by ID.
func (c *ClientR4B) DeleteChargeItem(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ChargeItem", id)
}

// SearchChargeItem performs a search for ChargeItem resources.
func (c *ClientR4B) SearchChargeItem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ChargeItem], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ChargeItem", parameters, options)
	if err != nil {
		return search.Result[r4b.ChargeItem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ChargeItem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ChargeItem)
		if !ok {
			return search.Result[r4b.ChargeItem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ChargeItem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateChargeItemDefinition creates a new ChargeItemDefinition resource.
func (c *ClientR4B) CreateChargeItemDefinition(ctx context.Context, resource r4b.ChargeItemDefinition) (r4b.ChargeItemDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ChargeItemDefinition{}, err
	}
	typed, ok := result.(r4b.ChargeItemDefinition)
	if !ok {
		return r4b.ChargeItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadChargeItemDefinition retrieves a ChargeItemDefinition resource by ID.
func (c *ClientR4B) ReadChargeItemDefinition(ctx context.Context, id string) (r4b.ChargeItemDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ChargeItemDefinition", id)
	if err != nil {
		return r4b.ChargeItemDefinition{}, err
	}
	typed, ok := result.(r4b.ChargeItemDefinition)
	if !ok {
		return r4b.ChargeItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateChargeItemDefinition updates an existing ChargeItemDefinition resource.
func (c *ClientR4B) UpdateChargeItemDefinition(ctx context.Context, resource r4b.ChargeItemDefinition) (update.Result[r4b.ChargeItemDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ChargeItemDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.ChargeItemDefinition)
	if !ok {
		return update.Result[r4b.ChargeItemDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ChargeItemDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteChargeItemDefinition deletes a ChargeItemDefinition resource by ID.
func (c *ClientR4B) DeleteChargeItemDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ChargeItemDefinition", id)
}

// SearchChargeItemDefinition performs a search for ChargeItemDefinition resources.
func (c *ClientR4B) SearchChargeItemDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ChargeItemDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ChargeItemDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.ChargeItemDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ChargeItemDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ChargeItemDefinition)
		if !ok {
			return search.Result[r4b.ChargeItemDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ChargeItemDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCitation creates a new Citation resource.
func (c *ClientR4B) CreateCitation(ctx context.Context, resource r4b.Citation) (r4b.Citation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Citation{}, err
	}
	typed, ok := result.(r4b.Citation)
	if !ok {
		return r4b.Citation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCitation retrieves a Citation resource by ID.
func (c *ClientR4B) ReadCitation(ctx context.Context, id string) (r4b.Citation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Citation", id)
	if err != nil {
		return r4b.Citation{}, err
	}
	typed, ok := result.(r4b.Citation)
	if !ok {
		return r4b.Citation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCitation updates an existing Citation resource.
func (c *ClientR4B) UpdateCitation(ctx context.Context, resource r4b.Citation) (update.Result[r4b.Citation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Citation]{}, err
	}
	typed, ok := result.Resource.(r4b.Citation)
	if !ok {
		return update.Result[r4b.Citation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Citation]{Resource: typed, Created: result.Created}, nil
}

// DeleteCitation deletes a Citation resource by ID.
func (c *ClientR4B) DeleteCitation(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Citation", id)
}

// SearchCitation performs a search for Citation resources.
func (c *ClientR4B) SearchCitation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Citation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Citation", parameters, options)
	if err != nil {
		return search.Result[r4b.Citation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Citation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Citation)
		if !ok {
			return search.Result[r4b.Citation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Citation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClaim creates a new Claim resource.
func (c *ClientR4B) CreateClaim(ctx context.Context, resource r4b.Claim) (r4b.Claim, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Claim{}, err
	}
	typed, ok := result.(r4b.Claim)
	if !ok {
		return r4b.Claim{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClaim retrieves a Claim resource by ID.
func (c *ClientR4B) ReadClaim(ctx context.Context, id string) (r4b.Claim, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Claim", id)
	if err != nil {
		return r4b.Claim{}, err
	}
	typed, ok := result.(r4b.Claim)
	if !ok {
		return r4b.Claim{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClaim updates an existing Claim resource.
func (c *ClientR4B) UpdateClaim(ctx context.Context, resource r4b.Claim) (update.Result[r4b.Claim], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Claim]{}, err
	}
	typed, ok := result.Resource.(r4b.Claim)
	if !ok {
		return update.Result[r4b.Claim]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Claim]{Resource: typed, Created: result.Created}, nil
}

// DeleteClaim deletes a Claim resource by ID.
func (c *ClientR4B) DeleteClaim(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Claim", id)
}

// SearchClaim performs a search for Claim resources.
func (c *ClientR4B) SearchClaim(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Claim], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Claim", parameters, options)
	if err != nil {
		return search.Result[r4b.Claim]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Claim, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Claim)
		if !ok {
			return search.Result[r4b.Claim]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Claim]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClaimResponse creates a new ClaimResponse resource.
func (c *ClientR4B) CreateClaimResponse(ctx context.Context, resource r4b.ClaimResponse) (r4b.ClaimResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ClaimResponse{}, err
	}
	typed, ok := result.(r4b.ClaimResponse)
	if !ok {
		return r4b.ClaimResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClaimResponse retrieves a ClaimResponse resource by ID.
func (c *ClientR4B) ReadClaimResponse(ctx context.Context, id string) (r4b.ClaimResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ClaimResponse", id)
	if err != nil {
		return r4b.ClaimResponse{}, err
	}
	typed, ok := result.(r4b.ClaimResponse)
	if !ok {
		return r4b.ClaimResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClaimResponse updates an existing ClaimResponse resource.
func (c *ClientR4B) UpdateClaimResponse(ctx context.Context, resource r4b.ClaimResponse) (update.Result[r4b.ClaimResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ClaimResponse]{}, err
	}
	typed, ok := result.Resource.(r4b.ClaimResponse)
	if !ok {
		return update.Result[r4b.ClaimResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ClaimResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteClaimResponse deletes a ClaimResponse resource by ID.
func (c *ClientR4B) DeleteClaimResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ClaimResponse", id)
}

// SearchClaimResponse performs a search for ClaimResponse resources.
func (c *ClientR4B) SearchClaimResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ClaimResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ClaimResponse", parameters, options)
	if err != nil {
		return search.Result[r4b.ClaimResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ClaimResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ClaimResponse)
		if !ok {
			return search.Result[r4b.ClaimResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ClaimResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClinicalImpression creates a new ClinicalImpression resource.
func (c *ClientR4B) CreateClinicalImpression(ctx context.Context, resource r4b.ClinicalImpression) (r4b.ClinicalImpression, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ClinicalImpression{}, err
	}
	typed, ok := result.(r4b.ClinicalImpression)
	if !ok {
		return r4b.ClinicalImpression{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClinicalImpression retrieves a ClinicalImpression resource by ID.
func (c *ClientR4B) ReadClinicalImpression(ctx context.Context, id string) (r4b.ClinicalImpression, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ClinicalImpression", id)
	if err != nil {
		return r4b.ClinicalImpression{}, err
	}
	typed, ok := result.(r4b.ClinicalImpression)
	if !ok {
		return r4b.ClinicalImpression{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClinicalImpression updates an existing ClinicalImpression resource.
func (c *ClientR4B) UpdateClinicalImpression(ctx context.Context, resource r4b.ClinicalImpression) (update.Result[r4b.ClinicalImpression], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ClinicalImpression]{}, err
	}
	typed, ok := result.Resource.(r4b.ClinicalImpression)
	if !ok {
		return update.Result[r4b.ClinicalImpression]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ClinicalImpression]{Resource: typed, Created: result.Created}, nil
}

// DeleteClinicalImpression deletes a ClinicalImpression resource by ID.
func (c *ClientR4B) DeleteClinicalImpression(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ClinicalImpression", id)
}

// SearchClinicalImpression performs a search for ClinicalImpression resources.
func (c *ClientR4B) SearchClinicalImpression(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ClinicalImpression], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ClinicalImpression", parameters, options)
	if err != nil {
		return search.Result[r4b.ClinicalImpression]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ClinicalImpression, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ClinicalImpression)
		if !ok {
			return search.Result[r4b.ClinicalImpression]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ClinicalImpression]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateClinicalUseDefinition creates a new ClinicalUseDefinition resource.
func (c *ClientR4B) CreateClinicalUseDefinition(ctx context.Context, resource r4b.ClinicalUseDefinition) (r4b.ClinicalUseDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ClinicalUseDefinition{}, err
	}
	typed, ok := result.(r4b.ClinicalUseDefinition)
	if !ok {
		return r4b.ClinicalUseDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadClinicalUseDefinition retrieves a ClinicalUseDefinition resource by ID.
func (c *ClientR4B) ReadClinicalUseDefinition(ctx context.Context, id string) (r4b.ClinicalUseDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ClinicalUseDefinition", id)
	if err != nil {
		return r4b.ClinicalUseDefinition{}, err
	}
	typed, ok := result.(r4b.ClinicalUseDefinition)
	if !ok {
		return r4b.ClinicalUseDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateClinicalUseDefinition updates an existing ClinicalUseDefinition resource.
func (c *ClientR4B) UpdateClinicalUseDefinition(ctx context.Context, resource r4b.ClinicalUseDefinition) (update.Result[r4b.ClinicalUseDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ClinicalUseDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.ClinicalUseDefinition)
	if !ok {
		return update.Result[r4b.ClinicalUseDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ClinicalUseDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteClinicalUseDefinition deletes a ClinicalUseDefinition resource by ID.
func (c *ClientR4B) DeleteClinicalUseDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ClinicalUseDefinition", id)
}

// SearchClinicalUseDefinition performs a search for ClinicalUseDefinition resources.
func (c *ClientR4B) SearchClinicalUseDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ClinicalUseDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ClinicalUseDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.ClinicalUseDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ClinicalUseDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ClinicalUseDefinition)
		if !ok {
			return search.Result[r4b.ClinicalUseDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ClinicalUseDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCodeSystem creates a new CodeSystem resource.
func (c *ClientR4B) CreateCodeSystem(ctx context.Context, resource r4b.CodeSystem) (r4b.CodeSystem, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CodeSystem{}, err
	}
	typed, ok := result.(r4b.CodeSystem)
	if !ok {
		return r4b.CodeSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCodeSystem retrieves a CodeSystem resource by ID.
func (c *ClientR4B) ReadCodeSystem(ctx context.Context, id string) (r4b.CodeSystem, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CodeSystem", id)
	if err != nil {
		return r4b.CodeSystem{}, err
	}
	typed, ok := result.(r4b.CodeSystem)
	if !ok {
		return r4b.CodeSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCodeSystem updates an existing CodeSystem resource.
func (c *ClientR4B) UpdateCodeSystem(ctx context.Context, resource r4b.CodeSystem) (update.Result[r4b.CodeSystem], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CodeSystem]{}, err
	}
	typed, ok := result.Resource.(r4b.CodeSystem)
	if !ok {
		return update.Result[r4b.CodeSystem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CodeSystem]{Resource: typed, Created: result.Created}, nil
}

// DeleteCodeSystem deletes a CodeSystem resource by ID.
func (c *ClientR4B) DeleteCodeSystem(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CodeSystem", id)
}

// SearchCodeSystem performs a search for CodeSystem resources.
func (c *ClientR4B) SearchCodeSystem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CodeSystem], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CodeSystem", parameters, options)
	if err != nil {
		return search.Result[r4b.CodeSystem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CodeSystem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CodeSystem)
		if !ok {
			return search.Result[r4b.CodeSystem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CodeSystem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCommunication creates a new Communication resource.
func (c *ClientR4B) CreateCommunication(ctx context.Context, resource r4b.Communication) (r4b.Communication, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Communication{}, err
	}
	typed, ok := result.(r4b.Communication)
	if !ok {
		return r4b.Communication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCommunication retrieves a Communication resource by ID.
func (c *ClientR4B) ReadCommunication(ctx context.Context, id string) (r4b.Communication, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Communication", id)
	if err != nil {
		return r4b.Communication{}, err
	}
	typed, ok := result.(r4b.Communication)
	if !ok {
		return r4b.Communication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCommunication updates an existing Communication resource.
func (c *ClientR4B) UpdateCommunication(ctx context.Context, resource r4b.Communication) (update.Result[r4b.Communication], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Communication]{}, err
	}
	typed, ok := result.Resource.(r4b.Communication)
	if !ok {
		return update.Result[r4b.Communication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Communication]{Resource: typed, Created: result.Created}, nil
}

// DeleteCommunication deletes a Communication resource by ID.
func (c *ClientR4B) DeleteCommunication(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Communication", id)
}

// SearchCommunication performs a search for Communication resources.
func (c *ClientR4B) SearchCommunication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Communication], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Communication", parameters, options)
	if err != nil {
		return search.Result[r4b.Communication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Communication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Communication)
		if !ok {
			return search.Result[r4b.Communication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Communication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCommunicationRequest creates a new CommunicationRequest resource.
func (c *ClientR4B) CreateCommunicationRequest(ctx context.Context, resource r4b.CommunicationRequest) (r4b.CommunicationRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CommunicationRequest{}, err
	}
	typed, ok := result.(r4b.CommunicationRequest)
	if !ok {
		return r4b.CommunicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCommunicationRequest retrieves a CommunicationRequest resource by ID.
func (c *ClientR4B) ReadCommunicationRequest(ctx context.Context, id string) (r4b.CommunicationRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CommunicationRequest", id)
	if err != nil {
		return r4b.CommunicationRequest{}, err
	}
	typed, ok := result.(r4b.CommunicationRequest)
	if !ok {
		return r4b.CommunicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCommunicationRequest updates an existing CommunicationRequest resource.
func (c *ClientR4B) UpdateCommunicationRequest(ctx context.Context, resource r4b.CommunicationRequest) (update.Result[r4b.CommunicationRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CommunicationRequest]{}, err
	}
	typed, ok := result.Resource.(r4b.CommunicationRequest)
	if !ok {
		return update.Result[r4b.CommunicationRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CommunicationRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteCommunicationRequest deletes a CommunicationRequest resource by ID.
func (c *ClientR4B) DeleteCommunicationRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CommunicationRequest", id)
}

// SearchCommunicationRequest performs a search for CommunicationRequest resources.
func (c *ClientR4B) SearchCommunicationRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CommunicationRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CommunicationRequest", parameters, options)
	if err != nil {
		return search.Result[r4b.CommunicationRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CommunicationRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CommunicationRequest)
		if !ok {
			return search.Result[r4b.CommunicationRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CommunicationRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCompartmentDefinition creates a new CompartmentDefinition resource.
func (c *ClientR4B) CreateCompartmentDefinition(ctx context.Context, resource r4b.CompartmentDefinition) (r4b.CompartmentDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CompartmentDefinition{}, err
	}
	typed, ok := result.(r4b.CompartmentDefinition)
	if !ok {
		return r4b.CompartmentDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCompartmentDefinition retrieves a CompartmentDefinition resource by ID.
func (c *ClientR4B) ReadCompartmentDefinition(ctx context.Context, id string) (r4b.CompartmentDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CompartmentDefinition", id)
	if err != nil {
		return r4b.CompartmentDefinition{}, err
	}
	typed, ok := result.(r4b.CompartmentDefinition)
	if !ok {
		return r4b.CompartmentDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCompartmentDefinition updates an existing CompartmentDefinition resource.
func (c *ClientR4B) UpdateCompartmentDefinition(ctx context.Context, resource r4b.CompartmentDefinition) (update.Result[r4b.CompartmentDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CompartmentDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.CompartmentDefinition)
	if !ok {
		return update.Result[r4b.CompartmentDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CompartmentDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteCompartmentDefinition deletes a CompartmentDefinition resource by ID.
func (c *ClientR4B) DeleteCompartmentDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CompartmentDefinition", id)
}

// SearchCompartmentDefinition performs a search for CompartmentDefinition resources.
func (c *ClientR4B) SearchCompartmentDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CompartmentDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CompartmentDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.CompartmentDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CompartmentDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CompartmentDefinition)
		if !ok {
			return search.Result[r4b.CompartmentDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CompartmentDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateComposition creates a new Composition resource.
func (c *ClientR4B) CreateComposition(ctx context.Context, resource r4b.Composition) (r4b.Composition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Composition{}, err
	}
	typed, ok := result.(r4b.Composition)
	if !ok {
		return r4b.Composition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadComposition retrieves a Composition resource by ID.
func (c *ClientR4B) ReadComposition(ctx context.Context, id string) (r4b.Composition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Composition", id)
	if err != nil {
		return r4b.Composition{}, err
	}
	typed, ok := result.(r4b.Composition)
	if !ok {
		return r4b.Composition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateComposition updates an existing Composition resource.
func (c *ClientR4B) UpdateComposition(ctx context.Context, resource r4b.Composition) (update.Result[r4b.Composition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Composition]{}, err
	}
	typed, ok := result.Resource.(r4b.Composition)
	if !ok {
		return update.Result[r4b.Composition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Composition]{Resource: typed, Created: result.Created}, nil
}

// DeleteComposition deletes a Composition resource by ID.
func (c *ClientR4B) DeleteComposition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Composition", id)
}

// SearchComposition performs a search for Composition resources.
func (c *ClientR4B) SearchComposition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Composition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Composition", parameters, options)
	if err != nil {
		return search.Result[r4b.Composition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Composition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Composition)
		if !ok {
			return search.Result[r4b.Composition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Composition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateConceptMap creates a new ConceptMap resource.
func (c *ClientR4B) CreateConceptMap(ctx context.Context, resource r4b.ConceptMap) (r4b.ConceptMap, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ConceptMap{}, err
	}
	typed, ok := result.(r4b.ConceptMap)
	if !ok {
		return r4b.ConceptMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadConceptMap retrieves a ConceptMap resource by ID.
func (c *ClientR4B) ReadConceptMap(ctx context.Context, id string) (r4b.ConceptMap, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ConceptMap", id)
	if err != nil {
		return r4b.ConceptMap{}, err
	}
	typed, ok := result.(r4b.ConceptMap)
	if !ok {
		return r4b.ConceptMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateConceptMap updates an existing ConceptMap resource.
func (c *ClientR4B) UpdateConceptMap(ctx context.Context, resource r4b.ConceptMap) (update.Result[r4b.ConceptMap], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ConceptMap]{}, err
	}
	typed, ok := result.Resource.(r4b.ConceptMap)
	if !ok {
		return update.Result[r4b.ConceptMap]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ConceptMap]{Resource: typed, Created: result.Created}, nil
}

// DeleteConceptMap deletes a ConceptMap resource by ID.
func (c *ClientR4B) DeleteConceptMap(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ConceptMap", id)
}

// SearchConceptMap performs a search for ConceptMap resources.
func (c *ClientR4B) SearchConceptMap(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ConceptMap], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ConceptMap", parameters, options)
	if err != nil {
		return search.Result[r4b.ConceptMap]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ConceptMap, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ConceptMap)
		if !ok {
			return search.Result[r4b.ConceptMap]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ConceptMap]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCondition creates a new Condition resource.
func (c *ClientR4B) CreateCondition(ctx context.Context, resource r4b.Condition) (r4b.Condition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Condition{}, err
	}
	typed, ok := result.(r4b.Condition)
	if !ok {
		return r4b.Condition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCondition retrieves a Condition resource by ID.
func (c *ClientR4B) ReadCondition(ctx context.Context, id string) (r4b.Condition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Condition", id)
	if err != nil {
		return r4b.Condition{}, err
	}
	typed, ok := result.(r4b.Condition)
	if !ok {
		return r4b.Condition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCondition updates an existing Condition resource.
func (c *ClientR4B) UpdateCondition(ctx context.Context, resource r4b.Condition) (update.Result[r4b.Condition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Condition]{}, err
	}
	typed, ok := result.Resource.(r4b.Condition)
	if !ok {
		return update.Result[r4b.Condition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Condition]{Resource: typed, Created: result.Created}, nil
}

// DeleteCondition deletes a Condition resource by ID.
func (c *ClientR4B) DeleteCondition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Condition", id)
}

// SearchCondition performs a search for Condition resources.
func (c *ClientR4B) SearchCondition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Condition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Condition", parameters, options)
	if err != nil {
		return search.Result[r4b.Condition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Condition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Condition)
		if !ok {
			return search.Result[r4b.Condition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Condition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateConsent creates a new Consent resource.
func (c *ClientR4B) CreateConsent(ctx context.Context, resource r4b.Consent) (r4b.Consent, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Consent{}, err
	}
	typed, ok := result.(r4b.Consent)
	if !ok {
		return r4b.Consent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadConsent retrieves a Consent resource by ID.
func (c *ClientR4B) ReadConsent(ctx context.Context, id string) (r4b.Consent, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Consent", id)
	if err != nil {
		return r4b.Consent{}, err
	}
	typed, ok := result.(r4b.Consent)
	if !ok {
		return r4b.Consent{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateConsent updates an existing Consent resource.
func (c *ClientR4B) UpdateConsent(ctx context.Context, resource r4b.Consent) (update.Result[r4b.Consent], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Consent]{}, err
	}
	typed, ok := result.Resource.(r4b.Consent)
	if !ok {
		return update.Result[r4b.Consent]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Consent]{Resource: typed, Created: result.Created}, nil
}

// DeleteConsent deletes a Consent resource by ID.
func (c *ClientR4B) DeleteConsent(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Consent", id)
}

// SearchConsent performs a search for Consent resources.
func (c *ClientR4B) SearchConsent(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Consent], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Consent", parameters, options)
	if err != nil {
		return search.Result[r4b.Consent]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Consent, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Consent)
		if !ok {
			return search.Result[r4b.Consent]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Consent]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateContract creates a new Contract resource.
func (c *ClientR4B) CreateContract(ctx context.Context, resource r4b.Contract) (r4b.Contract, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Contract{}, err
	}
	typed, ok := result.(r4b.Contract)
	if !ok {
		return r4b.Contract{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadContract retrieves a Contract resource by ID.
func (c *ClientR4B) ReadContract(ctx context.Context, id string) (r4b.Contract, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Contract", id)
	if err != nil {
		return r4b.Contract{}, err
	}
	typed, ok := result.(r4b.Contract)
	if !ok {
		return r4b.Contract{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateContract updates an existing Contract resource.
func (c *ClientR4B) UpdateContract(ctx context.Context, resource r4b.Contract) (update.Result[r4b.Contract], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Contract]{}, err
	}
	typed, ok := result.Resource.(r4b.Contract)
	if !ok {
		return update.Result[r4b.Contract]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Contract]{Resource: typed, Created: result.Created}, nil
}

// DeleteContract deletes a Contract resource by ID.
func (c *ClientR4B) DeleteContract(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Contract", id)
}

// SearchContract performs a search for Contract resources.
func (c *ClientR4B) SearchContract(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Contract], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Contract", parameters, options)
	if err != nil {
		return search.Result[r4b.Contract]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Contract, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Contract)
		if !ok {
			return search.Result[r4b.Contract]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Contract]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverage creates a new Coverage resource.
func (c *ClientR4B) CreateCoverage(ctx context.Context, resource r4b.Coverage) (r4b.Coverage, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Coverage{}, err
	}
	typed, ok := result.(r4b.Coverage)
	if !ok {
		return r4b.Coverage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverage retrieves a Coverage resource by ID.
func (c *ClientR4B) ReadCoverage(ctx context.Context, id string) (r4b.Coverage, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Coverage", id)
	if err != nil {
		return r4b.Coverage{}, err
	}
	typed, ok := result.(r4b.Coverage)
	if !ok {
		return r4b.Coverage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverage updates an existing Coverage resource.
func (c *ClientR4B) UpdateCoverage(ctx context.Context, resource r4b.Coverage) (update.Result[r4b.Coverage], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Coverage]{}, err
	}
	typed, ok := result.Resource.(r4b.Coverage)
	if !ok {
		return update.Result[r4b.Coverage]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Coverage]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverage deletes a Coverage resource by ID.
func (c *ClientR4B) DeleteCoverage(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Coverage", id)
}

// SearchCoverage performs a search for Coverage resources.
func (c *ClientR4B) SearchCoverage(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Coverage], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Coverage", parameters, options)
	if err != nil {
		return search.Result[r4b.Coverage]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Coverage, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Coverage)
		if !ok {
			return search.Result[r4b.Coverage]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Coverage]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverageEligibilityRequest creates a new CoverageEligibilityRequest resource.
func (c *ClientR4B) CreateCoverageEligibilityRequest(ctx context.Context, resource r4b.CoverageEligibilityRequest) (r4b.CoverageEligibilityRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CoverageEligibilityRequest{}, err
	}
	typed, ok := result.(r4b.CoverageEligibilityRequest)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverageEligibilityRequest retrieves a CoverageEligibilityRequest resource by ID.
func (c *ClientR4B) ReadCoverageEligibilityRequest(ctx context.Context, id string) (r4b.CoverageEligibilityRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CoverageEligibilityRequest", id)
	if err != nil {
		return r4b.CoverageEligibilityRequest{}, err
	}
	typed, ok := result.(r4b.CoverageEligibilityRequest)
	if !ok {
		return r4b.CoverageEligibilityRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverageEligibilityRequest updates an existing CoverageEligibilityRequest resource.
func (c *ClientR4B) UpdateCoverageEligibilityRequest(ctx context.Context, resource r4b.CoverageEligibilityRequest) (update.Result[r4b.CoverageEligibilityRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CoverageEligibilityRequest]{}, err
	}
	typed, ok := result.Resource.(r4b.CoverageEligibilityRequest)
	if !ok {
		return update.Result[r4b.CoverageEligibilityRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CoverageEligibilityRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverageEligibilityRequest deletes a CoverageEligibilityRequest resource by ID.
func (c *ClientR4B) DeleteCoverageEligibilityRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CoverageEligibilityRequest", id)
}

// SearchCoverageEligibilityRequest performs a search for CoverageEligibilityRequest resources.
func (c *ClientR4B) SearchCoverageEligibilityRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CoverageEligibilityRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CoverageEligibilityRequest", parameters, options)
	if err != nil {
		return search.Result[r4b.CoverageEligibilityRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CoverageEligibilityRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CoverageEligibilityRequest)
		if !ok {
			return search.Result[r4b.CoverageEligibilityRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CoverageEligibilityRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateCoverageEligibilityResponse creates a new CoverageEligibilityResponse resource.
func (c *ClientR4B) CreateCoverageEligibilityResponse(ctx context.Context, resource r4b.CoverageEligibilityResponse) (r4b.CoverageEligibilityResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.CoverageEligibilityResponse{}, err
	}
	typed, ok := result.(r4b.CoverageEligibilityResponse)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadCoverageEligibilityResponse retrieves a CoverageEligibilityResponse resource by ID.
func (c *ClientR4B) ReadCoverageEligibilityResponse(ctx context.Context, id string) (r4b.CoverageEligibilityResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "CoverageEligibilityResponse", id)
	if err != nil {
		return r4b.CoverageEligibilityResponse{}, err
	}
	typed, ok := result.(r4b.CoverageEligibilityResponse)
	if !ok {
		return r4b.CoverageEligibilityResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateCoverageEligibilityResponse updates an existing CoverageEligibilityResponse resource.
func (c *ClientR4B) UpdateCoverageEligibilityResponse(ctx context.Context, resource r4b.CoverageEligibilityResponse) (update.Result[r4b.CoverageEligibilityResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.CoverageEligibilityResponse]{}, err
	}
	typed, ok := result.Resource.(r4b.CoverageEligibilityResponse)
	if !ok {
		return update.Result[r4b.CoverageEligibilityResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.CoverageEligibilityResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteCoverageEligibilityResponse deletes a CoverageEligibilityResponse resource by ID.
func (c *ClientR4B) DeleteCoverageEligibilityResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "CoverageEligibilityResponse", id)
}

// SearchCoverageEligibilityResponse performs a search for CoverageEligibilityResponse resources.
func (c *ClientR4B) SearchCoverageEligibilityResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.CoverageEligibilityResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "CoverageEligibilityResponse", parameters, options)
	if err != nil {
		return search.Result[r4b.CoverageEligibilityResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.CoverageEligibilityResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.CoverageEligibilityResponse)
		if !ok {
			return search.Result[r4b.CoverageEligibilityResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.CoverageEligibilityResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDetectedIssue creates a new DetectedIssue resource.
func (c *ClientR4B) CreateDetectedIssue(ctx context.Context, resource r4b.DetectedIssue) (r4b.DetectedIssue, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DetectedIssue{}, err
	}
	typed, ok := result.(r4b.DetectedIssue)
	if !ok {
		return r4b.DetectedIssue{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDetectedIssue retrieves a DetectedIssue resource by ID.
func (c *ClientR4B) ReadDetectedIssue(ctx context.Context, id string) (r4b.DetectedIssue, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DetectedIssue", id)
	if err != nil {
		return r4b.DetectedIssue{}, err
	}
	typed, ok := result.(r4b.DetectedIssue)
	if !ok {
		return r4b.DetectedIssue{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDetectedIssue updates an existing DetectedIssue resource.
func (c *ClientR4B) UpdateDetectedIssue(ctx context.Context, resource r4b.DetectedIssue) (update.Result[r4b.DetectedIssue], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DetectedIssue]{}, err
	}
	typed, ok := result.Resource.(r4b.DetectedIssue)
	if !ok {
		return update.Result[r4b.DetectedIssue]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DetectedIssue]{Resource: typed, Created: result.Created}, nil
}

// DeleteDetectedIssue deletes a DetectedIssue resource by ID.
func (c *ClientR4B) DeleteDetectedIssue(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DetectedIssue", id)
}

// SearchDetectedIssue performs a search for DetectedIssue resources.
func (c *ClientR4B) SearchDetectedIssue(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DetectedIssue], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DetectedIssue", parameters, options)
	if err != nil {
		return search.Result[r4b.DetectedIssue]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DetectedIssue, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DetectedIssue)
		if !ok {
			return search.Result[r4b.DetectedIssue]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DetectedIssue]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDevice creates a new Device resource.
func (c *ClientR4B) CreateDevice(ctx context.Context, resource r4b.Device) (r4b.Device, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Device{}, err
	}
	typed, ok := result.(r4b.Device)
	if !ok {
		return r4b.Device{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDevice retrieves a Device resource by ID.
func (c *ClientR4B) ReadDevice(ctx context.Context, id string) (r4b.Device, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Device", id)
	if err != nil {
		return r4b.Device{}, err
	}
	typed, ok := result.(r4b.Device)
	if !ok {
		return r4b.Device{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDevice updates an existing Device resource.
func (c *ClientR4B) UpdateDevice(ctx context.Context, resource r4b.Device) (update.Result[r4b.Device], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Device]{}, err
	}
	typed, ok := result.Resource.(r4b.Device)
	if !ok {
		return update.Result[r4b.Device]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Device]{Resource: typed, Created: result.Created}, nil
}

// DeleteDevice deletes a Device resource by ID.
func (c *ClientR4B) DeleteDevice(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Device", id)
}

// SearchDevice performs a search for Device resources.
func (c *ClientR4B) SearchDevice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Device], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Device", parameters, options)
	if err != nil {
		return search.Result[r4b.Device]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Device, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Device)
		if !ok {
			return search.Result[r4b.Device]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Device]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceDefinition creates a new DeviceDefinition resource.
func (c *ClientR4B) CreateDeviceDefinition(ctx context.Context, resource r4b.DeviceDefinition) (r4b.DeviceDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceDefinition{}, err
	}
	typed, ok := result.(r4b.DeviceDefinition)
	if !ok {
		return r4b.DeviceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceDefinition retrieves a DeviceDefinition resource by ID.
func (c *ClientR4B) ReadDeviceDefinition(ctx context.Context, id string) (r4b.DeviceDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DeviceDefinition", id)
	if err != nil {
		return r4b.DeviceDefinition{}, err
	}
	typed, ok := result.(r4b.DeviceDefinition)
	if !ok {
		return r4b.DeviceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceDefinition updates an existing DeviceDefinition resource.
func (c *ClientR4B) UpdateDeviceDefinition(ctx context.Context, resource r4b.DeviceDefinition) (update.Result[r4b.DeviceDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.DeviceDefinition)
	if !ok {
		return update.Result[r4b.DeviceDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DeviceDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceDefinition deletes a DeviceDefinition resource by ID.
func (c *ClientR4B) DeleteDeviceDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DeviceDefinition", id)
}

// SearchDeviceDefinition performs a search for DeviceDefinition resources.
func (c *ClientR4B) SearchDeviceDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DeviceDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DeviceDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.DeviceDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DeviceDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DeviceDefinition)
		if !ok {
			return search.Result[r4b.DeviceDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DeviceDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceMetric creates a new DeviceMetric resource.
func (c *ClientR4B) CreateDeviceMetric(ctx context.Context, resource r4b.DeviceMetric) (r4b.DeviceMetric, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceMetric{}, err
	}
	typed, ok := result.(r4b.DeviceMetric)
	if !ok {
		return r4b.DeviceMetric{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceMetric retrieves a DeviceMetric resource by ID.
func (c *ClientR4B) ReadDeviceMetric(ctx context.Context, id string) (r4b.DeviceMetric, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DeviceMetric", id)
	if err != nil {
		return r4b.DeviceMetric{}, err
	}
	typed, ok := result.(r4b.DeviceMetric)
	if !ok {
		return r4b.DeviceMetric{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceMetric updates an existing DeviceMetric resource.
func (c *ClientR4B) UpdateDeviceMetric(ctx context.Context, resource r4b.DeviceMetric) (update.Result[r4b.DeviceMetric], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceMetric]{}, err
	}
	typed, ok := result.Resource.(r4b.DeviceMetric)
	if !ok {
		return update.Result[r4b.DeviceMetric]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DeviceMetric]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceMetric deletes a DeviceMetric resource by ID.
func (c *ClientR4B) DeleteDeviceMetric(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DeviceMetric", id)
}

// SearchDeviceMetric performs a search for DeviceMetric resources.
func (c *ClientR4B) SearchDeviceMetric(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DeviceMetric], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DeviceMetric", parameters, options)
	if err != nil {
		return search.Result[r4b.DeviceMetric]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DeviceMetric, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DeviceMetric)
		if !ok {
			return search.Result[r4b.DeviceMetric]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DeviceMetric]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceRequest creates a new DeviceRequest resource.
func (c *ClientR4B) CreateDeviceRequest(ctx context.Context, resource r4b.DeviceRequest) (r4b.DeviceRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceRequest{}, err
	}
	typed, ok := result.(r4b.DeviceRequest)
	if !ok {
		return r4b.DeviceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceRequest retrieves a DeviceRequest resource by ID.
func (c *ClientR4B) ReadDeviceRequest(ctx context.Context, id string) (r4b.DeviceRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DeviceRequest", id)
	if err != nil {
		return r4b.DeviceRequest{}, err
	}
	typed, ok := result.(r4b.DeviceRequest)
	if !ok {
		return r4b.DeviceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceRequest updates an existing DeviceRequest resource.
func (c *ClientR4B) UpdateDeviceRequest(ctx context.Context, resource r4b.DeviceRequest) (update.Result[r4b.DeviceRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceRequest]{}, err
	}
	typed, ok := result.Resource.(r4b.DeviceRequest)
	if !ok {
		return update.Result[r4b.DeviceRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DeviceRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceRequest deletes a DeviceRequest resource by ID.
func (c *ClientR4B) DeleteDeviceRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DeviceRequest", id)
}

// SearchDeviceRequest performs a search for DeviceRequest resources.
func (c *ClientR4B) SearchDeviceRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DeviceRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DeviceRequest", parameters, options)
	if err != nil {
		return search.Result[r4b.DeviceRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DeviceRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DeviceRequest)
		if !ok {
			return search.Result[r4b.DeviceRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DeviceRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDeviceUseStatement creates a new DeviceUseStatement resource.
func (c *ClientR4B) CreateDeviceUseStatement(ctx context.Context, resource r4b.DeviceUseStatement) (r4b.DeviceUseStatement, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DeviceUseStatement{}, err
	}
	typed, ok := result.(r4b.DeviceUseStatement)
	if !ok {
		return r4b.DeviceUseStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDeviceUseStatement retrieves a DeviceUseStatement resource by ID.
func (c *ClientR4B) ReadDeviceUseStatement(ctx context.Context, id string) (r4b.DeviceUseStatement, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DeviceUseStatement", id)
	if err != nil {
		return r4b.DeviceUseStatement{}, err
	}
	typed, ok := result.(r4b.DeviceUseStatement)
	if !ok {
		return r4b.DeviceUseStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDeviceUseStatement updates an existing DeviceUseStatement resource.
func (c *ClientR4B) UpdateDeviceUseStatement(ctx context.Context, resource r4b.DeviceUseStatement) (update.Result[r4b.DeviceUseStatement], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DeviceUseStatement]{}, err
	}
	typed, ok := result.Resource.(r4b.DeviceUseStatement)
	if !ok {
		return update.Result[r4b.DeviceUseStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DeviceUseStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteDeviceUseStatement deletes a DeviceUseStatement resource by ID.
func (c *ClientR4B) DeleteDeviceUseStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DeviceUseStatement", id)
}

// SearchDeviceUseStatement performs a search for DeviceUseStatement resources.
func (c *ClientR4B) SearchDeviceUseStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DeviceUseStatement], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DeviceUseStatement", parameters, options)
	if err != nil {
		return search.Result[r4b.DeviceUseStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DeviceUseStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DeviceUseStatement)
		if !ok {
			return search.Result[r4b.DeviceUseStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DeviceUseStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDiagnosticReport creates a new DiagnosticReport resource.
func (c *ClientR4B) CreateDiagnosticReport(ctx context.Context, resource r4b.DiagnosticReport) (r4b.DiagnosticReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DiagnosticReport{}, err
	}
	typed, ok := result.(r4b.DiagnosticReport)
	if !ok {
		return r4b.DiagnosticReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDiagnosticReport retrieves a DiagnosticReport resource by ID.
func (c *ClientR4B) ReadDiagnosticReport(ctx context.Context, id string) (r4b.DiagnosticReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DiagnosticReport", id)
	if err != nil {
		return r4b.DiagnosticReport{}, err
	}
	typed, ok := result.(r4b.DiagnosticReport)
	if !ok {
		return r4b.DiagnosticReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDiagnosticReport updates an existing DiagnosticReport resource.
func (c *ClientR4B) UpdateDiagnosticReport(ctx context.Context, resource r4b.DiagnosticReport) (update.Result[r4b.DiagnosticReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DiagnosticReport]{}, err
	}
	typed, ok := result.Resource.(r4b.DiagnosticReport)
	if !ok {
		return update.Result[r4b.DiagnosticReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DiagnosticReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteDiagnosticReport deletes a DiagnosticReport resource by ID.
func (c *ClientR4B) DeleteDiagnosticReport(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DiagnosticReport", id)
}

// SearchDiagnosticReport performs a search for DiagnosticReport resources.
func (c *ClientR4B) SearchDiagnosticReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DiagnosticReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DiagnosticReport", parameters, options)
	if err != nil {
		return search.Result[r4b.DiagnosticReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DiagnosticReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DiagnosticReport)
		if !ok {
			return search.Result[r4b.DiagnosticReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DiagnosticReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDocumentManifest creates a new DocumentManifest resource.
func (c *ClientR4B) CreateDocumentManifest(ctx context.Context, resource r4b.DocumentManifest) (r4b.DocumentManifest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DocumentManifest{}, err
	}
	typed, ok := result.(r4b.DocumentManifest)
	if !ok {
		return r4b.DocumentManifest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDocumentManifest retrieves a DocumentManifest resource by ID.
func (c *ClientR4B) ReadDocumentManifest(ctx context.Context, id string) (r4b.DocumentManifest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DocumentManifest", id)
	if err != nil {
		return r4b.DocumentManifest{}, err
	}
	typed, ok := result.(r4b.DocumentManifest)
	if !ok {
		return r4b.DocumentManifest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDocumentManifest updates an existing DocumentManifest resource.
func (c *ClientR4B) UpdateDocumentManifest(ctx context.Context, resource r4b.DocumentManifest) (update.Result[r4b.DocumentManifest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DocumentManifest]{}, err
	}
	typed, ok := result.Resource.(r4b.DocumentManifest)
	if !ok {
		return update.Result[r4b.DocumentManifest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DocumentManifest]{Resource: typed, Created: result.Created}, nil
}

// DeleteDocumentManifest deletes a DocumentManifest resource by ID.
func (c *ClientR4B) DeleteDocumentManifest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DocumentManifest", id)
}

// SearchDocumentManifest performs a search for DocumentManifest resources.
func (c *ClientR4B) SearchDocumentManifest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DocumentManifest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DocumentManifest", parameters, options)
	if err != nil {
		return search.Result[r4b.DocumentManifest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DocumentManifest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DocumentManifest)
		if !ok {
			return search.Result[r4b.DocumentManifest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DocumentManifest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateDocumentReference creates a new DocumentReference resource.
func (c *ClientR4B) CreateDocumentReference(ctx context.Context, resource r4b.DocumentReference) (r4b.DocumentReference, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.DocumentReference{}, err
	}
	typed, ok := result.(r4b.DocumentReference)
	if !ok {
		return r4b.DocumentReference{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadDocumentReference retrieves a DocumentReference resource by ID.
func (c *ClientR4B) ReadDocumentReference(ctx context.Context, id string) (r4b.DocumentReference, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "DocumentReference", id)
	if err != nil {
		return r4b.DocumentReference{}, err
	}
	typed, ok := result.(r4b.DocumentReference)
	if !ok {
		return r4b.DocumentReference{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateDocumentReference updates an existing DocumentReference resource.
func (c *ClientR4B) UpdateDocumentReference(ctx context.Context, resource r4b.DocumentReference) (update.Result[r4b.DocumentReference], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.DocumentReference]{}, err
	}
	typed, ok := result.Resource.(r4b.DocumentReference)
	if !ok {
		return update.Result[r4b.DocumentReference]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.DocumentReference]{Resource: typed, Created: result.Created}, nil
}

// DeleteDocumentReference deletes a DocumentReference resource by ID.
func (c *ClientR4B) DeleteDocumentReference(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "DocumentReference", id)
}

// SearchDocumentReference performs a search for DocumentReference resources.
func (c *ClientR4B) SearchDocumentReference(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.DocumentReference], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "DocumentReference", parameters, options)
	if err != nil {
		return search.Result[r4b.DocumentReference]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.DocumentReference, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.DocumentReference)
		if !ok {
			return search.Result[r4b.DocumentReference]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.DocumentReference]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEncounter creates a new Encounter resource.
func (c *ClientR4B) CreateEncounter(ctx context.Context, resource r4b.Encounter) (r4b.Encounter, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Encounter{}, err
	}
	typed, ok := result.(r4b.Encounter)
	if !ok {
		return r4b.Encounter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEncounter retrieves a Encounter resource by ID.
func (c *ClientR4B) ReadEncounter(ctx context.Context, id string) (r4b.Encounter, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Encounter", id)
	if err != nil {
		return r4b.Encounter{}, err
	}
	typed, ok := result.(r4b.Encounter)
	if !ok {
		return r4b.Encounter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEncounter updates an existing Encounter resource.
func (c *ClientR4B) UpdateEncounter(ctx context.Context, resource r4b.Encounter) (update.Result[r4b.Encounter], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Encounter]{}, err
	}
	typed, ok := result.Resource.(r4b.Encounter)
	if !ok {
		return update.Result[r4b.Encounter]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Encounter]{Resource: typed, Created: result.Created}, nil
}

// DeleteEncounter deletes a Encounter resource by ID.
func (c *ClientR4B) DeleteEncounter(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Encounter", id)
}

// SearchEncounter performs a search for Encounter resources.
func (c *ClientR4B) SearchEncounter(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Encounter], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Encounter", parameters, options)
	if err != nil {
		return search.Result[r4b.Encounter]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Encounter, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Encounter)
		if !ok {
			return search.Result[r4b.Encounter]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Encounter]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEndpoint creates a new Endpoint resource.
func (c *ClientR4B) CreateEndpoint(ctx context.Context, resource r4b.Endpoint) (r4b.Endpoint, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Endpoint{}, err
	}
	typed, ok := result.(r4b.Endpoint)
	if !ok {
		return r4b.Endpoint{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEndpoint retrieves a Endpoint resource by ID.
func (c *ClientR4B) ReadEndpoint(ctx context.Context, id string) (r4b.Endpoint, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Endpoint", id)
	if err != nil {
		return r4b.Endpoint{}, err
	}
	typed, ok := result.(r4b.Endpoint)
	if !ok {
		return r4b.Endpoint{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEndpoint updates an existing Endpoint resource.
func (c *ClientR4B) UpdateEndpoint(ctx context.Context, resource r4b.Endpoint) (update.Result[r4b.Endpoint], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Endpoint]{}, err
	}
	typed, ok := result.Resource.(r4b.Endpoint)
	if !ok {
		return update.Result[r4b.Endpoint]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Endpoint]{Resource: typed, Created: result.Created}, nil
}

// DeleteEndpoint deletes a Endpoint resource by ID.
func (c *ClientR4B) DeleteEndpoint(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Endpoint", id)
}

// SearchEndpoint performs a search for Endpoint resources.
func (c *ClientR4B) SearchEndpoint(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Endpoint], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Endpoint", parameters, options)
	if err != nil {
		return search.Result[r4b.Endpoint]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Endpoint, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Endpoint)
		if !ok {
			return search.Result[r4b.Endpoint]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Endpoint]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEnrollmentRequest creates a new EnrollmentRequest resource.
func (c *ClientR4B) CreateEnrollmentRequest(ctx context.Context, resource r4b.EnrollmentRequest) (r4b.EnrollmentRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.EnrollmentRequest{}, err
	}
	typed, ok := result.(r4b.EnrollmentRequest)
	if !ok {
		return r4b.EnrollmentRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEnrollmentRequest retrieves a EnrollmentRequest resource by ID.
func (c *ClientR4B) ReadEnrollmentRequest(ctx context.Context, id string) (r4b.EnrollmentRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "EnrollmentRequest", id)
	if err != nil {
		return r4b.EnrollmentRequest{}, err
	}
	typed, ok := result.(r4b.EnrollmentRequest)
	if !ok {
		return r4b.EnrollmentRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEnrollmentRequest updates an existing EnrollmentRequest resource.
func (c *ClientR4B) UpdateEnrollmentRequest(ctx context.Context, resource r4b.EnrollmentRequest) (update.Result[r4b.EnrollmentRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EnrollmentRequest]{}, err
	}
	typed, ok := result.Resource.(r4b.EnrollmentRequest)
	if !ok {
		return update.Result[r4b.EnrollmentRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.EnrollmentRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteEnrollmentRequest deletes a EnrollmentRequest resource by ID.
func (c *ClientR4B) DeleteEnrollmentRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "EnrollmentRequest", id)
}

// SearchEnrollmentRequest performs a search for EnrollmentRequest resources.
func (c *ClientR4B) SearchEnrollmentRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.EnrollmentRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "EnrollmentRequest", parameters, options)
	if err != nil {
		return search.Result[r4b.EnrollmentRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.EnrollmentRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.EnrollmentRequest)
		if !ok {
			return search.Result[r4b.EnrollmentRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.EnrollmentRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEnrollmentResponse creates a new EnrollmentResponse resource.
func (c *ClientR4B) CreateEnrollmentResponse(ctx context.Context, resource r4b.EnrollmentResponse) (r4b.EnrollmentResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.EnrollmentResponse{}, err
	}
	typed, ok := result.(r4b.EnrollmentResponse)
	if !ok {
		return r4b.EnrollmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEnrollmentResponse retrieves a EnrollmentResponse resource by ID.
func (c *ClientR4B) ReadEnrollmentResponse(ctx context.Context, id string) (r4b.EnrollmentResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "EnrollmentResponse", id)
	if err != nil {
		return r4b.EnrollmentResponse{}, err
	}
	typed, ok := result.(r4b.EnrollmentResponse)
	if !ok {
		return r4b.EnrollmentResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEnrollmentResponse updates an existing EnrollmentResponse resource.
func (c *ClientR4B) UpdateEnrollmentResponse(ctx context.Context, resource r4b.EnrollmentResponse) (update.Result[r4b.EnrollmentResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EnrollmentResponse]{}, err
	}
	typed, ok := result.Resource.(r4b.EnrollmentResponse)
	if !ok {
		return update.Result[r4b.EnrollmentResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.EnrollmentResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteEnrollmentResponse deletes a EnrollmentResponse resource by ID.
func (c *ClientR4B) DeleteEnrollmentResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "EnrollmentResponse", id)
}

// SearchEnrollmentResponse performs a search for EnrollmentResponse resources.
func (c *ClientR4B) SearchEnrollmentResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.EnrollmentResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "EnrollmentResponse", parameters, options)
	if err != nil {
		return search.Result[r4b.EnrollmentResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.EnrollmentResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.EnrollmentResponse)
		if !ok {
			return search.Result[r4b.EnrollmentResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.EnrollmentResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEpisodeOfCare creates a new EpisodeOfCare resource.
func (c *ClientR4B) CreateEpisodeOfCare(ctx context.Context, resource r4b.EpisodeOfCare) (r4b.EpisodeOfCare, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.EpisodeOfCare{}, err
	}
	typed, ok := result.(r4b.EpisodeOfCare)
	if !ok {
		return r4b.EpisodeOfCare{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEpisodeOfCare retrieves a EpisodeOfCare resource by ID.
func (c *ClientR4B) ReadEpisodeOfCare(ctx context.Context, id string) (r4b.EpisodeOfCare, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "EpisodeOfCare", id)
	if err != nil {
		return r4b.EpisodeOfCare{}, err
	}
	typed, ok := result.(r4b.EpisodeOfCare)
	if !ok {
		return r4b.EpisodeOfCare{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEpisodeOfCare updates an existing EpisodeOfCare resource.
func (c *ClientR4B) UpdateEpisodeOfCare(ctx context.Context, resource r4b.EpisodeOfCare) (update.Result[r4b.EpisodeOfCare], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EpisodeOfCare]{}, err
	}
	typed, ok := result.Resource.(r4b.EpisodeOfCare)
	if !ok {
		return update.Result[r4b.EpisodeOfCare]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.EpisodeOfCare]{Resource: typed, Created: result.Created}, nil
}

// DeleteEpisodeOfCare deletes a EpisodeOfCare resource by ID.
func (c *ClientR4B) DeleteEpisodeOfCare(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "EpisodeOfCare", id)
}

// SearchEpisodeOfCare performs a search for EpisodeOfCare resources.
func (c *ClientR4B) SearchEpisodeOfCare(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.EpisodeOfCare], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "EpisodeOfCare", parameters, options)
	if err != nil {
		return search.Result[r4b.EpisodeOfCare]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.EpisodeOfCare, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.EpisodeOfCare)
		if !ok {
			return search.Result[r4b.EpisodeOfCare]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.EpisodeOfCare]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEventDefinition creates a new EventDefinition resource.
func (c *ClientR4B) CreateEventDefinition(ctx context.Context, resource r4b.EventDefinition) (r4b.EventDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.EventDefinition{}, err
	}
	typed, ok := result.(r4b.EventDefinition)
	if !ok {
		return r4b.EventDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEventDefinition retrieves a EventDefinition resource by ID.
func (c *ClientR4B) ReadEventDefinition(ctx context.Context, id string) (r4b.EventDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "EventDefinition", id)
	if err != nil {
		return r4b.EventDefinition{}, err
	}
	typed, ok := result.(r4b.EventDefinition)
	if !ok {
		return r4b.EventDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEventDefinition updates an existing EventDefinition resource.
func (c *ClientR4B) UpdateEventDefinition(ctx context.Context, resource r4b.EventDefinition) (update.Result[r4b.EventDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EventDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.EventDefinition)
	if !ok {
		return update.Result[r4b.EventDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.EventDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteEventDefinition deletes a EventDefinition resource by ID.
func (c *ClientR4B) DeleteEventDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "EventDefinition", id)
}

// SearchEventDefinition performs a search for EventDefinition resources.
func (c *ClientR4B) SearchEventDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.EventDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "EventDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.EventDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.EventDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.EventDefinition)
		if !ok {
			return search.Result[r4b.EventDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.EventDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidence creates a new Evidence resource.
func (c *ClientR4B) CreateEvidence(ctx context.Context, resource r4b.Evidence) (r4b.Evidence, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Evidence{}, err
	}
	typed, ok := result.(r4b.Evidence)
	if !ok {
		return r4b.Evidence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidence retrieves a Evidence resource by ID.
func (c *ClientR4B) ReadEvidence(ctx context.Context, id string) (r4b.Evidence, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Evidence", id)
	if err != nil {
		return r4b.Evidence{}, err
	}
	typed, ok := result.(r4b.Evidence)
	if !ok {
		return r4b.Evidence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidence updates an existing Evidence resource.
func (c *ClientR4B) UpdateEvidence(ctx context.Context, resource r4b.Evidence) (update.Result[r4b.Evidence], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Evidence]{}, err
	}
	typed, ok := result.Resource.(r4b.Evidence)
	if !ok {
		return update.Result[r4b.Evidence]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Evidence]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidence deletes a Evidence resource by ID.
func (c *ClientR4B) DeleteEvidence(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Evidence", id)
}

// SearchEvidence performs a search for Evidence resources.
func (c *ClientR4B) SearchEvidence(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Evidence], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Evidence", parameters, options)
	if err != nil {
		return search.Result[r4b.Evidence]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Evidence, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Evidence)
		if !ok {
			return search.Result[r4b.Evidence]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Evidence]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidenceReport creates a new EvidenceReport resource.
func (c *ClientR4B) CreateEvidenceReport(ctx context.Context, resource r4b.EvidenceReport) (r4b.EvidenceReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.EvidenceReport{}, err
	}
	typed, ok := result.(r4b.EvidenceReport)
	if !ok {
		return r4b.EvidenceReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidenceReport retrieves a EvidenceReport resource by ID.
func (c *ClientR4B) ReadEvidenceReport(ctx context.Context, id string) (r4b.EvidenceReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "EvidenceReport", id)
	if err != nil {
		return r4b.EvidenceReport{}, err
	}
	typed, ok := result.(r4b.EvidenceReport)
	if !ok {
		return r4b.EvidenceReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidenceReport updates an existing EvidenceReport resource.
func (c *ClientR4B) UpdateEvidenceReport(ctx context.Context, resource r4b.EvidenceReport) (update.Result[r4b.EvidenceReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EvidenceReport]{}, err
	}
	typed, ok := result.Resource.(r4b.EvidenceReport)
	if !ok {
		return update.Result[r4b.EvidenceReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.EvidenceReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidenceReport deletes a EvidenceReport resource by ID.
func (c *ClientR4B) DeleteEvidenceReport(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "EvidenceReport", id)
}

// SearchEvidenceReport performs a search for EvidenceReport resources.
func (c *ClientR4B) SearchEvidenceReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.EvidenceReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "EvidenceReport", parameters, options)
	if err != nil {
		return search.Result[r4b.EvidenceReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.EvidenceReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.EvidenceReport)
		if !ok {
			return search.Result[r4b.EvidenceReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.EvidenceReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateEvidenceVariable creates a new EvidenceVariable resource.
func (c *ClientR4B) CreateEvidenceVariable(ctx context.Context, resource r4b.EvidenceVariable) (r4b.EvidenceVariable, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.EvidenceVariable{}, err
	}
	typed, ok := result.(r4b.EvidenceVariable)
	if !ok {
		return r4b.EvidenceVariable{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadEvidenceVariable retrieves a EvidenceVariable resource by ID.
func (c *ClientR4B) ReadEvidenceVariable(ctx context.Context, id string) (r4b.EvidenceVariable, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "EvidenceVariable", id)
	if err != nil {
		return r4b.EvidenceVariable{}, err
	}
	typed, ok := result.(r4b.EvidenceVariable)
	if !ok {
		return r4b.EvidenceVariable{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateEvidenceVariable updates an existing EvidenceVariable resource.
func (c *ClientR4B) UpdateEvidenceVariable(ctx context.Context, resource r4b.EvidenceVariable) (update.Result[r4b.EvidenceVariable], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.EvidenceVariable]{}, err
	}
	typed, ok := result.Resource.(r4b.EvidenceVariable)
	if !ok {
		return update.Result[r4b.EvidenceVariable]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.EvidenceVariable]{Resource: typed, Created: result.Created}, nil
}

// DeleteEvidenceVariable deletes a EvidenceVariable resource by ID.
func (c *ClientR4B) DeleteEvidenceVariable(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "EvidenceVariable", id)
}

// SearchEvidenceVariable performs a search for EvidenceVariable resources.
func (c *ClientR4B) SearchEvidenceVariable(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.EvidenceVariable], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "EvidenceVariable", parameters, options)
	if err != nil {
		return search.Result[r4b.EvidenceVariable]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.EvidenceVariable, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.EvidenceVariable)
		if !ok {
			return search.Result[r4b.EvidenceVariable]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.EvidenceVariable]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateExampleScenario creates a new ExampleScenario resource.
func (c *ClientR4B) CreateExampleScenario(ctx context.Context, resource r4b.ExampleScenario) (r4b.ExampleScenario, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ExampleScenario{}, err
	}
	typed, ok := result.(r4b.ExampleScenario)
	if !ok {
		return r4b.ExampleScenario{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadExampleScenario retrieves a ExampleScenario resource by ID.
func (c *ClientR4B) ReadExampleScenario(ctx context.Context, id string) (r4b.ExampleScenario, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ExampleScenario", id)
	if err != nil {
		return r4b.ExampleScenario{}, err
	}
	typed, ok := result.(r4b.ExampleScenario)
	if !ok {
		return r4b.ExampleScenario{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateExampleScenario updates an existing ExampleScenario resource.
func (c *ClientR4B) UpdateExampleScenario(ctx context.Context, resource r4b.ExampleScenario) (update.Result[r4b.ExampleScenario], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ExampleScenario]{}, err
	}
	typed, ok := result.Resource.(r4b.ExampleScenario)
	if !ok {
		return update.Result[r4b.ExampleScenario]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ExampleScenario]{Resource: typed, Created: result.Created}, nil
}

// DeleteExampleScenario deletes a ExampleScenario resource by ID.
func (c *ClientR4B) DeleteExampleScenario(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ExampleScenario", id)
}

// SearchExampleScenario performs a search for ExampleScenario resources.
func (c *ClientR4B) SearchExampleScenario(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ExampleScenario], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ExampleScenario", parameters, options)
	if err != nil {
		return search.Result[r4b.ExampleScenario]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ExampleScenario, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ExampleScenario)
		if !ok {
			return search.Result[r4b.ExampleScenario]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ExampleScenario]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateExplanationOfBenefit creates a new ExplanationOfBenefit resource.
func (c *ClientR4B) CreateExplanationOfBenefit(ctx context.Context, resource r4b.ExplanationOfBenefit) (r4b.ExplanationOfBenefit, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ExplanationOfBenefit{}, err
	}
	typed, ok := result.(r4b.ExplanationOfBenefit)
	if !ok {
		return r4b.ExplanationOfBenefit{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadExplanationOfBenefit retrieves a ExplanationOfBenefit resource by ID.
func (c *ClientR4B) ReadExplanationOfBenefit(ctx context.Context, id string) (r4b.ExplanationOfBenefit, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ExplanationOfBenefit", id)
	if err != nil {
		return r4b.ExplanationOfBenefit{}, err
	}
	typed, ok := result.(r4b.ExplanationOfBenefit)
	if !ok {
		return r4b.ExplanationOfBenefit{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateExplanationOfBenefit updates an existing ExplanationOfBenefit resource.
func (c *ClientR4B) UpdateExplanationOfBenefit(ctx context.Context, resource r4b.ExplanationOfBenefit) (update.Result[r4b.ExplanationOfBenefit], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ExplanationOfBenefit]{}, err
	}
	typed, ok := result.Resource.(r4b.ExplanationOfBenefit)
	if !ok {
		return update.Result[r4b.ExplanationOfBenefit]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ExplanationOfBenefit]{Resource: typed, Created: result.Created}, nil
}

// DeleteExplanationOfBenefit deletes a ExplanationOfBenefit resource by ID.
func (c *ClientR4B) DeleteExplanationOfBenefit(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ExplanationOfBenefit", id)
}

// SearchExplanationOfBenefit performs a search for ExplanationOfBenefit resources.
func (c *ClientR4B) SearchExplanationOfBenefit(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ExplanationOfBenefit], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ExplanationOfBenefit", parameters, options)
	if err != nil {
		return search.Result[r4b.ExplanationOfBenefit]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ExplanationOfBenefit, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ExplanationOfBenefit)
		if !ok {
			return search.Result[r4b.ExplanationOfBenefit]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ExplanationOfBenefit]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateFamilyMemberHistory creates a new FamilyMemberHistory resource.
func (c *ClientR4B) CreateFamilyMemberHistory(ctx context.Context, resource r4b.FamilyMemberHistory) (r4b.FamilyMemberHistory, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.FamilyMemberHistory{}, err
	}
	typed, ok := result.(r4b.FamilyMemberHistory)
	if !ok {
		return r4b.FamilyMemberHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadFamilyMemberHistory retrieves a FamilyMemberHistory resource by ID.
func (c *ClientR4B) ReadFamilyMemberHistory(ctx context.Context, id string) (r4b.FamilyMemberHistory, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "FamilyMemberHistory", id)
	if err != nil {
		return r4b.FamilyMemberHistory{}, err
	}
	typed, ok := result.(r4b.FamilyMemberHistory)
	if !ok {
		return r4b.FamilyMemberHistory{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateFamilyMemberHistory updates an existing FamilyMemberHistory resource.
func (c *ClientR4B) UpdateFamilyMemberHistory(ctx context.Context, resource r4b.FamilyMemberHistory) (update.Result[r4b.FamilyMemberHistory], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.FamilyMemberHistory]{}, err
	}
	typed, ok := result.Resource.(r4b.FamilyMemberHistory)
	if !ok {
		return update.Result[r4b.FamilyMemberHistory]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.FamilyMemberHistory]{Resource: typed, Created: result.Created}, nil
}

// DeleteFamilyMemberHistory deletes a FamilyMemberHistory resource by ID.
func (c *ClientR4B) DeleteFamilyMemberHistory(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "FamilyMemberHistory", id)
}

// SearchFamilyMemberHistory performs a search for FamilyMemberHistory resources.
func (c *ClientR4B) SearchFamilyMemberHistory(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.FamilyMemberHistory], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "FamilyMemberHistory", parameters, options)
	if err != nil {
		return search.Result[r4b.FamilyMemberHistory]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.FamilyMemberHistory, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.FamilyMemberHistory)
		if !ok {
			return search.Result[r4b.FamilyMemberHistory]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.FamilyMemberHistory]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateFlag creates a new Flag resource.
func (c *ClientR4B) CreateFlag(ctx context.Context, resource r4b.Flag) (r4b.Flag, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Flag{}, err
	}
	typed, ok := result.(r4b.Flag)
	if !ok {
		return r4b.Flag{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadFlag retrieves a Flag resource by ID.
func (c *ClientR4B) ReadFlag(ctx context.Context, id string) (r4b.Flag, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Flag", id)
	if err != nil {
		return r4b.Flag{}, err
	}
	typed, ok := result.(r4b.Flag)
	if !ok {
		return r4b.Flag{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateFlag updates an existing Flag resource.
func (c *ClientR4B) UpdateFlag(ctx context.Context, resource r4b.Flag) (update.Result[r4b.Flag], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Flag]{}, err
	}
	typed, ok := result.Resource.(r4b.Flag)
	if !ok {
		return update.Result[r4b.Flag]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Flag]{Resource: typed, Created: result.Created}, nil
}

// DeleteFlag deletes a Flag resource by ID.
func (c *ClientR4B) DeleteFlag(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Flag", id)
}

// SearchFlag performs a search for Flag resources.
func (c *ClientR4B) SearchFlag(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Flag], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Flag", parameters, options)
	if err != nil {
		return search.Result[r4b.Flag]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Flag, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Flag)
		if !ok {
			return search.Result[r4b.Flag]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Flag]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGoal creates a new Goal resource.
func (c *ClientR4B) CreateGoal(ctx context.Context, resource r4b.Goal) (r4b.Goal, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Goal{}, err
	}
	typed, ok := result.(r4b.Goal)
	if !ok {
		return r4b.Goal{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGoal retrieves a Goal resource by ID.
func (c *ClientR4B) ReadGoal(ctx context.Context, id string) (r4b.Goal, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Goal", id)
	if err != nil {
		return r4b.Goal{}, err
	}
	typed, ok := result.(r4b.Goal)
	if !ok {
		return r4b.Goal{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGoal updates an existing Goal resource.
func (c *ClientR4B) UpdateGoal(ctx context.Context, resource r4b.Goal) (update.Result[r4b.Goal], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Goal]{}, err
	}
	typed, ok := result.Resource.(r4b.Goal)
	if !ok {
		return update.Result[r4b.Goal]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Goal]{Resource: typed, Created: result.Created}, nil
}

// DeleteGoal deletes a Goal resource by ID.
func (c *ClientR4B) DeleteGoal(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Goal", id)
}

// SearchGoal performs a search for Goal resources.
func (c *ClientR4B) SearchGoal(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Goal], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Goal", parameters, options)
	if err != nil {
		return search.Result[r4b.Goal]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Goal, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Goal)
		if !ok {
			return search.Result[r4b.Goal]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Goal]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGraphDefinition creates a new GraphDefinition resource.
func (c *ClientR4B) CreateGraphDefinition(ctx context.Context, resource r4b.GraphDefinition) (r4b.GraphDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.GraphDefinition{}, err
	}
	typed, ok := result.(r4b.GraphDefinition)
	if !ok {
		return r4b.GraphDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGraphDefinition retrieves a GraphDefinition resource by ID.
func (c *ClientR4B) ReadGraphDefinition(ctx context.Context, id string) (r4b.GraphDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "GraphDefinition", id)
	if err != nil {
		return r4b.GraphDefinition{}, err
	}
	typed, ok := result.(r4b.GraphDefinition)
	if !ok {
		return r4b.GraphDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGraphDefinition updates an existing GraphDefinition resource.
func (c *ClientR4B) UpdateGraphDefinition(ctx context.Context, resource r4b.GraphDefinition) (update.Result[r4b.GraphDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.GraphDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.GraphDefinition)
	if !ok {
		return update.Result[r4b.GraphDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.GraphDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteGraphDefinition deletes a GraphDefinition resource by ID.
func (c *ClientR4B) DeleteGraphDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "GraphDefinition", id)
}

// SearchGraphDefinition performs a search for GraphDefinition resources.
func (c *ClientR4B) SearchGraphDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.GraphDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "GraphDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.GraphDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.GraphDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.GraphDefinition)
		if !ok {
			return search.Result[r4b.GraphDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.GraphDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGroup creates a new Group resource.
func (c *ClientR4B) CreateGroup(ctx context.Context, resource r4b.Group) (r4b.Group, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Group{}, err
	}
	typed, ok := result.(r4b.Group)
	if !ok {
		return r4b.Group{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGroup retrieves a Group resource by ID.
func (c *ClientR4B) ReadGroup(ctx context.Context, id string) (r4b.Group, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Group", id)
	if err != nil {
		return r4b.Group{}, err
	}
	typed, ok := result.(r4b.Group)
	if !ok {
		return r4b.Group{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGroup updates an existing Group resource.
func (c *ClientR4B) UpdateGroup(ctx context.Context, resource r4b.Group) (update.Result[r4b.Group], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Group]{}, err
	}
	typed, ok := result.Resource.(r4b.Group)
	if !ok {
		return update.Result[r4b.Group]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Group]{Resource: typed, Created: result.Created}, nil
}

// DeleteGroup deletes a Group resource by ID.
func (c *ClientR4B) DeleteGroup(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Group", id)
}

// SearchGroup performs a search for Group resources.
func (c *ClientR4B) SearchGroup(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Group], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Group", parameters, options)
	if err != nil {
		return search.Result[r4b.Group]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Group, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Group)
		if !ok {
			return search.Result[r4b.Group]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Group]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateGuidanceResponse creates a new GuidanceResponse resource.
func (c *ClientR4B) CreateGuidanceResponse(ctx context.Context, resource r4b.GuidanceResponse) (r4b.GuidanceResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.GuidanceResponse{}, err
	}
	typed, ok := result.(r4b.GuidanceResponse)
	if !ok {
		return r4b.GuidanceResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadGuidanceResponse retrieves a GuidanceResponse resource by ID.
func (c *ClientR4B) ReadGuidanceResponse(ctx context.Context, id string) (r4b.GuidanceResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "GuidanceResponse", id)
	if err != nil {
		return r4b.GuidanceResponse{}, err
	}
	typed, ok := result.(r4b.GuidanceResponse)
	if !ok {
		return r4b.GuidanceResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateGuidanceResponse updates an existing GuidanceResponse resource.
func (c *ClientR4B) UpdateGuidanceResponse(ctx context.Context, resource r4b.GuidanceResponse) (update.Result[r4b.GuidanceResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.GuidanceResponse]{}, err
	}
	typed, ok := result.Resource.(r4b.GuidanceResponse)
	if !ok {
		return update.Result[r4b.GuidanceResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.GuidanceResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteGuidanceResponse deletes a GuidanceResponse resource by ID.
func (c *ClientR4B) DeleteGuidanceResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "GuidanceResponse", id)
}

// SearchGuidanceResponse performs a search for GuidanceResponse resources.
func (c *ClientR4B) SearchGuidanceResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.GuidanceResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "GuidanceResponse", parameters, options)
	if err != nil {
		return search.Result[r4b.GuidanceResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.GuidanceResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.GuidanceResponse)
		if !ok {
			return search.Result[r4b.GuidanceResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.GuidanceResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateHealthcareService creates a new HealthcareService resource.
func (c *ClientR4B) CreateHealthcareService(ctx context.Context, resource r4b.HealthcareService) (r4b.HealthcareService, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.HealthcareService{}, err
	}
	typed, ok := result.(r4b.HealthcareService)
	if !ok {
		return r4b.HealthcareService{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadHealthcareService retrieves a HealthcareService resource by ID.
func (c *ClientR4B) ReadHealthcareService(ctx context.Context, id string) (r4b.HealthcareService, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "HealthcareService", id)
	if err != nil {
		return r4b.HealthcareService{}, err
	}
	typed, ok := result.(r4b.HealthcareService)
	if !ok {
		return r4b.HealthcareService{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateHealthcareService updates an existing HealthcareService resource.
func (c *ClientR4B) UpdateHealthcareService(ctx context.Context, resource r4b.HealthcareService) (update.Result[r4b.HealthcareService], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.HealthcareService]{}, err
	}
	typed, ok := result.Resource.(r4b.HealthcareService)
	if !ok {
		return update.Result[r4b.HealthcareService]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.HealthcareService]{Resource: typed, Created: result.Created}, nil
}

// DeleteHealthcareService deletes a HealthcareService resource by ID.
func (c *ClientR4B) DeleteHealthcareService(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "HealthcareService", id)
}

// SearchHealthcareService performs a search for HealthcareService resources.
func (c *ClientR4B) SearchHealthcareService(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.HealthcareService], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "HealthcareService", parameters, options)
	if err != nil {
		return search.Result[r4b.HealthcareService]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.HealthcareService, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.HealthcareService)
		if !ok {
			return search.Result[r4b.HealthcareService]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.HealthcareService]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImagingStudy creates a new ImagingStudy resource.
func (c *ClientR4B) CreateImagingStudy(ctx context.Context, resource r4b.ImagingStudy) (r4b.ImagingStudy, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ImagingStudy{}, err
	}
	typed, ok := result.(r4b.ImagingStudy)
	if !ok {
		return r4b.ImagingStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImagingStudy retrieves a ImagingStudy resource by ID.
func (c *ClientR4B) ReadImagingStudy(ctx context.Context, id string) (r4b.ImagingStudy, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ImagingStudy", id)
	if err != nil {
		return r4b.ImagingStudy{}, err
	}
	typed, ok := result.(r4b.ImagingStudy)
	if !ok {
		return r4b.ImagingStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImagingStudy updates an existing ImagingStudy resource.
func (c *ClientR4B) UpdateImagingStudy(ctx context.Context, resource r4b.ImagingStudy) (update.Result[r4b.ImagingStudy], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImagingStudy]{}, err
	}
	typed, ok := result.Resource.(r4b.ImagingStudy)
	if !ok {
		return update.Result[r4b.ImagingStudy]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ImagingStudy]{Resource: typed, Created: result.Created}, nil
}

// DeleteImagingStudy deletes a ImagingStudy resource by ID.
func (c *ClientR4B) DeleteImagingStudy(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ImagingStudy", id)
}

// SearchImagingStudy performs a search for ImagingStudy resources.
func (c *ClientR4B) SearchImagingStudy(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ImagingStudy], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ImagingStudy", parameters, options)
	if err != nil {
		return search.Result[r4b.ImagingStudy]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ImagingStudy, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ImagingStudy)
		if !ok {
			return search.Result[r4b.ImagingStudy]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ImagingStudy]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunization creates a new Immunization resource.
func (c *ClientR4B) CreateImmunization(ctx context.Context, resource r4b.Immunization) (r4b.Immunization, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Immunization{}, err
	}
	typed, ok := result.(r4b.Immunization)
	if !ok {
		return r4b.Immunization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunization retrieves a Immunization resource by ID.
func (c *ClientR4B) ReadImmunization(ctx context.Context, id string) (r4b.Immunization, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Immunization", id)
	if err != nil {
		return r4b.Immunization{}, err
	}
	typed, ok := result.(r4b.Immunization)
	if !ok {
		return r4b.Immunization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunization updates an existing Immunization resource.
func (c *ClientR4B) UpdateImmunization(ctx context.Context, resource r4b.Immunization) (update.Result[r4b.Immunization], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Immunization]{}, err
	}
	typed, ok := result.Resource.(r4b.Immunization)
	if !ok {
		return update.Result[r4b.Immunization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Immunization]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunization deletes a Immunization resource by ID.
func (c *ClientR4B) DeleteImmunization(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Immunization", id)
}

// SearchImmunization performs a search for Immunization resources.
func (c *ClientR4B) SearchImmunization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Immunization], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Immunization", parameters, options)
	if err != nil {
		return search.Result[r4b.Immunization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Immunization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Immunization)
		if !ok {
			return search.Result[r4b.Immunization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Immunization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunizationEvaluation creates a new ImmunizationEvaluation resource.
func (c *ClientR4B) CreateImmunizationEvaluation(ctx context.Context, resource r4b.ImmunizationEvaluation) (r4b.ImmunizationEvaluation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ImmunizationEvaluation{}, err
	}
	typed, ok := result.(r4b.ImmunizationEvaluation)
	if !ok {
		return r4b.ImmunizationEvaluation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunizationEvaluation retrieves a ImmunizationEvaluation resource by ID.
func (c *ClientR4B) ReadImmunizationEvaluation(ctx context.Context, id string) (r4b.ImmunizationEvaluation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ImmunizationEvaluation", id)
	if err != nil {
		return r4b.ImmunizationEvaluation{}, err
	}
	typed, ok := result.(r4b.ImmunizationEvaluation)
	if !ok {
		return r4b.ImmunizationEvaluation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunizationEvaluation updates an existing ImmunizationEvaluation resource.
func (c *ClientR4B) UpdateImmunizationEvaluation(ctx context.Context, resource r4b.ImmunizationEvaluation) (update.Result[r4b.ImmunizationEvaluation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImmunizationEvaluation]{}, err
	}
	typed, ok := result.Resource.(r4b.ImmunizationEvaluation)
	if !ok {
		return update.Result[r4b.ImmunizationEvaluation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ImmunizationEvaluation]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunizationEvaluation deletes a ImmunizationEvaluation resource by ID.
func (c *ClientR4B) DeleteImmunizationEvaluation(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ImmunizationEvaluation", id)
}

// SearchImmunizationEvaluation performs a search for ImmunizationEvaluation resources.
func (c *ClientR4B) SearchImmunizationEvaluation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ImmunizationEvaluation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ImmunizationEvaluation", parameters, options)
	if err != nil {
		return search.Result[r4b.ImmunizationEvaluation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ImmunizationEvaluation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ImmunizationEvaluation)
		if !ok {
			return search.Result[r4b.ImmunizationEvaluation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ImmunizationEvaluation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImmunizationRecommendation creates a new ImmunizationRecommendation resource.
func (c *ClientR4B) CreateImmunizationRecommendation(ctx context.Context, resource r4b.ImmunizationRecommendation) (r4b.ImmunizationRecommendation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ImmunizationRecommendation{}, err
	}
	typed, ok := result.(r4b.ImmunizationRecommendation)
	if !ok {
		return r4b.ImmunizationRecommendation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImmunizationRecommendation retrieves a ImmunizationRecommendation resource by ID.
func (c *ClientR4B) ReadImmunizationRecommendation(ctx context.Context, id string) (r4b.ImmunizationRecommendation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ImmunizationRecommendation", id)
	if err != nil {
		return r4b.ImmunizationRecommendation{}, err
	}
	typed, ok := result.(r4b.ImmunizationRecommendation)
	if !ok {
		return r4b.ImmunizationRecommendation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImmunizationRecommendation updates an existing ImmunizationRecommendation resource.
func (c *ClientR4B) UpdateImmunizationRecommendation(ctx context.Context, resource r4b.ImmunizationRecommendation) (update.Result[r4b.ImmunizationRecommendation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImmunizationRecommendation]{}, err
	}
	typed, ok := result.Resource.(r4b.ImmunizationRecommendation)
	if !ok {
		return update.Result[r4b.ImmunizationRecommendation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ImmunizationRecommendation]{Resource: typed, Created: result.Created}, nil
}

// DeleteImmunizationRecommendation deletes a ImmunizationRecommendation resource by ID.
func (c *ClientR4B) DeleteImmunizationRecommendation(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ImmunizationRecommendation", id)
}

// SearchImmunizationRecommendation performs a search for ImmunizationRecommendation resources.
func (c *ClientR4B) SearchImmunizationRecommendation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ImmunizationRecommendation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ImmunizationRecommendation", parameters, options)
	if err != nil {
		return search.Result[r4b.ImmunizationRecommendation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ImmunizationRecommendation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ImmunizationRecommendation)
		if !ok {
			return search.Result[r4b.ImmunizationRecommendation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ImmunizationRecommendation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateImplementationGuide creates a new ImplementationGuide resource.
func (c *ClientR4B) CreateImplementationGuide(ctx context.Context, resource r4b.ImplementationGuide) (r4b.ImplementationGuide, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ImplementationGuide{}, err
	}
	typed, ok := result.(r4b.ImplementationGuide)
	if !ok {
		return r4b.ImplementationGuide{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadImplementationGuide retrieves a ImplementationGuide resource by ID.
func (c *ClientR4B) ReadImplementationGuide(ctx context.Context, id string) (r4b.ImplementationGuide, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ImplementationGuide", id)
	if err != nil {
		return r4b.ImplementationGuide{}, err
	}
	typed, ok := result.(r4b.ImplementationGuide)
	if !ok {
		return r4b.ImplementationGuide{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateImplementationGuide updates an existing ImplementationGuide resource.
func (c *ClientR4B) UpdateImplementationGuide(ctx context.Context, resource r4b.ImplementationGuide) (update.Result[r4b.ImplementationGuide], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ImplementationGuide]{}, err
	}
	typed, ok := result.Resource.(r4b.ImplementationGuide)
	if !ok {
		return update.Result[r4b.ImplementationGuide]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ImplementationGuide]{Resource: typed, Created: result.Created}, nil
}

// DeleteImplementationGuide deletes a ImplementationGuide resource by ID.
func (c *ClientR4B) DeleteImplementationGuide(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ImplementationGuide", id)
}

// SearchImplementationGuide performs a search for ImplementationGuide resources.
func (c *ClientR4B) SearchImplementationGuide(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ImplementationGuide], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ImplementationGuide", parameters, options)
	if err != nil {
		return search.Result[r4b.ImplementationGuide]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ImplementationGuide, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ImplementationGuide)
		if !ok {
			return search.Result[r4b.ImplementationGuide]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ImplementationGuide]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateIngredient creates a new Ingredient resource.
func (c *ClientR4B) CreateIngredient(ctx context.Context, resource r4b.Ingredient) (r4b.Ingredient, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Ingredient{}, err
	}
	typed, ok := result.(r4b.Ingredient)
	if !ok {
		return r4b.Ingredient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadIngredient retrieves a Ingredient resource by ID.
func (c *ClientR4B) ReadIngredient(ctx context.Context, id string) (r4b.Ingredient, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Ingredient", id)
	if err != nil {
		return r4b.Ingredient{}, err
	}
	typed, ok := result.(r4b.Ingredient)
	if !ok {
		return r4b.Ingredient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateIngredient updates an existing Ingredient resource.
func (c *ClientR4B) UpdateIngredient(ctx context.Context, resource r4b.Ingredient) (update.Result[r4b.Ingredient], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Ingredient]{}, err
	}
	typed, ok := result.Resource.(r4b.Ingredient)
	if !ok {
		return update.Result[r4b.Ingredient]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Ingredient]{Resource: typed, Created: result.Created}, nil
}

// DeleteIngredient deletes a Ingredient resource by ID.
func (c *ClientR4B) DeleteIngredient(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Ingredient", id)
}

// SearchIngredient performs a search for Ingredient resources.
func (c *ClientR4B) SearchIngredient(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Ingredient], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Ingredient", parameters, options)
	if err != nil {
		return search.Result[r4b.Ingredient]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Ingredient, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Ingredient)
		if !ok {
			return search.Result[r4b.Ingredient]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Ingredient]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInsurancePlan creates a new InsurancePlan resource.
func (c *ClientR4B) CreateInsurancePlan(ctx context.Context, resource r4b.InsurancePlan) (r4b.InsurancePlan, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.InsurancePlan{}, err
	}
	typed, ok := result.(r4b.InsurancePlan)
	if !ok {
		return r4b.InsurancePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInsurancePlan retrieves a InsurancePlan resource by ID.
func (c *ClientR4B) ReadInsurancePlan(ctx context.Context, id string) (r4b.InsurancePlan, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "InsurancePlan", id)
	if err != nil {
		return r4b.InsurancePlan{}, err
	}
	typed, ok := result.(r4b.InsurancePlan)
	if !ok {
		return r4b.InsurancePlan{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInsurancePlan updates an existing InsurancePlan resource.
func (c *ClientR4B) UpdateInsurancePlan(ctx context.Context, resource r4b.InsurancePlan) (update.Result[r4b.InsurancePlan], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.InsurancePlan]{}, err
	}
	typed, ok := result.Resource.(r4b.InsurancePlan)
	if !ok {
		return update.Result[r4b.InsurancePlan]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.InsurancePlan]{Resource: typed, Created: result.Created}, nil
}

// DeleteInsurancePlan deletes a InsurancePlan resource by ID.
func (c *ClientR4B) DeleteInsurancePlan(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "InsurancePlan", id)
}

// SearchInsurancePlan performs a search for InsurancePlan resources.
func (c *ClientR4B) SearchInsurancePlan(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.InsurancePlan], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "InsurancePlan", parameters, options)
	if err != nil {
		return search.Result[r4b.InsurancePlan]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.InsurancePlan, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.InsurancePlan)
		if !ok {
			return search.Result[r4b.InsurancePlan]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.InsurancePlan]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateInvoice creates a new Invoice resource.
func (c *ClientR4B) CreateInvoice(ctx context.Context, resource r4b.Invoice) (r4b.Invoice, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Invoice{}, err
	}
	typed, ok := result.(r4b.Invoice)
	if !ok {
		return r4b.Invoice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadInvoice retrieves a Invoice resource by ID.
func (c *ClientR4B) ReadInvoice(ctx context.Context, id string) (r4b.Invoice, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Invoice", id)
	if err != nil {
		return r4b.Invoice{}, err
	}
	typed, ok := result.(r4b.Invoice)
	if !ok {
		return r4b.Invoice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateInvoice updates an existing Invoice resource.
func (c *ClientR4B) UpdateInvoice(ctx context.Context, resource r4b.Invoice) (update.Result[r4b.Invoice], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Invoice]{}, err
	}
	typed, ok := result.Resource.(r4b.Invoice)
	if !ok {
		return update.Result[r4b.Invoice]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Invoice]{Resource: typed, Created: result.Created}, nil
}

// DeleteInvoice deletes a Invoice resource by ID.
func (c *ClientR4B) DeleteInvoice(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Invoice", id)
}

// SearchInvoice performs a search for Invoice resources.
func (c *ClientR4B) SearchInvoice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Invoice], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Invoice", parameters, options)
	if err != nil {
		return search.Result[r4b.Invoice]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Invoice, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Invoice)
		if !ok {
			return search.Result[r4b.Invoice]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Invoice]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLibrary creates a new Library resource.
func (c *ClientR4B) CreateLibrary(ctx context.Context, resource r4b.Library) (r4b.Library, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Library{}, err
	}
	typed, ok := result.(r4b.Library)
	if !ok {
		return r4b.Library{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLibrary retrieves a Library resource by ID.
func (c *ClientR4B) ReadLibrary(ctx context.Context, id string) (r4b.Library, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Library", id)
	if err != nil {
		return r4b.Library{}, err
	}
	typed, ok := result.(r4b.Library)
	if !ok {
		return r4b.Library{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLibrary updates an existing Library resource.
func (c *ClientR4B) UpdateLibrary(ctx context.Context, resource r4b.Library) (update.Result[r4b.Library], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Library]{}, err
	}
	typed, ok := result.Resource.(r4b.Library)
	if !ok {
		return update.Result[r4b.Library]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Library]{Resource: typed, Created: result.Created}, nil
}

// DeleteLibrary deletes a Library resource by ID.
func (c *ClientR4B) DeleteLibrary(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Library", id)
}

// SearchLibrary performs a search for Library resources.
func (c *ClientR4B) SearchLibrary(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Library], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Library", parameters, options)
	if err != nil {
		return search.Result[r4b.Library]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Library, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Library)
		if !ok {
			return search.Result[r4b.Library]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Library]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLinkage creates a new Linkage resource.
func (c *ClientR4B) CreateLinkage(ctx context.Context, resource r4b.Linkage) (r4b.Linkage, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Linkage{}, err
	}
	typed, ok := result.(r4b.Linkage)
	if !ok {
		return r4b.Linkage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLinkage retrieves a Linkage resource by ID.
func (c *ClientR4B) ReadLinkage(ctx context.Context, id string) (r4b.Linkage, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Linkage", id)
	if err != nil {
		return r4b.Linkage{}, err
	}
	typed, ok := result.(r4b.Linkage)
	if !ok {
		return r4b.Linkage{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLinkage updates an existing Linkage resource.
func (c *ClientR4B) UpdateLinkage(ctx context.Context, resource r4b.Linkage) (update.Result[r4b.Linkage], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Linkage]{}, err
	}
	typed, ok := result.Resource.(r4b.Linkage)
	if !ok {
		return update.Result[r4b.Linkage]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Linkage]{Resource: typed, Created: result.Created}, nil
}

// DeleteLinkage deletes a Linkage resource by ID.
func (c *ClientR4B) DeleteLinkage(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Linkage", id)
}

// SearchLinkage performs a search for Linkage resources.
func (c *ClientR4B) SearchLinkage(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Linkage], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Linkage", parameters, options)
	if err != nil {
		return search.Result[r4b.Linkage]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Linkage, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Linkage)
		if !ok {
			return search.Result[r4b.Linkage]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Linkage]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateList creates a new List resource.
func (c *ClientR4B) CreateList(ctx context.Context, resource r4b.List) (r4b.List, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.List{}, err
	}
	typed, ok := result.(r4b.List)
	if !ok {
		return r4b.List{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadList retrieves a List resource by ID.
func (c *ClientR4B) ReadList(ctx context.Context, id string) (r4b.List, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "List", id)
	if err != nil {
		return r4b.List{}, err
	}
	typed, ok := result.(r4b.List)
	if !ok {
		return r4b.List{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateList updates an existing List resource.
func (c *ClientR4B) UpdateList(ctx context.Context, resource r4b.List) (update.Result[r4b.List], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.List]{}, err
	}
	typed, ok := result.Resource.(r4b.List)
	if !ok {
		return update.Result[r4b.List]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.List]{Resource: typed, Created: result.Created}, nil
}

// DeleteList deletes a List resource by ID.
func (c *ClientR4B) DeleteList(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "List", id)
}

// SearchList performs a search for List resources.
func (c *ClientR4B) SearchList(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.List], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "List", parameters, options)
	if err != nil {
		return search.Result[r4b.List]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.List, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.List)
		if !ok {
			return search.Result[r4b.List]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.List]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateLocation creates a new Location resource.
func (c *ClientR4B) CreateLocation(ctx context.Context, resource r4b.Location) (r4b.Location, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Location{}, err
	}
	typed, ok := result.(r4b.Location)
	if !ok {
		return r4b.Location{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadLocation retrieves a Location resource by ID.
func (c *ClientR4B) ReadLocation(ctx context.Context, id string) (r4b.Location, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Location", id)
	if err != nil {
		return r4b.Location{}, err
	}
	typed, ok := result.(r4b.Location)
	if !ok {
		return r4b.Location{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateLocation updates an existing Location resource.
func (c *ClientR4B) UpdateLocation(ctx context.Context, resource r4b.Location) (update.Result[r4b.Location], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Location]{}, err
	}
	typed, ok := result.Resource.(r4b.Location)
	if !ok {
		return update.Result[r4b.Location]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Location]{Resource: typed, Created: result.Created}, nil
}

// DeleteLocation deletes a Location resource by ID.
func (c *ClientR4B) DeleteLocation(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Location", id)
}

// SearchLocation performs a search for Location resources.
func (c *ClientR4B) SearchLocation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Location], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Location", parameters, options)
	if err != nil {
		return search.Result[r4b.Location]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Location, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Location)
		if !ok {
			return search.Result[r4b.Location]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Location]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateManufacturedItemDefinition creates a new ManufacturedItemDefinition resource.
func (c *ClientR4B) CreateManufacturedItemDefinition(ctx context.Context, resource r4b.ManufacturedItemDefinition) (r4b.ManufacturedItemDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ManufacturedItemDefinition{}, err
	}
	typed, ok := result.(r4b.ManufacturedItemDefinition)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadManufacturedItemDefinition retrieves a ManufacturedItemDefinition resource by ID.
func (c *ClientR4B) ReadManufacturedItemDefinition(ctx context.Context, id string) (r4b.ManufacturedItemDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ManufacturedItemDefinition", id)
	if err != nil {
		return r4b.ManufacturedItemDefinition{}, err
	}
	typed, ok := result.(r4b.ManufacturedItemDefinition)
	if !ok {
		return r4b.ManufacturedItemDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateManufacturedItemDefinition updates an existing ManufacturedItemDefinition resource.
func (c *ClientR4B) UpdateManufacturedItemDefinition(ctx context.Context, resource r4b.ManufacturedItemDefinition) (update.Result[r4b.ManufacturedItemDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ManufacturedItemDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.ManufacturedItemDefinition)
	if !ok {
		return update.Result[r4b.ManufacturedItemDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ManufacturedItemDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteManufacturedItemDefinition deletes a ManufacturedItemDefinition resource by ID.
func (c *ClientR4B) DeleteManufacturedItemDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ManufacturedItemDefinition", id)
}

// SearchManufacturedItemDefinition performs a search for ManufacturedItemDefinition resources.
func (c *ClientR4B) SearchManufacturedItemDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ManufacturedItemDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ManufacturedItemDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.ManufacturedItemDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ManufacturedItemDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ManufacturedItemDefinition)
		if !ok {
			return search.Result[r4b.ManufacturedItemDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ManufacturedItemDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMeasure creates a new Measure resource.
func (c *ClientR4B) CreateMeasure(ctx context.Context, resource r4b.Measure) (r4b.Measure, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Measure{}, err
	}
	typed, ok := result.(r4b.Measure)
	if !ok {
		return r4b.Measure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMeasure retrieves a Measure resource by ID.
func (c *ClientR4B) ReadMeasure(ctx context.Context, id string) (r4b.Measure, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Measure", id)
	if err != nil {
		return r4b.Measure{}, err
	}
	typed, ok := result.(r4b.Measure)
	if !ok {
		return r4b.Measure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMeasure updates an existing Measure resource.
func (c *ClientR4B) UpdateMeasure(ctx context.Context, resource r4b.Measure) (update.Result[r4b.Measure], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Measure]{}, err
	}
	typed, ok := result.Resource.(r4b.Measure)
	if !ok {
		return update.Result[r4b.Measure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Measure]{Resource: typed, Created: result.Created}, nil
}

// DeleteMeasure deletes a Measure resource by ID.
func (c *ClientR4B) DeleteMeasure(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Measure", id)
}

// SearchMeasure performs a search for Measure resources.
func (c *ClientR4B) SearchMeasure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Measure], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Measure", parameters, options)
	if err != nil {
		return search.Result[r4b.Measure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Measure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Measure)
		if !ok {
			return search.Result[r4b.Measure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Measure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMeasureReport creates a new MeasureReport resource.
func (c *ClientR4B) CreateMeasureReport(ctx context.Context, resource r4b.MeasureReport) (r4b.MeasureReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MeasureReport{}, err
	}
	typed, ok := result.(r4b.MeasureReport)
	if !ok {
		return r4b.MeasureReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMeasureReport retrieves a MeasureReport resource by ID.
func (c *ClientR4B) ReadMeasureReport(ctx context.Context, id string) (r4b.MeasureReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MeasureReport", id)
	if err != nil {
		return r4b.MeasureReport{}, err
	}
	typed, ok := result.(r4b.MeasureReport)
	if !ok {
		return r4b.MeasureReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMeasureReport updates an existing MeasureReport resource.
func (c *ClientR4B) UpdateMeasureReport(ctx context.Context, resource r4b.MeasureReport) (update.Result[r4b.MeasureReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MeasureReport]{}, err
	}
	typed, ok := result.Resource.(r4b.MeasureReport)
	if !ok {
		return update.Result[r4b.MeasureReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MeasureReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteMeasureReport deletes a MeasureReport resource by ID.
func (c *ClientR4B) DeleteMeasureReport(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MeasureReport", id)
}

// SearchMeasureReport performs a search for MeasureReport resources.
func (c *ClientR4B) SearchMeasureReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MeasureReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MeasureReport", parameters, options)
	if err != nil {
		return search.Result[r4b.MeasureReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MeasureReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MeasureReport)
		if !ok {
			return search.Result[r4b.MeasureReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MeasureReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedia creates a new Media resource.
func (c *ClientR4B) CreateMedia(ctx context.Context, resource r4b.Media) (r4b.Media, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Media{}, err
	}
	typed, ok := result.(r4b.Media)
	if !ok {
		return r4b.Media{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedia retrieves a Media resource by ID.
func (c *ClientR4B) ReadMedia(ctx context.Context, id string) (r4b.Media, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Media", id)
	if err != nil {
		return r4b.Media{}, err
	}
	typed, ok := result.(r4b.Media)
	if !ok {
		return r4b.Media{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedia updates an existing Media resource.
func (c *ClientR4B) UpdateMedia(ctx context.Context, resource r4b.Media) (update.Result[r4b.Media], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Media]{}, err
	}
	typed, ok := result.Resource.(r4b.Media)
	if !ok {
		return update.Result[r4b.Media]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Media]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedia deletes a Media resource by ID.
func (c *ClientR4B) DeleteMedia(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Media", id)
}

// SearchMedia performs a search for Media resources.
func (c *ClientR4B) SearchMedia(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Media], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Media", parameters, options)
	if err != nil {
		return search.Result[r4b.Media]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Media, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Media)
		if !ok {
			return search.Result[r4b.Media]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Media]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedication creates a new Medication resource.
func (c *ClientR4B) CreateMedication(ctx context.Context, resource r4b.Medication) (r4b.Medication, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Medication{}, err
	}
	typed, ok := result.(r4b.Medication)
	if !ok {
		return r4b.Medication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedication retrieves a Medication resource by ID.
func (c *ClientR4B) ReadMedication(ctx context.Context, id string) (r4b.Medication, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Medication", id)
	if err != nil {
		return r4b.Medication{}, err
	}
	typed, ok := result.(r4b.Medication)
	if !ok {
		return r4b.Medication{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedication updates an existing Medication resource.
func (c *ClientR4B) UpdateMedication(ctx context.Context, resource r4b.Medication) (update.Result[r4b.Medication], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Medication]{}, err
	}
	typed, ok := result.Resource.(r4b.Medication)
	if !ok {
		return update.Result[r4b.Medication]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Medication]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedication deletes a Medication resource by ID.
func (c *ClientR4B) DeleteMedication(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Medication", id)
}

// SearchMedication performs a search for Medication resources.
func (c *ClientR4B) SearchMedication(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Medication], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Medication", parameters, options)
	if err != nil {
		return search.Result[r4b.Medication]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Medication, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Medication)
		if !ok {
			return search.Result[r4b.Medication]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Medication]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationAdministration creates a new MedicationAdministration resource.
func (c *ClientR4B) CreateMedicationAdministration(ctx context.Context, resource r4b.MedicationAdministration) (r4b.MedicationAdministration, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationAdministration{}, err
	}
	typed, ok := result.(r4b.MedicationAdministration)
	if !ok {
		return r4b.MedicationAdministration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationAdministration retrieves a MedicationAdministration resource by ID.
func (c *ClientR4B) ReadMedicationAdministration(ctx context.Context, id string) (r4b.MedicationAdministration, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MedicationAdministration", id)
	if err != nil {
		return r4b.MedicationAdministration{}, err
	}
	typed, ok := result.(r4b.MedicationAdministration)
	if !ok {
		return r4b.MedicationAdministration{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationAdministration updates an existing MedicationAdministration resource.
func (c *ClientR4B) UpdateMedicationAdministration(ctx context.Context, resource r4b.MedicationAdministration) (update.Result[r4b.MedicationAdministration], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationAdministration]{}, err
	}
	typed, ok := result.Resource.(r4b.MedicationAdministration)
	if !ok {
		return update.Result[r4b.MedicationAdministration]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MedicationAdministration]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationAdministration deletes a MedicationAdministration resource by ID.
func (c *ClientR4B) DeleteMedicationAdministration(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MedicationAdministration", id)
}

// SearchMedicationAdministration performs a search for MedicationAdministration resources.
func (c *ClientR4B) SearchMedicationAdministration(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MedicationAdministration], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MedicationAdministration", parameters, options)
	if err != nil {
		return search.Result[r4b.MedicationAdministration]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MedicationAdministration, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MedicationAdministration)
		if !ok {
			return search.Result[r4b.MedicationAdministration]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MedicationAdministration]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationDispense creates a new MedicationDispense resource.
func (c *ClientR4B) CreateMedicationDispense(ctx context.Context, resource r4b.MedicationDispense) (r4b.MedicationDispense, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationDispense{}, err
	}
	typed, ok := result.(r4b.MedicationDispense)
	if !ok {
		return r4b.MedicationDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationDispense retrieves a MedicationDispense resource by ID.
func (c *ClientR4B) ReadMedicationDispense(ctx context.Context, id string) (r4b.MedicationDispense, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MedicationDispense", id)
	if err != nil {
		return r4b.MedicationDispense{}, err
	}
	typed, ok := result.(r4b.MedicationDispense)
	if !ok {
		return r4b.MedicationDispense{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationDispense updates an existing MedicationDispense resource.
func (c *ClientR4B) UpdateMedicationDispense(ctx context.Context, resource r4b.MedicationDispense) (update.Result[r4b.MedicationDispense], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationDispense]{}, err
	}
	typed, ok := result.Resource.(r4b.MedicationDispense)
	if !ok {
		return update.Result[r4b.MedicationDispense]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MedicationDispense]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationDispense deletes a MedicationDispense resource by ID.
func (c *ClientR4B) DeleteMedicationDispense(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MedicationDispense", id)
}

// SearchMedicationDispense performs a search for MedicationDispense resources.
func (c *ClientR4B) SearchMedicationDispense(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MedicationDispense], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MedicationDispense", parameters, options)
	if err != nil {
		return search.Result[r4b.MedicationDispense]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MedicationDispense, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MedicationDispense)
		if !ok {
			return search.Result[r4b.MedicationDispense]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MedicationDispense]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationKnowledge creates a new MedicationKnowledge resource.
func (c *ClientR4B) CreateMedicationKnowledge(ctx context.Context, resource r4b.MedicationKnowledge) (r4b.MedicationKnowledge, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationKnowledge{}, err
	}
	typed, ok := result.(r4b.MedicationKnowledge)
	if !ok {
		return r4b.MedicationKnowledge{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationKnowledge retrieves a MedicationKnowledge resource by ID.
func (c *ClientR4B) ReadMedicationKnowledge(ctx context.Context, id string) (r4b.MedicationKnowledge, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MedicationKnowledge", id)
	if err != nil {
		return r4b.MedicationKnowledge{}, err
	}
	typed, ok := result.(r4b.MedicationKnowledge)
	if !ok {
		return r4b.MedicationKnowledge{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationKnowledge updates an existing MedicationKnowledge resource.
func (c *ClientR4B) UpdateMedicationKnowledge(ctx context.Context, resource r4b.MedicationKnowledge) (update.Result[r4b.MedicationKnowledge], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationKnowledge]{}, err
	}
	typed, ok := result.Resource.(r4b.MedicationKnowledge)
	if !ok {
		return update.Result[r4b.MedicationKnowledge]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MedicationKnowledge]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationKnowledge deletes a MedicationKnowledge resource by ID.
func (c *ClientR4B) DeleteMedicationKnowledge(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MedicationKnowledge", id)
}

// SearchMedicationKnowledge performs a search for MedicationKnowledge resources.
func (c *ClientR4B) SearchMedicationKnowledge(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MedicationKnowledge], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MedicationKnowledge", parameters, options)
	if err != nil {
		return search.Result[r4b.MedicationKnowledge]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MedicationKnowledge, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MedicationKnowledge)
		if !ok {
			return search.Result[r4b.MedicationKnowledge]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MedicationKnowledge]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationRequest creates a new MedicationRequest resource.
func (c *ClientR4B) CreateMedicationRequest(ctx context.Context, resource r4b.MedicationRequest) (r4b.MedicationRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationRequest{}, err
	}
	typed, ok := result.(r4b.MedicationRequest)
	if !ok {
		return r4b.MedicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationRequest retrieves a MedicationRequest resource by ID.
func (c *ClientR4B) ReadMedicationRequest(ctx context.Context, id string) (r4b.MedicationRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MedicationRequest", id)
	if err != nil {
		return r4b.MedicationRequest{}, err
	}
	typed, ok := result.(r4b.MedicationRequest)
	if !ok {
		return r4b.MedicationRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationRequest updates an existing MedicationRequest resource.
func (c *ClientR4B) UpdateMedicationRequest(ctx context.Context, resource r4b.MedicationRequest) (update.Result[r4b.MedicationRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationRequest]{}, err
	}
	typed, ok := result.Resource.(r4b.MedicationRequest)
	if !ok {
		return update.Result[r4b.MedicationRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MedicationRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationRequest deletes a MedicationRequest resource by ID.
func (c *ClientR4B) DeleteMedicationRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MedicationRequest", id)
}

// SearchMedicationRequest performs a search for MedicationRequest resources.
func (c *ClientR4B) SearchMedicationRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MedicationRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MedicationRequest", parameters, options)
	if err != nil {
		return search.Result[r4b.MedicationRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MedicationRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MedicationRequest)
		if !ok {
			return search.Result[r4b.MedicationRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MedicationRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicationStatement creates a new MedicationStatement resource.
func (c *ClientR4B) CreateMedicationStatement(ctx context.Context, resource r4b.MedicationStatement) (r4b.MedicationStatement, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MedicationStatement{}, err
	}
	typed, ok := result.(r4b.MedicationStatement)
	if !ok {
		return r4b.MedicationStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicationStatement retrieves a MedicationStatement resource by ID.
func (c *ClientR4B) ReadMedicationStatement(ctx context.Context, id string) (r4b.MedicationStatement, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MedicationStatement", id)
	if err != nil {
		return r4b.MedicationStatement{}, err
	}
	typed, ok := result.(r4b.MedicationStatement)
	if !ok {
		return r4b.MedicationStatement{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicationStatement updates an existing MedicationStatement resource.
func (c *ClientR4B) UpdateMedicationStatement(ctx context.Context, resource r4b.MedicationStatement) (update.Result[r4b.MedicationStatement], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicationStatement]{}, err
	}
	typed, ok := result.Resource.(r4b.MedicationStatement)
	if !ok {
		return update.Result[r4b.MedicationStatement]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MedicationStatement]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicationStatement deletes a MedicationStatement resource by ID.
func (c *ClientR4B) DeleteMedicationStatement(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MedicationStatement", id)
}

// SearchMedicationStatement performs a search for MedicationStatement resources.
func (c *ClientR4B) SearchMedicationStatement(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MedicationStatement], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MedicationStatement", parameters, options)
	if err != nil {
		return search.Result[r4b.MedicationStatement]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MedicationStatement, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MedicationStatement)
		if !ok {
			return search.Result[r4b.MedicationStatement]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MedicationStatement]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMedicinalProductDefinition creates a new MedicinalProductDefinition resource.
func (c *ClientR4B) CreateMedicinalProductDefinition(ctx context.Context, resource r4b.MedicinalProductDefinition) (r4b.MedicinalProductDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MedicinalProductDefinition{}, err
	}
	typed, ok := result.(r4b.MedicinalProductDefinition)
	if !ok {
		return r4b.MedicinalProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMedicinalProductDefinition retrieves a MedicinalProductDefinition resource by ID.
func (c *ClientR4B) ReadMedicinalProductDefinition(ctx context.Context, id string) (r4b.MedicinalProductDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MedicinalProductDefinition", id)
	if err != nil {
		return r4b.MedicinalProductDefinition{}, err
	}
	typed, ok := result.(r4b.MedicinalProductDefinition)
	if !ok {
		return r4b.MedicinalProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMedicinalProductDefinition updates an existing MedicinalProductDefinition resource.
func (c *ClientR4B) UpdateMedicinalProductDefinition(ctx context.Context, resource r4b.MedicinalProductDefinition) (update.Result[r4b.MedicinalProductDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MedicinalProductDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.MedicinalProductDefinition)
	if !ok {
		return update.Result[r4b.MedicinalProductDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MedicinalProductDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteMedicinalProductDefinition deletes a MedicinalProductDefinition resource by ID.
func (c *ClientR4B) DeleteMedicinalProductDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MedicinalProductDefinition", id)
}

// SearchMedicinalProductDefinition performs a search for MedicinalProductDefinition resources.
func (c *ClientR4B) SearchMedicinalProductDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MedicinalProductDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MedicinalProductDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.MedicinalProductDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MedicinalProductDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MedicinalProductDefinition)
		if !ok {
			return search.Result[r4b.MedicinalProductDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MedicinalProductDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMessageDefinition creates a new MessageDefinition resource.
func (c *ClientR4B) CreateMessageDefinition(ctx context.Context, resource r4b.MessageDefinition) (r4b.MessageDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MessageDefinition{}, err
	}
	typed, ok := result.(r4b.MessageDefinition)
	if !ok {
		return r4b.MessageDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMessageDefinition retrieves a MessageDefinition resource by ID.
func (c *ClientR4B) ReadMessageDefinition(ctx context.Context, id string) (r4b.MessageDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MessageDefinition", id)
	if err != nil {
		return r4b.MessageDefinition{}, err
	}
	typed, ok := result.(r4b.MessageDefinition)
	if !ok {
		return r4b.MessageDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMessageDefinition updates an existing MessageDefinition resource.
func (c *ClientR4B) UpdateMessageDefinition(ctx context.Context, resource r4b.MessageDefinition) (update.Result[r4b.MessageDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MessageDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.MessageDefinition)
	if !ok {
		return update.Result[r4b.MessageDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MessageDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteMessageDefinition deletes a MessageDefinition resource by ID.
func (c *ClientR4B) DeleteMessageDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MessageDefinition", id)
}

// SearchMessageDefinition performs a search for MessageDefinition resources.
func (c *ClientR4B) SearchMessageDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MessageDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MessageDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.MessageDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MessageDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MessageDefinition)
		if !ok {
			return search.Result[r4b.MessageDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MessageDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMessageHeader creates a new MessageHeader resource.
func (c *ClientR4B) CreateMessageHeader(ctx context.Context, resource r4b.MessageHeader) (r4b.MessageHeader, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MessageHeader{}, err
	}
	typed, ok := result.(r4b.MessageHeader)
	if !ok {
		return r4b.MessageHeader{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMessageHeader retrieves a MessageHeader resource by ID.
func (c *ClientR4B) ReadMessageHeader(ctx context.Context, id string) (r4b.MessageHeader, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MessageHeader", id)
	if err != nil {
		return r4b.MessageHeader{}, err
	}
	typed, ok := result.(r4b.MessageHeader)
	if !ok {
		return r4b.MessageHeader{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMessageHeader updates an existing MessageHeader resource.
func (c *ClientR4B) UpdateMessageHeader(ctx context.Context, resource r4b.MessageHeader) (update.Result[r4b.MessageHeader], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MessageHeader]{}, err
	}
	typed, ok := result.Resource.(r4b.MessageHeader)
	if !ok {
		return update.Result[r4b.MessageHeader]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MessageHeader]{Resource: typed, Created: result.Created}, nil
}

// DeleteMessageHeader deletes a MessageHeader resource by ID.
func (c *ClientR4B) DeleteMessageHeader(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MessageHeader", id)
}

// SearchMessageHeader performs a search for MessageHeader resources.
func (c *ClientR4B) SearchMessageHeader(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MessageHeader], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MessageHeader", parameters, options)
	if err != nil {
		return search.Result[r4b.MessageHeader]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MessageHeader, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MessageHeader)
		if !ok {
			return search.Result[r4b.MessageHeader]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MessageHeader]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateMolecularSequence creates a new MolecularSequence resource.
func (c *ClientR4B) CreateMolecularSequence(ctx context.Context, resource r4b.MolecularSequence) (r4b.MolecularSequence, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.MolecularSequence{}, err
	}
	typed, ok := result.(r4b.MolecularSequence)
	if !ok {
		return r4b.MolecularSequence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadMolecularSequence retrieves a MolecularSequence resource by ID.
func (c *ClientR4B) ReadMolecularSequence(ctx context.Context, id string) (r4b.MolecularSequence, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "MolecularSequence", id)
	if err != nil {
		return r4b.MolecularSequence{}, err
	}
	typed, ok := result.(r4b.MolecularSequence)
	if !ok {
		return r4b.MolecularSequence{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateMolecularSequence updates an existing MolecularSequence resource.
func (c *ClientR4B) UpdateMolecularSequence(ctx context.Context, resource r4b.MolecularSequence) (update.Result[r4b.MolecularSequence], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.MolecularSequence]{}, err
	}
	typed, ok := result.Resource.(r4b.MolecularSequence)
	if !ok {
		return update.Result[r4b.MolecularSequence]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.MolecularSequence]{Resource: typed, Created: result.Created}, nil
}

// DeleteMolecularSequence deletes a MolecularSequence resource by ID.
func (c *ClientR4B) DeleteMolecularSequence(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "MolecularSequence", id)
}

// SearchMolecularSequence performs a search for MolecularSequence resources.
func (c *ClientR4B) SearchMolecularSequence(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.MolecularSequence], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "MolecularSequence", parameters, options)
	if err != nil {
		return search.Result[r4b.MolecularSequence]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.MolecularSequence, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.MolecularSequence)
		if !ok {
			return search.Result[r4b.MolecularSequence]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.MolecularSequence]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNamingSystem creates a new NamingSystem resource.
func (c *ClientR4B) CreateNamingSystem(ctx context.Context, resource r4b.NamingSystem) (r4b.NamingSystem, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.NamingSystem{}, err
	}
	typed, ok := result.(r4b.NamingSystem)
	if !ok {
		return r4b.NamingSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNamingSystem retrieves a NamingSystem resource by ID.
func (c *ClientR4B) ReadNamingSystem(ctx context.Context, id string) (r4b.NamingSystem, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "NamingSystem", id)
	if err != nil {
		return r4b.NamingSystem{}, err
	}
	typed, ok := result.(r4b.NamingSystem)
	if !ok {
		return r4b.NamingSystem{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNamingSystem updates an existing NamingSystem resource.
func (c *ClientR4B) UpdateNamingSystem(ctx context.Context, resource r4b.NamingSystem) (update.Result[r4b.NamingSystem], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.NamingSystem]{}, err
	}
	typed, ok := result.Resource.(r4b.NamingSystem)
	if !ok {
		return update.Result[r4b.NamingSystem]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.NamingSystem]{Resource: typed, Created: result.Created}, nil
}

// DeleteNamingSystem deletes a NamingSystem resource by ID.
func (c *ClientR4B) DeleteNamingSystem(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "NamingSystem", id)
}

// SearchNamingSystem performs a search for NamingSystem resources.
func (c *ClientR4B) SearchNamingSystem(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.NamingSystem], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "NamingSystem", parameters, options)
	if err != nil {
		return search.Result[r4b.NamingSystem]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.NamingSystem, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.NamingSystem)
		if !ok {
			return search.Result[r4b.NamingSystem]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.NamingSystem]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNutritionOrder creates a new NutritionOrder resource.
func (c *ClientR4B) CreateNutritionOrder(ctx context.Context, resource r4b.NutritionOrder) (r4b.NutritionOrder, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.NutritionOrder{}, err
	}
	typed, ok := result.(r4b.NutritionOrder)
	if !ok {
		return r4b.NutritionOrder{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNutritionOrder retrieves a NutritionOrder resource by ID.
func (c *ClientR4B) ReadNutritionOrder(ctx context.Context, id string) (r4b.NutritionOrder, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "NutritionOrder", id)
	if err != nil {
		return r4b.NutritionOrder{}, err
	}
	typed, ok := result.(r4b.NutritionOrder)
	if !ok {
		return r4b.NutritionOrder{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNutritionOrder updates an existing NutritionOrder resource.
func (c *ClientR4B) UpdateNutritionOrder(ctx context.Context, resource r4b.NutritionOrder) (update.Result[r4b.NutritionOrder], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.NutritionOrder]{}, err
	}
	typed, ok := result.Resource.(r4b.NutritionOrder)
	if !ok {
		return update.Result[r4b.NutritionOrder]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.NutritionOrder]{Resource: typed, Created: result.Created}, nil
}

// DeleteNutritionOrder deletes a NutritionOrder resource by ID.
func (c *ClientR4B) DeleteNutritionOrder(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "NutritionOrder", id)
}

// SearchNutritionOrder performs a search for NutritionOrder resources.
func (c *ClientR4B) SearchNutritionOrder(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.NutritionOrder], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "NutritionOrder", parameters, options)
	if err != nil {
		return search.Result[r4b.NutritionOrder]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.NutritionOrder, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.NutritionOrder)
		if !ok {
			return search.Result[r4b.NutritionOrder]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.NutritionOrder]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateNutritionProduct creates a new NutritionProduct resource.
func (c *ClientR4B) CreateNutritionProduct(ctx context.Context, resource r4b.NutritionProduct) (r4b.NutritionProduct, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.NutritionProduct{}, err
	}
	typed, ok := result.(r4b.NutritionProduct)
	if !ok {
		return r4b.NutritionProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadNutritionProduct retrieves a NutritionProduct resource by ID.
func (c *ClientR4B) ReadNutritionProduct(ctx context.Context, id string) (r4b.NutritionProduct, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "NutritionProduct", id)
	if err != nil {
		return r4b.NutritionProduct{}, err
	}
	typed, ok := result.(r4b.NutritionProduct)
	if !ok {
		return r4b.NutritionProduct{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateNutritionProduct updates an existing NutritionProduct resource.
func (c *ClientR4B) UpdateNutritionProduct(ctx context.Context, resource r4b.NutritionProduct) (update.Result[r4b.NutritionProduct], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.NutritionProduct]{}, err
	}
	typed, ok := result.Resource.(r4b.NutritionProduct)
	if !ok {
		return update.Result[r4b.NutritionProduct]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.NutritionProduct]{Resource: typed, Created: result.Created}, nil
}

// DeleteNutritionProduct deletes a NutritionProduct resource by ID.
func (c *ClientR4B) DeleteNutritionProduct(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "NutritionProduct", id)
}

// SearchNutritionProduct performs a search for NutritionProduct resources.
func (c *ClientR4B) SearchNutritionProduct(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.NutritionProduct], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "NutritionProduct", parameters, options)
	if err != nil {
		return search.Result[r4b.NutritionProduct]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.NutritionProduct, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.NutritionProduct)
		if !ok {
			return search.Result[r4b.NutritionProduct]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.NutritionProduct]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateObservation creates a new Observation resource.
func (c *ClientR4B) CreateObservation(ctx context.Context, resource r4b.Observation) (r4b.Observation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Observation{}, err
	}
	typed, ok := result.(r4b.Observation)
	if !ok {
		return r4b.Observation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadObservation retrieves a Observation resource by ID.
func (c *ClientR4B) ReadObservation(ctx context.Context, id string) (r4b.Observation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Observation", id)
	if err != nil {
		return r4b.Observation{}, err
	}
	typed, ok := result.(r4b.Observation)
	if !ok {
		return r4b.Observation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateObservation updates an existing Observation resource.
func (c *ClientR4B) UpdateObservation(ctx context.Context, resource r4b.Observation) (update.Result[r4b.Observation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Observation]{}, err
	}
	typed, ok := result.Resource.(r4b.Observation)
	if !ok {
		return update.Result[r4b.Observation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Observation]{Resource: typed, Created: result.Created}, nil
}

// DeleteObservation deletes a Observation resource by ID.
func (c *ClientR4B) DeleteObservation(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Observation", id)
}

// SearchObservation performs a search for Observation resources.
func (c *ClientR4B) SearchObservation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Observation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Observation", parameters, options)
	if err != nil {
		return search.Result[r4b.Observation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Observation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Observation)
		if !ok {
			return search.Result[r4b.Observation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Observation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateObservationDefinition creates a new ObservationDefinition resource.
func (c *ClientR4B) CreateObservationDefinition(ctx context.Context, resource r4b.ObservationDefinition) (r4b.ObservationDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ObservationDefinition{}, err
	}
	typed, ok := result.(r4b.ObservationDefinition)
	if !ok {
		return r4b.ObservationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadObservationDefinition retrieves a ObservationDefinition resource by ID.
func (c *ClientR4B) ReadObservationDefinition(ctx context.Context, id string) (r4b.ObservationDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ObservationDefinition", id)
	if err != nil {
		return r4b.ObservationDefinition{}, err
	}
	typed, ok := result.(r4b.ObservationDefinition)
	if !ok {
		return r4b.ObservationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateObservationDefinition updates an existing ObservationDefinition resource.
func (c *ClientR4B) UpdateObservationDefinition(ctx context.Context, resource r4b.ObservationDefinition) (update.Result[r4b.ObservationDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ObservationDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.ObservationDefinition)
	if !ok {
		return update.Result[r4b.ObservationDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ObservationDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteObservationDefinition deletes a ObservationDefinition resource by ID.
func (c *ClientR4B) DeleteObservationDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ObservationDefinition", id)
}

// SearchObservationDefinition performs a search for ObservationDefinition resources.
func (c *ClientR4B) SearchObservationDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ObservationDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ObservationDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.ObservationDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ObservationDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ObservationDefinition)
		if !ok {
			return search.Result[r4b.ObservationDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ObservationDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOperationDefinition creates a new OperationDefinition resource.
func (c *ClientR4B) CreateOperationDefinition(ctx context.Context, resource r4b.OperationDefinition) (r4b.OperationDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.OperationDefinition{}, err
	}
	typed, ok := result.(r4b.OperationDefinition)
	if !ok {
		return r4b.OperationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOperationDefinition retrieves a OperationDefinition resource by ID.
func (c *ClientR4B) ReadOperationDefinition(ctx context.Context, id string) (r4b.OperationDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "OperationDefinition", id)
	if err != nil {
		return r4b.OperationDefinition{}, err
	}
	typed, ok := result.(r4b.OperationDefinition)
	if !ok {
		return r4b.OperationDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOperationDefinition updates an existing OperationDefinition resource.
func (c *ClientR4B) UpdateOperationDefinition(ctx context.Context, resource r4b.OperationDefinition) (update.Result[r4b.OperationDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.OperationDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.OperationDefinition)
	if !ok {
		return update.Result[r4b.OperationDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.OperationDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteOperationDefinition deletes a OperationDefinition resource by ID.
func (c *ClientR4B) DeleteOperationDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "OperationDefinition", id)
}

// SearchOperationDefinition performs a search for OperationDefinition resources.
func (c *ClientR4B) SearchOperationDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.OperationDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "OperationDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.OperationDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.OperationDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.OperationDefinition)
		if !ok {
			return search.Result[r4b.OperationDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.OperationDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOperationOutcome creates a new OperationOutcome resource.
func (c *ClientR4B) CreateOperationOutcome(ctx context.Context, resource r4b.OperationOutcome) (r4b.OperationOutcome, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.OperationOutcome{}, err
	}
	typed, ok := result.(r4b.OperationOutcome)
	if !ok {
		return r4b.OperationOutcome{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOperationOutcome retrieves a OperationOutcome resource by ID.
func (c *ClientR4B) ReadOperationOutcome(ctx context.Context, id string) (r4b.OperationOutcome, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "OperationOutcome", id)
	if err != nil {
		return r4b.OperationOutcome{}, err
	}
	typed, ok := result.(r4b.OperationOutcome)
	if !ok {
		return r4b.OperationOutcome{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOperationOutcome updates an existing OperationOutcome resource.
func (c *ClientR4B) UpdateOperationOutcome(ctx context.Context, resource r4b.OperationOutcome) (update.Result[r4b.OperationOutcome], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.OperationOutcome]{}, err
	}
	typed, ok := result.Resource.(r4b.OperationOutcome)
	if !ok {
		return update.Result[r4b.OperationOutcome]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.OperationOutcome]{Resource: typed, Created: result.Created}, nil
}

// DeleteOperationOutcome deletes a OperationOutcome resource by ID.
func (c *ClientR4B) DeleteOperationOutcome(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "OperationOutcome", id)
}

// SearchOperationOutcome performs a search for OperationOutcome resources.
func (c *ClientR4B) SearchOperationOutcome(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.OperationOutcome], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "OperationOutcome", parameters, options)
	if err != nil {
		return search.Result[r4b.OperationOutcome]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.OperationOutcome, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.OperationOutcome)
		if !ok {
			return search.Result[r4b.OperationOutcome]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.OperationOutcome]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOrganization creates a new Organization resource.
func (c *ClientR4B) CreateOrganization(ctx context.Context, resource r4b.Organization) (r4b.Organization, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Organization{}, err
	}
	typed, ok := result.(r4b.Organization)
	if !ok {
		return r4b.Organization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOrganization retrieves a Organization resource by ID.
func (c *ClientR4B) ReadOrganization(ctx context.Context, id string) (r4b.Organization, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Organization", id)
	if err != nil {
		return r4b.Organization{}, err
	}
	typed, ok := result.(r4b.Organization)
	if !ok {
		return r4b.Organization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOrganization updates an existing Organization resource.
func (c *ClientR4B) UpdateOrganization(ctx context.Context, resource r4b.Organization) (update.Result[r4b.Organization], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Organization]{}, err
	}
	typed, ok := result.Resource.(r4b.Organization)
	if !ok {
		return update.Result[r4b.Organization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Organization]{Resource: typed, Created: result.Created}, nil
}

// DeleteOrganization deletes a Organization resource by ID.
func (c *ClientR4B) DeleteOrganization(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Organization", id)
}

// SearchOrganization performs a search for Organization resources.
func (c *ClientR4B) SearchOrganization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Organization], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Organization", parameters, options)
	if err != nil {
		return search.Result[r4b.Organization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Organization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Organization)
		if !ok {
			return search.Result[r4b.Organization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Organization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateOrganizationAffiliation creates a new OrganizationAffiliation resource.
func (c *ClientR4B) CreateOrganizationAffiliation(ctx context.Context, resource r4b.OrganizationAffiliation) (r4b.OrganizationAffiliation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.OrganizationAffiliation{}, err
	}
	typed, ok := result.(r4b.OrganizationAffiliation)
	if !ok {
		return r4b.OrganizationAffiliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadOrganizationAffiliation retrieves a OrganizationAffiliation resource by ID.
func (c *ClientR4B) ReadOrganizationAffiliation(ctx context.Context, id string) (r4b.OrganizationAffiliation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "OrganizationAffiliation", id)
	if err != nil {
		return r4b.OrganizationAffiliation{}, err
	}
	typed, ok := result.(r4b.OrganizationAffiliation)
	if !ok {
		return r4b.OrganizationAffiliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateOrganizationAffiliation updates an existing OrganizationAffiliation resource.
func (c *ClientR4B) UpdateOrganizationAffiliation(ctx context.Context, resource r4b.OrganizationAffiliation) (update.Result[r4b.OrganizationAffiliation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.OrganizationAffiliation]{}, err
	}
	typed, ok := result.Resource.(r4b.OrganizationAffiliation)
	if !ok {
		return update.Result[r4b.OrganizationAffiliation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.OrganizationAffiliation]{Resource: typed, Created: result.Created}, nil
}

// DeleteOrganizationAffiliation deletes a OrganizationAffiliation resource by ID.
func (c *ClientR4B) DeleteOrganizationAffiliation(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "OrganizationAffiliation", id)
}

// SearchOrganizationAffiliation performs a search for OrganizationAffiliation resources.
func (c *ClientR4B) SearchOrganizationAffiliation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.OrganizationAffiliation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "OrganizationAffiliation", parameters, options)
	if err != nil {
		return search.Result[r4b.OrganizationAffiliation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.OrganizationAffiliation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.OrganizationAffiliation)
		if !ok {
			return search.Result[r4b.OrganizationAffiliation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.OrganizationAffiliation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePackagedProductDefinition creates a new PackagedProductDefinition resource.
func (c *ClientR4B) CreatePackagedProductDefinition(ctx context.Context, resource r4b.PackagedProductDefinition) (r4b.PackagedProductDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.PackagedProductDefinition{}, err
	}
	typed, ok := result.(r4b.PackagedProductDefinition)
	if !ok {
		return r4b.PackagedProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPackagedProductDefinition retrieves a PackagedProductDefinition resource by ID.
func (c *ClientR4B) ReadPackagedProductDefinition(ctx context.Context, id string) (r4b.PackagedProductDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "PackagedProductDefinition", id)
	if err != nil {
		return r4b.PackagedProductDefinition{}, err
	}
	typed, ok := result.(r4b.PackagedProductDefinition)
	if !ok {
		return r4b.PackagedProductDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePackagedProductDefinition updates an existing PackagedProductDefinition resource.
func (c *ClientR4B) UpdatePackagedProductDefinition(ctx context.Context, resource r4b.PackagedProductDefinition) (update.Result[r4b.PackagedProductDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PackagedProductDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.PackagedProductDefinition)
	if !ok {
		return update.Result[r4b.PackagedProductDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.PackagedProductDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeletePackagedProductDefinition deletes a PackagedProductDefinition resource by ID.
func (c *ClientR4B) DeletePackagedProductDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "PackagedProductDefinition", id)
}

// SearchPackagedProductDefinition performs a search for PackagedProductDefinition resources.
func (c *ClientR4B) SearchPackagedProductDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.PackagedProductDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "PackagedProductDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.PackagedProductDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.PackagedProductDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.PackagedProductDefinition)
		if !ok {
			return search.Result[r4b.PackagedProductDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.PackagedProductDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateParameters creates a new Parameters resource.
func (c *ClientR4B) CreateParameters(ctx context.Context, resource r4b.Parameters) (r4b.Parameters, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Parameters{}, err
	}
	typed, ok := result.(r4b.Parameters)
	if !ok {
		return r4b.Parameters{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadParameters retrieves a Parameters resource by ID.
func (c *ClientR4B) ReadParameters(ctx context.Context, id string) (r4b.Parameters, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Parameters", id)
	if err != nil {
		return r4b.Parameters{}, err
	}
	typed, ok := result.(r4b.Parameters)
	if !ok {
		return r4b.Parameters{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateParameters updates an existing Parameters resource.
func (c *ClientR4B) UpdateParameters(ctx context.Context, resource r4b.Parameters) (update.Result[r4b.Parameters], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Parameters]{}, err
	}
	typed, ok := result.Resource.(r4b.Parameters)
	if !ok {
		return update.Result[r4b.Parameters]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Parameters]{Resource: typed, Created: result.Created}, nil
}

// DeleteParameters deletes a Parameters resource by ID.
func (c *ClientR4B) DeleteParameters(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Parameters", id)
}

// SearchParameters performs a search for Parameters resources.
func (c *ClientR4B) SearchParameters(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Parameters], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Parameters", parameters, options)
	if err != nil {
		return search.Result[r4b.Parameters]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Parameters, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Parameters)
		if !ok {
			return search.Result[r4b.Parameters]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Parameters]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePatient creates a new Patient resource.
func (c *ClientR4B) CreatePatient(ctx context.Context, resource r4b.Patient) (r4b.Patient, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Patient{}, err
	}
	typed, ok := result.(r4b.Patient)
	if !ok {
		return r4b.Patient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPatient retrieves a Patient resource by ID.
func (c *ClientR4B) ReadPatient(ctx context.Context, id string) (r4b.Patient, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Patient", id)
	if err != nil {
		return r4b.Patient{}, err
	}
	typed, ok := result.(r4b.Patient)
	if !ok {
		return r4b.Patient{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePatient updates an existing Patient resource.
func (c *ClientR4B) UpdatePatient(ctx context.Context, resource r4b.Patient) (update.Result[r4b.Patient], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Patient]{}, err
	}
	typed, ok := result.Resource.(r4b.Patient)
	if !ok {
		return update.Result[r4b.Patient]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Patient]{Resource: typed, Created: result.Created}, nil
}

// DeletePatient deletes a Patient resource by ID.
func (c *ClientR4B) DeletePatient(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Patient", id)
}

// SearchPatient performs a search for Patient resources.
func (c *ClientR4B) SearchPatient(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Patient], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Patient", parameters, options)
	if err != nil {
		return search.Result[r4b.Patient]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Patient, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Patient)
		if !ok {
			return search.Result[r4b.Patient]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Patient]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePaymentNotice creates a new PaymentNotice resource.
func (c *ClientR4B) CreatePaymentNotice(ctx context.Context, resource r4b.PaymentNotice) (r4b.PaymentNotice, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.PaymentNotice{}, err
	}
	typed, ok := result.(r4b.PaymentNotice)
	if !ok {
		return r4b.PaymentNotice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPaymentNotice retrieves a PaymentNotice resource by ID.
func (c *ClientR4B) ReadPaymentNotice(ctx context.Context, id string) (r4b.PaymentNotice, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "PaymentNotice", id)
	if err != nil {
		return r4b.PaymentNotice{}, err
	}
	typed, ok := result.(r4b.PaymentNotice)
	if !ok {
		return r4b.PaymentNotice{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePaymentNotice updates an existing PaymentNotice resource.
func (c *ClientR4B) UpdatePaymentNotice(ctx context.Context, resource r4b.PaymentNotice) (update.Result[r4b.PaymentNotice], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PaymentNotice]{}, err
	}
	typed, ok := result.Resource.(r4b.PaymentNotice)
	if !ok {
		return update.Result[r4b.PaymentNotice]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.PaymentNotice]{Resource: typed, Created: result.Created}, nil
}

// DeletePaymentNotice deletes a PaymentNotice resource by ID.
func (c *ClientR4B) DeletePaymentNotice(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "PaymentNotice", id)
}

// SearchPaymentNotice performs a search for PaymentNotice resources.
func (c *ClientR4B) SearchPaymentNotice(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.PaymentNotice], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "PaymentNotice", parameters, options)
	if err != nil {
		return search.Result[r4b.PaymentNotice]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.PaymentNotice, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.PaymentNotice)
		if !ok {
			return search.Result[r4b.PaymentNotice]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.PaymentNotice]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePaymentReconciliation creates a new PaymentReconciliation resource.
func (c *ClientR4B) CreatePaymentReconciliation(ctx context.Context, resource r4b.PaymentReconciliation) (r4b.PaymentReconciliation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.PaymentReconciliation{}, err
	}
	typed, ok := result.(r4b.PaymentReconciliation)
	if !ok {
		return r4b.PaymentReconciliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPaymentReconciliation retrieves a PaymentReconciliation resource by ID.
func (c *ClientR4B) ReadPaymentReconciliation(ctx context.Context, id string) (r4b.PaymentReconciliation, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "PaymentReconciliation", id)
	if err != nil {
		return r4b.PaymentReconciliation{}, err
	}
	typed, ok := result.(r4b.PaymentReconciliation)
	if !ok {
		return r4b.PaymentReconciliation{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePaymentReconciliation updates an existing PaymentReconciliation resource.
func (c *ClientR4B) UpdatePaymentReconciliation(ctx context.Context, resource r4b.PaymentReconciliation) (update.Result[r4b.PaymentReconciliation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PaymentReconciliation]{}, err
	}
	typed, ok := result.Resource.(r4b.PaymentReconciliation)
	if !ok {
		return update.Result[r4b.PaymentReconciliation]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.PaymentReconciliation]{Resource: typed, Created: result.Created}, nil
}

// DeletePaymentReconciliation deletes a PaymentReconciliation resource by ID.
func (c *ClientR4B) DeletePaymentReconciliation(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "PaymentReconciliation", id)
}

// SearchPaymentReconciliation performs a search for PaymentReconciliation resources.
func (c *ClientR4B) SearchPaymentReconciliation(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.PaymentReconciliation], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "PaymentReconciliation", parameters, options)
	if err != nil {
		return search.Result[r4b.PaymentReconciliation]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.PaymentReconciliation, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.PaymentReconciliation)
		if !ok {
			return search.Result[r4b.PaymentReconciliation]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.PaymentReconciliation]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePerson creates a new Person resource.
func (c *ClientR4B) CreatePerson(ctx context.Context, resource r4b.Person) (r4b.Person, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Person{}, err
	}
	typed, ok := result.(r4b.Person)
	if !ok {
		return r4b.Person{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPerson retrieves a Person resource by ID.
func (c *ClientR4B) ReadPerson(ctx context.Context, id string) (r4b.Person, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Person", id)
	if err != nil {
		return r4b.Person{}, err
	}
	typed, ok := result.(r4b.Person)
	if !ok {
		return r4b.Person{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePerson updates an existing Person resource.
func (c *ClientR4B) UpdatePerson(ctx context.Context, resource r4b.Person) (update.Result[r4b.Person], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Person]{}, err
	}
	typed, ok := result.Resource.(r4b.Person)
	if !ok {
		return update.Result[r4b.Person]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Person]{Resource: typed, Created: result.Created}, nil
}

// DeletePerson deletes a Person resource by ID.
func (c *ClientR4B) DeletePerson(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Person", id)
}

// SearchPerson performs a search for Person resources.
func (c *ClientR4B) SearchPerson(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Person], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Person", parameters, options)
	if err != nil {
		return search.Result[r4b.Person]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Person, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Person)
		if !ok {
			return search.Result[r4b.Person]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Person]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePlanDefinition creates a new PlanDefinition resource.
func (c *ClientR4B) CreatePlanDefinition(ctx context.Context, resource r4b.PlanDefinition) (r4b.PlanDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.PlanDefinition{}, err
	}
	typed, ok := result.(r4b.PlanDefinition)
	if !ok {
		return r4b.PlanDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPlanDefinition retrieves a PlanDefinition resource by ID.
func (c *ClientR4B) ReadPlanDefinition(ctx context.Context, id string) (r4b.PlanDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "PlanDefinition", id)
	if err != nil {
		return r4b.PlanDefinition{}, err
	}
	typed, ok := result.(r4b.PlanDefinition)
	if !ok {
		return r4b.PlanDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePlanDefinition updates an existing PlanDefinition resource.
func (c *ClientR4B) UpdatePlanDefinition(ctx context.Context, resource r4b.PlanDefinition) (update.Result[r4b.PlanDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PlanDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.PlanDefinition)
	if !ok {
		return update.Result[r4b.PlanDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.PlanDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeletePlanDefinition deletes a PlanDefinition resource by ID.
func (c *ClientR4B) DeletePlanDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "PlanDefinition", id)
}

// SearchPlanDefinition performs a search for PlanDefinition resources.
func (c *ClientR4B) SearchPlanDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.PlanDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "PlanDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.PlanDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.PlanDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.PlanDefinition)
		if !ok {
			return search.Result[r4b.PlanDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.PlanDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePractitioner creates a new Practitioner resource.
func (c *ClientR4B) CreatePractitioner(ctx context.Context, resource r4b.Practitioner) (r4b.Practitioner, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Practitioner{}, err
	}
	typed, ok := result.(r4b.Practitioner)
	if !ok {
		return r4b.Practitioner{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPractitioner retrieves a Practitioner resource by ID.
func (c *ClientR4B) ReadPractitioner(ctx context.Context, id string) (r4b.Practitioner, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Practitioner", id)
	if err != nil {
		return r4b.Practitioner{}, err
	}
	typed, ok := result.(r4b.Practitioner)
	if !ok {
		return r4b.Practitioner{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePractitioner updates an existing Practitioner resource.
func (c *ClientR4B) UpdatePractitioner(ctx context.Context, resource r4b.Practitioner) (update.Result[r4b.Practitioner], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Practitioner]{}, err
	}
	typed, ok := result.Resource.(r4b.Practitioner)
	if !ok {
		return update.Result[r4b.Practitioner]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Practitioner]{Resource: typed, Created: result.Created}, nil
}

// DeletePractitioner deletes a Practitioner resource by ID.
func (c *ClientR4B) DeletePractitioner(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Practitioner", id)
}

// SearchPractitioner performs a search for Practitioner resources.
func (c *ClientR4B) SearchPractitioner(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Practitioner], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Practitioner", parameters, options)
	if err != nil {
		return search.Result[r4b.Practitioner]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Practitioner, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Practitioner)
		if !ok {
			return search.Result[r4b.Practitioner]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Practitioner]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreatePractitionerRole creates a new PractitionerRole resource.
func (c *ClientR4B) CreatePractitionerRole(ctx context.Context, resource r4b.PractitionerRole) (r4b.PractitionerRole, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.PractitionerRole{}, err
	}
	typed, ok := result.(r4b.PractitionerRole)
	if !ok {
		return r4b.PractitionerRole{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadPractitionerRole retrieves a PractitionerRole resource by ID.
func (c *ClientR4B) ReadPractitionerRole(ctx context.Context, id string) (r4b.PractitionerRole, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "PractitionerRole", id)
	if err != nil {
		return r4b.PractitionerRole{}, err
	}
	typed, ok := result.(r4b.PractitionerRole)
	if !ok {
		return r4b.PractitionerRole{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdatePractitionerRole updates an existing PractitionerRole resource.
func (c *ClientR4B) UpdatePractitionerRole(ctx context.Context, resource r4b.PractitionerRole) (update.Result[r4b.PractitionerRole], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.PractitionerRole]{}, err
	}
	typed, ok := result.Resource.(r4b.PractitionerRole)
	if !ok {
		return update.Result[r4b.PractitionerRole]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.PractitionerRole]{Resource: typed, Created: result.Created}, nil
}

// DeletePractitionerRole deletes a PractitionerRole resource by ID.
func (c *ClientR4B) DeletePractitionerRole(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "PractitionerRole", id)
}

// SearchPractitionerRole performs a search for PractitionerRole resources.
func (c *ClientR4B) SearchPractitionerRole(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.PractitionerRole], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "PractitionerRole", parameters, options)
	if err != nil {
		return search.Result[r4b.PractitionerRole]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.PractitionerRole, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.PractitionerRole)
		if !ok {
			return search.Result[r4b.PractitionerRole]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.PractitionerRole]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateProcedure creates a new Procedure resource.
func (c *ClientR4B) CreateProcedure(ctx context.Context, resource r4b.Procedure) (r4b.Procedure, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Procedure{}, err
	}
	typed, ok := result.(r4b.Procedure)
	if !ok {
		return r4b.Procedure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadProcedure retrieves a Procedure resource by ID.
func (c *ClientR4B) ReadProcedure(ctx context.Context, id string) (r4b.Procedure, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Procedure", id)
	if err != nil {
		return r4b.Procedure{}, err
	}
	typed, ok := result.(r4b.Procedure)
	if !ok {
		return r4b.Procedure{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateProcedure updates an existing Procedure resource.
func (c *ClientR4B) UpdateProcedure(ctx context.Context, resource r4b.Procedure) (update.Result[r4b.Procedure], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Procedure]{}, err
	}
	typed, ok := result.Resource.(r4b.Procedure)
	if !ok {
		return update.Result[r4b.Procedure]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Procedure]{Resource: typed, Created: result.Created}, nil
}

// DeleteProcedure deletes a Procedure resource by ID.
func (c *ClientR4B) DeleteProcedure(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Procedure", id)
}

// SearchProcedure performs a search for Procedure resources.
func (c *ClientR4B) SearchProcedure(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Procedure], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Procedure", parameters, options)
	if err != nil {
		return search.Result[r4b.Procedure]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Procedure, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Procedure)
		if !ok {
			return search.Result[r4b.Procedure]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Procedure]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateProvenance creates a new Provenance resource.
func (c *ClientR4B) CreateProvenance(ctx context.Context, resource r4b.Provenance) (r4b.Provenance, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Provenance{}, err
	}
	typed, ok := result.(r4b.Provenance)
	if !ok {
		return r4b.Provenance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadProvenance retrieves a Provenance resource by ID.
func (c *ClientR4B) ReadProvenance(ctx context.Context, id string) (r4b.Provenance, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Provenance", id)
	if err != nil {
		return r4b.Provenance{}, err
	}
	typed, ok := result.(r4b.Provenance)
	if !ok {
		return r4b.Provenance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateProvenance updates an existing Provenance resource.
func (c *ClientR4B) UpdateProvenance(ctx context.Context, resource r4b.Provenance) (update.Result[r4b.Provenance], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Provenance]{}, err
	}
	typed, ok := result.Resource.(r4b.Provenance)
	if !ok {
		return update.Result[r4b.Provenance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Provenance]{Resource: typed, Created: result.Created}, nil
}

// DeleteProvenance deletes a Provenance resource by ID.
func (c *ClientR4B) DeleteProvenance(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Provenance", id)
}

// SearchProvenance performs a search for Provenance resources.
func (c *ClientR4B) SearchProvenance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Provenance], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Provenance", parameters, options)
	if err != nil {
		return search.Result[r4b.Provenance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Provenance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Provenance)
		if !ok {
			return search.Result[r4b.Provenance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Provenance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateQuestionnaire creates a new Questionnaire resource.
func (c *ClientR4B) CreateQuestionnaire(ctx context.Context, resource r4b.Questionnaire) (r4b.Questionnaire, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Questionnaire{}, err
	}
	typed, ok := result.(r4b.Questionnaire)
	if !ok {
		return r4b.Questionnaire{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadQuestionnaire retrieves a Questionnaire resource by ID.
func (c *ClientR4B) ReadQuestionnaire(ctx context.Context, id string) (r4b.Questionnaire, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Questionnaire", id)
	if err != nil {
		return r4b.Questionnaire{}, err
	}
	typed, ok := result.(r4b.Questionnaire)
	if !ok {
		return r4b.Questionnaire{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateQuestionnaire updates an existing Questionnaire resource.
func (c *ClientR4B) UpdateQuestionnaire(ctx context.Context, resource r4b.Questionnaire) (update.Result[r4b.Questionnaire], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Questionnaire]{}, err
	}
	typed, ok := result.Resource.(r4b.Questionnaire)
	if !ok {
		return update.Result[r4b.Questionnaire]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Questionnaire]{Resource: typed, Created: result.Created}, nil
}

// DeleteQuestionnaire deletes a Questionnaire resource by ID.
func (c *ClientR4B) DeleteQuestionnaire(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Questionnaire", id)
}

// SearchQuestionnaire performs a search for Questionnaire resources.
func (c *ClientR4B) SearchQuestionnaire(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Questionnaire], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Questionnaire", parameters, options)
	if err != nil {
		return search.Result[r4b.Questionnaire]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Questionnaire, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Questionnaire)
		if !ok {
			return search.Result[r4b.Questionnaire]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Questionnaire]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateQuestionnaireResponse creates a new QuestionnaireResponse resource.
func (c *ClientR4B) CreateQuestionnaireResponse(ctx context.Context, resource r4b.QuestionnaireResponse) (r4b.QuestionnaireResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.QuestionnaireResponse{}, err
	}
	typed, ok := result.(r4b.QuestionnaireResponse)
	if !ok {
		return r4b.QuestionnaireResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadQuestionnaireResponse retrieves a QuestionnaireResponse resource by ID.
func (c *ClientR4B) ReadQuestionnaireResponse(ctx context.Context, id string) (r4b.QuestionnaireResponse, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "QuestionnaireResponse", id)
	if err != nil {
		return r4b.QuestionnaireResponse{}, err
	}
	typed, ok := result.(r4b.QuestionnaireResponse)
	if !ok {
		return r4b.QuestionnaireResponse{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateQuestionnaireResponse updates an existing QuestionnaireResponse resource.
func (c *ClientR4B) UpdateQuestionnaireResponse(ctx context.Context, resource r4b.QuestionnaireResponse) (update.Result[r4b.QuestionnaireResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.QuestionnaireResponse]{}, err
	}
	typed, ok := result.Resource.(r4b.QuestionnaireResponse)
	if !ok {
		return update.Result[r4b.QuestionnaireResponse]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.QuestionnaireResponse]{Resource: typed, Created: result.Created}, nil
}

// DeleteQuestionnaireResponse deletes a QuestionnaireResponse resource by ID.
func (c *ClientR4B) DeleteQuestionnaireResponse(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "QuestionnaireResponse", id)
}

// SearchQuestionnaireResponse performs a search for QuestionnaireResponse resources.
func (c *ClientR4B) SearchQuestionnaireResponse(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.QuestionnaireResponse], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "QuestionnaireResponse", parameters, options)
	if err != nil {
		return search.Result[r4b.QuestionnaireResponse]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.QuestionnaireResponse, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.QuestionnaireResponse)
		if !ok {
			return search.Result[r4b.QuestionnaireResponse]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.QuestionnaireResponse]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRegulatedAuthorization creates a new RegulatedAuthorization resource.
func (c *ClientR4B) CreateRegulatedAuthorization(ctx context.Context, resource r4b.RegulatedAuthorization) (r4b.RegulatedAuthorization, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.RegulatedAuthorization{}, err
	}
	typed, ok := result.(r4b.RegulatedAuthorization)
	if !ok {
		return r4b.RegulatedAuthorization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRegulatedAuthorization retrieves a RegulatedAuthorization resource by ID.
func (c *ClientR4B) ReadRegulatedAuthorization(ctx context.Context, id string) (r4b.RegulatedAuthorization, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "RegulatedAuthorization", id)
	if err != nil {
		return r4b.RegulatedAuthorization{}, err
	}
	typed, ok := result.(r4b.RegulatedAuthorization)
	if !ok {
		return r4b.RegulatedAuthorization{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRegulatedAuthorization updates an existing RegulatedAuthorization resource.
func (c *ClientR4B) UpdateRegulatedAuthorization(ctx context.Context, resource r4b.RegulatedAuthorization) (update.Result[r4b.RegulatedAuthorization], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RegulatedAuthorization]{}, err
	}
	typed, ok := result.Resource.(r4b.RegulatedAuthorization)
	if !ok {
		return update.Result[r4b.RegulatedAuthorization]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.RegulatedAuthorization]{Resource: typed, Created: result.Created}, nil
}

// DeleteRegulatedAuthorization deletes a RegulatedAuthorization resource by ID.
func (c *ClientR4B) DeleteRegulatedAuthorization(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "RegulatedAuthorization", id)
}

// SearchRegulatedAuthorization performs a search for RegulatedAuthorization resources.
func (c *ClientR4B) SearchRegulatedAuthorization(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.RegulatedAuthorization], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "RegulatedAuthorization", parameters, options)
	if err != nil {
		return search.Result[r4b.RegulatedAuthorization]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.RegulatedAuthorization, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.RegulatedAuthorization)
		if !ok {
			return search.Result[r4b.RegulatedAuthorization]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.RegulatedAuthorization]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRelatedPerson creates a new RelatedPerson resource.
func (c *ClientR4B) CreateRelatedPerson(ctx context.Context, resource r4b.RelatedPerson) (r4b.RelatedPerson, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.RelatedPerson{}, err
	}
	typed, ok := result.(r4b.RelatedPerson)
	if !ok {
		return r4b.RelatedPerson{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRelatedPerson retrieves a RelatedPerson resource by ID.
func (c *ClientR4B) ReadRelatedPerson(ctx context.Context, id string) (r4b.RelatedPerson, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "RelatedPerson", id)
	if err != nil {
		return r4b.RelatedPerson{}, err
	}
	typed, ok := result.(r4b.RelatedPerson)
	if !ok {
		return r4b.RelatedPerson{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRelatedPerson updates an existing RelatedPerson resource.
func (c *ClientR4B) UpdateRelatedPerson(ctx context.Context, resource r4b.RelatedPerson) (update.Result[r4b.RelatedPerson], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RelatedPerson]{}, err
	}
	typed, ok := result.Resource.(r4b.RelatedPerson)
	if !ok {
		return update.Result[r4b.RelatedPerson]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.RelatedPerson]{Resource: typed, Created: result.Created}, nil
}

// DeleteRelatedPerson deletes a RelatedPerson resource by ID.
func (c *ClientR4B) DeleteRelatedPerson(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "RelatedPerson", id)
}

// SearchRelatedPerson performs a search for RelatedPerson resources.
func (c *ClientR4B) SearchRelatedPerson(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.RelatedPerson], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "RelatedPerson", parameters, options)
	if err != nil {
		return search.Result[r4b.RelatedPerson]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.RelatedPerson, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.RelatedPerson)
		if !ok {
			return search.Result[r4b.RelatedPerson]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.RelatedPerson]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRequestGroup creates a new RequestGroup resource.
func (c *ClientR4B) CreateRequestGroup(ctx context.Context, resource r4b.RequestGroup) (r4b.RequestGroup, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.RequestGroup{}, err
	}
	typed, ok := result.(r4b.RequestGroup)
	if !ok {
		return r4b.RequestGroup{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRequestGroup retrieves a RequestGroup resource by ID.
func (c *ClientR4B) ReadRequestGroup(ctx context.Context, id string) (r4b.RequestGroup, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "RequestGroup", id)
	if err != nil {
		return r4b.RequestGroup{}, err
	}
	typed, ok := result.(r4b.RequestGroup)
	if !ok {
		return r4b.RequestGroup{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRequestGroup updates an existing RequestGroup resource.
func (c *ClientR4B) UpdateRequestGroup(ctx context.Context, resource r4b.RequestGroup) (update.Result[r4b.RequestGroup], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RequestGroup]{}, err
	}
	typed, ok := result.Resource.(r4b.RequestGroup)
	if !ok {
		return update.Result[r4b.RequestGroup]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.RequestGroup]{Resource: typed, Created: result.Created}, nil
}

// DeleteRequestGroup deletes a RequestGroup resource by ID.
func (c *ClientR4B) DeleteRequestGroup(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "RequestGroup", id)
}

// SearchRequestGroup performs a search for RequestGroup resources.
func (c *ClientR4B) SearchRequestGroup(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.RequestGroup], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "RequestGroup", parameters, options)
	if err != nil {
		return search.Result[r4b.RequestGroup]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.RequestGroup, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.RequestGroup)
		if !ok {
			return search.Result[r4b.RequestGroup]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.RequestGroup]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchDefinition creates a new ResearchDefinition resource.
func (c *ClientR4B) CreateResearchDefinition(ctx context.Context, resource r4b.ResearchDefinition) (r4b.ResearchDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchDefinition{}, err
	}
	typed, ok := result.(r4b.ResearchDefinition)
	if !ok {
		return r4b.ResearchDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchDefinition retrieves a ResearchDefinition resource by ID.
func (c *ClientR4B) ReadResearchDefinition(ctx context.Context, id string) (r4b.ResearchDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ResearchDefinition", id)
	if err != nil {
		return r4b.ResearchDefinition{}, err
	}
	typed, ok := result.(r4b.ResearchDefinition)
	if !ok {
		return r4b.ResearchDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchDefinition updates an existing ResearchDefinition resource.
func (c *ClientR4B) UpdateResearchDefinition(ctx context.Context, resource r4b.ResearchDefinition) (update.Result[r4b.ResearchDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.ResearchDefinition)
	if !ok {
		return update.Result[r4b.ResearchDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ResearchDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchDefinition deletes a ResearchDefinition resource by ID.
func (c *ClientR4B) DeleteResearchDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ResearchDefinition", id)
}

// SearchResearchDefinition performs a search for ResearchDefinition resources.
func (c *ClientR4B) SearchResearchDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ResearchDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ResearchDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.ResearchDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ResearchDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ResearchDefinition)
		if !ok {
			return search.Result[r4b.ResearchDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ResearchDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchElementDefinition creates a new ResearchElementDefinition resource.
func (c *ClientR4B) CreateResearchElementDefinition(ctx context.Context, resource r4b.ResearchElementDefinition) (r4b.ResearchElementDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchElementDefinition{}, err
	}
	typed, ok := result.(r4b.ResearchElementDefinition)
	if !ok {
		return r4b.ResearchElementDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchElementDefinition retrieves a ResearchElementDefinition resource by ID.
func (c *ClientR4B) ReadResearchElementDefinition(ctx context.Context, id string) (r4b.ResearchElementDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ResearchElementDefinition", id)
	if err != nil {
		return r4b.ResearchElementDefinition{}, err
	}
	typed, ok := result.(r4b.ResearchElementDefinition)
	if !ok {
		return r4b.ResearchElementDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchElementDefinition updates an existing ResearchElementDefinition resource.
func (c *ClientR4B) UpdateResearchElementDefinition(ctx context.Context, resource r4b.ResearchElementDefinition) (update.Result[r4b.ResearchElementDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchElementDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.ResearchElementDefinition)
	if !ok {
		return update.Result[r4b.ResearchElementDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ResearchElementDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchElementDefinition deletes a ResearchElementDefinition resource by ID.
func (c *ClientR4B) DeleteResearchElementDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ResearchElementDefinition", id)
}

// SearchResearchElementDefinition performs a search for ResearchElementDefinition resources.
func (c *ClientR4B) SearchResearchElementDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ResearchElementDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ResearchElementDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.ResearchElementDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ResearchElementDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ResearchElementDefinition)
		if !ok {
			return search.Result[r4b.ResearchElementDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ResearchElementDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchStudy creates a new ResearchStudy resource.
func (c *ClientR4B) CreateResearchStudy(ctx context.Context, resource r4b.ResearchStudy) (r4b.ResearchStudy, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchStudy{}, err
	}
	typed, ok := result.(r4b.ResearchStudy)
	if !ok {
		return r4b.ResearchStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchStudy retrieves a ResearchStudy resource by ID.
func (c *ClientR4B) ReadResearchStudy(ctx context.Context, id string) (r4b.ResearchStudy, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ResearchStudy", id)
	if err != nil {
		return r4b.ResearchStudy{}, err
	}
	typed, ok := result.(r4b.ResearchStudy)
	if !ok {
		return r4b.ResearchStudy{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchStudy updates an existing ResearchStudy resource.
func (c *ClientR4B) UpdateResearchStudy(ctx context.Context, resource r4b.ResearchStudy) (update.Result[r4b.ResearchStudy], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchStudy]{}, err
	}
	typed, ok := result.Resource.(r4b.ResearchStudy)
	if !ok {
		return update.Result[r4b.ResearchStudy]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ResearchStudy]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchStudy deletes a ResearchStudy resource by ID.
func (c *ClientR4B) DeleteResearchStudy(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ResearchStudy", id)
}

// SearchResearchStudy performs a search for ResearchStudy resources.
func (c *ClientR4B) SearchResearchStudy(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ResearchStudy], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ResearchStudy", parameters, options)
	if err != nil {
		return search.Result[r4b.ResearchStudy]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ResearchStudy, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ResearchStudy)
		if !ok {
			return search.Result[r4b.ResearchStudy]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ResearchStudy]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateResearchSubject creates a new ResearchSubject resource.
func (c *ClientR4B) CreateResearchSubject(ctx context.Context, resource r4b.ResearchSubject) (r4b.ResearchSubject, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ResearchSubject{}, err
	}
	typed, ok := result.(r4b.ResearchSubject)
	if !ok {
		return r4b.ResearchSubject{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadResearchSubject retrieves a ResearchSubject resource by ID.
func (c *ClientR4B) ReadResearchSubject(ctx context.Context, id string) (r4b.ResearchSubject, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ResearchSubject", id)
	if err != nil {
		return r4b.ResearchSubject{}, err
	}
	typed, ok := result.(r4b.ResearchSubject)
	if !ok {
		return r4b.ResearchSubject{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateResearchSubject updates an existing ResearchSubject resource.
func (c *ClientR4B) UpdateResearchSubject(ctx context.Context, resource r4b.ResearchSubject) (update.Result[r4b.ResearchSubject], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ResearchSubject]{}, err
	}
	typed, ok := result.Resource.(r4b.ResearchSubject)
	if !ok {
		return update.Result[r4b.ResearchSubject]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ResearchSubject]{Resource: typed, Created: result.Created}, nil
}

// DeleteResearchSubject deletes a ResearchSubject resource by ID.
func (c *ClientR4B) DeleteResearchSubject(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ResearchSubject", id)
}

// SearchResearchSubject performs a search for ResearchSubject resources.
func (c *ClientR4B) SearchResearchSubject(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ResearchSubject], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ResearchSubject", parameters, options)
	if err != nil {
		return search.Result[r4b.ResearchSubject]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ResearchSubject, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ResearchSubject)
		if !ok {
			return search.Result[r4b.ResearchSubject]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ResearchSubject]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateRiskAssessment creates a new RiskAssessment resource.
func (c *ClientR4B) CreateRiskAssessment(ctx context.Context, resource r4b.RiskAssessment) (r4b.RiskAssessment, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.RiskAssessment{}, err
	}
	typed, ok := result.(r4b.RiskAssessment)
	if !ok {
		return r4b.RiskAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadRiskAssessment retrieves a RiskAssessment resource by ID.
func (c *ClientR4B) ReadRiskAssessment(ctx context.Context, id string) (r4b.RiskAssessment, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "RiskAssessment", id)
	if err != nil {
		return r4b.RiskAssessment{}, err
	}
	typed, ok := result.(r4b.RiskAssessment)
	if !ok {
		return r4b.RiskAssessment{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateRiskAssessment updates an existing RiskAssessment resource.
func (c *ClientR4B) UpdateRiskAssessment(ctx context.Context, resource r4b.RiskAssessment) (update.Result[r4b.RiskAssessment], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.RiskAssessment]{}, err
	}
	typed, ok := result.Resource.(r4b.RiskAssessment)
	if !ok {
		return update.Result[r4b.RiskAssessment]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.RiskAssessment]{Resource: typed, Created: result.Created}, nil
}

// DeleteRiskAssessment deletes a RiskAssessment resource by ID.
func (c *ClientR4B) DeleteRiskAssessment(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "RiskAssessment", id)
}

// SearchRiskAssessment performs a search for RiskAssessment resources.
func (c *ClientR4B) SearchRiskAssessment(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.RiskAssessment], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "RiskAssessment", parameters, options)
	if err != nil {
		return search.Result[r4b.RiskAssessment]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.RiskAssessment, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.RiskAssessment)
		if !ok {
			return search.Result[r4b.RiskAssessment]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.RiskAssessment]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSchedule creates a new Schedule resource.
func (c *ClientR4B) CreateSchedule(ctx context.Context, resource r4b.Schedule) (r4b.Schedule, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Schedule{}, err
	}
	typed, ok := result.(r4b.Schedule)
	if !ok {
		return r4b.Schedule{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSchedule retrieves a Schedule resource by ID.
func (c *ClientR4B) ReadSchedule(ctx context.Context, id string) (r4b.Schedule, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Schedule", id)
	if err != nil {
		return r4b.Schedule{}, err
	}
	typed, ok := result.(r4b.Schedule)
	if !ok {
		return r4b.Schedule{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSchedule updates an existing Schedule resource.
func (c *ClientR4B) UpdateSchedule(ctx context.Context, resource r4b.Schedule) (update.Result[r4b.Schedule], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Schedule]{}, err
	}
	typed, ok := result.Resource.(r4b.Schedule)
	if !ok {
		return update.Result[r4b.Schedule]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Schedule]{Resource: typed, Created: result.Created}, nil
}

// DeleteSchedule deletes a Schedule resource by ID.
func (c *ClientR4B) DeleteSchedule(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Schedule", id)
}

// SearchSchedule performs a search for Schedule resources.
func (c *ClientR4B) SearchSchedule(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Schedule], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Schedule", parameters, options)
	if err != nil {
		return search.Result[r4b.Schedule]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Schedule, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Schedule)
		if !ok {
			return search.Result[r4b.Schedule]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Schedule]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSearchParameter creates a new SearchParameter resource.
func (c *ClientR4B) CreateSearchParameter(ctx context.Context, resource r4b.SearchParameter) (r4b.SearchParameter, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.SearchParameter{}, err
	}
	typed, ok := result.(r4b.SearchParameter)
	if !ok {
		return r4b.SearchParameter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSearchParameter retrieves a SearchParameter resource by ID.
func (c *ClientR4B) ReadSearchParameter(ctx context.Context, id string) (r4b.SearchParameter, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "SearchParameter", id)
	if err != nil {
		return r4b.SearchParameter{}, err
	}
	typed, ok := result.(r4b.SearchParameter)
	if !ok {
		return r4b.SearchParameter{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSearchParameter updates an existing SearchParameter resource.
func (c *ClientR4B) UpdateSearchParameter(ctx context.Context, resource r4b.SearchParameter) (update.Result[r4b.SearchParameter], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SearchParameter]{}, err
	}
	typed, ok := result.Resource.(r4b.SearchParameter)
	if !ok {
		return update.Result[r4b.SearchParameter]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.SearchParameter]{Resource: typed, Created: result.Created}, nil
}

// DeleteSearchParameter deletes a SearchParameter resource by ID.
func (c *ClientR4B) DeleteSearchParameter(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "SearchParameter", id)
}

// SearchSearchParameter performs a search for SearchParameter resources.
func (c *ClientR4B) SearchSearchParameter(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.SearchParameter], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "SearchParameter", parameters, options)
	if err != nil {
		return search.Result[r4b.SearchParameter]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.SearchParameter, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.SearchParameter)
		if !ok {
			return search.Result[r4b.SearchParameter]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.SearchParameter]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateServiceRequest creates a new ServiceRequest resource.
func (c *ClientR4B) CreateServiceRequest(ctx context.Context, resource r4b.ServiceRequest) (r4b.ServiceRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ServiceRequest{}, err
	}
	typed, ok := result.(r4b.ServiceRequest)
	if !ok {
		return r4b.ServiceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadServiceRequest retrieves a ServiceRequest resource by ID.
func (c *ClientR4B) ReadServiceRequest(ctx context.Context, id string) (r4b.ServiceRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ServiceRequest", id)
	if err != nil {
		return r4b.ServiceRequest{}, err
	}
	typed, ok := result.(r4b.ServiceRequest)
	if !ok {
		return r4b.ServiceRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateServiceRequest updates an existing ServiceRequest resource.
func (c *ClientR4B) UpdateServiceRequest(ctx context.Context, resource r4b.ServiceRequest) (update.Result[r4b.ServiceRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ServiceRequest]{}, err
	}
	typed, ok := result.Resource.(r4b.ServiceRequest)
	if !ok {
		return update.Result[r4b.ServiceRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ServiceRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteServiceRequest deletes a ServiceRequest resource by ID.
func (c *ClientR4B) DeleteServiceRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ServiceRequest", id)
}

// SearchServiceRequest performs a search for ServiceRequest resources.
func (c *ClientR4B) SearchServiceRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ServiceRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ServiceRequest", parameters, options)
	if err != nil {
		return search.Result[r4b.ServiceRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ServiceRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ServiceRequest)
		if !ok {
			return search.Result[r4b.ServiceRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ServiceRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSlot creates a new Slot resource.
func (c *ClientR4B) CreateSlot(ctx context.Context, resource r4b.Slot) (r4b.Slot, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Slot{}, err
	}
	typed, ok := result.(r4b.Slot)
	if !ok {
		return r4b.Slot{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSlot retrieves a Slot resource by ID.
func (c *ClientR4B) ReadSlot(ctx context.Context, id string) (r4b.Slot, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Slot", id)
	if err != nil {
		return r4b.Slot{}, err
	}
	typed, ok := result.(r4b.Slot)
	if !ok {
		return r4b.Slot{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSlot updates an existing Slot resource.
func (c *ClientR4B) UpdateSlot(ctx context.Context, resource r4b.Slot) (update.Result[r4b.Slot], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Slot]{}, err
	}
	typed, ok := result.Resource.(r4b.Slot)
	if !ok {
		return update.Result[r4b.Slot]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Slot]{Resource: typed, Created: result.Created}, nil
}

// DeleteSlot deletes a Slot resource by ID.
func (c *ClientR4B) DeleteSlot(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Slot", id)
}

// SearchSlot performs a search for Slot resources.
func (c *ClientR4B) SearchSlot(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Slot], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Slot", parameters, options)
	if err != nil {
		return search.Result[r4b.Slot]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Slot, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Slot)
		if !ok {
			return search.Result[r4b.Slot]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Slot]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSpecimen creates a new Specimen resource.
func (c *ClientR4B) CreateSpecimen(ctx context.Context, resource r4b.Specimen) (r4b.Specimen, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Specimen{}, err
	}
	typed, ok := result.(r4b.Specimen)
	if !ok {
		return r4b.Specimen{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSpecimen retrieves a Specimen resource by ID.
func (c *ClientR4B) ReadSpecimen(ctx context.Context, id string) (r4b.Specimen, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Specimen", id)
	if err != nil {
		return r4b.Specimen{}, err
	}
	typed, ok := result.(r4b.Specimen)
	if !ok {
		return r4b.Specimen{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSpecimen updates an existing Specimen resource.
func (c *ClientR4B) UpdateSpecimen(ctx context.Context, resource r4b.Specimen) (update.Result[r4b.Specimen], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Specimen]{}, err
	}
	typed, ok := result.Resource.(r4b.Specimen)
	if !ok {
		return update.Result[r4b.Specimen]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Specimen]{Resource: typed, Created: result.Created}, nil
}

// DeleteSpecimen deletes a Specimen resource by ID.
func (c *ClientR4B) DeleteSpecimen(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Specimen", id)
}

// SearchSpecimen performs a search for Specimen resources.
func (c *ClientR4B) SearchSpecimen(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Specimen], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Specimen", parameters, options)
	if err != nil {
		return search.Result[r4b.Specimen]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Specimen, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Specimen)
		if !ok {
			return search.Result[r4b.Specimen]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Specimen]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSpecimenDefinition creates a new SpecimenDefinition resource.
func (c *ClientR4B) CreateSpecimenDefinition(ctx context.Context, resource r4b.SpecimenDefinition) (r4b.SpecimenDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.SpecimenDefinition{}, err
	}
	typed, ok := result.(r4b.SpecimenDefinition)
	if !ok {
		return r4b.SpecimenDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSpecimenDefinition retrieves a SpecimenDefinition resource by ID.
func (c *ClientR4B) ReadSpecimenDefinition(ctx context.Context, id string) (r4b.SpecimenDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "SpecimenDefinition", id)
	if err != nil {
		return r4b.SpecimenDefinition{}, err
	}
	typed, ok := result.(r4b.SpecimenDefinition)
	if !ok {
		return r4b.SpecimenDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSpecimenDefinition updates an existing SpecimenDefinition resource.
func (c *ClientR4B) UpdateSpecimenDefinition(ctx context.Context, resource r4b.SpecimenDefinition) (update.Result[r4b.SpecimenDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SpecimenDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.SpecimenDefinition)
	if !ok {
		return update.Result[r4b.SpecimenDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.SpecimenDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteSpecimenDefinition deletes a SpecimenDefinition resource by ID.
func (c *ClientR4B) DeleteSpecimenDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "SpecimenDefinition", id)
}

// SearchSpecimenDefinition performs a search for SpecimenDefinition resources.
func (c *ClientR4B) SearchSpecimenDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.SpecimenDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "SpecimenDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.SpecimenDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.SpecimenDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.SpecimenDefinition)
		if !ok {
			return search.Result[r4b.SpecimenDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.SpecimenDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateStructureDefinition creates a new StructureDefinition resource.
func (c *ClientR4B) CreateStructureDefinition(ctx context.Context, resource r4b.StructureDefinition) (r4b.StructureDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.StructureDefinition{}, err
	}
	typed, ok := result.(r4b.StructureDefinition)
	if !ok {
		return r4b.StructureDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadStructureDefinition retrieves a StructureDefinition resource by ID.
func (c *ClientR4B) ReadStructureDefinition(ctx context.Context, id string) (r4b.StructureDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "StructureDefinition", id)
	if err != nil {
		return r4b.StructureDefinition{}, err
	}
	typed, ok := result.(r4b.StructureDefinition)
	if !ok {
		return r4b.StructureDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateStructureDefinition updates an existing StructureDefinition resource.
func (c *ClientR4B) UpdateStructureDefinition(ctx context.Context, resource r4b.StructureDefinition) (update.Result[r4b.StructureDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.StructureDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.StructureDefinition)
	if !ok {
		return update.Result[r4b.StructureDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.StructureDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteStructureDefinition deletes a StructureDefinition resource by ID.
func (c *ClientR4B) DeleteStructureDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "StructureDefinition", id)
}

// SearchStructureDefinition performs a search for StructureDefinition resources.
func (c *ClientR4B) SearchStructureDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.StructureDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "StructureDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.StructureDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.StructureDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.StructureDefinition)
		if !ok {
			return search.Result[r4b.StructureDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.StructureDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateStructureMap creates a new StructureMap resource.
func (c *ClientR4B) CreateStructureMap(ctx context.Context, resource r4b.StructureMap) (r4b.StructureMap, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.StructureMap{}, err
	}
	typed, ok := result.(r4b.StructureMap)
	if !ok {
		return r4b.StructureMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadStructureMap retrieves a StructureMap resource by ID.
func (c *ClientR4B) ReadStructureMap(ctx context.Context, id string) (r4b.StructureMap, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "StructureMap", id)
	if err != nil {
		return r4b.StructureMap{}, err
	}
	typed, ok := result.(r4b.StructureMap)
	if !ok {
		return r4b.StructureMap{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateStructureMap updates an existing StructureMap resource.
func (c *ClientR4B) UpdateStructureMap(ctx context.Context, resource r4b.StructureMap) (update.Result[r4b.StructureMap], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.StructureMap]{}, err
	}
	typed, ok := result.Resource.(r4b.StructureMap)
	if !ok {
		return update.Result[r4b.StructureMap]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.StructureMap]{Resource: typed, Created: result.Created}, nil
}

// DeleteStructureMap deletes a StructureMap resource by ID.
func (c *ClientR4B) DeleteStructureMap(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "StructureMap", id)
}

// SearchStructureMap performs a search for StructureMap resources.
func (c *ClientR4B) SearchStructureMap(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.StructureMap], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "StructureMap", parameters, options)
	if err != nil {
		return search.Result[r4b.StructureMap]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.StructureMap, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.StructureMap)
		if !ok {
			return search.Result[r4b.StructureMap]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.StructureMap]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubscription creates a new Subscription resource.
func (c *ClientR4B) CreateSubscription(ctx context.Context, resource r4b.Subscription) (r4b.Subscription, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Subscription{}, err
	}
	typed, ok := result.(r4b.Subscription)
	if !ok {
		return r4b.Subscription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubscription retrieves a Subscription resource by ID.
func (c *ClientR4B) ReadSubscription(ctx context.Context, id string) (r4b.Subscription, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Subscription", id)
	if err != nil {
		return r4b.Subscription{}, err
	}
	typed, ok := result.(r4b.Subscription)
	if !ok {
		return r4b.Subscription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubscription updates an existing Subscription resource.
func (c *ClientR4B) UpdateSubscription(ctx context.Context, resource r4b.Subscription) (update.Result[r4b.Subscription], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Subscription]{}, err
	}
	typed, ok := result.Resource.(r4b.Subscription)
	if !ok {
		return update.Result[r4b.Subscription]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Subscription]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubscription deletes a Subscription resource by ID.
func (c *ClientR4B) DeleteSubscription(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Subscription", id)
}

// SearchSubscription performs a search for Subscription resources.
func (c *ClientR4B) SearchSubscription(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Subscription], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Subscription", parameters, options)
	if err != nil {
		return search.Result[r4b.Subscription]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Subscription, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Subscription)
		if !ok {
			return search.Result[r4b.Subscription]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Subscription]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubscriptionStatus creates a new SubscriptionStatus resource.
func (c *ClientR4B) CreateSubscriptionStatus(ctx context.Context, resource r4b.SubscriptionStatus) (r4b.SubscriptionStatus, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.SubscriptionStatus{}, err
	}
	typed, ok := result.(r4b.SubscriptionStatus)
	if !ok {
		return r4b.SubscriptionStatus{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubscriptionStatus retrieves a SubscriptionStatus resource by ID.
func (c *ClientR4B) ReadSubscriptionStatus(ctx context.Context, id string) (r4b.SubscriptionStatus, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "SubscriptionStatus", id)
	if err != nil {
		return r4b.SubscriptionStatus{}, err
	}
	typed, ok := result.(r4b.SubscriptionStatus)
	if !ok {
		return r4b.SubscriptionStatus{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubscriptionStatus updates an existing SubscriptionStatus resource.
func (c *ClientR4B) UpdateSubscriptionStatus(ctx context.Context, resource r4b.SubscriptionStatus) (update.Result[r4b.SubscriptionStatus], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SubscriptionStatus]{}, err
	}
	typed, ok := result.Resource.(r4b.SubscriptionStatus)
	if !ok {
		return update.Result[r4b.SubscriptionStatus]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.SubscriptionStatus]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubscriptionStatus deletes a SubscriptionStatus resource by ID.
func (c *ClientR4B) DeleteSubscriptionStatus(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "SubscriptionStatus", id)
}

// SearchSubscriptionStatus performs a search for SubscriptionStatus resources.
func (c *ClientR4B) SearchSubscriptionStatus(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.SubscriptionStatus], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "SubscriptionStatus", parameters, options)
	if err != nil {
		return search.Result[r4b.SubscriptionStatus]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.SubscriptionStatus, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.SubscriptionStatus)
		if !ok {
			return search.Result[r4b.SubscriptionStatus]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.SubscriptionStatus]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubscriptionTopic creates a new SubscriptionTopic resource.
func (c *ClientR4B) CreateSubscriptionTopic(ctx context.Context, resource r4b.SubscriptionTopic) (r4b.SubscriptionTopic, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.SubscriptionTopic{}, err
	}
	typed, ok := result.(r4b.SubscriptionTopic)
	if !ok {
		return r4b.SubscriptionTopic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubscriptionTopic retrieves a SubscriptionTopic resource by ID.
func (c *ClientR4B) ReadSubscriptionTopic(ctx context.Context, id string) (r4b.SubscriptionTopic, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "SubscriptionTopic", id)
	if err != nil {
		return r4b.SubscriptionTopic{}, err
	}
	typed, ok := result.(r4b.SubscriptionTopic)
	if !ok {
		return r4b.SubscriptionTopic{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubscriptionTopic updates an existing SubscriptionTopic resource.
func (c *ClientR4B) UpdateSubscriptionTopic(ctx context.Context, resource r4b.SubscriptionTopic) (update.Result[r4b.SubscriptionTopic], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SubscriptionTopic]{}, err
	}
	typed, ok := result.Resource.(r4b.SubscriptionTopic)
	if !ok {
		return update.Result[r4b.SubscriptionTopic]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.SubscriptionTopic]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubscriptionTopic deletes a SubscriptionTopic resource by ID.
func (c *ClientR4B) DeleteSubscriptionTopic(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "SubscriptionTopic", id)
}

// SearchSubscriptionTopic performs a search for SubscriptionTopic resources.
func (c *ClientR4B) SearchSubscriptionTopic(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.SubscriptionTopic], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "SubscriptionTopic", parameters, options)
	if err != nil {
		return search.Result[r4b.SubscriptionTopic]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.SubscriptionTopic, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.SubscriptionTopic)
		if !ok {
			return search.Result[r4b.SubscriptionTopic]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.SubscriptionTopic]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstance creates a new Substance resource.
func (c *ClientR4B) CreateSubstance(ctx context.Context, resource r4b.Substance) (r4b.Substance, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Substance{}, err
	}
	typed, ok := result.(r4b.Substance)
	if !ok {
		return r4b.Substance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstance retrieves a Substance resource by ID.
func (c *ClientR4B) ReadSubstance(ctx context.Context, id string) (r4b.Substance, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Substance", id)
	if err != nil {
		return r4b.Substance{}, err
	}
	typed, ok := result.(r4b.Substance)
	if !ok {
		return r4b.Substance{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstance updates an existing Substance resource.
func (c *ClientR4B) UpdateSubstance(ctx context.Context, resource r4b.Substance) (update.Result[r4b.Substance], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Substance]{}, err
	}
	typed, ok := result.Resource.(r4b.Substance)
	if !ok {
		return update.Result[r4b.Substance]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Substance]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstance deletes a Substance resource by ID.
func (c *ClientR4B) DeleteSubstance(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Substance", id)
}

// SearchSubstance performs a search for Substance resources.
func (c *ClientR4B) SearchSubstance(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Substance], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Substance", parameters, options)
	if err != nil {
		return search.Result[r4b.Substance]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Substance, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Substance)
		if !ok {
			return search.Result[r4b.Substance]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Substance]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSubstanceDefinition creates a new SubstanceDefinition resource.
func (c *ClientR4B) CreateSubstanceDefinition(ctx context.Context, resource r4b.SubstanceDefinition) (r4b.SubstanceDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.SubstanceDefinition{}, err
	}
	typed, ok := result.(r4b.SubstanceDefinition)
	if !ok {
		return r4b.SubstanceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSubstanceDefinition retrieves a SubstanceDefinition resource by ID.
func (c *ClientR4B) ReadSubstanceDefinition(ctx context.Context, id string) (r4b.SubstanceDefinition, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "SubstanceDefinition", id)
	if err != nil {
		return r4b.SubstanceDefinition{}, err
	}
	typed, ok := result.(r4b.SubstanceDefinition)
	if !ok {
		return r4b.SubstanceDefinition{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSubstanceDefinition updates an existing SubstanceDefinition resource.
func (c *ClientR4B) UpdateSubstanceDefinition(ctx context.Context, resource r4b.SubstanceDefinition) (update.Result[r4b.SubstanceDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SubstanceDefinition]{}, err
	}
	typed, ok := result.Resource.(r4b.SubstanceDefinition)
	if !ok {
		return update.Result[r4b.SubstanceDefinition]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.SubstanceDefinition]{Resource: typed, Created: result.Created}, nil
}

// DeleteSubstanceDefinition deletes a SubstanceDefinition resource by ID.
func (c *ClientR4B) DeleteSubstanceDefinition(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "SubstanceDefinition", id)
}

// SearchSubstanceDefinition performs a search for SubstanceDefinition resources.
func (c *ClientR4B) SearchSubstanceDefinition(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.SubstanceDefinition], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "SubstanceDefinition", parameters, options)
	if err != nil {
		return search.Result[r4b.SubstanceDefinition]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.SubstanceDefinition, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.SubstanceDefinition)
		if !ok {
			return search.Result[r4b.SubstanceDefinition]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.SubstanceDefinition]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSupplyDelivery creates a new SupplyDelivery resource.
func (c *ClientR4B) CreateSupplyDelivery(ctx context.Context, resource r4b.SupplyDelivery) (r4b.SupplyDelivery, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.SupplyDelivery{}, err
	}
	typed, ok := result.(r4b.SupplyDelivery)
	if !ok {
		return r4b.SupplyDelivery{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSupplyDelivery retrieves a SupplyDelivery resource by ID.
func (c *ClientR4B) ReadSupplyDelivery(ctx context.Context, id string) (r4b.SupplyDelivery, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "SupplyDelivery", id)
	if err != nil {
		return r4b.SupplyDelivery{}, err
	}
	typed, ok := result.(r4b.SupplyDelivery)
	if !ok {
		return r4b.SupplyDelivery{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSupplyDelivery updates an existing SupplyDelivery resource.
func (c *ClientR4B) UpdateSupplyDelivery(ctx context.Context, resource r4b.SupplyDelivery) (update.Result[r4b.SupplyDelivery], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SupplyDelivery]{}, err
	}
	typed, ok := result.Resource.(r4b.SupplyDelivery)
	if !ok {
		return update.Result[r4b.SupplyDelivery]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.SupplyDelivery]{Resource: typed, Created: result.Created}, nil
}

// DeleteSupplyDelivery deletes a SupplyDelivery resource by ID.
func (c *ClientR4B) DeleteSupplyDelivery(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "SupplyDelivery", id)
}

// SearchSupplyDelivery performs a search for SupplyDelivery resources.
func (c *ClientR4B) SearchSupplyDelivery(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.SupplyDelivery], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "SupplyDelivery", parameters, options)
	if err != nil {
		return search.Result[r4b.SupplyDelivery]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.SupplyDelivery, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.SupplyDelivery)
		if !ok {
			return search.Result[r4b.SupplyDelivery]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.SupplyDelivery]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateSupplyRequest creates a new SupplyRequest resource.
func (c *ClientR4B) CreateSupplyRequest(ctx context.Context, resource r4b.SupplyRequest) (r4b.SupplyRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.SupplyRequest{}, err
	}
	typed, ok := result.(r4b.SupplyRequest)
	if !ok {
		return r4b.SupplyRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadSupplyRequest retrieves a SupplyRequest resource by ID.
func (c *ClientR4B) ReadSupplyRequest(ctx context.Context, id string) (r4b.SupplyRequest, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "SupplyRequest", id)
	if err != nil {
		return r4b.SupplyRequest{}, err
	}
	typed, ok := result.(r4b.SupplyRequest)
	if !ok {
		return r4b.SupplyRequest{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateSupplyRequest updates an existing SupplyRequest resource.
func (c *ClientR4B) UpdateSupplyRequest(ctx context.Context, resource r4b.SupplyRequest) (update.Result[r4b.SupplyRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.SupplyRequest]{}, err
	}
	typed, ok := result.Resource.(r4b.SupplyRequest)
	if !ok {
		return update.Result[r4b.SupplyRequest]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.SupplyRequest]{Resource: typed, Created: result.Created}, nil
}

// DeleteSupplyRequest deletes a SupplyRequest resource by ID.
func (c *ClientR4B) DeleteSupplyRequest(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "SupplyRequest", id)
}

// SearchSupplyRequest performs a search for SupplyRequest resources.
func (c *ClientR4B) SearchSupplyRequest(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.SupplyRequest], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "SupplyRequest", parameters, options)
	if err != nil {
		return search.Result[r4b.SupplyRequest]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.SupplyRequest, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.SupplyRequest)
		if !ok {
			return search.Result[r4b.SupplyRequest]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.SupplyRequest]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTask creates a new Task resource.
func (c *ClientR4B) CreateTask(ctx context.Context, resource r4b.Task) (r4b.Task, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.Task{}, err
	}
	typed, ok := result.(r4b.Task)
	if !ok {
		return r4b.Task{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTask retrieves a Task resource by ID.
func (c *ClientR4B) ReadTask(ctx context.Context, id string) (r4b.Task, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "Task", id)
	if err != nil {
		return r4b.Task{}, err
	}
	typed, ok := result.(r4b.Task)
	if !ok {
		return r4b.Task{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTask updates an existing Task resource.
func (c *ClientR4B) UpdateTask(ctx context.Context, resource r4b.Task) (update.Result[r4b.Task], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.Task]{}, err
	}
	typed, ok := result.Resource.(r4b.Task)
	if !ok {
		return update.Result[r4b.Task]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.Task]{Resource: typed, Created: result.Created}, nil
}

// DeleteTask deletes a Task resource by ID.
func (c *ClientR4B) DeleteTask(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "Task", id)
}

// SearchTask performs a search for Task resources.
func (c *ClientR4B) SearchTask(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.Task], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "Task", parameters, options)
	if err != nil {
		return search.Result[r4b.Task]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.Task, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.Task)
		if !ok {
			return search.Result[r4b.Task]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.Task]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTerminologyCapabilities creates a new TerminologyCapabilities resource.
func (c *ClientR4B) CreateTerminologyCapabilities(ctx context.Context, resource r4b.TerminologyCapabilities) (r4b.TerminologyCapabilities, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.TerminologyCapabilities{}, err
	}
	typed, ok := result.(r4b.TerminologyCapabilities)
	if !ok {
		return r4b.TerminologyCapabilities{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTerminologyCapabilities retrieves a TerminologyCapabilities resource by ID.
func (c *ClientR4B) ReadTerminologyCapabilities(ctx context.Context, id string) (r4b.TerminologyCapabilities, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "TerminologyCapabilities", id)
	if err != nil {
		return r4b.TerminologyCapabilities{}, err
	}
	typed, ok := result.(r4b.TerminologyCapabilities)
	if !ok {
		return r4b.TerminologyCapabilities{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTerminologyCapabilities updates an existing TerminologyCapabilities resource.
func (c *ClientR4B) UpdateTerminologyCapabilities(ctx context.Context, resource r4b.TerminologyCapabilities) (update.Result[r4b.TerminologyCapabilities], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.TerminologyCapabilities]{}, err
	}
	typed, ok := result.Resource.(r4b.TerminologyCapabilities)
	if !ok {
		return update.Result[r4b.TerminologyCapabilities]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.TerminologyCapabilities]{Resource: typed, Created: result.Created}, nil
}

// DeleteTerminologyCapabilities deletes a TerminologyCapabilities resource by ID.
func (c *ClientR4B) DeleteTerminologyCapabilities(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "TerminologyCapabilities", id)
}

// SearchTerminologyCapabilities performs a search for TerminologyCapabilities resources.
func (c *ClientR4B) SearchTerminologyCapabilities(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.TerminologyCapabilities], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "TerminologyCapabilities", parameters, options)
	if err != nil {
		return search.Result[r4b.TerminologyCapabilities]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.TerminologyCapabilities, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.TerminologyCapabilities)
		if !ok {
			return search.Result[r4b.TerminologyCapabilities]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.TerminologyCapabilities]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTestReport creates a new TestReport resource.
func (c *ClientR4B) CreateTestReport(ctx context.Context, resource r4b.TestReport) (r4b.TestReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.TestReport{}, err
	}
	typed, ok := result.(r4b.TestReport)
	if !ok {
		return r4b.TestReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTestReport retrieves a TestReport resource by ID.
func (c *ClientR4B) ReadTestReport(ctx context.Context, id string) (r4b.TestReport, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "TestReport", id)
	if err != nil {
		return r4b.TestReport{}, err
	}
	typed, ok := result.(r4b.TestReport)
	if !ok {
		return r4b.TestReport{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTestReport updates an existing TestReport resource.
func (c *ClientR4B) UpdateTestReport(ctx context.Context, resource r4b.TestReport) (update.Result[r4b.TestReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.TestReport]{}, err
	}
	typed, ok := result.Resource.(r4b.TestReport)
	if !ok {
		return update.Result[r4b.TestReport]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.TestReport]{Resource: typed, Created: result.Created}, nil
}

// DeleteTestReport deletes a TestReport resource by ID.
func (c *ClientR4B) DeleteTestReport(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "TestReport", id)
}

// SearchTestReport performs a search for TestReport resources.
func (c *ClientR4B) SearchTestReport(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.TestReport], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "TestReport", parameters, options)
	if err != nil {
		return search.Result[r4b.TestReport]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.TestReport, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.TestReport)
		if !ok {
			return search.Result[r4b.TestReport]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.TestReport]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateTestScript creates a new TestScript resource.
func (c *ClientR4B) CreateTestScript(ctx context.Context, resource r4b.TestScript) (r4b.TestScript, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.TestScript{}, err
	}
	typed, ok := result.(r4b.TestScript)
	if !ok {
		return r4b.TestScript{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadTestScript retrieves a TestScript resource by ID.
func (c *ClientR4B) ReadTestScript(ctx context.Context, id string) (r4b.TestScript, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "TestScript", id)
	if err != nil {
		return r4b.TestScript{}, err
	}
	typed, ok := result.(r4b.TestScript)
	if !ok {
		return r4b.TestScript{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateTestScript updates an existing TestScript resource.
func (c *ClientR4B) UpdateTestScript(ctx context.Context, resource r4b.TestScript) (update.Result[r4b.TestScript], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.TestScript]{}, err
	}
	typed, ok := result.Resource.(r4b.TestScript)
	if !ok {
		return update.Result[r4b.TestScript]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.TestScript]{Resource: typed, Created: result.Created}, nil
}

// DeleteTestScript deletes a TestScript resource by ID.
func (c *ClientR4B) DeleteTestScript(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "TestScript", id)
}

// SearchTestScript performs a search for TestScript resources.
func (c *ClientR4B) SearchTestScript(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.TestScript], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "TestScript", parameters, options)
	if err != nil {
		return search.Result[r4b.TestScript]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.TestScript, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.TestScript)
		if !ok {
			return search.Result[r4b.TestScript]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.TestScript]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateValueSet creates a new ValueSet resource.
func (c *ClientR4B) CreateValueSet(ctx context.Context, resource r4b.ValueSet) (r4b.ValueSet, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.ValueSet{}, err
	}
	typed, ok := result.(r4b.ValueSet)
	if !ok {
		return r4b.ValueSet{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadValueSet retrieves a ValueSet resource by ID.
func (c *ClientR4B) ReadValueSet(ctx context.Context, id string) (r4b.ValueSet, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "ValueSet", id)
	if err != nil {
		return r4b.ValueSet{}, err
	}
	typed, ok := result.(r4b.ValueSet)
	if !ok {
		return r4b.ValueSet{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateValueSet updates an existing ValueSet resource.
func (c *ClientR4B) UpdateValueSet(ctx context.Context, resource r4b.ValueSet) (update.Result[r4b.ValueSet], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.ValueSet]{}, err
	}
	typed, ok := result.Resource.(r4b.ValueSet)
	if !ok {
		return update.Result[r4b.ValueSet]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.ValueSet]{Resource: typed, Created: result.Created}, nil
}

// DeleteValueSet deletes a ValueSet resource by ID.
func (c *ClientR4B) DeleteValueSet(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "ValueSet", id)
}

// SearchValueSet performs a search for ValueSet resources.
func (c *ClientR4B) SearchValueSet(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.ValueSet], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "ValueSet", parameters, options)
	if err != nil {
		return search.Result[r4b.ValueSet]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.ValueSet, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.ValueSet)
		if !ok {
			return search.Result[r4b.ValueSet]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.ValueSet]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateVerificationResult creates a new VerificationResult resource.
func (c *ClientR4B) CreateVerificationResult(ctx context.Context, resource r4b.VerificationResult) (r4b.VerificationResult, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.VerificationResult{}, err
	}
	typed, ok := result.(r4b.VerificationResult)
	if !ok {
		return r4b.VerificationResult{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadVerificationResult retrieves a VerificationResult resource by ID.
func (c *ClientR4B) ReadVerificationResult(ctx context.Context, id string) (r4b.VerificationResult, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "VerificationResult", id)
	if err != nil {
		return r4b.VerificationResult{}, err
	}
	typed, ok := result.(r4b.VerificationResult)
	if !ok {
		return r4b.VerificationResult{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateVerificationResult updates an existing VerificationResult resource.
func (c *ClientR4B) UpdateVerificationResult(ctx context.Context, resource r4b.VerificationResult) (update.Result[r4b.VerificationResult], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.VerificationResult]{}, err
	}
	typed, ok := result.Resource.(r4b.VerificationResult)
	if !ok {
		return update.Result[r4b.VerificationResult]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.VerificationResult]{Resource: typed, Created: result.Created}, nil
}

// DeleteVerificationResult deletes a VerificationResult resource by ID.
func (c *ClientR4B) DeleteVerificationResult(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "VerificationResult", id)
}

// SearchVerificationResult performs a search for VerificationResult resources.
func (c *ClientR4B) SearchVerificationResult(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.VerificationResult], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "VerificationResult", parameters, options)
	if err != nil {
		return search.Result[r4b.VerificationResult]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.VerificationResult, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.VerificationResult)
		if !ok {
			return search.Result[r4b.VerificationResult]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.VerificationResult]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}

// CreateVisionPrescription creates a new VisionPrescription resource.
func (c *ClientR4B) CreateVisionPrescription(ctx context.Context, resource r4b.VisionPrescription) (r4b.VisionPrescription, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Create(ctx, resource)
	if err != nil {
		return r4b.VisionPrescription{}, err
	}
	typed, ok := result.(r4b.VisionPrescription)
	if !ok {
		return r4b.VisionPrescription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// ReadVisionPrescription retrieves a VisionPrescription resource by ID.
func (c *ClientR4B) ReadVisionPrescription(ctx context.Context, id string) (r4b.VisionPrescription, error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Read(ctx, "VisionPrescription", id)
	if err != nil {
		return r4b.VisionPrescription{}, err
	}
	typed, ok := result.(r4b.VisionPrescription)
	if !ok {
		return r4b.VisionPrescription{}, fmt.Errorf("unexpected resource type: %T", result)
	}
	return typed, nil
}

// UpdateVisionPrescription updates an existing VisionPrescription resource.
func (c *ClientR4B) UpdateVisionPrescription(ctx context.Context, resource r4b.VisionPrescription) (update.Result[r4b.VisionPrescription], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Update(ctx, resource)
	if err != nil {
		return update.Result[r4b.VisionPrescription]{}, err
	}
	typed, ok := result.Resource.(r4b.VisionPrescription)
	if !ok {
		return update.Result[r4b.VisionPrescription]{}, fmt.Errorf("unexpected resource type: %T", result.Resource)
	}
	return update.Result[r4b.VisionPrescription]{Resource: typed, Created: result.Created}, nil
}

// DeleteVisionPrescription deletes a VisionPrescription resource by ID.
func (c *ClientR4B) DeleteVisionPrescription(ctx context.Context, id string) error {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	return client.Delete(ctx, "VisionPrescription", id)
}

// SearchVisionPrescription performs a search for VisionPrescription resources.
func (c *ClientR4B) SearchVisionPrescription(ctx context.Context, parameters search.Parameters, options search.Options) (search.Result[r4b.VisionPrescription], error) {
	client := &internalClient[model.R4B]{baseURL: c.BaseURL, client: c.httpClient()}
	result, err := client.Search(ctx, "VisionPrescription", parameters, options)
	if err != nil {
		return search.Result[r4b.VisionPrescription]{}, err
	}
	// Convert generic resources to typed resources
	typedResources := make([]r4b.VisionPrescription, len(result.Resources))
	for i, resource := range result.Resources {
		typed, ok := resource.(r4b.VisionPrescription)
		if !ok {
			return search.Result[r4b.VisionPrescription]{}, fmt.Errorf("unexpected resource type in results: %T", resource)
		}
		typedResources[i] = typed
	}
	return search.Result[r4b.VisionPrescription]{Resources: typedResources, Included: result.Included, Next: result.Next}, nil
}
