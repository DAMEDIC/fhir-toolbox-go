// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package basic

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	"fmt"
	model "github.com/DAMEDIC/fhir-toolbox-go/model"
	"io"
)

type ContainedResource struct {
	model.Resource
}

func (r ContainedResource) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		return "null"
	}
	return string(buf)
}
func (r ContainedResource) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	err := r.marshalJSON(&b)
	if err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}
func (r ContainedResource) marshalJSON(w io.Writer) error {
	switch t := r.Resource.(type) {
	case Bundle:
		return t.marshalJSON(w)
	case *Bundle:
		return t.marshalJSON(w)
	case CapabilityStatement:
		return t.marshalJSON(w)
	case *CapabilityStatement:
		return t.marshalJSON(w)
	case OperationOutcome:
		return t.marshalJSON(w)
	case *OperationOutcome:
		return t.marshalJSON(w)
	default:
		return fmt.Errorf("unknown resource: %v", t)
	}
}
func (r ContainedResource) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(r.Resource)
}
