// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package r5

import ptr "github.com/DAMEDIC/fhir-toolbox-go/utils/ptr"

// Value set constants for required bindings

var (
	// AccountStatus Active
	AccountStatusActive = Code{Value: ptr.To("active")}
	// AccountStatus Entered in error
	AccountStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// AccountStatus Inactive
	AccountStatusInactive = Code{Value: ptr.To("inactive")}
	// AccountStatus On Hold
	AccountStatusOnHold = Code{Value: ptr.To("on-hold")}
	// AccountStatus Unknown
	AccountStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ActionCardinalityBehavior Multiple
	ActionCardinalityBehaviorMultiple = Code{Value: ptr.To("multiple")}
	// ActionCardinalityBehavior Single
	ActionCardinalityBehaviorSingle = Code{Value: ptr.To("single")}
)

var (
	// ActionConditionKind Applicability
	ActionConditionKindApplicability = Code{Value: ptr.To("applicability")}
	// ActionConditionKind Start
	ActionConditionKindStart = Code{Value: ptr.To("start")}
	// ActionConditionKind Stop
	ActionConditionKindStop = Code{Value: ptr.To("stop")}
)

var (
	// ActionGroupingBehavior Logical Group
	ActionGroupingBehaviorLogicalGroup = Code{Value: ptr.To("logical-group")}
	// ActionGroupingBehavior Sentence Group
	ActionGroupingBehaviorSentenceGroup = Code{Value: ptr.To("sentence-group")}
	// ActionGroupingBehavior Visual Group
	ActionGroupingBehaviorVisualGroup = Code{Value: ptr.To("visual-group")}
)

var (
	// ActionParticipantType CareTeam
	ActionParticipantTypeCareteam = Code{Value: ptr.To("careteam")}
	// ActionParticipantType Device
	ActionParticipantTypeDevice = Code{Value: ptr.To("device")}
	// ActionParticipantType Group
	ActionParticipantTypeGroup = Code{Value: ptr.To("group")}
	// ActionParticipantType HealthcareService
	ActionParticipantTypeHealthcareservice = Code{Value: ptr.To("healthcareservice")}
	// ActionParticipantType Location
	ActionParticipantTypeLocation = Code{Value: ptr.To("location")}
	// ActionParticipantType Organization
	ActionParticipantTypeOrganization = Code{Value: ptr.To("organization")}
	// ActionParticipantType Patient
	ActionParticipantTypePatient = Code{Value: ptr.To("patient")}
	// ActionParticipantType Practitioner
	ActionParticipantTypePractitioner = Code{Value: ptr.To("practitioner")}
	// ActionParticipantType PractitionerRole
	ActionParticipantTypePractitionerrole = Code{Value: ptr.To("practitionerrole")}
	// ActionParticipantType RelatedPerson
	ActionParticipantTypeRelatedperson = Code{Value: ptr.To("relatedperson")}
)

var (
	// ActionPrecheckBehavior No
	ActionPrecheckBehaviorNo = Code{Value: ptr.To("no")}
	// ActionPrecheckBehavior Yes
	ActionPrecheckBehaviorYes = Code{Value: ptr.To("yes")}
)

var (
	// ActionRelationshipType After
	ActionRelationshipTypeAfter = Code{Value: ptr.To("after")}
	// ActionRelationshipType Before
	ActionRelationshipTypeBefore = Code{Value: ptr.To("before")}
	// ActionRelationshipType Concurrent
	ActionRelationshipTypeConcurrent = Code{Value: ptr.To("concurrent")}
)

var (
	// ActionRequiredBehavior Could
	ActionRequiredBehaviorCould = Code{Value: ptr.To("could")}
	// ActionRequiredBehavior Must
	ActionRequiredBehaviorMust = Code{Value: ptr.To("must")}
	// ActionRequiredBehavior Must Unless Documented
	ActionRequiredBehaviorMustUnlessDocumented = Code{Value: ptr.To("must-unless-documented")}
)

var (
	// ActionSelectionBehavior All
	ActionSelectionBehaviorAll = Code{Value: ptr.To("all")}
	// ActionSelectionBehavior All Or None
	ActionSelectionBehaviorAllOrNone = Code{Value: ptr.To("all-or-none")}
	// ActionSelectionBehavior Any
	ActionSelectionBehaviorAny = Code{Value: ptr.To("any")}
	// ActionSelectionBehavior At Most One
	ActionSelectionBehaviorAtMostOne = Code{Value: ptr.To("at-most-one")}
	// ActionSelectionBehavior Exactly One
	ActionSelectionBehaviorExactlyOne = Code{Value: ptr.To("exactly-one")}
	// ActionSelectionBehavior One Or More
	ActionSelectionBehaviorOneOrMore = Code{Value: ptr.To("one-or-more")}
)

var (
	// AdditionalBindingPurposeVS Candidate Binding
	AdditionalBindingPurposeVsCandidate = Code{Value: ptr.To("candidate")}
	// AdditionalBindingPurposeVS Component Binding
	AdditionalBindingPurposeVsComponent = Code{Value: ptr.To("component")}
	// AdditionalBindingPurposeVS Current Binding
	AdditionalBindingPurposeVsCurrent = Code{Value: ptr.To("current")}
	// AdditionalBindingPurposeVS Conformance Binding
	AdditionalBindingPurposeVsExtensible = Code{Value: ptr.To("extensible")}
	// AdditionalBindingPurposeVS Maximum Binding
	AdditionalBindingPurposeVsMaximum = Code{Value: ptr.To("maximum")}
	// AdditionalBindingPurposeVS Minimum Binding
	AdditionalBindingPurposeVsMinimum = Code{Value: ptr.To("minimum")}
	// AdditionalBindingPurposeVS Preferred Binding
	AdditionalBindingPurposeVsPreferred = Code{Value: ptr.To("preferred")}
	// AdditionalBindingPurposeVS Required Binding
	AdditionalBindingPurposeVsRequired = Code{Value: ptr.To("required")}
	// AdditionalBindingPurposeVS Starter Binding
	AdditionalBindingPurposeVsStarter = Code{Value: ptr.To("starter")}
	// AdditionalBindingPurposeVS UI Suggested Binding
	AdditionalBindingPurposeVsUi = Code{Value: ptr.To("ui")}
)

var (
	// AddressType Postal & Physical
	AddressTypeBoth = Code{Value: ptr.To("both")}
	// AddressType Physical
	AddressTypePhysical = Code{Value: ptr.To("physical")}
	// AddressType Postal
	AddressTypePostal = Code{Value: ptr.To("postal")}
)

var (
	// AddressUse Billing
	AddressUseBilling = Code{Value: ptr.To("billing")}
	// AddressUse Home
	AddressUseHome = Code{Value: ptr.To("home")}
	// AddressUse Old / Incorrect
	AddressUseOld = Code{Value: ptr.To("old")}
	// AddressUse Temporary
	AddressUseTemp = Code{Value: ptr.To("temp")}
	// AddressUse Work
	AddressUseWork = Code{Value: ptr.To("work")}
)

var (
	// AdministrativeGender Female
	AdministrativeGenderFemale = Code{Value: ptr.To("female")}
	// AdministrativeGender Male
	AdministrativeGenderMale = Code{Value: ptr.To("male")}
	// AdministrativeGender Other
	AdministrativeGenderOther = Code{Value: ptr.To("other")}
	// AdministrativeGender Unknown
	AdministrativeGenderUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// AdverseEventActuality Adverse Event
	AdverseEventActualityActual = Code{Value: ptr.To("actual")}
	// AdverseEventActuality Potential Adverse Event
	AdverseEventActualityPotential = Code{Value: ptr.To("potential")}
)

var (
	// AdverseEventStatus Completed
	AdverseEventStatusCompleted = Code{Value: ptr.To("completed")}
	// AdverseEventStatus Entered in Error
	AdverseEventStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// AdverseEventStatus In Progress
	AdverseEventStatusInProgress = Code{Value: ptr.To("in-progress")}
	// AdverseEventStatus Not Done
	AdverseEventStatusNotDone = Code{Value: ptr.To("not-done")}
	// AdverseEventStatus On Hold
	AdverseEventStatusOnHold = Code{Value: ptr.To("on-hold")}
	// AdverseEventStatus Preparation
	AdverseEventStatusPreparation = Code{Value: ptr.To("preparation")}
	// AdverseEventStatus Stopped
	AdverseEventStatusStopped = Code{Value: ptr.To("stopped")}
	// AdverseEventStatus Unknown
	AdverseEventStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// AggregationMode Contained
	AggregationModeContained = Code{Value: ptr.To("contained")}
	// AggregationMode Referenced
	AggregationModeReferenced = Code{Value: ptr.To("referenced")}
)

var (
	// AllergyIntoleranceCategory Biologic
	AllergyIntoleranceCategoryBiologic = Code{Value: ptr.To("biologic")}
	// AllergyIntoleranceCategory Environment
	AllergyIntoleranceCategoryEnvironment = Code{Value: ptr.To("environment")}
	// AllergyIntoleranceCategory Food
	AllergyIntoleranceCategoryFood = Code{Value: ptr.To("food")}
	// AllergyIntoleranceCategory Medication
	AllergyIntoleranceCategoryMedication = Code{Value: ptr.To("medication")}
)

var (
	// AllergyIntoleranceCriticality High Risk
	AllergyIntoleranceCriticalityHigh = Code{Value: ptr.To("high")}
	// AllergyIntoleranceCriticality Low Risk
	AllergyIntoleranceCriticalityLow = Code{Value: ptr.To("low")}
	// AllergyIntoleranceCriticality Unable to Assess Risk
	AllergyIntoleranceCriticalityUnableToAssess = Code{Value: ptr.To("unable-to-assess")}
)

var (
	// AllergyIntoleranceSeverity Mild
	AllergyIntoleranceSeverityMild = Code{Value: ptr.To("mild")}
	// AllergyIntoleranceSeverity Moderate
	AllergyIntoleranceSeverityModerate = Code{Value: ptr.To("moderate")}
	// AllergyIntoleranceSeverity Severe
	AllergyIntoleranceSeveritySevere = Code{Value: ptr.To("severe")}
)

var (
	// AppointmentResponseStatus Accepted
	AppointmentResponseStatusAccepted = Code{Value: ptr.To("accepted")}
	// AppointmentResponseStatus Declined
	AppointmentResponseStatusDeclined = Code{Value: ptr.To("declined")}
	// AppointmentResponseStatus Needs Action
	AppointmentResponseStatusNeedsAction = Code{Value: ptr.To("needs-action")}
	// AppointmentResponseStatus Tentative
	AppointmentResponseStatusTentative = Code{Value: ptr.To("tentative")}
)

var (
	// AppointmentStatus Arrived
	AppointmentStatusArrived = Code{Value: ptr.To("arrived")}
	// AppointmentStatus Booked
	AppointmentStatusBooked = Code{Value: ptr.To("booked")}
	// AppointmentStatus Cancelled
	AppointmentStatusCancelled = Code{Value: ptr.To("cancelled")}
	// AppointmentStatus Checked In
	AppointmentStatusCheckedIn = Code{Value: ptr.To("checked-in")}
	// AppointmentStatus Entered in error
	AppointmentStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// AppointmentStatus Fulfilled
	AppointmentStatusFulfilled = Code{Value: ptr.To("fulfilled")}
	// AppointmentStatus No Show
	AppointmentStatusNoshow = Code{Value: ptr.To("noshow")}
	// AppointmentStatus Pending
	AppointmentStatusPending = Code{Value: ptr.To("pending")}
	// AppointmentStatus Proposed
	AppointmentStatusProposed = Code{Value: ptr.To("proposed")}
	// AppointmentStatus Waitlisted
	AppointmentStatusWaitlist = Code{Value: ptr.To("waitlist")}
)

var (
	// ArtifactAssessmentDisposition Not Persuasive
	ArtifactAssessmentDispositionNotPersuasive = Code{Value: ptr.To("not-persuasive")}
	// ArtifactAssessmentDisposition Not Persuasive with Modification
	ArtifactAssessmentDispositionNotPersuasiveWithModification = Code{Value: ptr.To("not-persuasive-with-modification")}
	// ArtifactAssessmentDisposition Persuasive
	ArtifactAssessmentDispositionPersuasive = Code{Value: ptr.To("persuasive")}
	// ArtifactAssessmentDisposition Persuasive with Modification
	ArtifactAssessmentDispositionPersuasiveWithModification = Code{Value: ptr.To("persuasive-with-modification")}
	// ArtifactAssessmentDisposition Unresolved
	ArtifactAssessmentDispositionUnresolved = Code{Value: ptr.To("unresolved")}
)

var (
	// ArtifactAssessmentInformationType Change Request
	ArtifactAssessmentInformationTypeChangeRequest = Code{Value: ptr.To("change-request")}
	// ArtifactAssessmentInformationType Classifier
	ArtifactAssessmentInformationTypeClassifier = Code{Value: ptr.To("classifier")}
	// ArtifactAssessmentInformationType Comment
	ArtifactAssessmentInformationTypeComment = Code{Value: ptr.To("comment")}
	// ArtifactAssessmentInformationType Container
	ArtifactAssessmentInformationTypeContainer = Code{Value: ptr.To("container")}
	// ArtifactAssessmentInformationType Rating
	ArtifactAssessmentInformationTypeRating = Code{Value: ptr.To("rating")}
	// ArtifactAssessmentInformationType Response
	ArtifactAssessmentInformationTypeResponse = Code{Value: ptr.To("response")}
)

var (
	// ArtifactAssessmentWorkflowStatus Applied
	ArtifactAssessmentWorkflowStatusApplied = Code{Value: ptr.To("applied")}
	// ArtifactAssessmentWorkflowStatus Deferred
	ArtifactAssessmentWorkflowStatusDeferred = Code{Value: ptr.To("deferred")}
	// ArtifactAssessmentWorkflowStatus Duplicate
	ArtifactAssessmentWorkflowStatusDuplicate = Code{Value: ptr.To("duplicate")}
	// ArtifactAssessmentWorkflowStatus Entered in Error
	ArtifactAssessmentWorkflowStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ArtifactAssessmentWorkflowStatus Published
	ArtifactAssessmentWorkflowStatusPublished = Code{Value: ptr.To("published")}
	// ArtifactAssessmentWorkflowStatus Resolved - Change Required
	ArtifactAssessmentWorkflowStatusResolvedChangeRequired = Code{Value: ptr.To("resolved-change-required")}
	// ArtifactAssessmentWorkflowStatus Resolved - No Change
	ArtifactAssessmentWorkflowStatusResolvedNoChange = Code{Value: ptr.To("resolved-no-change")}
	// ArtifactAssessmentWorkflowStatus Submitted
	ArtifactAssessmentWorkflowStatusSubmitted = Code{Value: ptr.To("submitted")}
	// ArtifactAssessmentWorkflowStatus Triaged
	ArtifactAssessmentWorkflowStatusTriaged = Code{Value: ptr.To("triaged")}
	// ArtifactAssessmentWorkflowStatus Waiting for Input
	ArtifactAssessmentWorkflowStatusWaitingForInput = Code{Value: ptr.To("waiting-for-input")}
)

var (
	// AssertionDirectionType request
	AssertionDirectionTypeRequest = Code{Value: ptr.To("request")}
	// AssertionDirectionType response
	AssertionDirectionTypeResponse = Code{Value: ptr.To("response")}
)

var (
	// AssertionManualCompletionType Fail
	AssertionManualCompletionTypeFail = Code{Value: ptr.To("fail")}
	// AssertionManualCompletionType Pass
	AssertionManualCompletionTypePass = Code{Value: ptr.To("pass")}
	// AssertionManualCompletionType Skip
	AssertionManualCompletionTypeSkip = Code{Value: ptr.To("skip")}
	// AssertionManualCompletionType Stop
	AssertionManualCompletionTypeStop = Code{Value: ptr.To("stop")}
)

var (
	// AssertionOperatorType contains
	AssertionOperatorTypeContains = Code{Value: ptr.To("contains")}
	// AssertionOperatorType empty
	AssertionOperatorTypeEmpty = Code{Value: ptr.To("empty")}
	// AssertionOperatorType equals
	AssertionOperatorTypeEquals = Code{Value: ptr.To("equals")}
	// AssertionOperatorType evaluate
	AssertionOperatorTypeEval = Code{Value: ptr.To("eval")}
	// AssertionOperatorType greaterThan
	AssertionOperatorTypeGreaterThan = Code{Value: ptr.To("greaterThan")}
	// AssertionOperatorType in
	AssertionOperatorTypeIn = Code{Value: ptr.To("in")}
	// AssertionOperatorType lessThan
	AssertionOperatorTypeLessThan = Code{Value: ptr.To("lessThan")}
	// AssertionOperatorType manualEvaluate
	AssertionOperatorTypeManualEval = Code{Value: ptr.To("manualEval")}
	// AssertionOperatorType notContains
	AssertionOperatorTypeNotContains = Code{Value: ptr.To("notContains")}
	// AssertionOperatorType notEmpty
	AssertionOperatorTypeNotEmpty = Code{Value: ptr.To("notEmpty")}
	// AssertionOperatorType notEquals
	AssertionOperatorTypeNotEquals = Code{Value: ptr.To("notEquals")}
	// AssertionOperatorType notIn
	AssertionOperatorTypeNotIn = Code{Value: ptr.To("notIn")}
)

var (
	// AssertionResponseTypes Accepted
	AssertionResponseTypesAccepted = Code{Value: ptr.To("accepted")}
	// AssertionResponseTypes Bad Gateway
	AssertionResponseTypesBadGateway = Code{Value: ptr.To("badGateway")}
	// AssertionResponseTypes Bad Request
	AssertionResponseTypesBadRequest = Code{Value: ptr.To("badRequest")}
	// AssertionResponseTypes Conflict
	AssertionResponseTypesConflict = Code{Value: ptr.To("conflict")}
	// AssertionResponseTypes Content Too Large
	AssertionResponseTypesContentTooLarge = Code{Value: ptr.To("contentTooLarge")}
	// AssertionResponseTypes Continue
	AssertionResponseTypesContinue = Code{Value: ptr.To("continue")}
	// AssertionResponseTypes Created
	AssertionResponseTypesCreated = Code{Value: ptr.To("created")}
	// AssertionResponseTypes Expectation Failed
	AssertionResponseTypesExpectationFailed = Code{Value: ptr.To("expectationFailed")}
	// AssertionResponseTypes Forbidden
	AssertionResponseTypesForbidden = Code{Value: ptr.To("forbidden")}
	// AssertionResponseTypes Found
	AssertionResponseTypesFound = Code{Value: ptr.To("found")}
	// AssertionResponseTypes Gateway Timeout
	AssertionResponseTypesGatewayTimeout = Code{Value: ptr.To("gatewayTimeout")}
	// AssertionResponseTypes Gone
	AssertionResponseTypesGone = Code{Value: ptr.To("gone")}
	// AssertionResponseTypes HTTP Version Not Supported
	AssertionResponseTypesHttpVersionNotSupported = Code{Value: ptr.To("httpVersionNotSupported")}
	// AssertionResponseTypes Internal Server Error
	AssertionResponseTypesInternalServerError = Code{Value: ptr.To("internalServerError")}
	// AssertionResponseTypes Length Required
	AssertionResponseTypesLengthRequired = Code{Value: ptr.To("lengthRequired")}
	// AssertionResponseTypes Method Not Allowed
	AssertionResponseTypesMethodNotAllowed = Code{Value: ptr.To("methodNotAllowed")}
	// AssertionResponseTypes Misdirected Request
	AssertionResponseTypesMisdirectedRequest = Code{Value: ptr.To("misdirectedRequest")}
	// AssertionResponseTypes Moved Permanently
	AssertionResponseTypesMovedPermanently = Code{Value: ptr.To("movedPermanently")}
	// AssertionResponseTypes Multiple Choices
	AssertionResponseTypesMultipleChoices = Code{Value: ptr.To("multipleChoices")}
	// AssertionResponseTypes No Content
	AssertionResponseTypesNoContent = Code{Value: ptr.To("noContent")}
	// AssertionResponseTypes Non-Authoritative Information
	AssertionResponseTypesNonAuthoritativeInformation = Code{Value: ptr.To("nonAuthoritativeInformation")}
	// AssertionResponseTypes Not Acceptable
	AssertionResponseTypesNotAcceptable = Code{Value: ptr.To("notAcceptable")}
	// AssertionResponseTypes Not Found
	AssertionResponseTypesNotFound = Code{Value: ptr.To("notFound")}
	// AssertionResponseTypes Not Implemented
	AssertionResponseTypesNotImplemented = Code{Value: ptr.To("notImplemented")}
	// AssertionResponseTypes Not Modified
	AssertionResponseTypesNotModified = Code{Value: ptr.To("notModified")}
	// AssertionResponseTypes OK
	AssertionResponseTypesOkay = Code{Value: ptr.To("okay")}
	// AssertionResponseTypes Partial Content
	AssertionResponseTypesPartialContent = Code{Value: ptr.To("partialContent")}
	// AssertionResponseTypes Payment Required
	AssertionResponseTypesPaymentRequired = Code{Value: ptr.To("paymentRequired")}
	// AssertionResponseTypes Permanent Redirect
	AssertionResponseTypesPermanentRedirect = Code{Value: ptr.To("permanentRedirect")}
	// AssertionResponseTypes Precondition Failed
	AssertionResponseTypesPreconditionFailed = Code{Value: ptr.To("preconditionFailed")}
	// AssertionResponseTypes Proxy Authentication Required
	AssertionResponseTypesProxyAuthenticationRequired = Code{Value: ptr.To("proxyAuthenticationRequired")}
	// AssertionResponseTypes Range Not Satisfiable
	AssertionResponseTypesRangeNotSatisfiable = Code{Value: ptr.To("rangeNotSatisfiable")}
	// AssertionResponseTypes Request Timeout
	AssertionResponseTypesRequestTimeout = Code{Value: ptr.To("requestTimeout")}
	// AssertionResponseTypes Reset Content
	AssertionResponseTypesResetContent = Code{Value: ptr.To("resetContent")}
	// AssertionResponseTypes See Other
	AssertionResponseTypesSeeOther = Code{Value: ptr.To("seeOther")}
	// AssertionResponseTypes Service Unavailable
	AssertionResponseTypesServiceUnavailable = Code{Value: ptr.To("serviceUnavailable")}
	// AssertionResponseTypes Switching Protocols
	AssertionResponseTypesSwitchingProtocols = Code{Value: ptr.To("switchingProtocols")}
	// AssertionResponseTypes Temporary Redirect
	AssertionResponseTypesTemporaryRedirect = Code{Value: ptr.To("temporaryRedirect")}
	// AssertionResponseTypes Unauthorized
	AssertionResponseTypesUnauthorized = Code{Value: ptr.To("unauthorized")}
	// AssertionResponseTypes Unprocessable Content
	AssertionResponseTypesUnprocessableContent = Code{Value: ptr.To("unprocessableContent")}
	// AssertionResponseTypes Unsupported Media Type
	AssertionResponseTypesUnsupportedMediaType = Code{Value: ptr.To("unsupportedMediaType")}
	// AssertionResponseTypes Upgrade Required
	AssertionResponseTypesUpgradeRequired = Code{Value: ptr.To("upgradeRequired")}
	// AssertionResponseTypes URI Too Long
	AssertionResponseTypesUriTooLong = Code{Value: ptr.To("uriTooLong")}
	// AssertionResponseTypes Use Proxy
	AssertionResponseTypesUseProxy = Code{Value: ptr.To("useProxy")}
)

var (
	// AuditEventAction Create
	AuditEventActionC = Code{Value: ptr.To("C")}
	// AuditEventAction Delete
	AuditEventActionD = Code{Value: ptr.To("D")}
	// AuditEventAction Execute
	AuditEventActionE = Code{Value: ptr.To("E")}
	// AuditEventAction Read
	AuditEventActionR = Code{Value: ptr.To("R")}
	// AuditEventAction Update
	AuditEventActionU = Code{Value: ptr.To("U")}
)

var (
	// AuditEventSeverity Alert
	AuditEventSeverityAlert = Code{Value: ptr.To("alert")}
	// AuditEventSeverity Critical
	AuditEventSeverityCritical = Code{Value: ptr.To("critical")}
	// AuditEventSeverity Debug
	AuditEventSeverityDebug = Code{Value: ptr.To("debug")}
	// AuditEventSeverity Emergency
	AuditEventSeverityEmergency = Code{Value: ptr.To("emergency")}
	// AuditEventSeverity Error
	AuditEventSeverityError = Code{Value: ptr.To("error")}
	// AuditEventSeverity Informational
	AuditEventSeverityInformational = Code{Value: ptr.To("informational")}
	// AuditEventSeverity Notice
	AuditEventSeverityNotice = Code{Value: ptr.To("notice")}
	// AuditEventSeverity Warning
	AuditEventSeverityWarning = Code{Value: ptr.To("warning")}
)

var (
	// BindingStrength Example
	BindingStrengthExample = Code{Value: ptr.To("example")}
	// BindingStrength Extensible
	BindingStrengthExtensible = Code{Value: ptr.To("extensible")}
	// BindingStrength Preferred
	BindingStrengthPreferred = Code{Value: ptr.To("preferred")}
	// BindingStrength Required
	BindingStrengthRequired = Code{Value: ptr.To("required")}
)

var (
	// BiologicallyDerivedProductDispenseCodes Allocated
	BiologicallyDerivedProductDispenseCodesAllocated = Code{Value: ptr.To("allocated")}
	// BiologicallyDerivedProductDispenseCodes Entered in Error
	BiologicallyDerivedProductDispenseCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// BiologicallyDerivedProductDispenseCodes In Progress
	BiologicallyDerivedProductDispenseCodesInProgress = Code{Value: ptr.To("in-progress")}
	// BiologicallyDerivedProductDispenseCodes Issued
	BiologicallyDerivedProductDispenseCodesIssued = Code{Value: ptr.To("issued")}
	// BiologicallyDerivedProductDispenseCodes Preparation
	BiologicallyDerivedProductDispenseCodesPreparation = Code{Value: ptr.To("preparation")}
	// BiologicallyDerivedProductDispenseCodes Returned
	BiologicallyDerivedProductDispenseCodesReturned = Code{Value: ptr.To("returned")}
	// BiologicallyDerivedProductDispenseCodes Unfulfilled
	BiologicallyDerivedProductDispenseCodesUnfulfilled = Code{Value: ptr.To("unfulfilled")}
	// BiologicallyDerivedProductDispenseCodes Unknown
	BiologicallyDerivedProductDispenseCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// BundleType Batch
	BundleTypeBatch = Code{Value: ptr.To("batch")}
	// BundleType Batch Response
	BundleTypeBatchResponse = Code{Value: ptr.To("batch-response")}
	// BundleType Collection
	BundleTypeCollection = Code{Value: ptr.To("collection")}
	// BundleType Document
	BundleTypeDocument = Code{Value: ptr.To("document")}
	// BundleType History List
	BundleTypeHistory = Code{Value: ptr.To("history")}
	// BundleType Message
	BundleTypeMessage = Code{Value: ptr.To("message")}
	// BundleType Search Results
	BundleTypeSearchset = Code{Value: ptr.To("searchset")}
	// BundleType Subscription Notification
	BundleTypeSubscriptionNotification = Code{Value: ptr.To("subscription-notification")}
	// BundleType Transaction
	BundleTypeTransaction = Code{Value: ptr.To("transaction")}
	// BundleType Transaction Response
	BundleTypeTransactionResponse = Code{Value: ptr.To("transaction-response")}
)

var (
	// CapabilityStatementKind Capability
	CapabilityStatementKindCapability = Code{Value: ptr.To("capability")}
	// CapabilityStatementKind Instance
	CapabilityStatementKindInstance = Code{Value: ptr.To("instance")}
	// CapabilityStatementKind Requirements
	CapabilityStatementKindRequirements = Code{Value: ptr.To("requirements")}
)

var (
	// CarePlanIntent Directive
	CarePlanIntentDirective = Code{Value: ptr.To("directive")}
	// CarePlanIntent Option
	CarePlanIntentOption = Code{Value: ptr.To("option")}
	// CarePlanIntent Order
	CarePlanIntentOrder = Code{Value: ptr.To("order")}
	// CarePlanIntent Plan
	CarePlanIntentPlan = Code{Value: ptr.To("plan")}
	// CarePlanIntent Proposal
	CarePlanIntentProposal = Code{Value: ptr.To("proposal")}
)

var (
	// CareTeamStatus Active
	CareTeamStatusActive = Code{Value: ptr.To("active")}
	// CareTeamStatus Entered in Error
	CareTeamStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// CareTeamStatus Inactive
	CareTeamStatusInactive = Code{Value: ptr.To("inactive")}
	// CareTeamStatus Proposed
	CareTeamStatusProposed = Code{Value: ptr.To("proposed")}
	// CareTeamStatus Suspended
	CareTeamStatusSuspended = Code{Value: ptr.To("suspended")}
)

var (
	// CharacteristicCombination All of
	CharacteristicCombinationAllOf = Code{Value: ptr.To("all-of")}
	// CharacteristicCombination Any of
	CharacteristicCombinationAnyOf = Code{Value: ptr.To("any-of")}
	// CharacteristicCombination At least
	CharacteristicCombinationAtLeast = Code{Value: ptr.To("at-least")}
	// CharacteristicCombination At most
	CharacteristicCombinationAtMost = Code{Value: ptr.To("at-most")}
	// CharacteristicCombination Dataset
	CharacteristicCombinationDataset = Code{Value: ptr.To("dataset")}
	// CharacteristicCombination Net effect
	CharacteristicCombinationNetEffect = Code{Value: ptr.To("net-effect")}
	// CharacteristicCombination Statistical
	CharacteristicCombinationStatistical = Code{Value: ptr.To("statistical")}
)

var (
	// ChargeItemStatus Aborted
	ChargeItemStatusAborted = Code{Value: ptr.To("aborted")}
	// ChargeItemStatus Billable
	ChargeItemStatusBillable = Code{Value: ptr.To("billable")}
	// ChargeItemStatus Billed
	ChargeItemStatusBilled = Code{Value: ptr.To("billed")}
	// ChargeItemStatus Entered in Error
	ChargeItemStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ChargeItemStatus Not billable
	ChargeItemStatusNotBillable = Code{Value: ptr.To("not-billable")}
	// ChargeItemStatus Planned
	ChargeItemStatusPlanned = Code{Value: ptr.To("planned")}
	// ChargeItemStatus Unknown
	ChargeItemStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ClaimProcessingCodes Processing Complete
	ClaimProcessingCodesComplete = Code{Value: ptr.To("complete")}
	// ClaimProcessingCodes Error
	ClaimProcessingCodesError = Code{Value: ptr.To("error")}
	// ClaimProcessingCodes Partial Processing
	ClaimProcessingCodesPartial = Code{Value: ptr.To("partial")}
	// ClaimProcessingCodes Queued
	ClaimProcessingCodesQueued = Code{Value: ptr.To("queued")}
)

var (
	// ClinicalUseDefinitionType Contraindication
	ClinicalUseDefinitionTypeContraindication = Code{Value: ptr.To("contraindication")}
	// ClinicalUseDefinitionType Indication
	ClinicalUseDefinitionTypeIndication = Code{Value: ptr.To("indication")}
	// ClinicalUseDefinitionType Interaction
	ClinicalUseDefinitionTypeInteraction = Code{Value: ptr.To("interaction")}
	// ClinicalUseDefinitionType Undesirable Effect
	ClinicalUseDefinitionTypeUndesirableEffect = Code{Value: ptr.To("undesirable-effect")}
	// ClinicalUseDefinitionType Warning
	ClinicalUseDefinitionTypeWarning = Code{Value: ptr.To("warning")}
)

var (
	// CodeSearchSupport In Compose
	CodeSearchSupportInCompose = Code{Value: ptr.To("in-compose")}
	// CodeSearchSupport In Compose Or Expansion
	CodeSearchSupportInComposeOrExpansion = Code{Value: ptr.To("in-compose-or-expansion")}
	// CodeSearchSupport In Expansion
	CodeSearchSupportInExpansion = Code{Value: ptr.To("in-expansion")}
)

var (
	// CodeSystemContentMode Complete
	CodeSystemContentModeComplete = Code{Value: ptr.To("complete")}
	// CodeSystemContentMode Example
	CodeSystemContentModeExample = Code{Value: ptr.To("example")}
	// CodeSystemContentMode Fragment
	CodeSystemContentModeFragment = Code{Value: ptr.To("fragment")}
	// CodeSystemContentMode Not Present
	CodeSystemContentModeNotPresent = Code{Value: ptr.To("not-present")}
	// CodeSystemContentMode Supplement
	CodeSystemContentModeSupplement = Code{Value: ptr.To("supplement")}
)

var (
	// CodeSystemHierarchyMeaning Classified With
	CodeSystemHierarchyMeaningClassifiedWith = Code{Value: ptr.To("classified-with")}
	// CodeSystemHierarchyMeaning Grouped By
	CodeSystemHierarchyMeaningGroupedBy = Code{Value: ptr.To("grouped-by")}
	// CodeSystemHierarchyMeaning Is-A
	CodeSystemHierarchyMeaningIsA = Code{Value: ptr.To("is-a")}
	// CodeSystemHierarchyMeaning Part Of
	CodeSystemHierarchyMeaningPartOf = Code{Value: ptr.To("part-of")}
)

var (
	// ColorCodesOrRGB aliceblue
	ColorCodesOrRgbAliceblue = Code{Value: ptr.To("aliceblue")}
	// ColorCodesOrRGB antiquewhite
	ColorCodesOrRgbAntiquewhite = Code{Value: ptr.To("antiquewhite")}
	// ColorCodesOrRGB aqua
	ColorCodesOrRgbAqua = Code{Value: ptr.To("aqua")}
	// ColorCodesOrRGB aquamarine
	ColorCodesOrRgbAquamarine = Code{Value: ptr.To("aquamarine")}
	// ColorCodesOrRGB azure
	ColorCodesOrRgbAzure = Code{Value: ptr.To("azure")}
	// ColorCodesOrRGB beige
	ColorCodesOrRgbBeige = Code{Value: ptr.To("beige")}
	// ColorCodesOrRGB bisque
	ColorCodesOrRgbBisque = Code{Value: ptr.To("bisque")}
	// ColorCodesOrRGB black
	ColorCodesOrRgbBlack = Code{Value: ptr.To("black")}
	// ColorCodesOrRGB blanchedalmond
	ColorCodesOrRgbBlanchedalmond = Code{Value: ptr.To("blanchedalmond")}
	// ColorCodesOrRGB blue
	ColorCodesOrRgbBlue = Code{Value: ptr.To("blue")}
	// ColorCodesOrRGB blueviolet
	ColorCodesOrRgbBlueviolet = Code{Value: ptr.To("blueviolet")}
	// ColorCodesOrRGB brown
	ColorCodesOrRgbBrown = Code{Value: ptr.To("brown")}
	// ColorCodesOrRGB burlywood
	ColorCodesOrRgbBurlywood = Code{Value: ptr.To("burlywood")}
	// ColorCodesOrRGB cadetblue
	ColorCodesOrRgbCadetblue = Code{Value: ptr.To("cadetblue")}
	// ColorCodesOrRGB chartreuse
	ColorCodesOrRgbChartreuse = Code{Value: ptr.To("chartreuse")}
	// ColorCodesOrRGB chocolate
	ColorCodesOrRgbChocolate = Code{Value: ptr.To("chocolate")}
	// ColorCodesOrRGB coral
	ColorCodesOrRgbCoral = Code{Value: ptr.To("coral")}
	// ColorCodesOrRGB cornflowerblue
	ColorCodesOrRgbCornflowerblue = Code{Value: ptr.To("cornflowerblue")}
	// ColorCodesOrRGB cornsilk
	ColorCodesOrRgbCornsilk = Code{Value: ptr.To("cornsilk")}
	// ColorCodesOrRGB crimson
	ColorCodesOrRgbCrimson = Code{Value: ptr.To("crimson")}
	// ColorCodesOrRGB cyan
	ColorCodesOrRgbCyan = Code{Value: ptr.To("cyan")}
	// ColorCodesOrRGB darkblue
	ColorCodesOrRgbDarkblue = Code{Value: ptr.To("darkblue")}
	// ColorCodesOrRGB darkcyan
	ColorCodesOrRgbDarkcyan = Code{Value: ptr.To("darkcyan")}
	// ColorCodesOrRGB darkgoldenrod
	ColorCodesOrRgbDarkgoldenrod = Code{Value: ptr.To("darkgoldenrod")}
	// ColorCodesOrRGB darkgray
	ColorCodesOrRgbDarkgray = Code{Value: ptr.To("darkgray")}
	// ColorCodesOrRGB darkgreen
	ColorCodesOrRgbDarkgreen = Code{Value: ptr.To("darkgreen")}
	// ColorCodesOrRGB darkgrey
	ColorCodesOrRgbDarkgrey = Code{Value: ptr.To("darkgrey")}
	// ColorCodesOrRGB darkkhaki
	ColorCodesOrRgbDarkkhaki = Code{Value: ptr.To("darkkhaki")}
	// ColorCodesOrRGB darkmagenta
	ColorCodesOrRgbDarkmagenta = Code{Value: ptr.To("darkmagenta")}
	// ColorCodesOrRGB darkolivegreen
	ColorCodesOrRgbDarkolivegreen = Code{Value: ptr.To("darkolivegreen")}
	// ColorCodesOrRGB darkorange
	ColorCodesOrRgbDarkorange = Code{Value: ptr.To("darkorange")}
	// ColorCodesOrRGB darkorchid
	ColorCodesOrRgbDarkorchid = Code{Value: ptr.To("darkorchid")}
	// ColorCodesOrRGB darkred
	ColorCodesOrRgbDarkred = Code{Value: ptr.To("darkred")}
	// ColorCodesOrRGB darksalmon
	ColorCodesOrRgbDarksalmon = Code{Value: ptr.To("darksalmon")}
	// ColorCodesOrRGB darkseagreen
	ColorCodesOrRgbDarkseagreen = Code{Value: ptr.To("darkseagreen")}
	// ColorCodesOrRGB darkslateblue
	ColorCodesOrRgbDarkslateblue = Code{Value: ptr.To("darkslateblue")}
	// ColorCodesOrRGB darkslategray
	ColorCodesOrRgbDarkslategray = Code{Value: ptr.To("darkslategray")}
	// ColorCodesOrRGB darkslategrey
	ColorCodesOrRgbDarkslategrey = Code{Value: ptr.To("darkslategrey")}
	// ColorCodesOrRGB darkturquoise
	ColorCodesOrRgbDarkturquoise = Code{Value: ptr.To("darkturquoise")}
	// ColorCodesOrRGB darkviolet
	ColorCodesOrRgbDarkviolet = Code{Value: ptr.To("darkviolet")}
	// ColorCodesOrRGB deeppink
	ColorCodesOrRgbDeeppink = Code{Value: ptr.To("deeppink")}
	// ColorCodesOrRGB deepskyblue
	ColorCodesOrRgbDeepskyblue = Code{Value: ptr.To("deepskyblue")}
	// ColorCodesOrRGB dimgray
	ColorCodesOrRgbDimgray = Code{Value: ptr.To("dimgray")}
	// ColorCodesOrRGB dimgrey
	ColorCodesOrRgbDimgrey = Code{Value: ptr.To("dimgrey")}
	// ColorCodesOrRGB dodgerblue
	ColorCodesOrRgbDodgerblue = Code{Value: ptr.To("dodgerblue")}
	// ColorCodesOrRGB firebrick
	ColorCodesOrRgbFirebrick = Code{Value: ptr.To("firebrick")}
	// ColorCodesOrRGB floralwhite
	ColorCodesOrRgbFloralwhite = Code{Value: ptr.To("floralwhite")}
	// ColorCodesOrRGB forestgreen
	ColorCodesOrRgbForestgreen = Code{Value: ptr.To("forestgreen")}
	// ColorCodesOrRGB fuchsia
	ColorCodesOrRgbFuchsia = Code{Value: ptr.To("fuchsia")}
	// ColorCodesOrRGB gainsboro
	ColorCodesOrRgbGainsboro = Code{Value: ptr.To("gainsboro")}
	// ColorCodesOrRGB ghostwhite
	ColorCodesOrRgbGhostwhite = Code{Value: ptr.To("ghostwhite")}
	// ColorCodesOrRGB gold
	ColorCodesOrRgbGold = Code{Value: ptr.To("gold")}
	// ColorCodesOrRGB goldenrod
	ColorCodesOrRgbGoldenrod = Code{Value: ptr.To("goldenrod")}
	// ColorCodesOrRGB gray
	ColorCodesOrRgbGray = Code{Value: ptr.To("gray")}
	// ColorCodesOrRGB green
	ColorCodesOrRgbGreen = Code{Value: ptr.To("green")}
	// ColorCodesOrRGB greenyellow
	ColorCodesOrRgbGreenyellow = Code{Value: ptr.To("greenyellow")}
	// ColorCodesOrRGB grey
	ColorCodesOrRgbGrey = Code{Value: ptr.To("grey")}
	// ColorCodesOrRGB honeydew
	ColorCodesOrRgbHoneydew = Code{Value: ptr.To("honeydew")}
	// ColorCodesOrRGB hotpink
	ColorCodesOrRgbHotpink = Code{Value: ptr.To("hotpink")}
	// ColorCodesOrRGB indianred
	ColorCodesOrRgbIndianred = Code{Value: ptr.To("indianred")}
	// ColorCodesOrRGB indigo
	ColorCodesOrRgbIndigo = Code{Value: ptr.To("indigo")}
	// ColorCodesOrRGB ivory
	ColorCodesOrRgbIvory = Code{Value: ptr.To("ivory")}
	// ColorCodesOrRGB khaki
	ColorCodesOrRgbKhaki = Code{Value: ptr.To("khaki")}
	// ColorCodesOrRGB lavender
	ColorCodesOrRgbLavender = Code{Value: ptr.To("lavender")}
	// ColorCodesOrRGB lavenderblush
	ColorCodesOrRgbLavenderblush = Code{Value: ptr.To("lavenderblush")}
	// ColorCodesOrRGB lawngreen
	ColorCodesOrRgbLawngreen = Code{Value: ptr.To("lawngreen")}
	// ColorCodesOrRGB lemonchiffon
	ColorCodesOrRgbLemonchiffon = Code{Value: ptr.To("lemonchiffon")}
	// ColorCodesOrRGB lightblue
	ColorCodesOrRgbLightblue = Code{Value: ptr.To("lightblue")}
	// ColorCodesOrRGB lightcoral
	ColorCodesOrRgbLightcoral = Code{Value: ptr.To("lightcoral")}
	// ColorCodesOrRGB lightcyan
	ColorCodesOrRgbLightcyan = Code{Value: ptr.To("lightcyan")}
	// ColorCodesOrRGB lightgoldenrodyellow
	ColorCodesOrRgbLightgoldenrodyellow = Code{Value: ptr.To("lightgoldenrodyellow")}
	// ColorCodesOrRGB lightgray
	ColorCodesOrRgbLightgray = Code{Value: ptr.To("lightgray")}
	// ColorCodesOrRGB lightgreen
	ColorCodesOrRgbLightgreen = Code{Value: ptr.To("lightgreen")}
	// ColorCodesOrRGB lightgrey
	ColorCodesOrRgbLightgrey = Code{Value: ptr.To("lightgrey")}
	// ColorCodesOrRGB lightpink
	ColorCodesOrRgbLightpink = Code{Value: ptr.To("lightpink")}
	// ColorCodesOrRGB lightsalmon
	ColorCodesOrRgbLightsalmon = Code{Value: ptr.To("lightsalmon")}
	// ColorCodesOrRGB lightseagreen
	ColorCodesOrRgbLightseagreen = Code{Value: ptr.To("lightseagreen")}
	// ColorCodesOrRGB lightskyblue
	ColorCodesOrRgbLightskyblue = Code{Value: ptr.To("lightskyblue")}
	// ColorCodesOrRGB lightslategray
	ColorCodesOrRgbLightslategray = Code{Value: ptr.To("lightslategray")}
	// ColorCodesOrRGB lightslategrey
	ColorCodesOrRgbLightslategrey = Code{Value: ptr.To("lightslategrey")}
	// ColorCodesOrRGB lightsteelblue
	ColorCodesOrRgbLightsteelblue = Code{Value: ptr.To("lightsteelblue")}
	// ColorCodesOrRGB lightyellow
	ColorCodesOrRgbLightyellow = Code{Value: ptr.To("lightyellow")}
	// ColorCodesOrRGB lime
	ColorCodesOrRgbLime = Code{Value: ptr.To("lime")}
	// ColorCodesOrRGB limegreen
	ColorCodesOrRgbLimegreen = Code{Value: ptr.To("limegreen")}
	// ColorCodesOrRGB linen
	ColorCodesOrRgbLinen = Code{Value: ptr.To("linen")}
	// ColorCodesOrRGB magenta
	ColorCodesOrRgbMagenta = Code{Value: ptr.To("magenta")}
	// ColorCodesOrRGB maroon
	ColorCodesOrRgbMaroon = Code{Value: ptr.To("maroon")}
	// ColorCodesOrRGB mediumaquamarine
	ColorCodesOrRgbMediumaquamarine = Code{Value: ptr.To("mediumaquamarine")}
	// ColorCodesOrRGB mediumblue
	ColorCodesOrRgbMediumblue = Code{Value: ptr.To("mediumblue")}
	// ColorCodesOrRGB mediumorchid
	ColorCodesOrRgbMediumorchid = Code{Value: ptr.To("mediumorchid")}
	// ColorCodesOrRGB mediumpurple
	ColorCodesOrRgbMediumpurple = Code{Value: ptr.To("mediumpurple")}
	// ColorCodesOrRGB mediumseagreen
	ColorCodesOrRgbMediumseagreen = Code{Value: ptr.To("mediumseagreen")}
	// ColorCodesOrRGB mediumslateblue
	ColorCodesOrRgbMediumslateblue = Code{Value: ptr.To("mediumslateblue")}
	// ColorCodesOrRGB mediumspringgreen
	ColorCodesOrRgbMediumspringgreen = Code{Value: ptr.To("mediumspringgreen")}
	// ColorCodesOrRGB mediumturquoise
	ColorCodesOrRgbMediumturquoise = Code{Value: ptr.To("mediumturquoise")}
	// ColorCodesOrRGB mediumvioletred
	ColorCodesOrRgbMediumvioletred = Code{Value: ptr.To("mediumvioletred")}
	// ColorCodesOrRGB midnightblue
	ColorCodesOrRgbMidnightblue = Code{Value: ptr.To("midnightblue")}
	// ColorCodesOrRGB mintcream
	ColorCodesOrRgbMintcream = Code{Value: ptr.To("mintcream")}
	// ColorCodesOrRGB mistyrose
	ColorCodesOrRgbMistyrose = Code{Value: ptr.To("mistyrose")}
	// ColorCodesOrRGB moccasin
	ColorCodesOrRgbMoccasin = Code{Value: ptr.To("moccasin")}
	// ColorCodesOrRGB navajowhite
	ColorCodesOrRgbNavajowhite = Code{Value: ptr.To("navajowhite")}
	// ColorCodesOrRGB navy
	ColorCodesOrRgbNavy = Code{Value: ptr.To("navy")}
	// ColorCodesOrRGB oldlace
	ColorCodesOrRgbOldlace = Code{Value: ptr.To("oldlace")}
	// ColorCodesOrRGB olive
	ColorCodesOrRgbOlive = Code{Value: ptr.To("olive")}
	// ColorCodesOrRGB olivedrab
	ColorCodesOrRgbOlivedrab = Code{Value: ptr.To("olivedrab")}
	// ColorCodesOrRGB orange
	ColorCodesOrRgbOrange = Code{Value: ptr.To("orange")}
	// ColorCodesOrRGB orangered
	ColorCodesOrRgbOrangered = Code{Value: ptr.To("orangered")}
	// ColorCodesOrRGB orchid
	ColorCodesOrRgbOrchid = Code{Value: ptr.To("orchid")}
	// ColorCodesOrRGB palegoldenrod
	ColorCodesOrRgbPalegoldenrod = Code{Value: ptr.To("palegoldenrod")}
	// ColorCodesOrRGB palegreen
	ColorCodesOrRgbPalegreen = Code{Value: ptr.To("palegreen")}
	// ColorCodesOrRGB paleturquoise
	ColorCodesOrRgbPaleturquoise = Code{Value: ptr.To("paleturquoise")}
	// ColorCodesOrRGB palevioletred
	ColorCodesOrRgbPalevioletred = Code{Value: ptr.To("palevioletred")}
	// ColorCodesOrRGB papayawhip
	ColorCodesOrRgbPapayawhip = Code{Value: ptr.To("papayawhip")}
	// ColorCodesOrRGB peachpuff
	ColorCodesOrRgbPeachpuff = Code{Value: ptr.To("peachpuff")}
	// ColorCodesOrRGB peru
	ColorCodesOrRgbPeru = Code{Value: ptr.To("peru")}
	// ColorCodesOrRGB pink
	ColorCodesOrRgbPink = Code{Value: ptr.To("pink")}
	// ColorCodesOrRGB plum
	ColorCodesOrRgbPlum = Code{Value: ptr.To("plum")}
	// ColorCodesOrRGB powderblue
	ColorCodesOrRgbPowderblue = Code{Value: ptr.To("powderblue")}
	// ColorCodesOrRGB purple
	ColorCodesOrRgbPurple = Code{Value: ptr.To("purple")}
	// ColorCodesOrRGB rebeccapurple
	ColorCodesOrRgbRebeccapurple = Code{Value: ptr.To("rebeccapurple")}
	// ColorCodesOrRGB red
	ColorCodesOrRgbRed = Code{Value: ptr.To("red")}
	// ColorCodesOrRGB rosybrown
	ColorCodesOrRgbRosybrown = Code{Value: ptr.To("rosybrown")}
	// ColorCodesOrRGB royalblue
	ColorCodesOrRgbRoyalblue = Code{Value: ptr.To("royalblue")}
	// ColorCodesOrRGB saddlebrown
	ColorCodesOrRgbSaddlebrown = Code{Value: ptr.To("saddlebrown")}
	// ColorCodesOrRGB salmon
	ColorCodesOrRgbSalmon = Code{Value: ptr.To("salmon")}
	// ColorCodesOrRGB sandybrown
	ColorCodesOrRgbSandybrown = Code{Value: ptr.To("sandybrown")}
	// ColorCodesOrRGB seagreen
	ColorCodesOrRgbSeagreen = Code{Value: ptr.To("seagreen")}
	// ColorCodesOrRGB seashell
	ColorCodesOrRgbSeashell = Code{Value: ptr.To("seashell")}
	// ColorCodesOrRGB sienna
	ColorCodesOrRgbSienna = Code{Value: ptr.To("sienna")}
	// ColorCodesOrRGB silver
	ColorCodesOrRgbSilver = Code{Value: ptr.To("silver")}
	// ColorCodesOrRGB skyblue
	ColorCodesOrRgbSkyblue = Code{Value: ptr.To("skyblue")}
	// ColorCodesOrRGB slateblue
	ColorCodesOrRgbSlateblue = Code{Value: ptr.To("slateblue")}
	// ColorCodesOrRGB slategray
	ColorCodesOrRgbSlategray = Code{Value: ptr.To("slategray")}
	// ColorCodesOrRGB slategrey
	ColorCodesOrRgbSlategrey = Code{Value: ptr.To("slategrey")}
	// ColorCodesOrRGB snow
	ColorCodesOrRgbSnow = Code{Value: ptr.To("snow")}
	// ColorCodesOrRGB springgreen
	ColorCodesOrRgbSpringgreen = Code{Value: ptr.To("springgreen")}
	// ColorCodesOrRGB steelblue
	ColorCodesOrRgbSteelblue = Code{Value: ptr.To("steelblue")}
	// ColorCodesOrRGB tan
	ColorCodesOrRgbTan = Code{Value: ptr.To("tan")}
	// ColorCodesOrRGB teal
	ColorCodesOrRgbTeal = Code{Value: ptr.To("teal")}
	// ColorCodesOrRGB thistle
	ColorCodesOrRgbThistle = Code{Value: ptr.To("thistle")}
	// ColorCodesOrRGB tomato
	ColorCodesOrRgbTomato = Code{Value: ptr.To("tomato")}
	// ColorCodesOrRGB turquoise
	ColorCodesOrRgbTurquoise = Code{Value: ptr.To("turquoise")}
	// ColorCodesOrRGB violet
	ColorCodesOrRgbViolet = Code{Value: ptr.To("violet")}
	// ColorCodesOrRGB wheat
	ColorCodesOrRgbWheat = Code{Value: ptr.To("wheat")}
	// ColorCodesOrRGB white
	ColorCodesOrRgbWhite = Code{Value: ptr.To("white")}
	// ColorCodesOrRGB whitesmoke
	ColorCodesOrRgbWhitesmoke = Code{Value: ptr.To("whitesmoke")}
	// ColorCodesOrRGB yellow
	ColorCodesOrRgbYellow = Code{Value: ptr.To("yellow")}
	// ColorCodesOrRGB yellowgreen
	ColorCodesOrRgbYellowgreen = Code{Value: ptr.To("yellowgreen")}
)

var (
	// CompartmentType Device
	CompartmentTypeDevice = Code{Value: ptr.To("Device")}
	// CompartmentType Encounter
	CompartmentTypeEncounter = Code{Value: ptr.To("Encounter")}
	// CompartmentType EpisodeOfCare
	CompartmentTypeEpisodeOfCare = Code{Value: ptr.To("EpisodeOfCare")}
	// CompartmentType Patient
	CompartmentTypePatient = Code{Value: ptr.To("Patient")}
	// CompartmentType Practitioner
	CompartmentTypePractitioner = Code{Value: ptr.To("Practitioner")}
	// CompartmentType RelatedPerson
	CompartmentTypeRelatedPerson = Code{Value: ptr.To("RelatedPerson")}
)

var (
	// CompositionStatus Amended
	CompositionStatusAmended = Code{Value: ptr.To("amended")}
	// CompositionStatus Cancelled
	CompositionStatusCancelled = Code{Value: ptr.To("cancelled")}
	// CompositionStatus Deprecated
	CompositionStatusDeprecated = Code{Value: ptr.To("deprecated")}
	// CompositionStatus Entered in Error
	CompositionStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// CompositionStatus Final
	CompositionStatusFinal = Code{Value: ptr.To("final")}
	// CompositionStatus Partial
	CompositionStatusPartial = Code{Value: ptr.To("partial")}
	// CompositionStatus Registered
	CompositionStatusRegistered = Code{Value: ptr.To("registered")}
	// CompositionStatus Unknown
	CompositionStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ConceptMapAttributeType boolean
	ConceptMapAttributeTypeBoolean = Code{Value: ptr.To("boolean")}
	// ConceptMapAttributeType code
	ConceptMapAttributeTypeCode = Code{Value: ptr.To("code")}
	// ConceptMapAttributeType Coding
	ConceptMapAttributeTypeCoding = Code{Value: ptr.To("Coding")}
	// ConceptMapAttributeType Quantity
	ConceptMapAttributeTypeQuantity = Code{Value: ptr.To("Quantity")}
	// ConceptMapAttributeType string
	ConceptMapAttributeTypeString = Code{Value: ptr.To("string")}
)

var (
	// ConceptMapGroupUnmappedMode Fixed Code
	ConceptMapGroupUnmappedModeFixed = Code{Value: ptr.To("fixed")}
	// ConceptMapGroupUnmappedMode Other Map
	ConceptMapGroupUnmappedModeOtherMap = Code{Value: ptr.To("other-map")}
	// ConceptMapGroupUnmappedMode Use Provided Source Code
	ConceptMapGroupUnmappedModeUseSourceCode = Code{Value: ptr.To("use-source-code")}
)

var (
	// ConceptMapPropertyType boolean
	ConceptMapPropertyTypeBoolean = Code{Value: ptr.To("boolean")}
	// ConceptMapPropertyType code
	ConceptMapPropertyTypeCode = Code{Value: ptr.To("code")}
	// ConceptMapPropertyType Coding (external reference)
	ConceptMapPropertyTypeCoding = Code{Value: ptr.To("Coding")}
	// ConceptMapPropertyType dateTime
	ConceptMapPropertyTypeDateTime = Code{Value: ptr.To("dateTime")}
	// ConceptMapPropertyType decimal
	ConceptMapPropertyTypeDecimal = Code{Value: ptr.To("decimal")}
	// ConceptMapPropertyType integer
	ConceptMapPropertyTypeInteger = Code{Value: ptr.To("integer")}
	// ConceptMapPropertyType string
	ConceptMapPropertyTypeString = Code{Value: ptr.To("string")}
)

var (
	// ConceptMapRelationship Not Related To
	ConceptMapRelationshipNotRelatedTo = Code{Value: ptr.To("not-related-to")}
	// ConceptMapRelationship Related To
	ConceptMapRelationshipRelatedTo = Code{Value: ptr.To("related-to")}
)

var (
	// ConditionPreconditionType Sensitive
	ConditionPreconditionTypeSensitive = Code{Value: ptr.To("sensitive")}
	// ConditionPreconditionType Specific
	ConditionPreconditionTypeSpecific = Code{Value: ptr.To("specific")}
)

var (
	// ConditionQuestionnairePurpose Diff Diagnosis
	ConditionQuestionnairePurposeDiffDiagnosis = Code{Value: ptr.To("diff-diagnosis")}
	// ConditionQuestionnairePurpose Outcome
	ConditionQuestionnairePurposeOutcome = Code{Value: ptr.To("outcome")}
	// ConditionQuestionnairePurpose Pre-admit
	ConditionQuestionnairePurposePreadmit = Code{Value: ptr.To("preadmit")}
)

var (
	// ConditionalDeleteStatus Multiple Deletes Supported
	ConditionalDeleteStatusMultiple = Code{Value: ptr.To("multiple")}
	// ConditionalDeleteStatus Not Supported
	ConditionalDeleteStatusNotSupported = Code{Value: ptr.To("not-supported")}
	// ConditionalDeleteStatus Single Deletes Supported
	ConditionalDeleteStatusSingle = Code{Value: ptr.To("single")}
)

var (
	// ConditionalReadStatus Full Support
	ConditionalReadStatusFullSupport = Code{Value: ptr.To("full-support")}
	// ConditionalReadStatus If-Modified-Since
	ConditionalReadStatusModifiedSince = Code{Value: ptr.To("modified-since")}
	// ConditionalReadStatus If-None-Match
	ConditionalReadStatusNotMatch = Code{Value: ptr.To("not-match")}
	// ConditionalReadStatus Not Supported
	ConditionalReadStatusNotSupported = Code{Value: ptr.To("not-supported")}
)

var (
	// ConformanceExpectation MAY
	ConformanceExpectationMay = Code{Value: ptr.To("MAY")}
	// ConformanceExpectation SHALL
	ConformanceExpectationShall = Code{Value: ptr.To("SHALL")}
	// ConformanceExpectation SHOULD
	ConformanceExpectationShould = Code{Value: ptr.To("SHOULD")}
	// ConformanceExpectation SHOULD-NOT
	ConformanceExpectationShouldNot = Code{Value: ptr.To("SHOULD-NOT")}
)

var (
	// ConsentDataMeaning AuthoredBy
	ConsentDataMeaningAuthoredby = Code{Value: ptr.To("authoredby")}
	// ConsentDataMeaning Dependents
	ConsentDataMeaningDependents = Code{Value: ptr.To("dependents")}
	// ConsentDataMeaning Instance
	ConsentDataMeaningInstance = Code{Value: ptr.To("instance")}
	// ConsentDataMeaning Related
	ConsentDataMeaningRelated = Code{Value: ptr.To("related")}
)

var (
	// ConsentProvisionType Deny
	ConsentProvisionTypeDeny = Code{Value: ptr.To("deny")}
	// ConsentProvisionType Permit
	ConsentProvisionTypePermit = Code{Value: ptr.To("permit")}
)

var (
	// ConsentState Active
	ConsentStateActive = Code{Value: ptr.To("active")}
	// ConsentState Pending
	ConsentStateDraft = Code{Value: ptr.To("draft")}
	// ConsentState Entered in Error
	ConsentStateEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ConsentState Inactive
	ConsentStateInactive = Code{Value: ptr.To("inactive")}
	// ConsentState Abandoned
	ConsentStateNotDone = Code{Value: ptr.To("not-done")}
	// ConsentState Unknown
	ConsentStateUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ConstraintSeverity Error
	ConstraintSeverityError = Code{Value: ptr.To("error")}
	// ConstraintSeverity Warning
	ConstraintSeverityWarning = Code{Value: ptr.To("warning")}
)

var (
	// ContactPointSystem Email
	ContactPointSystemEmail = Code{Value: ptr.To("email")}
	// ContactPointSystem Fax
	ContactPointSystemFax = Code{Value: ptr.To("fax")}
	// ContactPointSystem Other
	ContactPointSystemOther = Code{Value: ptr.To("other")}
	// ContactPointSystem Pager
	ContactPointSystemPager = Code{Value: ptr.To("pager")}
	// ContactPointSystem Phone
	ContactPointSystemPhone = Code{Value: ptr.To("phone")}
	// ContactPointSystem SMS
	ContactPointSystemSms = Code{Value: ptr.To("sms")}
	// ContactPointSystem URL
	ContactPointSystemUrl = Code{Value: ptr.To("url")}
)

var (
	// ContactPointUse Home
	ContactPointUseHome = Code{Value: ptr.To("home")}
	// ContactPointUse Mobile
	ContactPointUseMobile = Code{Value: ptr.To("mobile")}
	// ContactPointUse Old
	ContactPointUseOld = Code{Value: ptr.To("old")}
	// ContactPointUse Temp
	ContactPointUseTemp = Code{Value: ptr.To("temp")}
	// ContactPointUse Work
	ContactPointUseWork = Code{Value: ptr.To("work")}
)

var (
	// ContractResourcePublicationStatusCodes Amended
	ContractResourcePublicationStatusCodesAmended = Code{Value: ptr.To("amended")}
	// ContractResourcePublicationStatusCodes Appended
	ContractResourcePublicationStatusCodesAppended = Code{Value: ptr.To("appended")}
	// ContractResourcePublicationStatusCodes Cancelled
	ContractResourcePublicationStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// ContractResourcePublicationStatusCodes Disputed
	ContractResourcePublicationStatusCodesDisputed = Code{Value: ptr.To("disputed")}
	// ContractResourcePublicationStatusCodes Entered in Error
	ContractResourcePublicationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ContractResourcePublicationStatusCodes Executable
	ContractResourcePublicationStatusCodesExecutable = Code{Value: ptr.To("executable")}
	// ContractResourcePublicationStatusCodes Executed
	ContractResourcePublicationStatusCodesExecuted = Code{Value: ptr.To("executed")}
	// ContractResourcePublicationStatusCodes Negotiable
	ContractResourcePublicationStatusCodesNegotiable = Code{Value: ptr.To("negotiable")}
	// ContractResourcePublicationStatusCodes Offered
	ContractResourcePublicationStatusCodesOffered = Code{Value: ptr.To("offered")}
	// ContractResourcePublicationStatusCodes Policy
	ContractResourcePublicationStatusCodesPolicy = Code{Value: ptr.To("policy")}
	// ContractResourcePublicationStatusCodes Rejected
	ContractResourcePublicationStatusCodesRejected = Code{Value: ptr.To("rejected")}
	// ContractResourcePublicationStatusCodes Renewed
	ContractResourcePublicationStatusCodesRenewed = Code{Value: ptr.To("renewed")}
	// ContractResourcePublicationStatusCodes Resolved
	ContractResourcePublicationStatusCodesResolved = Code{Value: ptr.To("resolved")}
	// ContractResourcePublicationStatusCodes Revoked
	ContractResourcePublicationStatusCodesRevoked = Code{Value: ptr.To("revoked")}
	// ContractResourcePublicationStatusCodes Terminated
	ContractResourcePublicationStatusCodesTerminated = Code{Value: ptr.To("terminated")}
)

var (
	// ContractResourceStatusCodes Amended
	ContractResourceStatusCodesAmended = Code{Value: ptr.To("amended")}
	// ContractResourceStatusCodes Appended
	ContractResourceStatusCodesAppended = Code{Value: ptr.To("appended")}
	// ContractResourceStatusCodes Cancelled
	ContractResourceStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// ContractResourceStatusCodes Disputed
	ContractResourceStatusCodesDisputed = Code{Value: ptr.To("disputed")}
	// ContractResourceStatusCodes Entered in Error
	ContractResourceStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ContractResourceStatusCodes Executable
	ContractResourceStatusCodesExecutable = Code{Value: ptr.To("executable")}
	// ContractResourceStatusCodes Executed
	ContractResourceStatusCodesExecuted = Code{Value: ptr.To("executed")}
	// ContractResourceStatusCodes Negotiable
	ContractResourceStatusCodesNegotiable = Code{Value: ptr.To("negotiable")}
	// ContractResourceStatusCodes Offered
	ContractResourceStatusCodesOffered = Code{Value: ptr.To("offered")}
	// ContractResourceStatusCodes Policy
	ContractResourceStatusCodesPolicy = Code{Value: ptr.To("policy")}
	// ContractResourceStatusCodes Rejected
	ContractResourceStatusCodesRejected = Code{Value: ptr.To("rejected")}
	// ContractResourceStatusCodes Renewed
	ContractResourceStatusCodesRenewed = Code{Value: ptr.To("renewed")}
	// ContractResourceStatusCodes Resolved
	ContractResourceStatusCodesResolved = Code{Value: ptr.To("resolved")}
	// ContractResourceStatusCodes Revoked
	ContractResourceStatusCodesRevoked = Code{Value: ptr.To("revoked")}
	// ContractResourceStatusCodes Terminated
	ContractResourceStatusCodesTerminated = Code{Value: ptr.To("terminated")}
)

var (
	// ContributorType Author
	ContributorTypeAuthor = Code{Value: ptr.To("author")}
	// ContributorType Editor
	ContributorTypeEditor = Code{Value: ptr.To("editor")}
	// ContributorType Endorser
	ContributorTypeEndorser = Code{Value: ptr.To("endorser")}
	// ContributorType Reviewer
	ContributorTypeReviewer = Code{Value: ptr.To("reviewer")}
)

var (
	// CriteriaNotExistsBehavior Test fails
	CriteriaNotExistsBehaviorTestFails = Code{Value: ptr.To("test-fails")}
	// CriteriaNotExistsBehavior Test passes
	CriteriaNotExistsBehaviorTestPasses = Code{Value: ptr.To("test-passes")}
)

var (
	// DaysOfWeek Friday
	DaysOfWeekFri = Code{Value: ptr.To("fri")}
	// DaysOfWeek Monday
	DaysOfWeekMon = Code{Value: ptr.To("mon")}
	// DaysOfWeek Saturday
	DaysOfWeekSat = Code{Value: ptr.To("sat")}
	// DaysOfWeek Sunday
	DaysOfWeekSun = Code{Value: ptr.To("sun")}
	// DaysOfWeek Thursday
	DaysOfWeekThu = Code{Value: ptr.To("thu")}
	// DaysOfWeek Tuesday
	DaysOfWeekTue = Code{Value: ptr.To("tue")}
	// DaysOfWeek Wednesday
	DaysOfWeekWed = Code{Value: ptr.To("wed")}
)

var (
	// DetectedIssueSeverity High
	DetectedIssueSeverityHigh = Code{Value: ptr.To("high")}
	// DetectedIssueSeverity Low
	DetectedIssueSeverityLow = Code{Value: ptr.To("low")}
	// DetectedIssueSeverity Moderate
	DetectedIssueSeverityModerate = Code{Value: ptr.To("moderate")}
)

var (
	// DetectedIssueStatus Amended
	DetectedIssueStatusAmended = Code{Value: ptr.To("amended")}
	// DetectedIssueStatus Cancelled
	DetectedIssueStatusCancelled = Code{Value: ptr.To("cancelled")}
	// DetectedIssueStatus Entered in Error
	DetectedIssueStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DetectedIssueStatus Final
	DetectedIssueStatusFinal = Code{Value: ptr.To("final")}
	// DetectedIssueStatus Preliminary
	DetectedIssueStatusPreliminary = Code{Value: ptr.To("preliminary")}
	// DetectedIssueStatus Registered
	DetectedIssueStatusRegistered = Code{Value: ptr.To("registered")}
	// DetectedIssueStatus Unknown
	DetectedIssueStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// DeviceAssociationCodes Attached
	DeviceAssociationCodesAttached = Code{Value: ptr.To("attached")}
	// DeviceAssociationCodes Disconnected
	DeviceAssociationCodesDisconnected = Code{Value: ptr.To("disconnected")}
	// DeviceAssociationCodes Failed
	DeviceAssociationCodesFailed = Code{Value: ptr.To("failed")}
	// DeviceAssociationCodes placed
	DeviceAssociationCodesPlaced = Code{Value: ptr.To("placed")}
	// DeviceAssociationCodes Replaced
	DeviceAssociationCodesReplaced = Code{Value: ptr.To("replaced")}
)

var (
	// DeviceCorrectiveActionScope Lot Numbers
	DeviceCorrectiveActionScopeLotNumbers = Code{Value: ptr.To("lot-numbers")}
	// DeviceCorrectiveActionScope Model
	DeviceCorrectiveActionScopeModel = Code{Value: ptr.To("model")}
	// DeviceCorrectiveActionScope Serial Numbers
	DeviceCorrectiveActionScopeSerialNumbers = Code{Value: ptr.To("serial-numbers")}
)

var (
	// DeviceDefinitionRegulatoryIdentifierType Basic
	DeviceDefinitionRegulatoryIdentifierTypeBasic = Code{Value: ptr.To("basic")}
	// DeviceDefinitionRegulatoryIdentifierType License
	DeviceDefinitionRegulatoryIdentifierTypeLicense = Code{Value: ptr.To("license")}
	// DeviceDefinitionRegulatoryIdentifierType Master
	DeviceDefinitionRegulatoryIdentifierTypeMaster = Code{Value: ptr.To("master")}
)

var (
	// DeviceDispenseStatusCodes Cancelled
	DeviceDispenseStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// DeviceDispenseStatusCodes Completed
	DeviceDispenseStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// DeviceDispenseStatusCodes Declined
	DeviceDispenseStatusCodesDeclined = Code{Value: ptr.To("declined")}
	// DeviceDispenseStatusCodes Entered in Error
	DeviceDispenseStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DeviceDispenseStatusCodes In Progress
	DeviceDispenseStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// DeviceDispenseStatusCodes On Hold
	DeviceDispenseStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// DeviceDispenseStatusCodes Preparation
	DeviceDispenseStatusCodesPreparation = Code{Value: ptr.To("preparation")}
	// DeviceDispenseStatusCodes Stopped
	DeviceDispenseStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// DeviceDispenseStatusCodes Unknown
	DeviceDispenseStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// DeviceMetricCalibrationState Calibrated
	DeviceMetricCalibrationStateCalibrated = Code{Value: ptr.To("calibrated")}
	// DeviceMetricCalibrationState Calibration Required
	DeviceMetricCalibrationStateCalibrationRequired = Code{Value: ptr.To("calibration-required")}
	// DeviceMetricCalibrationState Not Calibrated
	DeviceMetricCalibrationStateNotCalibrated = Code{Value: ptr.To("not-calibrated")}
	// DeviceMetricCalibrationState Unspecified
	DeviceMetricCalibrationStateUnspecified = Code{Value: ptr.To("unspecified")}
)

var (
	// DeviceMetricCalibrationType Gain
	DeviceMetricCalibrationTypeGain = Code{Value: ptr.To("gain")}
	// DeviceMetricCalibrationType Offset
	DeviceMetricCalibrationTypeOffset = Code{Value: ptr.To("offset")}
	// DeviceMetricCalibrationType Two Point
	DeviceMetricCalibrationTypeTwoPoint = Code{Value: ptr.To("two-point")}
	// DeviceMetricCalibrationType Unspecified
	DeviceMetricCalibrationTypeUnspecified = Code{Value: ptr.To("unspecified")}
)

var (
	// DeviceMetricCategory Calculation
	DeviceMetricCategoryCalculation = Code{Value: ptr.To("calculation")}
	// DeviceMetricCategory Measurement
	DeviceMetricCategoryMeasurement = Code{Value: ptr.To("measurement")}
	// DeviceMetricCategory Setting
	DeviceMetricCategorySetting = Code{Value: ptr.To("setting")}
	// DeviceMetricCategory Unspecified
	DeviceMetricCategoryUnspecified = Code{Value: ptr.To("unspecified")}
)

var (
	// DeviceMetricOperationalStatus Entered In Error
	DeviceMetricOperationalStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DeviceMetricOperationalStatus Off
	DeviceMetricOperationalStatusOff = Code{Value: ptr.To("off")}
	// DeviceMetricOperationalStatus On
	DeviceMetricOperationalStatusOn = Code{Value: ptr.To("on")}
	// DeviceMetricOperationalStatus Standby
	DeviceMetricOperationalStatusStandby = Code{Value: ptr.To("standby")}
)

var (
	// DeviceNameType Patient Reported name
	DeviceNameTypePatientReportedName = Code{Value: ptr.To("patient-reported-name")}
	// DeviceNameType Registered name
	DeviceNameTypeRegisteredName = Code{Value: ptr.To("registered-name")}
	// DeviceNameType User Friendly name
	DeviceNameTypeUserFriendlyName = Code{Value: ptr.To("user-friendly-name")}
)

var (
	// DeviceProductionIdentifierInUDI Biological source
	DeviceProductionIdentifierInUdiBiologicalSource = Code{Value: ptr.To("biological-source")}
	// DeviceProductionIdentifierInUDI Expiration date
	DeviceProductionIdentifierInUdiExpirationDate = Code{Value: ptr.To("expiration-date")}
	// DeviceProductionIdentifierInUDI Lot Number
	DeviceProductionIdentifierInUdiLotNumber = Code{Value: ptr.To("lot-number")}
	// DeviceProductionIdentifierInUDI Manufactured date
	DeviceProductionIdentifierInUdiManufacturedDate = Code{Value: ptr.To("manufactured-date")}
	// DeviceProductionIdentifierInUDI Serial Number
	DeviceProductionIdentifierInUdiSerialNumber = Code{Value: ptr.To("serial-number")}
	// DeviceProductionIdentifierInUDI Software Version
	DeviceProductionIdentifierInUdiSoftwareVersion = Code{Value: ptr.To("software-version")}
)

var (
	// DeviceUsageStatus Active
	DeviceUsageStatusActive = Code{Value: ptr.To("active")}
	// DeviceUsageStatus Completed
	DeviceUsageStatusCompleted = Code{Value: ptr.To("completed")}
	// DeviceUsageStatus Entered in Error
	DeviceUsageStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DeviceUsageStatus Intended
	DeviceUsageStatusIntended = Code{Value: ptr.To("intended")}
	// DeviceUsageStatus Not done
	DeviceUsageStatusNotDone = Code{Value: ptr.To("not-done")}
	// DeviceUsageStatus On Hold
	DeviceUsageStatusOnHold = Code{Value: ptr.To("on-hold")}
	// DeviceUsageStatus Stopped
	DeviceUsageStatusStopped = Code{Value: ptr.To("stopped")}
)

var (
	// DiagnosticReportStatus Amended
	DiagnosticReportStatusAmended = Code{Value: ptr.To("amended")}
	// DiagnosticReportStatus Cancelled
	DiagnosticReportStatusCancelled = Code{Value: ptr.To("cancelled")}
	// DiagnosticReportStatus Entered in Error
	DiagnosticReportStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DiagnosticReportStatus Final
	DiagnosticReportStatusFinal = Code{Value: ptr.To("final")}
	// DiagnosticReportStatus Partial
	DiagnosticReportStatusPartial = Code{Value: ptr.To("partial")}
	// DiagnosticReportStatus Registered
	DiagnosticReportStatusRegistered = Code{Value: ptr.To("registered")}
	// DiagnosticReportStatus Unknown
	DiagnosticReportStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// DiscriminatorType Exists
	DiscriminatorTypeExists = Code{Value: ptr.To("exists")}
	// DiscriminatorType Pattern
	DiscriminatorTypePattern = Code{Value: ptr.To("pattern")}
	// DiscriminatorType Position
	DiscriminatorTypePosition = Code{Value: ptr.To("position")}
	// DiscriminatorType Profile
	DiscriminatorTypeProfile = Code{Value: ptr.To("profile")}
	// DiscriminatorType Type
	DiscriminatorTypeType = Code{Value: ptr.To("type")}
	// DiscriminatorType Value
	DiscriminatorTypeValue = Code{Value: ptr.To("value")}
)

var (
	// DocumentMode Consumer
	DocumentModeConsumer = Code{Value: ptr.To("consumer")}
	// DocumentMode Producer
	DocumentModeProducer = Code{Value: ptr.To("producer")}
)

var (
	// DocumentReferenceStatus Current
	DocumentReferenceStatusCurrent = Code{Value: ptr.To("current")}
	// DocumentReferenceStatus Entered in Error
	DocumentReferenceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DocumentReferenceStatus Superseded
	DocumentReferenceStatusSuperseded = Code{Value: ptr.To("superseded")}
)

var (
	// EligibilityOutcome Processing Complete
	EligibilityOutcomeComplete = Code{Value: ptr.To("complete")}
	// EligibilityOutcome Error
	EligibilityOutcomeError = Code{Value: ptr.To("error")}
	// EligibilityOutcome Partial Processing
	EligibilityOutcomePartial = Code{Value: ptr.To("partial")}
	// EligibilityOutcome Queued
	EligibilityOutcomeQueued = Code{Value: ptr.To("queued")}
)

var (
	// EligibilityRequestPurpose Coverage auth-requirements
	EligibilityRequestPurposeAuthRequirements = Code{Value: ptr.To("auth-requirements")}
	// EligibilityRequestPurpose Coverage benefits
	EligibilityRequestPurposeBenefits = Code{Value: ptr.To("benefits")}
	// EligibilityRequestPurpose Coverage Discovery
	EligibilityRequestPurposeDiscovery = Code{Value: ptr.To("discovery")}
	// EligibilityRequestPurpose Coverage Validation
	EligibilityRequestPurposeValidation = Code{Value: ptr.To("validation")}
)

var (
	// EligibilityResponsePurpose Coverage auth-requirements
	EligibilityResponsePurposeAuthRequirements = Code{Value: ptr.To("auth-requirements")}
	// EligibilityResponsePurpose Coverage benefits
	EligibilityResponsePurposeBenefits = Code{Value: ptr.To("benefits")}
	// EligibilityResponsePurpose Coverage Discovery
	EligibilityResponsePurposeDiscovery = Code{Value: ptr.To("discovery")}
	// EligibilityResponsePurpose Coverage Validation
	EligibilityResponsePurposeValidation = Code{Value: ptr.To("validation")}
)

var (
	// EnableWhenBehavior All
	EnableWhenBehaviorAll = Code{Value: ptr.To("all")}
	// EnableWhenBehavior Any
	EnableWhenBehaviorAny = Code{Value: ptr.To("any")}
)

var (
	// EncounterLocationStatus Active
	EncounterLocationStatusActive = Code{Value: ptr.To("active")}
	// EncounterLocationStatus Completed
	EncounterLocationStatusCompleted = Code{Value: ptr.To("completed")}
	// EncounterLocationStatus Planned
	EncounterLocationStatusPlanned = Code{Value: ptr.To("planned")}
	// EncounterLocationStatus Reserved
	EncounterLocationStatusReserved = Code{Value: ptr.To("reserved")}
)

var (
	// EncounterStatus Cancelled
	EncounterStatusCancelled = Code{Value: ptr.To("cancelled")}
	// EncounterStatus Completed
	EncounterStatusCompleted = Code{Value: ptr.To("completed")}
	// EncounterStatus Discharged
	EncounterStatusDischarged = Code{Value: ptr.To("discharged")}
	// EncounterStatus Discontinued
	EncounterStatusDiscontinued = Code{Value: ptr.To("discontinued")}
	// EncounterStatus Entered in Error
	EncounterStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EncounterStatus In Progress
	EncounterStatusInProgress = Code{Value: ptr.To("in-progress")}
	// EncounterStatus On Hold
	EncounterStatusOnHold = Code{Value: ptr.To("on-hold")}
	// EncounterStatus Planned
	EncounterStatusPlanned = Code{Value: ptr.To("planned")}
	// EncounterStatus Unknown
	EncounterStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// EndpointStatus Active
	EndpointStatusActive = Code{Value: ptr.To("active")}
	// EndpointStatus Entered in error
	EndpointStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EndpointStatus Error
	EndpointStatusError = Code{Value: ptr.To("error")}
	// EndpointStatus Off
	EndpointStatusOff = Code{Value: ptr.To("off")}
	// EndpointStatus Suspended
	EndpointStatusSuspended = Code{Value: ptr.To("suspended")}
)

var (
	// EnrollmentOutcome Processing Complete
	EnrollmentOutcomeComplete = Code{Value: ptr.To("complete")}
	// EnrollmentOutcome Error
	EnrollmentOutcomeError = Code{Value: ptr.To("error")}
	// EnrollmentOutcome Partial Processing
	EnrollmentOutcomePartial = Code{Value: ptr.To("partial")}
	// EnrollmentOutcome Queued
	EnrollmentOutcomeQueued = Code{Value: ptr.To("queued")}
)

var (
	// EpisodeOfCareStatus Active
	EpisodeOfCareStatusActive = Code{Value: ptr.To("active")}
	// EpisodeOfCareStatus Cancelled
	EpisodeOfCareStatusCancelled = Code{Value: ptr.To("cancelled")}
	// EpisodeOfCareStatus Entered in Error
	EpisodeOfCareStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EpisodeOfCareStatus Finished
	EpisodeOfCareStatusFinished = Code{Value: ptr.To("finished")}
	// EpisodeOfCareStatus On Hold
	EpisodeOfCareStatusOnhold = Code{Value: ptr.To("onhold")}
	// EpisodeOfCareStatus Planned
	EpisodeOfCareStatusPlanned = Code{Value: ptr.To("planned")}
	// EpisodeOfCareStatus Waitlist
	EpisodeOfCareStatusWaitlist = Code{Value: ptr.To("waitlist")}
)

var (
	// EventCapabilityMode Receiver
	EventCapabilityModeReceiver = Code{Value: ptr.To("receiver")}
	// EventCapabilityMode Sender
	EventCapabilityModeSender = Code{Value: ptr.To("sender")}
)

var (
	// EventStatus Completed
	EventStatusCompleted = Code{Value: ptr.To("completed")}
	// EventStatus Entered in Error
	EventStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EventStatus In Progress
	EventStatusInProgress = Code{Value: ptr.To("in-progress")}
	// EventStatus Not Done
	EventStatusNotDone = Code{Value: ptr.To("not-done")}
	// EventStatus On Hold
	EventStatusOnHold = Code{Value: ptr.To("on-hold")}
	// EventStatus Preparation
	EventStatusPreparation = Code{Value: ptr.To("preparation")}
	// EventStatus Stopped
	EventStatusStopped = Code{Value: ptr.To("stopped")}
	// EventStatus Unknown
	EventStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// EventTiming Afternoon
	EventTimingAft = Code{Value: ptr.To("AFT")}
	// EventTiming Early Afternoon
	EventTimingAftEarly = Code{Value: ptr.To("AFT.early")}
	// EventTiming Late Afternoon
	EventTimingAftLate = Code{Value: ptr.To("AFT.late")}
	// EventTiming Evening
	EventTimingEve = Code{Value: ptr.To("EVE")}
	// EventTiming Early Evening
	EventTimingEveEarly = Code{Value: ptr.To("EVE.early")}
	// EventTiming Late Evening
	EventTimingEveLate = Code{Value: ptr.To("EVE.late")}
	// EventTiming Immediate
	EventTimingImd = Code{Value: ptr.To("IMD")}
	// EventTiming Morning
	EventTimingMorn = Code{Value: ptr.To("MORN")}
	// EventTiming Early Morning
	EventTimingMornEarly = Code{Value: ptr.To("MORN.early")}
	// EventTiming Late Morning
	EventTimingMornLate = Code{Value: ptr.To("MORN.late")}
	// EventTiming Night
	EventTimingNight = Code{Value: ptr.To("NIGHT")}
	// EventTiming Noon
	EventTimingNoon = Code{Value: ptr.To("NOON")}
	// EventTiming After Sleep
	EventTimingPhs = Code{Value: ptr.To("PHS")}
)

var (
	// EvidenceVariableHandling continuous variable
	EvidenceVariableHandlingContinuous = Code{Value: ptr.To("continuous")}
	// EvidenceVariableHandling dichotomous variable
	EvidenceVariableHandlingDichotomous = Code{Value: ptr.To("dichotomous")}
	// EvidenceVariableHandling ordinal variable
	EvidenceVariableHandlingOrdinal = Code{Value: ptr.To("ordinal")}
	// EvidenceVariableHandling polychotomous variable
	EvidenceVariableHandlingPolychotomous = Code{Value: ptr.To("polychotomous")}
)

var (
	// ExampleScenarioActorType Person
	ExampleScenarioActorTypePerson = Code{Value: ptr.To("person")}
	// ExampleScenarioActorType System
	ExampleScenarioActorTypeSystem = Code{Value: ptr.To("system")}
)

var (
	// ExplanationOfBenefitStatus Active
	ExplanationOfBenefitStatusActive = Code{Value: ptr.To("active")}
	// ExplanationOfBenefitStatus Cancelled
	ExplanationOfBenefitStatusCancelled = Code{Value: ptr.To("cancelled")}
	// ExplanationOfBenefitStatus Draft
	ExplanationOfBenefitStatusDraft = Code{Value: ptr.To("draft")}
	// ExplanationOfBenefitStatus Entered In Error
	ExplanationOfBenefitStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
)

var (
	// ExtensionContextType Element ID
	ExtensionContextTypeElement = Code{Value: ptr.To("element")}
	// ExtensionContextType Extension URL
	ExtensionContextTypeExtension = Code{Value: ptr.To("extension")}
	// ExtensionContextType FHIRPath
	ExtensionContextTypeFhirpath = Code{Value: ptr.To("fhirpath")}
)

var (
	// FHIRDeviceStatus Active
	FhirdeviceStatusActive = Code{Value: ptr.To("active")}
	// FHIRDeviceStatus Entered in Error
	FhirdeviceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FHIRDeviceStatus Inactive
	FhirdeviceStatusInactive = Code{Value: ptr.To("inactive")}
)

var (
	// FHIRSubstanceStatus Active
	FhirsubstanceStatusActive = Code{Value: ptr.To("active")}
	// FHIRSubstanceStatus Entered in Error
	FhirsubstanceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FHIRSubstanceStatus Inactive
	FhirsubstanceStatusInactive = Code{Value: ptr.To("inactive")}
)

var (
	// FHIRTypes Base
	FhirtypesBase = Code{Value: ptr.To("Base")}
)

var (
	// FHIRVersion 0.0
	Fhirversion00 = Code{Value: ptr.To("0.0")}
	// FHIRVersion 0.01
	Fhirversion001 = Code{Value: ptr.To("0.01")}
	// FHIRVersion 0.05
	Fhirversion005 = Code{Value: ptr.To("0.05")}
	// FHIRVersion 0.06
	Fhirversion006 = Code{Value: ptr.To("0.06")}
	// FHIRVersion 0.11
	Fhirversion011 = Code{Value: ptr.To("0.11")}
	// FHIRVersion 0.4
	Fhirversion04 = Code{Value: ptr.To("0.4")}
	// FHIRVersion 0.5
	Fhirversion05 = Code{Value: ptr.To("0.5")}
	// FHIRVersion 1.0
	Fhirversion10 = Code{Value: ptr.To("1.0")}
	// FHIRVersion 1.1
	Fhirversion11 = Code{Value: ptr.To("1.1")}
	// FHIRVersion 1.4
	Fhirversion14 = Code{Value: ptr.To("1.4")}
	// FHIRVersion 1.6
	Fhirversion16 = Code{Value: ptr.To("1.6")}
	// FHIRVersion 1.8
	Fhirversion18 = Code{Value: ptr.To("1.8")}
	// FHIRVersion 3.0
	Fhirversion30 = Code{Value: ptr.To("3.0")}
	// FHIRVersion 3.3
	Fhirversion33 = Code{Value: ptr.To("3.3")}
	// FHIRVersion 3.5
	Fhirversion35 = Code{Value: ptr.To("3.5")}
	// FHIRVersion 4.0
	Fhirversion40 = Code{Value: ptr.To("4.0")}
	// FHIRVersion 4.1
	Fhirversion41 = Code{Value: ptr.To("4.1")}
	// FHIRVersion 4.2
	Fhirversion42 = Code{Value: ptr.To("4.2")}
	// FHIRVersion 4.3
	Fhirversion43 = Code{Value: ptr.To("4.3")}
	// FHIRVersion 4.4
	Fhirversion44 = Code{Value: ptr.To("4.4")}
	// FHIRVersion 4.5
	Fhirversion45 = Code{Value: ptr.To("4.5")}
	// FHIRVersion 4.6
	Fhirversion46 = Code{Value: ptr.To("4.6")}
	// FHIRVersion 5.0
	Fhirversion50 = Code{Value: ptr.To("5.0")}
)

var (
	// FamilyHistoryStatus Completed
	FamilyHistoryStatusCompleted = Code{Value: ptr.To("completed")}
	// FamilyHistoryStatus Entered in Error
	FamilyHistoryStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FamilyHistoryStatus Health Unknown
	FamilyHistoryStatusHealthUnknown = Code{Value: ptr.To("health-unknown")}
	// FamilyHistoryStatus Partial
	FamilyHistoryStatusPartial = Code{Value: ptr.To("partial")}
)

var (
	// FilterOperator Child Of
	FilterOperatorChildOf = Code{Value: ptr.To("child-of")}
	// FilterOperator Descendent Leaf
	FilterOperatorDescendentLeaf = Code{Value: ptr.To("descendent-leaf")}
	// FilterOperator Descendent Of (by subsumption)
	FilterOperatorDescendentOf = Code{Value: ptr.To("descendent-of")}
	// FilterOperator Equals
	FilterOperatorEqualTo = Code{Value: ptr.To("=")}
	// FilterOperator Exists
	FilterOperatorExists = Code{Value: ptr.To("exists")}
	// FilterOperator Generalizes (by Subsumption)
	FilterOperatorGeneralizes = Code{Value: ptr.To("generalizes")}
	// FilterOperator In Set
	FilterOperatorIn = Code{Value: ptr.To("in")}
	// FilterOperator Is A (by subsumption)
	FilterOperatorIsA = Code{Value: ptr.To("is-a")}
	// FilterOperator Not (Is A) (by subsumption)
	FilterOperatorIsNotA = Code{Value: ptr.To("is-not-a")}
	// FilterOperator Not in Set
	FilterOperatorNotIn = Code{Value: ptr.To("not-in")}
	// FilterOperator Regular Expression
	FilterOperatorRegex = Code{Value: ptr.To("regex")}
)

var (
	// FinancialResourceStatusCodes Active
	FinancialResourceStatusCodesActive = Code{Value: ptr.To("active")}
	// FinancialResourceStatusCodes Cancelled
	FinancialResourceStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// FinancialResourceStatusCodes Draft
	FinancialResourceStatusCodesDraft = Code{Value: ptr.To("draft")}
	// FinancialResourceStatusCodes Entered in Error
	FinancialResourceStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
)

var (
	// FlagStatus Active
	FlagStatusActive = Code{Value: ptr.To("active")}
	// FlagStatus Entered in Error
	FlagStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FlagStatus Inactive
	FlagStatusInactive = Code{Value: ptr.To("inactive")}
)

var (
	// FormularyItemStatusCodes Active
	FormularyItemStatusCodesActive = Code{Value: ptr.To("active")}
	// FormularyItemStatusCodes Entered in Error
	FormularyItemStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FormularyItemStatusCodes Inactive
	FormularyItemStatusCodesInactive = Code{Value: ptr.To("inactive")}
)

var (
	// GenomicStudyStatus Available
	GenomicStudyStatusAvailable = Code{Value: ptr.To("available")}
	// GenomicStudyStatus Cancelled
	GenomicStudyStatusCancelled = Code{Value: ptr.To("cancelled")}
	// GenomicStudyStatus Entered in Error
	GenomicStudyStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// GenomicStudyStatus Registered
	GenomicStudyStatusRegistered = Code{Value: ptr.To("registered")}
	// GenomicStudyStatus Unknown
	GenomicStudyStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// GoalLifecycleStatus Accepted
	GoalLifecycleStatusAccepted = Code{Value: ptr.To("accepted")}
	// GoalLifecycleStatus Cancelled
	GoalLifecycleStatusCancelled = Code{Value: ptr.To("cancelled")}
	// GoalLifecycleStatus Entered in Error
	GoalLifecycleStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// GoalLifecycleStatus Planned
	GoalLifecycleStatusPlanned = Code{Value: ptr.To("planned")}
	// GoalLifecycleStatus Proposed
	GoalLifecycleStatusProposed = Code{Value: ptr.To("proposed")}
	// GoalLifecycleStatus Rejected
	GoalLifecycleStatusRejected = Code{Value: ptr.To("rejected")}
)

var (
	// GraphCompartmentRule Custom
	GraphCompartmentRuleCustom = Code{Value: ptr.To("custom")}
	// GraphCompartmentRule Different
	GraphCompartmentRuleDifferent = Code{Value: ptr.To("different")}
	// GraphCompartmentRule Identical
	GraphCompartmentRuleIdentical = Code{Value: ptr.To("identical")}
	// GraphCompartmentRule Matching
	GraphCompartmentRuleMatching = Code{Value: ptr.To("matching")}
)

var (
	// GraphCompartmentUse requires
	GraphCompartmentUseRequires = Code{Value: ptr.To("requires")}
	// GraphCompartmentUse Where
	GraphCompartmentUseWhere = Code{Value: ptr.To("where")}
)

var (
	// GroupMembershipBasis Definitional
	GroupMembershipBasisDefinitional = Code{Value: ptr.To("definitional")}
	// GroupMembershipBasis Enumerated
	GroupMembershipBasisEnumerated = Code{Value: ptr.To("enumerated")}
)

var (
	// GroupType Animal
	GroupTypeAnimal = Code{Value: ptr.To("animal")}
	// GroupType CareTeam
	GroupTypeCareteam = Code{Value: ptr.To("careteam")}
	// GroupType Device
	GroupTypeDevice = Code{Value: ptr.To("device")}
	// GroupType HealthcareService
	GroupTypeHealthcareservice = Code{Value: ptr.To("healthcareservice")}
	// GroupType Location
	GroupTypeLocation = Code{Value: ptr.To("location")}
	// GroupType Organization
	GroupTypeOrganization = Code{Value: ptr.To("organization")}
	// GroupType Person
	GroupTypePerson = Code{Value: ptr.To("person")}
	// GroupType Practitioner
	GroupTypePractitioner = Code{Value: ptr.To("practitioner")}
	// GroupType RelatedPerson
	GroupTypeRelatedperson = Code{Value: ptr.To("relatedperson")}
	// GroupType Specimen
	GroupTypeSpecimen = Code{Value: ptr.To("specimen")}
)

var (
	// GuidanceResponseStatus Data Requested
	GuidanceResponseStatusDataRequested = Code{Value: ptr.To("data-requested")}
	// GuidanceResponseStatus Data Required
	GuidanceResponseStatusDataRequired = Code{Value: ptr.To("data-required")}
	// GuidanceResponseStatus Entered In Error
	GuidanceResponseStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// GuidanceResponseStatus Failure
	GuidanceResponseStatusFailure = Code{Value: ptr.To("failure")}
	// GuidanceResponseStatus In Progress
	GuidanceResponseStatusInProgress = Code{Value: ptr.To("in-progress")}
	// GuidanceResponseStatus Success
	GuidanceResponseStatusSuccess = Code{Value: ptr.To("success")}
)

var (
	// GuidePageGeneration Generated
	GuidePageGenerationGenerated = Code{Value: ptr.To("generated")}
	// GuidePageGeneration HTML
	GuidePageGenerationHtml = Code{Value: ptr.To("html")}
	// GuidePageGeneration Markdown
	GuidePageGenerationMarkdown = Code{Value: ptr.To("markdown")}
	// GuidePageGeneration XML
	GuidePageGenerationXml = Code{Value: ptr.To("xml")}
)

var (
	// HTTPVerb DELETE
	HttpverbDelete = Code{Value: ptr.To("DELETE")}
	// HTTPVerb GET
	HttpverbGet = Code{Value: ptr.To("GET")}
	// HTTPVerb HEAD
	HttpverbHead = Code{Value: ptr.To("HEAD")}
	// HTTPVerb PATCH
	HttpverbPatch = Code{Value: ptr.To("PATCH")}
	// HTTPVerb POST
	HttpverbPost = Code{Value: ptr.To("POST")}
	// HTTPVerb PUT
	HttpverbPut = Code{Value: ptr.To("PUT")}
)

var (
	// IdentifierUse Official
	IdentifierUseOfficial = Code{Value: ptr.To("official")}
	// IdentifierUse Old
	IdentifierUseOld = Code{Value: ptr.To("old")}
	// IdentifierUse Secondary
	IdentifierUseSecondary = Code{Value: ptr.To("secondary")}
	// IdentifierUse Temp
	IdentifierUseTemp = Code{Value: ptr.To("temp")}
	// IdentifierUse Usual
	IdentifierUseUsual = Code{Value: ptr.To("usual")}
)

var (
	// IdentityAssuranceLevel Level 1
	IdentityAssuranceLevelLevel1 = Code{Value: ptr.To("level1")}
	// IdentityAssuranceLevel Level 2
	IdentityAssuranceLevelLevel2 = Code{Value: ptr.To("level2")}
	// IdentityAssuranceLevel Level 3
	IdentityAssuranceLevelLevel3 = Code{Value: ptr.To("level3")}
	// IdentityAssuranceLevel Level 4
	IdentityAssuranceLevelLevel4 = Code{Value: ptr.To("level4")}
)

var (
	// ImagingSelection2DGraphicType CIRCLE
	ImagingSelection2DgraphicTypeCircle = Code{Value: ptr.To("circle")}
	// ImagingSelection2DGraphicType ELLIPSE
	ImagingSelection2DgraphicTypeEllipse = Code{Value: ptr.To("ellipse")}
	// ImagingSelection2DGraphicType INTERPOLATED
	ImagingSelection2DgraphicTypeInterpolated = Code{Value: ptr.To("interpolated")}
	// ImagingSelection2DGraphicType POINT
	ImagingSelection2DgraphicTypePoint = Code{Value: ptr.To("point")}
	// ImagingSelection2DGraphicType POLYLINE
	ImagingSelection2DgraphicTypePolyline = Code{Value: ptr.To("polyline")}
)

var (
	// ImagingSelection3DGraphicType ELLIPSE
	ImagingSelection3DgraphicTypeEllipse = Code{Value: ptr.To("ellipse")}
	// ImagingSelection3DGraphicType ELLIPSOID
	ImagingSelection3DgraphicTypeEllipsoid = Code{Value: ptr.To("ellipsoid")}
	// ImagingSelection3DGraphicType MULTIPOINT
	ImagingSelection3DgraphicTypeMultipoint = Code{Value: ptr.To("multipoint")}
	// ImagingSelection3DGraphicType POINT
	ImagingSelection3DgraphicTypePoint = Code{Value: ptr.To("point")}
	// ImagingSelection3DGraphicType POLYGON
	ImagingSelection3DgraphicTypePolygon = Code{Value: ptr.To("polygon")}
	// ImagingSelection3DGraphicType POLYLINE
	ImagingSelection3DgraphicTypePolyline = Code{Value: ptr.To("polyline")}
)

var (
	// ImagingSelectionStatus Available
	ImagingSelectionStatusAvailable = Code{Value: ptr.To("available")}
	// ImagingSelectionStatus Entered in Error
	ImagingSelectionStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ImagingSelectionStatus Unknown
	ImagingSelectionStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ImagingStudyStatus Available
	ImagingStudyStatusAvailable = Code{Value: ptr.To("available")}
	// ImagingStudyStatus Cancelled
	ImagingStudyStatusCancelled = Code{Value: ptr.To("cancelled")}
	// ImagingStudyStatus Entered in Error
	ImagingStudyStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ImagingStudyStatus Registered
	ImagingStudyStatusRegistered = Code{Value: ptr.To("registered")}
	// ImagingStudyStatus Unknown
	ImagingStudyStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ImmunizationEvaluationStatusCodes Completed
	ImmunizationEvaluationStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// ImmunizationEvaluationStatusCodes Entered in Error
	ImmunizationEvaluationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ImmunizationEvaluationStatusCodes In Progress
	ImmunizationEvaluationStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// ImmunizationEvaluationStatusCodes Not Done
	ImmunizationEvaluationStatusCodesNotDone = Code{Value: ptr.To("not-done")}
	// ImmunizationEvaluationStatusCodes On Hold
	ImmunizationEvaluationStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// ImmunizationEvaluationStatusCodes Stopped
	ImmunizationEvaluationStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// ImmunizationEvaluationStatusCodes Unknown
	ImmunizationEvaluationStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ImmunizationStatusCodes Completed
	ImmunizationStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// ImmunizationStatusCodes Entered in Error
	ImmunizationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ImmunizationStatusCodes In Progress
	ImmunizationStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// ImmunizationStatusCodes Not Done
	ImmunizationStatusCodesNotDone = Code{Value: ptr.To("not-done")}
	// ImmunizationStatusCodes On Hold
	ImmunizationStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// ImmunizationStatusCodes Preparation
	ImmunizationStatusCodesPreparation = Code{Value: ptr.To("preparation")}
	// ImmunizationStatusCodes Stopped
	ImmunizationStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// ImmunizationStatusCodes Unknown
	ImmunizationStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// IngredientManufacturerRole Manufacturer actually makes this particular ingredient
	IngredientManufacturerRoleActual = Code{Value: ptr.To("actual")}
	// IngredientManufacturerRole Manufacturer is specifically allowed for this ingredient
	IngredientManufacturerRoleAllowed = Code{Value: ptr.To("allowed")}
	// IngredientManufacturerRole Manufacturer is known to make this ingredient in general
	IngredientManufacturerRolePossible = Code{Value: ptr.To("possible")}
)

var (
	// InteractionTrigger batch
	InteractionTriggerBatch = Code{Value: ptr.To("batch")}
	// InteractionTrigger capabilities
	InteractionTriggerCapabilities = Code{Value: ptr.To("capabilities")}
	// InteractionTrigger create
	InteractionTriggerCreate = Code{Value: ptr.To("create")}
	// InteractionTrigger delete
	InteractionTriggerDelete = Code{Value: ptr.To("delete")}
	// InteractionTrigger history
	InteractionTriggerHistory = Code{Value: ptr.To("history")}
	// InteractionTrigger operation
	InteractionTriggerOperation = Code{Value: ptr.To("operation")}
	// InteractionTrigger patch
	InteractionTriggerPatch = Code{Value: ptr.To("patch")}
	// InteractionTrigger read
	InteractionTriggerRead = Code{Value: ptr.To("read")}
	// InteractionTrigger search
	InteractionTriggerSearch = Code{Value: ptr.To("search")}
	// InteractionTrigger transaction
	InteractionTriggerTransaction = Code{Value: ptr.To("transaction")}
	// InteractionTrigger update
	InteractionTriggerUpdate = Code{Value: ptr.To("update")}
	// InteractionTrigger vread
	InteractionTriggerVread = Code{Value: ptr.To("vread")}
)

var (
	// InventoryCountType Difference
	InventoryCountTypeDifference = Code{Value: ptr.To("difference")}
	// InventoryCountType Snapshot
	InventoryCountTypeSnapshot = Code{Value: ptr.To("snapshot")}
)

var (
	// InventoryItemStatusCodes Active
	InventoryItemStatusCodesActive = Code{Value: ptr.To("active")}
	// InventoryItemStatusCodes Entered in Error
	InventoryItemStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// InventoryItemStatusCodes Inactive
	InventoryItemStatusCodesInactive = Code{Value: ptr.To("inactive")}
	// InventoryItemStatusCodes Unknown
	InventoryItemStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// InventoryReportStatus Active
	InventoryReportStatusActive = Code{Value: ptr.To("active")}
	// InventoryReportStatus Draft
	InventoryReportStatusDraft = Code{Value: ptr.To("draft")}
	// InventoryReportStatus Entered in Error
	InventoryReportStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// InventoryReportStatus Requested
	InventoryReportStatusRequested = Code{Value: ptr.To("requested")}
)

var (
	// InvoiceStatus balanced
	InvoiceStatusBalanced = Code{Value: ptr.To("balanced")}
	// InvoiceStatus cancelled
	InvoiceStatusCancelled = Code{Value: ptr.To("cancelled")}
	// InvoiceStatus draft
	InvoiceStatusDraft = Code{Value: ptr.To("draft")}
	// InvoiceStatus entered in error
	InvoiceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// InvoiceStatus issued
	InvoiceStatusIssued = Code{Value: ptr.To("issued")}
)

var (
	// IssueSeverity Error
	IssueSeverityError = Code{Value: ptr.To("error")}
	// IssueSeverity Fatal
	IssueSeverityFatal = Code{Value: ptr.To("fatal")}
	// IssueSeverity Information
	IssueSeverityInformation = Code{Value: ptr.To("information")}
	// IssueSeverity Operation Successful
	IssueSeveritySuccess = Code{Value: ptr.To("success")}
	// IssueSeverity Warning
	IssueSeverityWarning = Code{Value: ptr.To("warning")}
)

var (
	// IssueType Informational Note
	IssueTypeInformational = Code{Value: ptr.To("informational")}
	// IssueType Invalid Content
	IssueTypeInvalid = Code{Value: ptr.To("invalid")}
	// IssueType Processing Failure
	IssueTypeProcessing = Code{Value: ptr.To("processing")}
	// IssueType Security Problem
	IssueTypeSecurity = Code{Value: ptr.To("security")}
	// IssueType Operation Successful
	IssueTypeSuccess = Code{Value: ptr.To("success")}
	// IssueType Transient Issue
	IssueTypeTransient = Code{Value: ptr.To("transient")}
)

var (
	// Kind Insurance
	KindInsurance = Code{Value: ptr.To("insurance")}
	// Kind Other
	KindOther = Code{Value: ptr.To("other")}
	// Kind Self-pay
	KindSelfPay = Code{Value: ptr.To("self-pay")}
)

var (
	// LinkRelationTypes Refers to a resource that is the subject of the link's context.
	LinkRelationTypesAbout = Code{Value: ptr.To("about")}
	// LinkRelationTypes Asserts that the link target provides an access control description for the link context.
	LinkRelationTypesAcl = Code{Value: ptr.To("acl")}
	// LinkRelationTypes Refers to a substitute for this context
	LinkRelationTypesAlternate = Code{Value: ptr.To("alternate")}
	// LinkRelationTypes Used to reference alternative content that uses the AMP profile of the HTML format.
	LinkRelationTypesAmphtml = Code{Value: ptr.To("amphtml")}
	// LinkRelationTypes Refers to an appendix.
	LinkRelationTypesAppendix = Code{Value: ptr.To("appendix")}
	// LinkRelationTypes Refers to an icon for the context. Synonym for icon.
	LinkRelationTypesAppleTouchIcon = Code{Value: ptr.To("apple-touch-icon")}
	// LinkRelationTypes Refers to a launch screen for the context.
	LinkRelationTypesAppleTouchStartupImage = Code{Value: ptr.To("apple-touch-startup-image")}
	/*
	   LinkRelationTypes Refers to a collection of records, documents, or other

	   	materials of historical interest.
	*/
	LinkRelationTypesArchives = Code{Value: ptr.To("archives")}
	// LinkRelationTypes Refers to the context's author.
	LinkRelationTypesAuthor = Code{Value: ptr.To("author")}
	/*
	   LinkRelationTypes Identifies the entity that blocks access to a resource

	   	following receipt of a legal demand.
	*/
	LinkRelationTypesBlockedBy = Code{Value: ptr.To("blocked-by")}
	// LinkRelationTypes Gives a permanent link to use for bookmarking purposes.
	LinkRelationTypesBookmark = Code{Value: ptr.To("bookmark")}
	// LinkRelationTypes Designates the preferred version of a resource (the IRI and its contents).
	LinkRelationTypesCanonical = Code{Value: ptr.To("canonical")}
	// LinkRelationTypes Refers to a chapter in a collection of resources.
	LinkRelationTypesChapter = Code{Value: ptr.To("chapter")}
	// LinkRelationTypes Indicates that the link target is preferred over the link context for the purpose of permanent citation.
	LinkRelationTypesCiteAs = Code{Value: ptr.To("cite-as")}
	// LinkRelationTypes The target IRI points to a resource which represents the collection resource for the context IRI.
	LinkRelationTypesCollection = Code{Value: ptr.To("collection")}
	// LinkRelationTypes Refers to a table of contents.
	LinkRelationTypesContents = Code{Value: ptr.To("contents")}
	/*
	   LinkRelationTypes The document linked to was later converted to the

	   	document that contains this link relation.  For example, an RFC can
	   	have a link to the Internet-Draft that became the RFC; in that case,
	   	the link relation would be "convertedFrom".
	*/
	LinkRelationTypesConvertedFrom = Code{Value: ptr.To("convertedFrom")}
	/*
	   LinkRelationTypes Refers to a copyright statement that applies to the

	   	link's context.
	*/
	LinkRelationTypesCopyright = Code{Value: ptr.To("copyright")}
	// LinkRelationTypes The target IRI points to a resource where a submission form can be obtained.
	LinkRelationTypesCreateForm = Code{Value: ptr.To("create-form")}
	/*
	   LinkRelationTypes Refers to a resource containing the most recent

	   	item(s) in a collection of resources.
	*/
	LinkRelationTypesCurrent = Code{Value: ptr.To("current")}
	/*
	   LinkRelationTypes Refers to a resource providing information about the

	   	link's context.
	*/
	LinkRelationTypesDescribedby = Code{Value: ptr.To("describedby")}
	/*
	   LinkRelationTypes The relationship A 'describes' B asserts that

	   	resource A provides a description of resource B. There are no
	   	constraints on the format or representation of either A or B,
	   	neither are there any further constraints on either resource.
	*/
	LinkRelationTypesDescribes = Code{Value: ptr.To("describes")}
	/*
	   LinkRelationTypes Refers to a list of patent disclosures made with respect to

	   	material for which 'disclosure' relation is specified.
	*/
	LinkRelationTypesDisclosure = Code{Value: ptr.To("disclosure")}
	/*
	   LinkRelationTypes Used to indicate an origin that will be used to fetch required

	   	resources for the link context, and that the user agent ought to resolve
	   	as early as possible.
	*/
	LinkRelationTypesDnsPrefetch = Code{Value: ptr.To("dns-prefetch")}
	/*
	   LinkRelationTypes Refers to a resource whose available representations

	   	are byte-for-byte identical with the corresponding representations of
	   	the context IRI.
	*/
	LinkRelationTypesDuplicate = Code{Value: ptr.To("duplicate")}
	/*
	   LinkRelationTypes Refers to a resource that can be used to edit the

	   	link's context.
	*/
	LinkRelationTypesEdit = Code{Value: ptr.To("edit")}
	/*
	   LinkRelationTypes The target IRI points to a resource where a submission form for

	   	editing associated resource can be obtained.
	*/
	LinkRelationTypesEditForm = Code{Value: ptr.To("edit-form")}
	/*
	   LinkRelationTypes Refers to a resource that can be used to edit media

	   	associated with the link's context.
	*/
	LinkRelationTypesEditMedia = Code{Value: ptr.To("edit-media")}
	/*
	   LinkRelationTypes Identifies a related resource that is potentially

	   	large and might require special handling.
	*/
	LinkRelationTypesEnclosure = Code{Value: ptr.To("enclosure")}
	// LinkRelationTypes Refers to a resource that is not part of the same site as the current context.
	LinkRelationTypesExternal = Code{Value: ptr.To("external")}
	/*
	   LinkRelationTypes An IRI that refers to the furthest preceding resource

	   	in a series of resources.
	*/
	LinkRelationTypesFirst = Code{Value: ptr.To("first")}
	// LinkRelationTypes Refers to a glossary of terms.
	LinkRelationTypesGlossary = Code{Value: ptr.To("glossary")}
	// LinkRelationTypes Refers to context-sensitive help.
	LinkRelationTypesHelp = Code{Value: ptr.To("help")}
	/*
	   LinkRelationTypes Refers to a resource hosted by the server indicated by

	   	the link context.
	*/
	LinkRelationTypesHosts = Code{Value: ptr.To("hosts")}
	/*
	   LinkRelationTypes Refers to a hub that enables registration for

	   	notification of updates to the context.
	*/
	LinkRelationTypesHub = Code{Value: ptr.To("hub")}
	// LinkRelationTypes Refers to an icon representing the link's context.
	LinkRelationTypesIcon = Code{Value: ptr.To("icon")}
	// LinkRelationTypes Refers to an index.
	LinkRelationTypesIndex = Code{Value: ptr.To("index")}
	// LinkRelationTypes refers to a resource associated with a time interval that ends before the beginning of the time interval associated with the context resource
	LinkRelationTypesIntervalAfter = Code{Value: ptr.To("intervalAfter")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource
	LinkRelationTypesIntervalBefore = Code{Value: ptr.To("intervalBefore")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource
	LinkRelationTypesIntervalContains = Code{Value: ptr.To("intervalContains")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource, or ends before the beginning of the time interval associated with the context resource
	LinkRelationTypesIntervalDisjoint = Code{Value: ptr.To("intervalDisjoint")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
	LinkRelationTypesIntervalDuring = Code{Value: ptr.To("intervalDuring")}
	// LinkRelationTypes refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
	LinkRelationTypesIntervalEquals = Code{Value: ptr.To("intervalEquals")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
	LinkRelationTypesIntervalFinishedBy = Code{Value: ptr.To("intervalFinishedBy")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
	LinkRelationTypesIntervalFinishes = Code{Value: ptr.To("intervalFinishes")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins before or is coincident with the beginning of the time interval associated with the context resource, and ends after or is coincident with the end of the time interval associated with the context resource
	LinkRelationTypesIntervalIn = Code{Value: ptr.To("intervalIn")}
	// LinkRelationTypes refers to a resource associated with a time interval whose beginning coincides with the end of the time interval associated with the context resource
	LinkRelationTypesIntervalMeets = Code{Value: ptr.To("intervalMeets")}
	// LinkRelationTypes refers to a resource associated with a time interval whose end coincides with the beginning of the time interval associated with the context resource
	LinkRelationTypesIntervalMetBy = Code{Value: ptr.To("intervalMetBy")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the beginning of the time interval associated with the context resource
	LinkRelationTypesIntervalOverlappedBy = Code{Value: ptr.To("intervalOverlappedBy")}
	// LinkRelationTypes refers to a resource associated with a time interval that begins before the end of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
	LinkRelationTypesIntervalOverlaps = Code{Value: ptr.To("intervalOverlaps")}
	// LinkRelationTypes refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource
	LinkRelationTypesIntervalStartedBy = Code{Value: ptr.To("intervalStartedBy")}
	// LinkRelationTypes refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
	LinkRelationTypesIntervalStarts = Code{Value: ptr.To("intervalStarts")}
	// LinkRelationTypes The target IRI points to a resource that is a member of the collection represented by the context IRI.
	LinkRelationTypesItem = Code{Value: ptr.To("item")}
	/*
	   LinkRelationTypes An IRI that refers to the furthest following resource

	   	in a series of resources.
	*/
	LinkRelationTypesLast = Code{Value: ptr.To("last")}
	/*
	   LinkRelationTypes Points to a resource containing the latest (e.g.,

	   	current) version of the context.
	*/
	LinkRelationTypesLatestVersion = Code{Value: ptr.To("latest-version")}
	// LinkRelationTypes Refers to a license associated with this context.
	LinkRelationTypesLicense = Code{Value: ptr.To("license")}
	/*
	   LinkRelationTypes The link target of a link with the "linkset" relation

	   	type provides a set of links, including links in which the link
	   	context of the link participates.
	*/
	LinkRelationTypesLinkset = Code{Value: ptr.To("linkset")}
	/*
	   LinkRelationTypes Refers to further information about the link's context,

	   	expressed as a LRDD ("Link-based Resource Descriptor Document")
	   	resource.  See  for information about
	   	processing this relation type in host-meta documents. When used
	   	elsewhere, it refers to additional links and other metadata.
	   	Multiple instances indicate additional LRDD resources. LRDD
	   	resources MUST have an "application/xrd+xml" representation, and
	   	MAY have others.
	*/
	LinkRelationTypesLrdd = Code{Value: ptr.To("lrdd")}
	// LinkRelationTypes Links to a manifest file for the context.
	LinkRelationTypesManifest = Code{Value: ptr.To("manifest")}
	// LinkRelationTypes Refers to a mask that can be applied to the icon for the context.
	LinkRelationTypesMaskIcon = Code{Value: ptr.To("mask-icon")}
	// LinkRelationTypes Refers to a feed of personalised media recommendations relevant to the link context.
	LinkRelationTypesMediaFeed = Code{Value: ptr.To("media-feed")}
	// LinkRelationTypes The Target IRI points to a Memento, a fixed resource that will not change state anymore.
	LinkRelationTypesMemento = Code{Value: ptr.To("memento")}
	// LinkRelationTypes Links to the context's Micropub endpoint.
	LinkRelationTypesMicropub = Code{Value: ptr.To("micropub")}
	// LinkRelationTypes Refers to a module that the user agent is to preemptively fetch and store for use in the current context.
	LinkRelationTypesModulepreload = Code{Value: ptr.To("modulepreload")}
	/*
	   LinkRelationTypes Refers to a resource that can be used to monitor changes in an HTTP resource.
	*/
	LinkRelationTypesMonitor = Code{Value: ptr.To("monitor")}
	/*
	   LinkRelationTypes Refers to a resource that can be used to monitor changes in a specified group of HTTP resources.
	*/
	LinkRelationTypesMonitorGroup = Code{Value: ptr.To("monitor-group")}
	/*
	   LinkRelationTypes Indicates that the link's context is a part of a series, and

	   	that the next in the series is the link target.
	*/
	LinkRelationTypesNext = Code{Value: ptr.To("next")}
	// LinkRelationTypes Refers to the immediately following archive resource.
	LinkRelationTypesNextArchive = Code{Value: ptr.To("next-archive")}
	// LinkRelationTypes Indicates that the context’s original author or publisher does not endorse the link target.
	LinkRelationTypesNofollow = Code{Value: ptr.To("nofollow")}
	// LinkRelationTypes Indicates that any newly created top-level browsing context which results from following the link will not be an auxiliary browsing context.
	LinkRelationTypesNoopener = Code{Value: ptr.To("noopener")}
	// LinkRelationTypes Indicates that no referrer information is to be leaked when following the link.
	LinkRelationTypesNoreferrer = Code{Value: ptr.To("noreferrer")}
	// LinkRelationTypes Indicates that any newly created top-level browsing context which results from following the link will be an auxiliary browsing context.
	LinkRelationTypesOpener = Code{Value: ptr.To("opener")}
	// LinkRelationTypes Refers to an OpenID Authentication server on which the context relies for an assertion that the end user controls an Identifier.
	LinkRelationTypesOpenid2LocalId = Code{Value: ptr.To("openid2.local_id")}
	// LinkRelationTypes Refers to a resource which accepts OpenID Authentication protocol messages for the context.
	LinkRelationTypesOpenid2Provider = Code{Value: ptr.To("openid2.provider")}
	// LinkRelationTypes The Target IRI points to an Original Resource.
	LinkRelationTypesOriginal = Code{Value: ptr.To("original")}
	// LinkRelationTypes Refers to a P3P privacy policy for the context.
	LinkRelationTypesP3Pv1 = Code{Value: ptr.To("P3Pv1")}
	// LinkRelationTypes Indicates a resource where payment is accepted.
	LinkRelationTypesPayment = Code{Value: ptr.To("payment")}
	// LinkRelationTypes Gives the address of the pingback resource for the link context.
	LinkRelationTypesPingback = Code{Value: ptr.To("pingback")}
	/*
	   LinkRelationTypes Used to indicate an origin that will be used to fetch required

	   	resources for the link context. Initiating an early connection, which
	   	includes the DNS lookup, TCP handshake, and optional TLS negotiation,
	   	allows the user agent to mask the high latency costs of establishing a
	   	connection.
	*/
	LinkRelationTypesPreconnect = Code{Value: ptr.To("preconnect")}
	/*
	   LinkRelationTypes Points to a resource containing the predecessor

	   	version in the version history.
	*/
	LinkRelationTypesPredecessorVersion = Code{Value: ptr.To("predecessor-version")}
	/*
	   LinkRelationTypes The prefetch link relation type is used to identify a resource

	   	that might be required by the next navigation from the link context, and
	   	that the user agent ought to fetch, such that the user agent can deliver a
	   	faster response once the resource is requested in the future.
	*/
	LinkRelationTypesPrefetch = Code{Value: ptr.To("prefetch")}
	/*
	   LinkRelationTypes Refers to a resource that should be loaded early in the

	   	processing of the link's context, without blocking rendering.
	*/
	LinkRelationTypesPreload = Code{Value: ptr.To("preload")}
	/*
	   LinkRelationTypes Used to identify a resource that might be required by the next

	   	navigation from the link context, and that the user agent ought to fetch
	   	and execute, such that the user agent can deliver a faster response once
	   	the resource is requested in the future.
	*/
	LinkRelationTypesPrerender = Code{Value: ptr.To("prerender")}
	/*
	   LinkRelationTypes Indicates that the link's context is a part of a series, and

	   	that the previous in the series is the link target.
	*/
	LinkRelationTypesPrev = Code{Value: ptr.To("prev")}
	// LinkRelationTypes Refers to the immediately preceding archive resource.
	LinkRelationTypesPrevArchive = Code{Value: ptr.To("prev-archive")}
	// LinkRelationTypes Refers to a resource that provides a preview of the link's context.
	LinkRelationTypesPreview = Code{Value: ptr.To("preview")}
	/*
	   LinkRelationTypes Refers to the previous resource in an ordered series

	   	of resources.  Synonym for "prev".
	*/
	LinkRelationTypesPrevious = Code{Value: ptr.To("previous")}
	// LinkRelationTypes Refers to a privacy policy associated with the link's context.
	LinkRelationTypesPrivacyPolicy = Code{Value: ptr.To("privacy-policy")}
	/*
	   LinkRelationTypes Identifying that a resource representation conforms
	   to a certain profile, without affecting the non-profile semantics
	   of the resource representation.
	*/
	LinkRelationTypesProfile = Code{Value: ptr.To("profile")}
	/*
	   LinkRelationTypes Links to a publication manifest. A manifest represents

	   	structured information about a publication, such as informative metadata,
	   	a list of resources, and a default reading order.
	*/
	LinkRelationTypesPublication = Code{Value: ptr.To("publication")}
	// LinkRelationTypes Identifies a related resource.
	LinkRelationTypesRelated = Code{Value: ptr.To("related")}
	/*
	   LinkRelationTypes Identifies a resource that is a reply to the context

	   	of the link.
	*/
	LinkRelationTypesReplies = Code{Value: ptr.To("replies")}
	/*
	   LinkRelationTypes Identifies the root of RESTCONF API as configured on this HTTP server.

	   	The "restconf" relation defines the root of the API defined in RFC8040.
	   	Subsequent revisions of RESTCONF will use alternate relation values to support
	   	protocol versioning.
	*/
	LinkRelationTypesRestconf = Code{Value: ptr.To("restconf")}
	/*
	   LinkRelationTypes The resource identified by the link target provides an input value to an

	   	instance of a rule, where the resource which represents the rule instance is
	   	identified by the link context.
	*/
	LinkRelationTypesRuleinput = Code{Value: ptr.To("ruleinput")}
	/*
	   LinkRelationTypes Refers to a resource that can be used to search through

	   	the link's context and related resources.
	*/
	LinkRelationTypesSearch = Code{Value: ptr.To("search")}
	// LinkRelationTypes Refers to a section in a collection of resources.
	LinkRelationTypesSection = Code{Value: ptr.To("section")}
	/*
	   LinkRelationTypes Conveys an identifier for the link's context.
	*/
	LinkRelationTypesSelf = Code{Value: ptr.To("self")}
	/*
	   LinkRelationTypes Indicates a URI that can be used to retrieve a

	   	service document.
	*/
	LinkRelationTypesService = Code{Value: ptr.To("service")}
	/*
	   LinkRelationTypes Identifies service description for the context that

	   	is primarily intended for consumption by machines.
	*/
	LinkRelationTypesServiceDesc = Code{Value: ptr.To("service-desc")}
	/*
	   LinkRelationTypes Identifies service documentation for the context that

	   	is primarily intended for human consumption.
	*/
	LinkRelationTypesServiceDoc = Code{Value: ptr.To("service-doc")}
	/*
	   LinkRelationTypes Identifies general metadata for the context that is

	   	primarily intended for consumption by machines.
	*/
	LinkRelationTypesServiceMeta = Code{Value: ptr.To("service-meta")}
	/*
	   LinkRelationTypes Refers to a resource that is within a context that is

	   	sponsored (such as advertising or another compensation agreement).
	*/
	LinkRelationTypesSponsored = Code{Value: ptr.To("sponsored")}
	/*
	   LinkRelationTypes Refers to the first resource in a collection of

	   	resources.
	*/
	LinkRelationTypesStart = Code{Value: ptr.To("start")}
	/*
	   LinkRelationTypes Identifies a resource that represents the context's

	   	status.
	*/
	LinkRelationTypesStatus = Code{Value: ptr.To("status")}
	// LinkRelationTypes Refers to a stylesheet.
	LinkRelationTypesStylesheet = Code{Value: ptr.To("stylesheet")}
	/*
	   LinkRelationTypes Refers to a resource serving as a subsection in a

	   	collection of resources.
	*/
	LinkRelationTypesSubsection = Code{Value: ptr.To("subsection")}
	/*
	   LinkRelationTypes Points to a resource containing the successor version

	   	in the version history.
	*/
	LinkRelationTypesSuccessorVersion = Code{Value: ptr.To("successor-version")}
	/*
	   LinkRelationTypes Identifies a resource that provides information about

	   	the context's retirement policy.
	*/
	LinkRelationTypesSunset = Code{Value: ptr.To("sunset")}
	/*
	   LinkRelationTypes Gives a tag (identified by the given address) that applies to

	   	the current document.
	*/
	LinkRelationTypesTag = Code{Value: ptr.To("tag")}
	// LinkRelationTypes Refers to the terms of service associated with the link's context.
	LinkRelationTypesTermsOfService = Code{Value: ptr.To("terms-of-service")}
	// LinkRelationTypes The Target IRI points to a TimeGate for an Original Resource.
	LinkRelationTypesTimegate = Code{Value: ptr.To("timegate")}
	// LinkRelationTypes The Target IRI points to a TimeMap for an Original Resource.
	LinkRelationTypesTimemap = Code{Value: ptr.To("timemap")}
	// LinkRelationTypes Refers to a resource identifying the abstract semantic type of which the link's context is considered to be an instance.
	LinkRelationTypesType = Code{Value: ptr.To("type")}
	/*
	   LinkRelationTypes Refers to a resource that is within a context that is User Generated Content.
	*/
	LinkRelationTypesUgc = Code{Value: ptr.To("ugc")}
	/*
	   LinkRelationTypes Refers to a parent document in a hierarchy of

	   	documents.
	*/
	LinkRelationTypesUp = Code{Value: ptr.To("up")}
	/*
	   LinkRelationTypes Points to a resource containing the version history

	   	for the context.
	*/
	LinkRelationTypesVersionHistory = Code{Value: ptr.To("version-history")}
	/*
	   LinkRelationTypes Identifies a resource that is the source of the

	   	information in the link's context.
	*/
	LinkRelationTypesVia = Code{Value: ptr.To("via")}
	/*
	   LinkRelationTypes Identifies a target URI that supports the Webmention protocol.

	   	This allows clients that mention a resource in some form of publishing process
	   	to contact that endpoint and inform it that this resource has been mentioned.
	*/
	LinkRelationTypesWebmention = Code{Value: ptr.To("webmention")}
	// LinkRelationTypes Points to a working copy for this resource.
	LinkRelationTypesWorkingCopy = Code{Value: ptr.To("working-copy")}
	/*
	   LinkRelationTypes Points to the versioned resource from which this

	   	working copy was obtained.
	*/
	LinkRelationTypesWorkingCopyOf = Code{Value: ptr.To("working-copy-of")}
)

var (
	// LinkType Refer
	LinkTypeRefer = Code{Value: ptr.To("refer")}
	// LinkType Replaced-by
	LinkTypeReplacedBy = Code{Value: ptr.To("replaced-by")}
	// LinkType Replaces
	LinkTypeReplaces = Code{Value: ptr.To("replaces")}
	// LinkType See also
	LinkTypeSeealso = Code{Value: ptr.To("seealso")}
)

var (
	// LinkageType Alternate Record
	LinkageTypeAlternate = Code{Value: ptr.To("alternate")}
	// LinkageType Historical/Obsolete Record
	LinkageTypeHistorical = Code{Value: ptr.To("historical")}
	// LinkageType Source of Truth
	LinkageTypeSource = Code{Value: ptr.To("source")}
)

var (
	// ListMode Change List
	ListModeChanges = Code{Value: ptr.To("changes")}
	// ListMode Snapshot List
	ListModeSnapshot = Code{Value: ptr.To("snapshot")}
	// ListMode Working List
	ListModeWorking = Code{Value: ptr.To("working")}
)

var (
	// ListStatus Current
	ListStatusCurrent = Code{Value: ptr.To("current")}
	// ListStatus Entered In Error
	ListStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ListStatus Retired
	ListStatusRetired = Code{Value: ptr.To("retired")}
)

var (
	// LocationMode Instance
	LocationModeInstance = Code{Value: ptr.To("instance")}
	// LocationMode Kind
	LocationModeKind = Code{Value: ptr.To("kind")}
)

var (
	// LocationStatus Active
	LocationStatusActive = Code{Value: ptr.To("active")}
	// LocationStatus Inactive
	LocationStatusInactive = Code{Value: ptr.To("inactive")}
	// LocationStatus Suspended
	LocationStatusSuspended = Code{Value: ptr.To("suspended")}
)

var (
	// MeasureReportStatus Complete
	MeasureReportStatusComplete = Code{Value: ptr.To("complete")}
	// MeasureReportStatus Error
	MeasureReportStatusError = Code{Value: ptr.To("error")}
	// MeasureReportStatus Pending
	MeasureReportStatusPending = Code{Value: ptr.To("pending")}
)

var (
	// MeasureReportType Data Exchange
	MeasureReportTypeDataExchange = Code{Value: ptr.To("data-exchange")}
	// MeasureReportType Individual
	MeasureReportTypeIndividual = Code{Value: ptr.To("individual")}
	// MeasureReportType Subject List
	MeasureReportTypeSubjectList = Code{Value: ptr.To("subject-list")}
	// MeasureReportType Summary
	MeasureReportTypeSummary = Code{Value: ptr.To("summary")}
)

var (
	// MedicationAdministrationStatusCodes Completed
	MedicationAdministrationStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// MedicationAdministrationStatusCodes Entered in Error
	MedicationAdministrationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationAdministrationStatusCodes In Progress
	MedicationAdministrationStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// MedicationAdministrationStatusCodes Not Done
	MedicationAdministrationStatusCodesNotDone = Code{Value: ptr.To("not-done")}
	// MedicationAdministrationStatusCodes On Hold
	MedicationAdministrationStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// MedicationAdministrationStatusCodes Stopped
	MedicationAdministrationStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// MedicationAdministrationStatusCodes Unknown
	MedicationAdministrationStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// MedicationDispenseStatusCodes Cancelled
	MedicationDispenseStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// MedicationDispenseStatusCodes Completed
	MedicationDispenseStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// MedicationDispenseStatusCodes Declined
	MedicationDispenseStatusCodesDeclined = Code{Value: ptr.To("declined")}
	// MedicationDispenseStatusCodes Entered in Error
	MedicationDispenseStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationDispenseStatusCodes In Progress
	MedicationDispenseStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// MedicationDispenseStatusCodes On Hold
	MedicationDispenseStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// MedicationDispenseStatusCodes Preparation
	MedicationDispenseStatusCodesPreparation = Code{Value: ptr.To("preparation")}
	// MedicationDispenseStatusCodes Stopped
	MedicationDispenseStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// MedicationDispenseStatusCodes Unknown
	MedicationDispenseStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// MedicationKnowledgeStatusCodes Active
	MedicationKnowledgeStatusCodesActive = Code{Value: ptr.To("active")}
	// MedicationKnowledgeStatusCodes Entered in Error
	MedicationKnowledgeStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationKnowledgeStatusCodes Inactive
	MedicationKnowledgeStatusCodesInactive = Code{Value: ptr.To("inactive")}
)

var (
	// MedicationRequestIntent Option
	MedicationRequestIntentOption = Code{Value: ptr.To("option")}
	// MedicationRequestIntent Order
	MedicationRequestIntentOrder = Code{Value: ptr.To("order")}
	// MedicationRequestIntent Plan
	MedicationRequestIntentPlan = Code{Value: ptr.To("plan")}
	// MedicationRequestIntent Proposal
	MedicationRequestIntentProposal = Code{Value: ptr.To("proposal")}
)

var (
	// MedicationStatementStatusCodes Draft
	MedicationStatementStatusCodesDraft = Code{Value: ptr.To("draft")}
	// MedicationStatementStatusCodes Entered in Error
	MedicationStatementStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationStatementStatusCodes Recorded
	MedicationStatementStatusCodesRecorded = Code{Value: ptr.To("recorded")}
)

var (
	// MedicationStatusCodes Active
	MedicationStatusCodesActive = Code{Value: ptr.To("active")}
	// MedicationStatusCodes Entered in Error
	MedicationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationStatusCodes Inactive
	MedicationStatusCodesInactive = Code{Value: ptr.To("inactive")}
)

var (
	// MedicationrequestStatus Active
	MedicationrequestStatusActive = Code{Value: ptr.To("active")}
	// MedicationrequestStatus Draft
	MedicationrequestStatusDraft = Code{Value: ptr.To("draft")}
	// MedicationrequestStatus Ended
	MedicationrequestStatusEnded = Code{Value: ptr.To("ended")}
	// MedicationrequestStatus Entered in Error
	MedicationrequestStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationrequestStatus On Hold
	MedicationrequestStatusOnHold = Code{Value: ptr.To("on-hold")}
	// MedicationrequestStatus Unknown
	MedicationrequestStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// MessageSignificanceCategory Consequence
	MessageSignificanceCategoryConsequence = Code{Value: ptr.To("consequence")}
	// MessageSignificanceCategory Currency
	MessageSignificanceCategoryCurrency = Code{Value: ptr.To("currency")}
	// MessageSignificanceCategory Notification
	MessageSignificanceCategoryNotification = Code{Value: ptr.To("notification")}
)

var (
	// MessageheaderResponseRequest Always
	MessageheaderResponseRequestAlways = Code{Value: ptr.To("always")}
	// MessageheaderResponseRequest Never
	MessageheaderResponseRequestNever = Code{Value: ptr.To("never")}
	// MessageheaderResponseRequest Error/reject conditions only
	MessageheaderResponseRequestOnError = Code{Value: ptr.To("on-error")}
	// MessageheaderResponseRequest Successful completion only
	MessageheaderResponseRequestOnSuccess = Code{Value: ptr.To("on-success")}
)

var (
	// NameUse Anonymous
	NameUseAnonymous = Code{Value: ptr.To("anonymous")}
	// NameUse Nickname
	NameUseNickname = Code{Value: ptr.To("nickname")}
	// NameUse Official
	NameUseOfficial = Code{Value: ptr.To("official")}
	// NameUse Old
	NameUseOld = Code{Value: ptr.To("old")}
	// NameUse Temp
	NameUseTemp = Code{Value: ptr.To("temp")}
	// NameUse Usual
	NameUseUsual = Code{Value: ptr.To("usual")}
)

var (
	// NamingSystemIdentifierType IRI stem
	NamingSystemIdentifierTypeIriStem = Code{Value: ptr.To("iri-stem")}
	// NamingSystemIdentifierType OID
	NamingSystemIdentifierTypeOid = Code{Value: ptr.To("oid")}
	// NamingSystemIdentifierType Other
	NamingSystemIdentifierTypeOther = Code{Value: ptr.To("other")}
	// NamingSystemIdentifierType URI
	NamingSystemIdentifierTypeUri = Code{Value: ptr.To("uri")}
	// NamingSystemIdentifierType UUID
	NamingSystemIdentifierTypeUuid = Code{Value: ptr.To("uuid")}
	// NamingSystemIdentifierType V2CSMNemonic
	NamingSystemIdentifierTypeV2Csmnemonic = Code{Value: ptr.To("v2csmnemonic")}
)

var (
	// NamingSystemType Code System
	NamingSystemTypeCodesystem = Code{Value: ptr.To("codesystem")}
	// NamingSystemType Identifier
	NamingSystemTypeIdentifier = Code{Value: ptr.To("identifier")}
	// NamingSystemType Root
	NamingSystemTypeRoot = Code{Value: ptr.To("root")}
)

var (
	// NarrativeStatus Additional
	NarrativeStatusAdditional = Code{Value: ptr.To("additional")}
	// NarrativeStatus Empty
	NarrativeStatusEmpty = Code{Value: ptr.To("empty")}
	// NarrativeStatus Extensions
	NarrativeStatusExtensions = Code{Value: ptr.To("extensions")}
	// NarrativeStatus Generated
	NarrativeStatusGenerated = Code{Value: ptr.To("generated")}
)

var (
	// NoteType Display
	NoteTypeDisplay = Code{Value: ptr.To("display")}
	// NoteType Print (Form)
	NoteTypePrint = Code{Value: ptr.To("print")}
	// NoteType Print (Operator)
	NoteTypePrintoper = Code{Value: ptr.To("printoper")}
)

var (
	// NutritionProductStatus Active
	NutritionProductStatusActive = Code{Value: ptr.To("active")}
	// NutritionProductStatus Entered in Error
	NutritionProductStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// NutritionProductStatus Inactive
	NutritionProductStatusInactive = Code{Value: ptr.To("inactive")}
)

var (
	// ObservationDataType boolean
	ObservationDataTypeBoolean = Code{Value: ptr.To("boolean")}
	// ObservationDataType CodeableConcept
	ObservationDataTypeCodeableConcept = Code{Value: ptr.To("CodeableConcept")}
	// ObservationDataType dateTime
	ObservationDataTypeDateTime = Code{Value: ptr.To("dateTime")}
	// ObservationDataType integer
	ObservationDataTypeInteger = Code{Value: ptr.To("integer")}
	// ObservationDataType Period
	ObservationDataTypePeriod = Code{Value: ptr.To("Period")}
	// ObservationDataType Quantity
	ObservationDataTypeQuantity = Code{Value: ptr.To("Quantity")}
	// ObservationDataType Range
	ObservationDataTypeRange = Code{Value: ptr.To("Range")}
	// ObservationDataType Ratio
	ObservationDataTypeRatio = Code{Value: ptr.To("Ratio")}
	// ObservationDataType SampledData
	ObservationDataTypeSampledData = Code{Value: ptr.To("SampledData")}
	// ObservationDataType string
	ObservationDataTypeString = Code{Value: ptr.To("string")}
	// ObservationDataType time
	ObservationDataTypeTime = Code{Value: ptr.To("time")}
)

var (
	// ObservationRangeCategory absolute range
	ObservationRangeCategoryAbsolute = Code{Value: ptr.To("absolute")}
	// ObservationRangeCategory critical range
	ObservationRangeCategoryCritical = Code{Value: ptr.To("critical")}
	// ObservationRangeCategory reference range
	ObservationRangeCategoryReference = Code{Value: ptr.To("reference")}
)

var (
	// ObservationStatus Amended
	ObservationStatusAmended = Code{Value: ptr.To("amended")}
	// ObservationStatus Cancelled
	ObservationStatusCancelled = Code{Value: ptr.To("cancelled")}
	// ObservationStatus Entered in Error
	ObservationStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ObservationStatus Final
	ObservationStatusFinal = Code{Value: ptr.To("final")}
	// ObservationStatus Preliminary
	ObservationStatusPreliminary = Code{Value: ptr.To("preliminary")}
	// ObservationStatus Registered
	ObservationStatusRegistered = Code{Value: ptr.To("registered")}
	// ObservationStatus Unknown
	ObservationStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// OperationKind Operation
	OperationKindOperation = Code{Value: ptr.To("operation")}
	// OperationKind Query
	OperationKindQuery = Code{Value: ptr.To("query")}
)

var (
	// OperationParameterScope Instance
	OperationParameterScopeInstance = Code{Value: ptr.To("instance")}
	// OperationParameterScope System
	OperationParameterScopeSystem = Code{Value: ptr.To("system")}
	// OperationParameterScope Type
	OperationParameterScopeType = Code{Value: ptr.To("type")}
)

var (
	// OperationParameterUse In
	OperationParameterUseIn = Code{Value: ptr.To("in")}
	// OperationParameterUse Out
	OperationParameterUseOut = Code{Value: ptr.To("out")}
)

var (
	// OrientationType Antisense orientation of referenceSeq
	OrientationTypeAntisense = Code{Value: ptr.To("antisense")}
	// OrientationType Sense orientation of referenceSeq
	OrientationTypeSense = Code{Value: ptr.To("sense")}
)

var (
	// ParticipationStatus Accepted
	ParticipationStatusAccepted = Code{Value: ptr.To("accepted")}
	// ParticipationStatus Declined
	ParticipationStatusDeclined = Code{Value: ptr.To("declined")}
	// ParticipationStatus Needs Action
	ParticipationStatusNeedsAction = Code{Value: ptr.To("needs-action")}
	// ParticipationStatus Tentative
	ParticipationStatusTentative = Code{Value: ptr.To("tentative")}
)

var (
	// PaymentOutcome Processing Complete
	PaymentOutcomeComplete = Code{Value: ptr.To("complete")}
	// PaymentOutcome Error
	PaymentOutcomeError = Code{Value: ptr.To("error")}
	// PaymentOutcome Partial Processing
	PaymentOutcomePartial = Code{Value: ptr.To("partial")}
	// PaymentOutcome Queued
	PaymentOutcomeQueued = Code{Value: ptr.To("queued")}
)

var (
	// PermissionRuleCombining Deny-overrides
	PermissionRuleCombiningDenyOverrides = Code{Value: ptr.To("deny-overrides")}
	// PermissionRuleCombining Deny-unless-permit
	PermissionRuleCombiningDenyUnlessPermit = Code{Value: ptr.To("deny-unless-permit")}
	// PermissionRuleCombining Ordered-deny-overrides
	PermissionRuleCombiningOrderedDenyOverrides = Code{Value: ptr.To("ordered-deny-overrides")}
	// PermissionRuleCombining Ordered-permit-overrides
	PermissionRuleCombiningOrderedPermitOverrides = Code{Value: ptr.To("ordered-permit-overrides")}
	// PermissionRuleCombining Permit-overrides
	PermissionRuleCombiningPermitOverrides = Code{Value: ptr.To("permit-overrides")}
	// PermissionRuleCombining Permit-unless-deny
	PermissionRuleCombiningPermitUnlessDeny = Code{Value: ptr.To("permit-unless-deny")}
)

var (
	// PermissionStatus Active
	PermissionStatusActive = Code{Value: ptr.To("active")}
	// PermissionStatus Draft
	PermissionStatusDraft = Code{Value: ptr.To("draft")}
	// PermissionStatus Entered in Error
	PermissionStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// PermissionStatus Rejected
	PermissionStatusRejected = Code{Value: ptr.To("rejected")}
)

var (
	// PriceComponentType base price
	PriceComponentTypeBase = Code{Value: ptr.To("base")}
	// PriceComponentType deduction
	PriceComponentTypeDeduction = Code{Value: ptr.To("deduction")}
	// PriceComponentType discount
	PriceComponentTypeDiscount = Code{Value: ptr.To("discount")}
	// PriceComponentType informational
	PriceComponentTypeInformational = Code{Value: ptr.To("informational")}
	// PriceComponentType surcharge
	PriceComponentTypeSurcharge = Code{Value: ptr.To("surcharge")}
	// PriceComponentType tax
	PriceComponentTypeTax = Code{Value: ptr.To("tax")}
)

var (
	// PropertyRepresentation CDA Text Format
	PropertyRepresentationCdaText = Code{Value: ptr.To("cdaText")}
	// PropertyRepresentation Type Attribute
	PropertyRepresentationTypeAttr = Code{Value: ptr.To("typeAttr")}
	// PropertyRepresentation XHTML
	PropertyRepresentationXhtml = Code{Value: ptr.To("xhtml")}
	// PropertyRepresentation XML Attribute
	PropertyRepresentationXmlAttr = Code{Value: ptr.To("xmlAttr")}
	// PropertyRepresentation XML Text
	PropertyRepresentationXmlText = Code{Value: ptr.To("xmlText")}
)

var (
	// PropertyType boolean
	PropertyTypeBoolean = Code{Value: ptr.To("boolean")}
	// PropertyType code (internal reference)
	PropertyTypeCode = Code{Value: ptr.To("code")}
	// PropertyType Coding (external reference)
	PropertyTypeCoding = Code{Value: ptr.To("Coding")}
	// PropertyType dateTime
	PropertyTypeDateTime = Code{Value: ptr.To("dateTime")}
	// PropertyType decimal
	PropertyTypeDecimal = Code{Value: ptr.To("decimal")}
	// PropertyType integer
	PropertyTypeInteger = Code{Value: ptr.To("integer")}
	// PropertyType string
	PropertyTypeString = Code{Value: ptr.To("string")}
)

var (
	// ProvenanceEntityRole Instantiates
	ProvenanceEntityRoleInstantiates = Code{Value: ptr.To("instantiates")}
	// ProvenanceEntityRole Quotation
	ProvenanceEntityRoleQuotation = Code{Value: ptr.To("quotation")}
	// ProvenanceEntityRole Removal
	ProvenanceEntityRoleRemoval = Code{Value: ptr.To("removal")}
	// ProvenanceEntityRole Revision
	ProvenanceEntityRoleRevision = Code{Value: ptr.To("revision")}
	// ProvenanceEntityRole Source
	ProvenanceEntityRoleSource = Code{Value: ptr.To("source")}
)

var (
	// PublicationStatus Active
	PublicationStatusActive = Code{Value: ptr.To("active")}
	// PublicationStatus Draft
	PublicationStatusDraft = Code{Value: ptr.To("draft")}
	// PublicationStatus Retired
	PublicationStatusRetired = Code{Value: ptr.To("retired")}
	// PublicationStatus Unknown
	PublicationStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// QuantityComparator Sufficient to achieve this total quantity
	QuantityComparatorAd = Code{Value: ptr.To("ad")}
	// QuantityComparator Greater than
	QuantityComparatorGreaterThan = Code{Value: ptr.To(">")}
	// QuantityComparator Greater or Equal to
	QuantityComparatorGreaterThanOrEqualTo = Code{Value: ptr.To(">=")}
	// QuantityComparator Less than
	QuantityComparatorLessThan = Code{Value: ptr.To("<")}
	// QuantityComparator Less or Equal to
	QuantityComparatorLessThanOrEqualTo = Code{Value: ptr.To("<=")}
)

var (
	// QuestionnaireAnswerConstraint Options only
	QuestionnaireAnswerConstraintOptionsOnly = Code{Value: ptr.To("optionsOnly")}
	// QuestionnaireAnswerConstraint Options or string
	QuestionnaireAnswerConstraintOptionsOrString = Code{Value: ptr.To("optionsOrString")}
	// QuestionnaireAnswerConstraint Options or 'type'
	QuestionnaireAnswerConstraintOptionsOrType = Code{Value: ptr.To("optionsOrType")}
)

var (
	// QuestionnaireItemDisabledDisplay Hidden
	QuestionnaireItemDisabledDisplayHidden = Code{Value: ptr.To("hidden")}
	// QuestionnaireItemDisabledDisplay Protected
	QuestionnaireItemDisabledDisplayProtected = Code{Value: ptr.To("protected")}
)

var (
	// QuestionnaireItemOperator Equals
	QuestionnaireItemOperatorEqualTo = Code{Value: ptr.To("=")}
	// QuestionnaireItemOperator Exists
	QuestionnaireItemOperatorExists = Code{Value: ptr.To("exists")}
	// QuestionnaireItemOperator Greater Than
	QuestionnaireItemOperatorGreaterThan = Code{Value: ptr.To(">")}
	// QuestionnaireItemOperator Greater or Equals
	QuestionnaireItemOperatorGreaterThanOrEqualTo = Code{Value: ptr.To(">=")}
	// QuestionnaireItemOperator Less Than
	QuestionnaireItemOperatorLessThan = Code{Value: ptr.To("<")}
	// QuestionnaireItemOperator Less or Equals
	QuestionnaireItemOperatorLessThanOrEqualTo = Code{Value: ptr.To("<=")}
	// QuestionnaireItemOperator Not Equals
	QuestionnaireItemOperatorNotEqualTo = Code{Value: ptr.To("!=")}
)

var (
	// QuestionnaireItemType Display
	QuestionnaireItemTypeDisplay = Code{Value: ptr.To("display")}
	// QuestionnaireItemType Group
	QuestionnaireItemTypeGroup = Code{Value: ptr.To("group")}
	// QuestionnaireItemType Question
	QuestionnaireItemTypeQuestion = Code{Value: ptr.To("question")}
)

var (
	// QuestionnaireResponseStatus Amended
	QuestionnaireResponseStatusAmended = Code{Value: ptr.To("amended")}
	// QuestionnaireResponseStatus Completed
	QuestionnaireResponseStatusCompleted = Code{Value: ptr.To("completed")}
	// QuestionnaireResponseStatus Entered in Error
	QuestionnaireResponseStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// QuestionnaireResponseStatus In Progress
	QuestionnaireResponseStatusInProgress = Code{Value: ptr.To("in-progress")}
	// QuestionnaireResponseStatus Stopped
	QuestionnaireResponseStatusStopped = Code{Value: ptr.To("stopped")}
)

var (
	// ReferenceHandlingPolicy Reference Integrity Enforced
	ReferenceHandlingPolicyEnforced = Code{Value: ptr.To("enforced")}
	// ReferenceHandlingPolicy Literal References
	ReferenceHandlingPolicyLiteral = Code{Value: ptr.To("literal")}
	// ReferenceHandlingPolicy Local References Only
	ReferenceHandlingPolicyLocal = Code{Value: ptr.To("local")}
	// ReferenceHandlingPolicy Logical References
	ReferenceHandlingPolicyLogical = Code{Value: ptr.To("logical")}
	// ReferenceHandlingPolicy Resolves References
	ReferenceHandlingPolicyResolves = Code{Value: ptr.To("resolves")}
)

var (
	// ReferenceVersionRules Either Specific or independent
	ReferenceVersionRulesEither = Code{Value: ptr.To("either")}
	// ReferenceVersionRules Version independent
	ReferenceVersionRulesIndependent = Code{Value: ptr.To("independent")}
	// ReferenceVersionRules Version Specific
	ReferenceVersionRulesSpecific = Code{Value: ptr.To("specific")}
)

var (
	// RelatedArtifactType Amended With
	RelatedArtifactTypeAmendedWith = Code{Value: ptr.To("amended-with")}
	// RelatedArtifactType Amends
	RelatedArtifactTypeAmends = Code{Value: ptr.To("amends")}
	// RelatedArtifactType Appended With
	RelatedArtifactTypeAppendedWith = Code{Value: ptr.To("appended-with")}
	// RelatedArtifactType Appends
	RelatedArtifactTypeAppends = Code{Value: ptr.To("appends")}
	// RelatedArtifactType Citation
	RelatedArtifactTypeCitation = Code{Value: ptr.To("citation")}
	// RelatedArtifactType Cite As
	RelatedArtifactTypeCiteAs = Code{Value: ptr.To("cite-as")}
	// RelatedArtifactType Cited By
	RelatedArtifactTypeCitedBy = Code{Value: ptr.To("cited-by")}
	// RelatedArtifactType Cites
	RelatedArtifactTypeCites = Code{Value: ptr.To("cites")}
	// RelatedArtifactType Has Comment In
	RelatedArtifactTypeCommentIn = Code{Value: ptr.To("comment-in")}
	// RelatedArtifactType Is Comment On
	RelatedArtifactTypeCommentsOn = Code{Value: ptr.To("comments-on")}
	// RelatedArtifactType Composed Of
	RelatedArtifactTypeComposedOf = Code{Value: ptr.To("composed-of")}
	// RelatedArtifactType Contained In
	RelatedArtifactTypeContainedIn = Code{Value: ptr.To("contained-in")}
	// RelatedArtifactType Contains
	RelatedArtifactTypeContains = Code{Value: ptr.To("contains")}
	// RelatedArtifactType Correction In
	RelatedArtifactTypeCorrectionIn = Code{Value: ptr.To("correction-in")}
	// RelatedArtifactType Corrects
	RelatedArtifactTypeCorrects = Code{Value: ptr.To("corrects")}
	// RelatedArtifactType Created With
	RelatedArtifactTypeCreatedWith = Code{Value: ptr.To("created-with")}
	// RelatedArtifactType Depends On
	RelatedArtifactTypeDependsOn = Code{Value: ptr.To("depends-on")}
	// RelatedArtifactType Derived From
	RelatedArtifactTypeDerivedFrom = Code{Value: ptr.To("derived-from")}
	// RelatedArtifactType Documentation
	RelatedArtifactTypeDocumentation = Code{Value: ptr.To("documentation")}
	// RelatedArtifactType Documents
	RelatedArtifactTypeDocuments = Code{Value: ptr.To("documents")}
	// RelatedArtifactType Justification
	RelatedArtifactTypeJustification = Code{Value: ptr.To("justification")}
	// RelatedArtifactType Part Of
	RelatedArtifactTypePartOf = Code{Value: ptr.To("part-of")}
	// RelatedArtifactType Predecessor
	RelatedArtifactTypePredecessor = Code{Value: ptr.To("predecessor")}
	// RelatedArtifactType Replaced With
	RelatedArtifactTypeReplacedWith = Code{Value: ptr.To("replaced-with")}
	// RelatedArtifactType Replaces
	RelatedArtifactTypeReplaces = Code{Value: ptr.To("replaces")}
	// RelatedArtifactType Retracted By
	RelatedArtifactTypeRetractedBy = Code{Value: ptr.To("retracted-by")}
	// RelatedArtifactType Retracts
	RelatedArtifactTypeRetracts = Code{Value: ptr.To("retracts")}
	// RelatedArtifactType Signs
	RelatedArtifactTypeSigns = Code{Value: ptr.To("signs")}
	// RelatedArtifactType Similar To
	RelatedArtifactTypeSimilarTo = Code{Value: ptr.To("similar-to")}
	// RelatedArtifactType Specification Of
	RelatedArtifactTypeSpecificationOf = Code{Value: ptr.To("specification-of")}
	// RelatedArtifactType Successor
	RelatedArtifactTypeSuccessor = Code{Value: ptr.To("successor")}
	// RelatedArtifactType Supported With
	RelatedArtifactTypeSupportedWith = Code{Value: ptr.To("supported-with")}
	// RelatedArtifactType Supports
	RelatedArtifactTypeSupports = Code{Value: ptr.To("supports")}
	// RelatedArtifactType Transformed Into
	RelatedArtifactTypeTransformedInto = Code{Value: ptr.To("transformed-into")}
	// RelatedArtifactType Transformed With
	RelatedArtifactTypeTransformedWith = Code{Value: ptr.To("transformed-with")}
	// RelatedArtifactType Transforms
	RelatedArtifactTypeTransforms = Code{Value: ptr.To("transforms")}
)

var (
	// RelatedArtifactTypeExpanded Amended With
	RelatedArtifactTypeExpandedAmendedWith = Code{Value: ptr.To("amended-with")}
	// RelatedArtifactTypeExpanded Amends
	RelatedArtifactTypeExpandedAmends = Code{Value: ptr.To("amends")}
	// RelatedArtifactTypeExpanded Appended With
	RelatedArtifactTypeExpandedAppendedWith = Code{Value: ptr.To("appended-with")}
	// RelatedArtifactTypeExpanded Appends
	RelatedArtifactTypeExpandedAppends = Code{Value: ptr.To("appends")}
	// RelatedArtifactTypeExpanded Citation
	RelatedArtifactTypeExpandedCitation = Code{Value: ptr.To("citation")}
	// RelatedArtifactTypeExpanded Cite As
	RelatedArtifactTypeExpandedCiteAs = Code{Value: ptr.To("cite-as")}
	// RelatedArtifactTypeExpanded Cited By
	RelatedArtifactTypeExpandedCitedBy = Code{Value: ptr.To("cited-by")}
	// RelatedArtifactTypeExpanded Cites
	RelatedArtifactTypeExpandedCites = Code{Value: ptr.To("cites")}
	// RelatedArtifactTypeExpanded Has Comment In
	RelatedArtifactTypeExpandedCommentIn = Code{Value: ptr.To("comment-in")}
	// RelatedArtifactTypeExpanded Is Comment On
	RelatedArtifactTypeExpandedCommentsOn = Code{Value: ptr.To("comments-on")}
	// RelatedArtifactTypeExpanded Composed Of
	RelatedArtifactTypeExpandedComposedOf = Code{Value: ptr.To("composed-of")}
	// RelatedArtifactTypeExpanded Contained In
	RelatedArtifactTypeExpandedContainedIn = Code{Value: ptr.To("contained-in")}
	// RelatedArtifactTypeExpanded Contains
	RelatedArtifactTypeExpandedContains = Code{Value: ptr.To("contains")}
	// RelatedArtifactTypeExpanded Correction In
	RelatedArtifactTypeExpandedCorrectionIn = Code{Value: ptr.To("correction-in")}
	// RelatedArtifactTypeExpanded Corrects
	RelatedArtifactTypeExpandedCorrects = Code{Value: ptr.To("corrects")}
	// RelatedArtifactTypeExpanded Created With
	RelatedArtifactTypeExpandedCreatedWith = Code{Value: ptr.To("created-with")}
	// RelatedArtifactTypeExpanded Depends On
	RelatedArtifactTypeExpandedDependsOn = Code{Value: ptr.To("depends-on")}
	// RelatedArtifactTypeExpanded Derived From
	RelatedArtifactTypeExpandedDerivedFrom = Code{Value: ptr.To("derived-from")}
	// RelatedArtifactTypeExpanded Documentation
	RelatedArtifactTypeExpandedDocumentation = Code{Value: ptr.To("documentation")}
	// RelatedArtifactTypeExpanded Documents
	RelatedArtifactTypeExpandedDocuments = Code{Value: ptr.To("documents")}
	// RelatedArtifactTypeExpanded Justification
	RelatedArtifactTypeExpandedJustification = Code{Value: ptr.To("justification")}
	// RelatedArtifactTypeExpanded Part Of
	RelatedArtifactTypeExpandedPartOf = Code{Value: ptr.To("part-of")}
	// RelatedArtifactTypeExpanded Predecessor
	RelatedArtifactTypeExpandedPredecessor = Code{Value: ptr.To("predecessor")}
	// RelatedArtifactTypeExpanded Replaced With
	RelatedArtifactTypeExpandedReplacedWith = Code{Value: ptr.To("replaced-with")}
	// RelatedArtifactTypeExpanded Replaces
	RelatedArtifactTypeExpandedReplaces = Code{Value: ptr.To("replaces")}
	// RelatedArtifactTypeExpanded Retracted By
	RelatedArtifactTypeExpandedRetractedBy = Code{Value: ptr.To("retracted-by")}
	// RelatedArtifactTypeExpanded Retracts
	RelatedArtifactTypeExpandedRetracts = Code{Value: ptr.To("retracts")}
	// RelatedArtifactTypeExpanded Signs
	RelatedArtifactTypeExpandedSigns = Code{Value: ptr.To("signs")}
	// RelatedArtifactTypeExpanded Similar To
	RelatedArtifactTypeExpandedSimilarTo = Code{Value: ptr.To("similar-to")}
	// RelatedArtifactTypeExpanded Specification Of
	RelatedArtifactTypeExpandedSpecificationOf = Code{Value: ptr.To("specification-of")}
	// RelatedArtifactTypeExpanded Successor
	RelatedArtifactTypeExpandedSuccessor = Code{Value: ptr.To("successor")}
	// RelatedArtifactTypeExpanded Supported With
	RelatedArtifactTypeExpandedSupportedWith = Code{Value: ptr.To("supported-with")}
	// RelatedArtifactTypeExpanded Supports
	RelatedArtifactTypeExpandedSupports = Code{Value: ptr.To("supports")}
	// RelatedArtifactTypeExpanded Transformed Into
	RelatedArtifactTypeExpandedTransformedInto = Code{Value: ptr.To("transformed-into")}
	// RelatedArtifactTypeExpanded Transformed With
	RelatedArtifactTypeExpandedTransformedWith = Code{Value: ptr.To("transformed-with")}
	// RelatedArtifactTypeExpanded Transforms
	RelatedArtifactTypeExpandedTransforms = Code{Value: ptr.To("transforms")}
)

var (
	// ReportRelationshipType Amended With
	ReportRelationshipTypeAmendedWith = Code{Value: ptr.To("amendedWith")}
	// ReportRelationshipType Amends
	ReportRelationshipTypeAmends = Code{Value: ptr.To("amends")}
	// ReportRelationshipType Appended With
	ReportRelationshipTypeAppendedWith = Code{Value: ptr.To("appendedWith")}
	// ReportRelationshipType Appends
	ReportRelationshipTypeAppends = Code{Value: ptr.To("appends")}
	// ReportRelationshipType Replaced With
	ReportRelationshipTypeReplacedWith = Code{Value: ptr.To("replacedWith")}
	// ReportRelationshipType Replaces
	ReportRelationshipTypeReplaces = Code{Value: ptr.To("replaces")}
	// ReportRelationshipType Transformed With
	ReportRelationshipTypeTransformedWith = Code{Value: ptr.To("transformedWith")}
	// ReportRelationshipType Transforms
	ReportRelationshipTypeTransforms = Code{Value: ptr.To("transforms")}
)

var (
	// RequestIntent Directive
	RequestIntentDirective = Code{Value: ptr.To("directive")}
	// RequestIntent Option
	RequestIntentOption = Code{Value: ptr.To("option")}
	// RequestIntent Order
	RequestIntentOrder = Code{Value: ptr.To("order")}
	// RequestIntent Plan
	RequestIntentPlan = Code{Value: ptr.To("plan")}
	// RequestIntent Proposal
	RequestIntentProposal = Code{Value: ptr.To("proposal")}
)

var (
	// RequestPriority ASAP
	RequestPriorityAsap = Code{Value: ptr.To("asap")}
	// RequestPriority Routine
	RequestPriorityRoutine = Code{Value: ptr.To("routine")}
	// RequestPriority STAT
	RequestPriorityStat = Code{Value: ptr.To("stat")}
	// RequestPriority Urgent
	RequestPriorityUrgent = Code{Value: ptr.To("urgent")}
)

var (
	// RequestResourceTypes Base
	RequestResourceTypesBase = Code{Value: ptr.To("Base")}
)

var (
	// RequestStatus Active
	RequestStatusActive = Code{Value: ptr.To("active")}
	// RequestStatus Completed
	RequestStatusCompleted = Code{Value: ptr.To("completed")}
	// RequestStatus Draft
	RequestStatusDraft = Code{Value: ptr.To("draft")}
	// RequestStatus Entered in Error
	RequestStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// RequestStatus On Hold
	RequestStatusOnHold = Code{Value: ptr.To("on-hold")}
	// RequestStatus Revoked
	RequestStatusRevoked = Code{Value: ptr.To("revoked")}
	// RequestStatus Unknown
	RequestStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ResourceType Base
	ResourceTypeBase = Code{Value: ptr.To("Base")}
)

var (
	// ResourceVersionPolicy No VersionId Support
	ResourceVersionPolicyNoVersion = Code{Value: ptr.To("no-version")}
	// ResourceVersionPolicy Versioned
	ResourceVersionPolicyVersioned = Code{Value: ptr.To("versioned")}
	// ResourceVersionPolicy VersionId tracked fully
	ResourceVersionPolicyVersionedUpdate = Code{Value: ptr.To("versioned-update")}
)

var (
	// ResponseType Fatal Error
	ResponseTypeFatalError = Code{Value: ptr.To("fatal-error")}
	// ResponseType OK
	ResponseTypeOk = Code{Value: ptr.To("ok")}
	// ResponseType Transient Error
	ResponseTypeTransientError = Code{Value: ptr.To("transient-error")}
)

var (
	// RestfulCapabilityMode Client
	RestfulCapabilityModeClient = Code{Value: ptr.To("client")}
	// RestfulCapabilityMode Server
	RestfulCapabilityModeServer = Code{Value: ptr.To("server")}
)

var (
	// SPDXLicense BSD Zero Clause License
	Spdxlicense0Bsd = Code{Value: ptr.To("0BSD")}
	// SPDXLicense Attribution Assurance License
	SpdxlicenseAal = Code{Value: ptr.To("AAL")}
	// SPDXLicense Abstyles License
	SpdxlicenseAbstyles = Code{Value: ptr.To("Abstyles")}
	// SPDXLicense Adobe Systems Incorporated Source Code License Agreement
	SpdxlicenseAdobe2006 = Code{Value: ptr.To("Adobe-2006")}
	// SPDXLicense Adobe Glyph List License
	SpdxlicenseAdobeGlyph = Code{Value: ptr.To("Adobe-Glyph")}
	// SPDXLicense Amazon Digital Services License
	SpdxlicenseAdsl = Code{Value: ptr.To("ADSL")}
	// SPDXLicense Academic Free License v1.1
	SpdxlicenseAfl11 = Code{Value: ptr.To("AFL-1.1")}
	// SPDXLicense Academic Free License v1.2
	SpdxlicenseAfl12 = Code{Value: ptr.To("AFL-1.2")}
	// SPDXLicense Academic Free License v2.0
	SpdxlicenseAfl20 = Code{Value: ptr.To("AFL-2.0")}
	// SPDXLicense Academic Free License v2.1
	SpdxlicenseAfl21 = Code{Value: ptr.To("AFL-2.1")}
	// SPDXLicense Academic Free License v3.0
	SpdxlicenseAfl30 = Code{Value: ptr.To("AFL-3.0")}
	// SPDXLicense Afmparse License
	SpdxlicenseAfmparse = Code{Value: ptr.To("Afmparse")}
	// SPDXLicense Affero General Public License v1.0 only
	SpdxlicenseAgpl10Only = Code{Value: ptr.To("AGPL-1.0-only")}
	// SPDXLicense Affero General Public License v1.0 or later
	SpdxlicenseAgpl10OrLater = Code{Value: ptr.To("AGPL-1.0-or-later")}
	// SPDXLicense GNU Affero General Public License v3.0 only
	SpdxlicenseAgpl30Only = Code{Value: ptr.To("AGPL-3.0-only")}
	// SPDXLicense GNU Affero General Public License v3.0 or later
	SpdxlicenseAgpl30OrLater = Code{Value: ptr.To("AGPL-3.0-or-later")}
	// SPDXLicense Aladdin Free Public License
	SpdxlicenseAladdin = Code{Value: ptr.To("Aladdin")}
	// SPDXLicense AMD's plpa_map.c License
	SpdxlicenseAmdplpa = Code{Value: ptr.To("AMDPLPA")}
	// SPDXLicense Apple MIT License
	SpdxlicenseAml = Code{Value: ptr.To("AML")}
	// SPDXLicense Academy of Motion Picture Arts and Sciences BSD
	SpdxlicenseAmpas = Code{Value: ptr.To("AMPAS")}
	// SPDXLicense ANTLR Software Rights Notice
	SpdxlicenseAntlrPd = Code{Value: ptr.To("ANTLR-PD")}
	// SPDXLicense Apache License 1.0
	SpdxlicenseApache10 = Code{Value: ptr.To("Apache-1.0")}
	// SPDXLicense Apache License 1.1
	SpdxlicenseApache11 = Code{Value: ptr.To("Apache-1.1")}
	// SPDXLicense Apache License 2.0
	SpdxlicenseApache20 = Code{Value: ptr.To("Apache-2.0")}
	// SPDXLicense Adobe Postscript AFM License
	SpdxlicenseApafml = Code{Value: ptr.To("APAFML")}
	// SPDXLicense Adaptive Public License 1.0
	SpdxlicenseApl10 = Code{Value: ptr.To("APL-1.0")}
	// SPDXLicense Apple Public Source License 1.0
	SpdxlicenseApsl10 = Code{Value: ptr.To("APSL-1.0")}
	// SPDXLicense Apple Public Source License 1.1
	SpdxlicenseApsl11 = Code{Value: ptr.To("APSL-1.1")}
	// SPDXLicense Apple Public Source License 1.2
	SpdxlicenseApsl12 = Code{Value: ptr.To("APSL-1.2")}
	// SPDXLicense Apple Public Source License 2.0
	SpdxlicenseApsl20 = Code{Value: ptr.To("APSL-2.0")}
	// SPDXLicense Artistic License 1.0
	SpdxlicenseArtistic10 = Code{Value: ptr.To("Artistic-1.0")}
	// SPDXLicense Artistic License 1.0 w/clause 8
	SpdxlicenseArtistic10Cl8 = Code{Value: ptr.To("Artistic-1.0-cl8")}
	// SPDXLicense Artistic License 1.0 (Perl)
	SpdxlicenseArtistic10Perl = Code{Value: ptr.To("Artistic-1.0-Perl")}
	// SPDXLicense Artistic License 2.0
	SpdxlicenseArtistic20 = Code{Value: ptr.To("Artistic-2.0")}
	// SPDXLicense Bahyph License
	SpdxlicenseBahyph = Code{Value: ptr.To("Bahyph")}
	// SPDXLicense Barr License
	SpdxlicenseBarr = Code{Value: ptr.To("Barr")}
	// SPDXLicense Beerware License
	SpdxlicenseBeerware = Code{Value: ptr.To("Beerware")}
	// SPDXLicense BitTorrent Open Source License v1.0
	SpdxlicenseBitTorrent10 = Code{Value: ptr.To("BitTorrent-1.0")}
	// SPDXLicense BitTorrent Open Source License v1.1
	SpdxlicenseBitTorrent11 = Code{Value: ptr.To("BitTorrent-1.1")}
	// SPDXLicense Borceux license
	SpdxlicenseBorceux = Code{Value: ptr.To("Borceux")}
	// SPDXLicense BSD 1-Clause License
	SpdxlicenseBsd1Clause = Code{Value: ptr.To("BSD-1-Clause")}
	// SPDXLicense BSD 2-Clause "Simplified" License
	SpdxlicenseBsd2Clause = Code{Value: ptr.To("BSD-2-Clause")}
	// SPDXLicense BSD 2-Clause FreeBSD License
	SpdxlicenseBsd2ClauseFreeBsd = Code{Value: ptr.To("BSD-2-Clause-FreeBSD")}
	// SPDXLicense BSD 2-Clause NetBSD License
	SpdxlicenseBsd2ClauseNetBsd = Code{Value: ptr.To("BSD-2-Clause-NetBSD")}
	// SPDXLicense BSD-2-Clause Plus Patent License
	SpdxlicenseBsd2ClausePatent = Code{Value: ptr.To("BSD-2-Clause-Patent")}
	// SPDXLicense BSD 3-Clause "New" or "Revised" License
	SpdxlicenseBsd3Clause = Code{Value: ptr.To("BSD-3-Clause")}
	// SPDXLicense BSD with attribution
	SpdxlicenseBsd3ClauseAttribution = Code{Value: ptr.To("BSD-3-Clause-Attribution")}
	// SPDXLicense BSD 3-Clause Clear License
	SpdxlicenseBsd3ClauseClear = Code{Value: ptr.To("BSD-3-Clause-Clear")}
	// SPDXLicense Lawrence Berkeley National Labs BSD variant license
	SpdxlicenseBsd3ClauseLbnl = Code{Value: ptr.To("BSD-3-Clause-LBNL")}
	// SPDXLicense BSD 3-Clause No Nuclear License
	SpdxlicenseBsd3ClauseNoNuclearLicense = Code{Value: ptr.To("BSD-3-Clause-No-Nuclear-License")}
	// SPDXLicense BSD 3-Clause No Nuclear License 2014
	SpdxlicenseBsd3ClauseNoNuclearLicense2014 = Code{Value: ptr.To("BSD-3-Clause-No-Nuclear-License-2014")}
	// SPDXLicense BSD 3-Clause No Nuclear Warranty
	SpdxlicenseBsd3ClauseNoNuclearWarranty = Code{Value: ptr.To("BSD-3-Clause-No-Nuclear-Warranty")}
	// SPDXLicense BSD 4-Clause "Original" or "Old" License
	SpdxlicenseBsd4Clause = Code{Value: ptr.To("BSD-4-Clause")}
	// SPDXLicense BSD-4-Clause (University of California-Specific)
	SpdxlicenseBsd4ClauseUc = Code{Value: ptr.To("BSD-4-Clause-UC")}
	// SPDXLicense BSD Protection License
	SpdxlicenseBsdProtection = Code{Value: ptr.To("BSD-Protection")}
	// SPDXLicense BSD Source Code Attribution
	SpdxlicenseBsdSourceCode = Code{Value: ptr.To("BSD-Source-Code")}
	// SPDXLicense Boost Software License 1.0
	SpdxlicenseBsl10 = Code{Value: ptr.To("BSL-1.0")}
	// SPDXLicense bzip2 and libbzip2 License v1.0.5
	SpdxlicenseBzip2105 = Code{Value: ptr.To("bzip2-1.0.5")}
	// SPDXLicense bzip2 and libbzip2 License v1.0.6
	SpdxlicenseBzip2106 = Code{Value: ptr.To("bzip2-1.0.6")}
	// SPDXLicense Caldera License
	SpdxlicenseCaldera = Code{Value: ptr.To("Caldera")}
	// SPDXLicense Computer Associates Trusted Open Source License 1.1
	SpdxlicenseCatosl11 = Code{Value: ptr.To("CATOSL-1.1")}
	// SPDXLicense Creative Commons Zero v1.0 Universal
	SpdxlicenseCc010 = Code{Value: ptr.To("CC0-1.0")}
	// SPDXLicense Creative Commons Attribution 1.0 Generic
	SpdxlicenseCcBy10 = Code{Value: ptr.To("CC-BY-1.0")}
	// SPDXLicense Creative Commons Attribution 2.0 Generic
	SpdxlicenseCcBy20 = Code{Value: ptr.To("CC-BY-2.0")}
	// SPDXLicense Creative Commons Attribution 2.5 Generic
	SpdxlicenseCcBy25 = Code{Value: ptr.To("CC-BY-2.5")}
	// SPDXLicense Creative Commons Attribution 3.0 Unported
	SpdxlicenseCcBy30 = Code{Value: ptr.To("CC-BY-3.0")}
	// SPDXLicense Creative Commons Attribution 4.0 International
	SpdxlicenseCcBy40 = Code{Value: ptr.To("CC-BY-4.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 1.0 Generic
	SpdxlicenseCcByNc10 = Code{Value: ptr.To("CC-BY-NC-1.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 2.0 Generic
	SpdxlicenseCcByNc20 = Code{Value: ptr.To("CC-BY-NC-2.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 2.5 Generic
	SpdxlicenseCcByNc25 = Code{Value: ptr.To("CC-BY-NC-2.5")}
	// SPDXLicense Creative Commons Attribution Non Commercial 3.0 Unported
	SpdxlicenseCcByNc30 = Code{Value: ptr.To("CC-BY-NC-3.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 4.0 International
	SpdxlicenseCcByNc40 = Code{Value: ptr.To("CC-BY-NC-4.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 1.0 Generic
	SpdxlicenseCcByNcNd10 = Code{Value: ptr.To("CC-BY-NC-ND-1.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 2.0 Generic
	SpdxlicenseCcByNcNd20 = Code{Value: ptr.To("CC-BY-NC-ND-2.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 2.5 Generic
	SpdxlicenseCcByNcNd25 = Code{Value: ptr.To("CC-BY-NC-ND-2.5")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 3.0 Unported
	SpdxlicenseCcByNcNd30 = Code{Value: ptr.To("CC-BY-NC-ND-3.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 4.0 International
	SpdxlicenseCcByNcNd40 = Code{Value: ptr.To("CC-BY-NC-ND-4.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 1.0 Generic
	SpdxlicenseCcByNcSa10 = Code{Value: ptr.To("CC-BY-NC-SA-1.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 2.0 Generic
	SpdxlicenseCcByNcSa20 = Code{Value: ptr.To("CC-BY-NC-SA-2.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 2.5 Generic
	SpdxlicenseCcByNcSa25 = Code{Value: ptr.To("CC-BY-NC-SA-2.5")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 3.0 Unported
	SpdxlicenseCcByNcSa30 = Code{Value: ptr.To("CC-BY-NC-SA-3.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 4.0 International
	SpdxlicenseCcByNcSa40 = Code{Value: ptr.To("CC-BY-NC-SA-4.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 1.0 Generic
	SpdxlicenseCcByNd10 = Code{Value: ptr.To("CC-BY-ND-1.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 2.0 Generic
	SpdxlicenseCcByNd20 = Code{Value: ptr.To("CC-BY-ND-2.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 2.5 Generic
	SpdxlicenseCcByNd25 = Code{Value: ptr.To("CC-BY-ND-2.5")}
	// SPDXLicense Creative Commons Attribution No Derivatives 3.0 Unported
	SpdxlicenseCcByNd30 = Code{Value: ptr.To("CC-BY-ND-3.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 4.0 International
	SpdxlicenseCcByNd40 = Code{Value: ptr.To("CC-BY-ND-4.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 1.0 Generic
	SpdxlicenseCcBySa10 = Code{Value: ptr.To("CC-BY-SA-1.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 2.0 Generic
	SpdxlicenseCcBySa20 = Code{Value: ptr.To("CC-BY-SA-2.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 2.5 Generic
	SpdxlicenseCcBySa25 = Code{Value: ptr.To("CC-BY-SA-2.5")}
	// SPDXLicense Creative Commons Attribution Share Alike 3.0 Unported
	SpdxlicenseCcBySa30 = Code{Value: ptr.To("CC-BY-SA-3.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 4.0 International
	SpdxlicenseCcBySa40 = Code{Value: ptr.To("CC-BY-SA-4.0")}
	// SPDXLicense Common Development and Distribution License 1.0
	SpdxlicenseCddl10 = Code{Value: ptr.To("CDDL-1.0")}
	// SPDXLicense Common Development and Distribution License 1.1
	SpdxlicenseCddl11 = Code{Value: ptr.To("CDDL-1.1")}
	// SPDXLicense Community Data License Agreement Permissive 1.0
	SpdxlicenseCdlaPermissive10 = Code{Value: ptr.To("CDLA-Permissive-1.0")}
	// SPDXLicense Community Data License Agreement Sharing 1.0
	SpdxlicenseCdlaSharing10 = Code{Value: ptr.To("CDLA-Sharing-1.0")}
	// SPDXLicense CeCILL Free Software License Agreement v1.0
	SpdxlicenseCecill10 = Code{Value: ptr.To("CECILL-1.0")}
	// SPDXLicense CeCILL Free Software License Agreement v1.1
	SpdxlicenseCecill11 = Code{Value: ptr.To("CECILL-1.1")}
	// SPDXLicense CeCILL Free Software License Agreement v2.0
	SpdxlicenseCecill20 = Code{Value: ptr.To("CECILL-2.0")}
	// SPDXLicense CeCILL Free Software License Agreement v2.1
	SpdxlicenseCecill21 = Code{Value: ptr.To("CECILL-2.1")}
	// SPDXLicense CeCILL-B Free Software License Agreement
	SpdxlicenseCecillB = Code{Value: ptr.To("CECILL-B")}
	// SPDXLicense CeCILL-C Free Software License Agreement
	SpdxlicenseCecillC = Code{Value: ptr.To("CECILL-C")}
	// SPDXLicense Clarified Artistic License
	SpdxlicenseClArtistic = Code{Value: ptr.To("ClArtistic")}
	// SPDXLicense CNRI Jython License
	SpdxlicenseCnriJython = Code{Value: ptr.To("CNRI-Jython")}
	// SPDXLicense CNRI Python License
	SpdxlicenseCnriPython = Code{Value: ptr.To("CNRI-Python")}
	// SPDXLicense CNRI Python Open Source GPL Compatible License Agreement
	SpdxlicenseCnriPythonGplCompatible = Code{Value: ptr.To("CNRI-Python-GPL-Compatible")}
	// SPDXLicense Condor Public License v1.1
	SpdxlicenseCondor11 = Code{Value: ptr.To("Condor-1.1")}
	// SPDXLicense Common Public Attribution License 1.0
	SpdxlicenseCpal10 = Code{Value: ptr.To("CPAL-1.0")}
	// SPDXLicense Common Public License 1.0
	SpdxlicenseCpl10 = Code{Value: ptr.To("CPL-1.0")}
	// SPDXLicense Code Project Open License 1.02
	SpdxlicenseCpol102 = Code{Value: ptr.To("CPOL-1.02")}
	// SPDXLicense Crossword License
	SpdxlicenseCrossword = Code{Value: ptr.To("Crossword")}
	// SPDXLicense CrystalStacker License
	SpdxlicenseCrystalStacker = Code{Value: ptr.To("CrystalStacker")}
	// SPDXLicense CUA Office Public License v1.0
	SpdxlicenseCuaOpl10 = Code{Value: ptr.To("CUA-OPL-1.0")}
	// SPDXLicense Cube License
	SpdxlicenseCube = Code{Value: ptr.To("Cube")}
	// SPDXLicense curl License
	SpdxlicenseCurl = Code{Value: ptr.To("curl")}
	// SPDXLicense Deutsche Freie Software Lizenz
	SpdxlicenseDFsl10 = Code{Value: ptr.To("D-FSL-1.0")}
	// SPDXLicense diffmark license
	SpdxlicenseDiffmark = Code{Value: ptr.To("diffmark")}
	// SPDXLicense DOC License
	SpdxlicenseDoc = Code{Value: ptr.To("DOC")}
	// SPDXLicense Dotseqn License
	SpdxlicenseDotseqn = Code{Value: ptr.To("Dotseqn")}
	// SPDXLicense DSDP License
	SpdxlicenseDsdp = Code{Value: ptr.To("DSDP")}
	// SPDXLicense dvipdfm License
	SpdxlicenseDvipdfm = Code{Value: ptr.To("dvipdfm")}
	// SPDXLicense eGenix.com Public License 1.1.0
	SpdxlicenseEGenix = Code{Value: ptr.To("eGenix")}
	// SPDXLicense Educational Community License v1.0
	SpdxlicenseEcl10 = Code{Value: ptr.To("ECL-1.0")}
	// SPDXLicense Educational Community License v2.0
	SpdxlicenseEcl20 = Code{Value: ptr.To("ECL-2.0")}
	// SPDXLicense Eiffel Forum License v1.0
	SpdxlicenseEfl10 = Code{Value: ptr.To("EFL-1.0")}
	// SPDXLicense Eiffel Forum License v2.0
	SpdxlicenseEfl20 = Code{Value: ptr.To("EFL-2.0")}
	// SPDXLicense Entessa Public License v1.0
	SpdxlicenseEntessa = Code{Value: ptr.To("Entessa")}
	// SPDXLicense Eclipse Public License 1.0
	SpdxlicenseEpl10 = Code{Value: ptr.To("EPL-1.0")}
	// SPDXLicense Eclipse Public License 2.0
	SpdxlicenseEpl20 = Code{Value: ptr.To("EPL-2.0")}
	// SPDXLicense Erlang Public License v1.1
	SpdxlicenseErlPl11 = Code{Value: ptr.To("ErlPL-1.1")}
	// SPDXLicense EU DataGrid Software License
	SpdxlicenseEudatagrid = Code{Value: ptr.To("EUDatagrid")}
	// SPDXLicense European Union Public License 1.0
	SpdxlicenseEupl10 = Code{Value: ptr.To("EUPL-1.0")}
	// SPDXLicense European Union Public License 1.1
	SpdxlicenseEupl11 = Code{Value: ptr.To("EUPL-1.1")}
	// SPDXLicense European Union Public License 1.2
	SpdxlicenseEupl12 = Code{Value: ptr.To("EUPL-1.2")}
	// SPDXLicense Eurosym License
	SpdxlicenseEurosym = Code{Value: ptr.To("Eurosym")}
	// SPDXLicense Fair License
	SpdxlicenseFair = Code{Value: ptr.To("Fair")}
	// SPDXLicense Frameworx Open License 1.0
	SpdxlicenseFrameworx10 = Code{Value: ptr.To("Frameworx-1.0")}
	// SPDXLicense FreeImage Public License v1.0
	SpdxlicenseFreeImage = Code{Value: ptr.To("FreeImage")}
	// SPDXLicense FSF All Permissive License
	SpdxlicenseFsfap = Code{Value: ptr.To("FSFAP")}
	// SPDXLicense FSF Unlimited License
	SpdxlicenseFsful = Code{Value: ptr.To("FSFUL")}
	// SPDXLicense FSF Unlimited License (with License Retention)
	SpdxlicenseFsfullr = Code{Value: ptr.To("FSFULLR")}
	// SPDXLicense Freetype Project License
	SpdxlicenseFtl = Code{Value: ptr.To("FTL")}
	// SPDXLicense gSOAP Public License v1.3b
	SpdxlicenseGSoap13B = Code{Value: ptr.To("gSOAP-1.3b")}
	// SPDXLicense GNU Free Documentation License v1.1 only
	SpdxlicenseGfdl11Only = Code{Value: ptr.To("GFDL-1.1-only")}
	// SPDXLicense GNU Free Documentation License v1.1 or later
	SpdxlicenseGfdl11OrLater = Code{Value: ptr.To("GFDL-1.1-or-later")}
	// SPDXLicense GNU Free Documentation License v1.2 only
	SpdxlicenseGfdl12Only = Code{Value: ptr.To("GFDL-1.2-only")}
	// SPDXLicense GNU Free Documentation License v1.2 or later
	SpdxlicenseGfdl12OrLater = Code{Value: ptr.To("GFDL-1.2-or-later")}
	// SPDXLicense GNU Free Documentation License v1.3 only
	SpdxlicenseGfdl13Only = Code{Value: ptr.To("GFDL-1.3-only")}
	// SPDXLicense GNU Free Documentation License v1.3 or later
	SpdxlicenseGfdl13OrLater = Code{Value: ptr.To("GFDL-1.3-or-later")}
	// SPDXLicense Giftware License
	SpdxlicenseGiftware = Code{Value: ptr.To("Giftware")}
	// SPDXLicense GL2PS License
	SpdxlicenseGl2Ps = Code{Value: ptr.To("GL2PS")}
	// SPDXLicense 3dfx Glide License
	SpdxlicenseGlide = Code{Value: ptr.To("Glide")}
	// SPDXLicense Glulxe License
	SpdxlicenseGlulxe = Code{Value: ptr.To("Glulxe")}
	// SPDXLicense gnuplot License
	SpdxlicenseGnuplot = Code{Value: ptr.To("gnuplot")}
	// SPDXLicense GNU General Public License v1.0 only
	SpdxlicenseGpl10Only = Code{Value: ptr.To("GPL-1.0-only")}
	// SPDXLicense GNU General Public License v1.0 or later
	SpdxlicenseGpl10OrLater = Code{Value: ptr.To("GPL-1.0-or-later")}
	// SPDXLicense GNU General Public License v2.0 only
	SpdxlicenseGpl20Only = Code{Value: ptr.To("GPL-2.0-only")}
	// SPDXLicense GNU General Public License v2.0 or later
	SpdxlicenseGpl20OrLater = Code{Value: ptr.To("GPL-2.0-or-later")}
	// SPDXLicense GNU General Public License v3.0 only
	SpdxlicenseGpl30Only = Code{Value: ptr.To("GPL-3.0-only")}
	// SPDXLicense GNU General Public License v3.0 or later
	SpdxlicenseGpl30OrLater = Code{Value: ptr.To("GPL-3.0-or-later")}
	// SPDXLicense Haskell Language Report License
	SpdxlicenseHaskellReport = Code{Value: ptr.To("HaskellReport")}
	// SPDXLicense Historical Permission Notice and Disclaimer
	SpdxlicenseHpnd = Code{Value: ptr.To("HPND")}
	// SPDXLicense iMatix Standard Function Library Agreement
	SpdxlicenseIMatix = Code{Value: ptr.To("iMatix")}
	// SPDXLicense IBM PowerPC Initialization and Boot Software
	SpdxlicenseIbmPibs = Code{Value: ptr.To("IBM-pibs")}
	// SPDXLicense ICU License
	SpdxlicenseIcu = Code{Value: ptr.To("ICU")}
	// SPDXLicense Independent JPEG Group License
	SpdxlicenseIjg = Code{Value: ptr.To("IJG")}
	// SPDXLicense ImageMagick License
	SpdxlicenseImageMagick = Code{Value: ptr.To("ImageMagick")}
	// SPDXLicense Imlib2 License
	SpdxlicenseImlib2 = Code{Value: ptr.To("Imlib2")}
	// SPDXLicense Info-ZIP License
	SpdxlicenseInfoZip = Code{Value: ptr.To("Info-ZIP")}
	// SPDXLicense Intel Open Source License
	SpdxlicenseIntel = Code{Value: ptr.To("Intel")}
	// SPDXLicense Intel ACPI Software License Agreement
	SpdxlicenseIntelAcpi = Code{Value: ptr.To("Intel-ACPI")}
	// SPDXLicense Interbase Public License v1.0
	SpdxlicenseInterbase10 = Code{Value: ptr.To("Interbase-1.0")}
	// SPDXLicense IPA Font License
	SpdxlicenseIpa = Code{Value: ptr.To("IPA")}
	// SPDXLicense IBM Public License v1.0
	SpdxlicenseIpl10 = Code{Value: ptr.To("IPL-1.0")}
	// SPDXLicense ISC License
	SpdxlicenseIsc = Code{Value: ptr.To("ISC")}
	// SPDXLicense JasPer License
	SpdxlicenseJasPer20 = Code{Value: ptr.To("JasPer-2.0")}
	// SPDXLicense JSON License
	SpdxlicenseJson = Code{Value: ptr.To("JSON")}
	// SPDXLicense Licence Art Libre 1.2
	SpdxlicenseLal12 = Code{Value: ptr.To("LAL-1.2")}
	// SPDXLicense Licence Art Libre 1.3
	SpdxlicenseLal13 = Code{Value: ptr.To("LAL-1.3")}
	// SPDXLicense Latex2e License
	SpdxlicenseLatex2E = Code{Value: ptr.To("Latex2e")}
	// SPDXLicense Leptonica License
	SpdxlicenseLeptonica = Code{Value: ptr.To("Leptonica")}
	// SPDXLicense GNU Library General Public License v2 only
	SpdxlicenseLgpl20Only = Code{Value: ptr.To("LGPL-2.0-only")}
	// SPDXLicense GNU Library General Public License v2 or later
	SpdxlicenseLgpl20OrLater = Code{Value: ptr.To("LGPL-2.0-or-later")}
	// SPDXLicense GNU Lesser General Public License v2.1 only
	SpdxlicenseLgpl21Only = Code{Value: ptr.To("LGPL-2.1-only")}
	// SPDXLicense GNU Lesser General Public License v2.1 or later
	SpdxlicenseLgpl21OrLater = Code{Value: ptr.To("LGPL-2.1-or-later")}
	// SPDXLicense GNU Lesser General Public License v3.0 only
	SpdxlicenseLgpl30Only = Code{Value: ptr.To("LGPL-3.0-only")}
	// SPDXLicense GNU Lesser General Public License v3.0 or later
	SpdxlicenseLgpl30OrLater = Code{Value: ptr.To("LGPL-3.0-or-later")}
	// SPDXLicense Lesser General Public License For Linguistic Resources
	SpdxlicenseLgpllr = Code{Value: ptr.To("LGPLLR")}
	// SPDXLicense Licence Libre du Québec – Permissive version 1.1
	SpdxlicenseLiLiQP11 = Code{Value: ptr.To("LiLiQ-P-1.1")}
	// SPDXLicense Licence Libre du Québec – Réciprocité version 1.1
	SpdxlicenseLiLiQR11 = Code{Value: ptr.To("LiLiQ-R-1.1")}
	// SPDXLicense Licence Libre du Québec – Réciprocité forte version 1.1
	SpdxlicenseLiLiQRplus11 = Code{Value: ptr.To("LiLiQ-Rplus-1.1")}
	// SPDXLicense libpng License
	SpdxlicenseLibpng = Code{Value: ptr.To("Libpng")}
	// SPDXLicense libtiff License
	SpdxlicenseLibtiff = Code{Value: ptr.To("libtiff")}
	// SPDXLicense Linux Kernel Variant of OpenIB.org license
	SpdxlicenseLinuxOpenIb = Code{Value: ptr.To("Linux-OpenIB")}
	// SPDXLicense Lucent Public License Version 1.0
	SpdxlicenseLpl10 = Code{Value: ptr.To("LPL-1.0")}
	// SPDXLicense Lucent Public License v1.02
	SpdxlicenseLpl102 = Code{Value: ptr.To("LPL-1.02")}
	// SPDXLicense LaTeX Project Public License v1.0
	SpdxlicenseLppl10 = Code{Value: ptr.To("LPPL-1.0")}
	// SPDXLicense LaTeX Project Public License v1.1
	SpdxlicenseLppl11 = Code{Value: ptr.To("LPPL-1.1")}
	// SPDXLicense LaTeX Project Public License v1.2
	SpdxlicenseLppl12 = Code{Value: ptr.To("LPPL-1.2")}
	// SPDXLicense LaTeX Project Public License v1.3a
	SpdxlicenseLppl13A = Code{Value: ptr.To("LPPL-1.3a")}
	// SPDXLicense LaTeX Project Public License v1.3c
	SpdxlicenseLppl13C = Code{Value: ptr.To("LPPL-1.3c")}
	// SPDXLicense MakeIndex License
	SpdxlicenseMakeIndex = Code{Value: ptr.To("MakeIndex")}
	// SPDXLicense MirOS License
	SpdxlicenseMirOs = Code{Value: ptr.To("MirOS")}
	// SPDXLicense MIT License
	SpdxlicenseMit = Code{Value: ptr.To("MIT")}
	// SPDXLicense MIT No Attribution
	SpdxlicenseMit0 = Code{Value: ptr.To("MIT-0")}
	// SPDXLicense Enlightenment License (e16)
	SpdxlicenseMitAdvertising = Code{Value: ptr.To("MIT-advertising")}
	// SPDXLicense CMU License
	SpdxlicenseMitCmu = Code{Value: ptr.To("MIT-CMU")}
	// SPDXLicense enna License
	SpdxlicenseMitEnna = Code{Value: ptr.To("MIT-enna")}
	// SPDXLicense feh License
	SpdxlicenseMitFeh = Code{Value: ptr.To("MIT-feh")}
	// SPDXLicense MIT +no-false-attribs license
	SpdxlicenseMitnfa = Code{Value: ptr.To("MITNFA")}
	// SPDXLicense Motosoto License
	SpdxlicenseMotosoto = Code{Value: ptr.To("Motosoto")}
	// SPDXLicense mpich2 License
	SpdxlicenseMpich2 = Code{Value: ptr.To("mpich2")}
	// SPDXLicense Mozilla Public License 1.0
	SpdxlicenseMpl10 = Code{Value: ptr.To("MPL-1.0")}
	// SPDXLicense Mozilla Public License 1.1
	SpdxlicenseMpl11 = Code{Value: ptr.To("MPL-1.1")}
	// SPDXLicense Mozilla Public License 2.0
	SpdxlicenseMpl20 = Code{Value: ptr.To("MPL-2.0")}
	// SPDXLicense Mozilla Public License 2.0 (no copyleft exception)
	SpdxlicenseMpl20NoCopyleftException = Code{Value: ptr.To("MPL-2.0-no-copyleft-exception")}
	// SPDXLicense Microsoft Public License
	SpdxlicenseMsPl = Code{Value: ptr.To("MS-PL")}
	// SPDXLicense Microsoft Reciprocal License
	SpdxlicenseMsRl = Code{Value: ptr.To("MS-RL")}
	// SPDXLicense Matrix Template Library License
	SpdxlicenseMtll = Code{Value: ptr.To("MTLL")}
	// SPDXLicense Multics License
	SpdxlicenseMultics = Code{Value: ptr.To("Multics")}
	// SPDXLicense Mup License
	SpdxlicenseMup = Code{Value: ptr.To("Mup")}
	// SPDXLicense NASA Open Source Agreement 1.3
	SpdxlicenseNasa13 = Code{Value: ptr.To("NASA-1.3")}
	// SPDXLicense Naumen Public License
	SpdxlicenseNaumen = Code{Value: ptr.To("Naumen")}
	// SPDXLicense Net Boolean Public License v1
	SpdxlicenseNbpl10 = Code{Value: ptr.To("NBPL-1.0")}
	// SPDXLicense University of Illinois/NCSA Open Source License
	SpdxlicenseNcsa = Code{Value: ptr.To("NCSA")}
	// SPDXLicense NetCDF license
	SpdxlicenseNetCdf = Code{Value: ptr.To("NetCDF")}
	// SPDXLicense Net-SNMP License
	SpdxlicenseNetSnmp = Code{Value: ptr.To("Net-SNMP")}
	// SPDXLicense Newsletr License
	SpdxlicenseNewsletr = Code{Value: ptr.To("Newsletr")}
	// SPDXLicense Nethack General Public License
	SpdxlicenseNgpl = Code{Value: ptr.To("NGPL")}
	// SPDXLicense Norwegian Licence for Open Government Data
	SpdxlicenseNlod10 = Code{Value: ptr.To("NLOD-1.0")}
	// SPDXLicense No Limit Public License
	SpdxlicenseNlpl = Code{Value: ptr.To("NLPL")}
	// SPDXLicense Nokia Open Source License
	SpdxlicenseNokia = Code{Value: ptr.To("Nokia")}
	// SPDXLicense Netizen Open Source License
	SpdxlicenseNosl = Code{Value: ptr.To("NOSL")}
	// SPDXLicense Not open source
	SpdxlicenseNotOpenSource = Code{Value: ptr.To("not-open-source")}
	// SPDXLicense Noweb License
	SpdxlicenseNoweb = Code{Value: ptr.To("Noweb")}
	// SPDXLicense Netscape Public License v1.0
	SpdxlicenseNpl10 = Code{Value: ptr.To("NPL-1.0")}
	// SPDXLicense Netscape Public License v1.1
	SpdxlicenseNpl11 = Code{Value: ptr.To("NPL-1.1")}
	// SPDXLicense Non-Profit Open Software License 3.0
	SpdxlicenseNposl30 = Code{Value: ptr.To("NPOSL-3.0")}
	// SPDXLicense NRL License
	SpdxlicenseNrl = Code{Value: ptr.To("NRL")}
	// SPDXLicense NTP License
	SpdxlicenseNtp = Code{Value: ptr.To("NTP")}
	// SPDXLicense Open CASCADE Technology Public License
	SpdxlicenseOcctPl = Code{Value: ptr.To("OCCT-PL")}
	// SPDXLicense OCLC Research Public License 2.0
	SpdxlicenseOclc20 = Code{Value: ptr.To("OCLC-2.0")}
	// SPDXLicense ODC Open Database License v1.0
	SpdxlicenseOdbL10 = Code{Value: ptr.To("ODbL-1.0")}
	// SPDXLicense SIL Open Font License 1.0
	SpdxlicenseOfl10 = Code{Value: ptr.To("OFL-1.0")}
	// SPDXLicense SIL Open Font License 1.1
	SpdxlicenseOfl11 = Code{Value: ptr.To("OFL-1.1")}
	// SPDXLicense Open Group Test Suite License
	SpdxlicenseOgtsl = Code{Value: ptr.To("OGTSL")}
	// SPDXLicense Open LDAP Public License v1.1
	SpdxlicenseOldap11 = Code{Value: ptr.To("OLDAP-1.1")}
	// SPDXLicense Open LDAP Public License v1.2
	SpdxlicenseOldap12 = Code{Value: ptr.To("OLDAP-1.2")}
	// SPDXLicense Open LDAP Public License v1.3
	SpdxlicenseOldap13 = Code{Value: ptr.To("OLDAP-1.3")}
	// SPDXLicense Open LDAP Public License v1.4
	SpdxlicenseOldap14 = Code{Value: ptr.To("OLDAP-1.4")}
	// SPDXLicense Open LDAP Public License v2.0 (or possibly 2.0A and 2.0B)
	SpdxlicenseOldap20 = Code{Value: ptr.To("OLDAP-2.0")}
	// SPDXLicense Open LDAP Public License v2.0.1
	SpdxlicenseOldap201 = Code{Value: ptr.To("OLDAP-2.0.1")}
	// SPDXLicense Open LDAP Public License v2.1
	SpdxlicenseOldap21 = Code{Value: ptr.To("OLDAP-2.1")}
	// SPDXLicense Open LDAP Public License v2.2
	SpdxlicenseOldap22 = Code{Value: ptr.To("OLDAP-2.2")}
	// SPDXLicense Open LDAP Public License v2.2.1
	SpdxlicenseOldap221 = Code{Value: ptr.To("OLDAP-2.2.1")}
	// SPDXLicense Open LDAP Public License 2.2.2
	SpdxlicenseOldap222 = Code{Value: ptr.To("OLDAP-2.2.2")}
	// SPDXLicense Open LDAP Public License v2.3
	SpdxlicenseOldap23 = Code{Value: ptr.To("OLDAP-2.3")}
	// SPDXLicense Open LDAP Public License v2.4
	SpdxlicenseOldap24 = Code{Value: ptr.To("OLDAP-2.4")}
	// SPDXLicense Open LDAP Public License v2.5
	SpdxlicenseOldap25 = Code{Value: ptr.To("OLDAP-2.5")}
	// SPDXLicense Open LDAP Public License v2.6
	SpdxlicenseOldap26 = Code{Value: ptr.To("OLDAP-2.6")}
	// SPDXLicense Open LDAP Public License v2.7
	SpdxlicenseOldap27 = Code{Value: ptr.To("OLDAP-2.7")}
	// SPDXLicense Open LDAP Public License v2.8
	SpdxlicenseOldap28 = Code{Value: ptr.To("OLDAP-2.8")}
	// SPDXLicense Open Market License
	SpdxlicenseOml = Code{Value: ptr.To("OML")}
	// SPDXLicense OpenSSL License
	SpdxlicenseOpenSsl = Code{Value: ptr.To("OpenSSL")}
	// SPDXLicense Open Public License v1.0
	SpdxlicenseOpl10 = Code{Value: ptr.To("OPL-1.0")}
	// SPDXLicense OSET Public License version 2.1
	SpdxlicenseOsetPl21 = Code{Value: ptr.To("OSET-PL-2.1")}
	// SPDXLicense Open Software License 1.0
	SpdxlicenseOsl10 = Code{Value: ptr.To("OSL-1.0")}
	// SPDXLicense Open Software License 1.1
	SpdxlicenseOsl11 = Code{Value: ptr.To("OSL-1.1")}
	// SPDXLicense Open Software License 2.0
	SpdxlicenseOsl20 = Code{Value: ptr.To("OSL-2.0")}
	// SPDXLicense Open Software License 2.1
	SpdxlicenseOsl21 = Code{Value: ptr.To("OSL-2.1")}
	// SPDXLicense Open Software License 3.0
	SpdxlicenseOsl30 = Code{Value: ptr.To("OSL-3.0")}
	// SPDXLicense ODC Public Domain Dedication & License 1.0
	SpdxlicensePddl10 = Code{Value: ptr.To("PDDL-1.0")}
	// SPDXLicense PHP License v3.0
	SpdxlicensePhp30 = Code{Value: ptr.To("PHP-3.0")}
	// SPDXLicense PHP License v3.01
	SpdxlicensePhp301 = Code{Value: ptr.To("PHP-3.01")}
	// SPDXLicense Plexus Classworlds License
	SpdxlicensePlexus = Code{Value: ptr.To("Plexus")}
	// SPDXLicense PostgreSQL License
	SpdxlicensePostgreSql = Code{Value: ptr.To("PostgreSQL")}
	// SPDXLicense psfrag License
	SpdxlicensePsfrag = Code{Value: ptr.To("psfrag")}
	// SPDXLicense psutils License
	SpdxlicensePsutils = Code{Value: ptr.To("psutils")}
	// SPDXLicense Python License 2.0
	SpdxlicensePython20 = Code{Value: ptr.To("Python-2.0")}
	// SPDXLicense Qhull License
	SpdxlicenseQhull = Code{Value: ptr.To("Qhull")}
	// SPDXLicense Q Public License 1.0
	SpdxlicenseQpl10 = Code{Value: ptr.To("QPL-1.0")}
	// SPDXLicense Rdisc License
	SpdxlicenseRdisc = Code{Value: ptr.To("Rdisc")}
	// SPDXLicense Red Hat eCos Public License v1.1
	SpdxlicenseRheCos11 = Code{Value: ptr.To("RHeCos-1.1")}
	// SPDXLicense Reciprocal Public License 1.1
	SpdxlicenseRpl11 = Code{Value: ptr.To("RPL-1.1")}
	// SPDXLicense Reciprocal Public License 1.5
	SpdxlicenseRpl15 = Code{Value: ptr.To("RPL-1.5")}
	// SPDXLicense RealNetworks Public Source License v1.0
	SpdxlicenseRpsl10 = Code{Value: ptr.To("RPSL-1.0")}
	// SPDXLicense RSA Message-Digest License
	SpdxlicenseRsaMd = Code{Value: ptr.To("RSA-MD")}
	// SPDXLicense Ricoh Source Code Public License
	SpdxlicenseRscpl = Code{Value: ptr.To("RSCPL")}
	// SPDXLicense Ruby License
	SpdxlicenseRuby = Code{Value: ptr.To("Ruby")}
	// SPDXLicense Sax Public Domain Notice
	SpdxlicenseSaxPd = Code{Value: ptr.To("SAX-PD")}
	// SPDXLicense Saxpath License
	SpdxlicenseSaxpath = Code{Value: ptr.To("Saxpath")}
	// SPDXLicense SCEA Shared Source License
	SpdxlicenseScea = Code{Value: ptr.To("SCEA")}
	// SPDXLicense Sendmail License
	SpdxlicenseSendmail = Code{Value: ptr.To("Sendmail")}
	// SPDXLicense SGI Free Software License B v1.0
	SpdxlicenseSgiB10 = Code{Value: ptr.To("SGI-B-1.0")}
	// SPDXLicense SGI Free Software License B v1.1
	SpdxlicenseSgiB11 = Code{Value: ptr.To("SGI-B-1.1")}
	// SPDXLicense SGI Free Software License B v2.0
	SpdxlicenseSgiB20 = Code{Value: ptr.To("SGI-B-2.0")}
	// SPDXLicense Simple Public License 2.0
	SpdxlicenseSimPl20 = Code{Value: ptr.To("SimPL-2.0")}
	// SPDXLicense Sun Industry Standards Source License v1.1
	SpdxlicenseSissl = Code{Value: ptr.To("SISSL")}
	// SPDXLicense Sun Industry Standards Source License v1.2
	SpdxlicenseSissl12 = Code{Value: ptr.To("SISSL-1.2")}
	// SPDXLicense Sleepycat License
	SpdxlicenseSleepycat = Code{Value: ptr.To("Sleepycat")}
	// SPDXLicense Standard ML of New Jersey License
	SpdxlicenseSmlnj = Code{Value: ptr.To("SMLNJ")}
	// SPDXLicense Secure Messaging Protocol Public License
	SpdxlicenseSmppl = Code{Value: ptr.To("SMPPL")}
	// SPDXLicense SNIA Public License 1.1
	SpdxlicenseSnia = Code{Value: ptr.To("SNIA")}
	// SPDXLicense Spencer License 86
	SpdxlicenseSpencer86 = Code{Value: ptr.To("Spencer-86")}
	// SPDXLicense Spencer License 94
	SpdxlicenseSpencer94 = Code{Value: ptr.To("Spencer-94")}
	// SPDXLicense Spencer License 99
	SpdxlicenseSpencer99 = Code{Value: ptr.To("Spencer-99")}
	// SPDXLicense Sun Public License v1.0
	SpdxlicenseSpl10 = Code{Value: ptr.To("SPL-1.0")}
	// SPDXLicense SugarCRM Public License v1.1.3
	SpdxlicenseSugarCrm113 = Code{Value: ptr.To("SugarCRM-1.1.3")}
	// SPDXLicense Scheme Widget Library (SWL) Software License Agreement
	SpdxlicenseSwl = Code{Value: ptr.To("SWL")}
	// SPDXLicense TCL/TK License
	SpdxlicenseTcl = Code{Value: ptr.To("TCL")}
	// SPDXLicense TCP Wrappers License
	SpdxlicenseTcpWrappers = Code{Value: ptr.To("TCP-wrappers")}
	// SPDXLicense TMate Open Source License
	SpdxlicenseTmate = Code{Value: ptr.To("TMate")}
	// SPDXLicense TORQUE v2.5+ Software License v1.1
	SpdxlicenseTorque11 = Code{Value: ptr.To("TORQUE-1.1")}
	// SPDXLicense Trusster Open Source License
	SpdxlicenseTosl = Code{Value: ptr.To("TOSL")}
	// SPDXLicense Unicode License Agreement - Data Files and Software (2015)
	SpdxlicenseUnicodeDfs2015 = Code{Value: ptr.To("Unicode-DFS-2015")}
	// SPDXLicense Unicode License Agreement - Data Files and Software (2016)
	SpdxlicenseUnicodeDfs2016 = Code{Value: ptr.To("Unicode-DFS-2016")}
	// SPDXLicense Unicode Terms of Use
	SpdxlicenseUnicodeTou = Code{Value: ptr.To("Unicode-TOU")}
	// SPDXLicense The Unlicense
	SpdxlicenseUnlicense = Code{Value: ptr.To("Unlicense")}
	// SPDXLicense Universal Permissive License v1.0
	SpdxlicenseUpl10 = Code{Value: ptr.To("UPL-1.0")}
	// SPDXLicense Vim License
	SpdxlicenseVim = Code{Value: ptr.To("Vim")}
	// SPDXLicense VOSTROM Public License for Open Source
	SpdxlicenseVostrom = Code{Value: ptr.To("VOSTROM")}
	// SPDXLicense Vovida Software License v1.0
	SpdxlicenseVsl10 = Code{Value: ptr.To("VSL-1.0")}
	// SPDXLicense W3C Software Notice and License (2002-12-31)
	SpdxlicenseW3C = Code{Value: ptr.To("W3C")}
	// SPDXLicense W3C Software Notice and License (1998-07-20)
	SpdxlicenseW3C19980720 = Code{Value: ptr.To("W3C-19980720")}
	// SPDXLicense W3C Software Notice and Document License (2015-05-13)
	SpdxlicenseW3C20150513 = Code{Value: ptr.To("W3C-20150513")}
	// SPDXLicense Sybase Open Watcom Public License 1.0
	SpdxlicenseWatcom10 = Code{Value: ptr.To("Watcom-1.0")}
	// SPDXLicense Wsuipa License
	SpdxlicenseWsuipa = Code{Value: ptr.To("Wsuipa")}
	// SPDXLicense Do What The F*ck You Want To Public License
	SpdxlicenseWtfpl = Code{Value: ptr.To("WTFPL")}
	// SPDXLicense X11 License
	SpdxlicenseX11 = Code{Value: ptr.To("X11")}
	// SPDXLicense Xerox License
	SpdxlicenseXerox = Code{Value: ptr.To("Xerox")}
	// SPDXLicense XFree86 License 1.1
	SpdxlicenseXfree8611 = Code{Value: ptr.To("XFree86-1.1")}
	// SPDXLicense xinetd License
	SpdxlicenseXinetd = Code{Value: ptr.To("xinetd")}
	// SPDXLicense X.Net License
	SpdxlicenseXnet = Code{Value: ptr.To("Xnet")}
	// SPDXLicense XPP License
	SpdxlicenseXpp = Code{Value: ptr.To("xpp")}
	// SPDXLicense XSkat License
	SpdxlicenseXskat = Code{Value: ptr.To("XSkat")}
	// SPDXLicense Yahoo! Public License v1.0
	SpdxlicenseYpl10 = Code{Value: ptr.To("YPL-1.0")}
	// SPDXLicense Yahoo! Public License v1.1
	SpdxlicenseYpl11 = Code{Value: ptr.To("YPL-1.1")}
	// SPDXLicense Zed License
	SpdxlicenseZed = Code{Value: ptr.To("Zed")}
	// SPDXLicense Zend License v2.0
	SpdxlicenseZend20 = Code{Value: ptr.To("Zend-2.0")}
	// SPDXLicense Zimbra Public License v1.3
	SpdxlicenseZimbra13 = Code{Value: ptr.To("Zimbra-1.3")}
	// SPDXLicense Zimbra Public License v1.4
	SpdxlicenseZimbra14 = Code{Value: ptr.To("Zimbra-1.4")}
	// SPDXLicense zlib License
	SpdxlicenseZlib = Code{Value: ptr.To("Zlib")}
	// SPDXLicense zlib/libpng License with Acknowledgement
	SpdxlicenseZlibAcknowledgement = Code{Value: ptr.To("zlib-acknowledgement")}
	// SPDXLicense Zope Public License 1.1
	SpdxlicenseZpl11 = Code{Value: ptr.To("ZPL-1.1")}
	// SPDXLicense Zope Public License 2.0
	SpdxlicenseZpl20 = Code{Value: ptr.To("ZPL-2.0")}
	// SPDXLicense Zope Public License 2.1
	SpdxlicenseZpl21 = Code{Value: ptr.To("ZPL-2.1")}
)

var (
	// SearchComparator Approximately
	SearchComparatorAp = Code{Value: ptr.To("ap")}
	// SearchComparator Ends Before
	SearchComparatorEb = Code{Value: ptr.To("eb")}
	// SearchComparator Equals
	SearchComparatorEq = Code{Value: ptr.To("eq")}
	// SearchComparator Greater or Equals
	SearchComparatorGe = Code{Value: ptr.To("ge")}
	// SearchComparator Greater Than
	SearchComparatorGt = Code{Value: ptr.To("gt")}
	// SearchComparator Less of Equal
	SearchComparatorLe = Code{Value: ptr.To("le")}
	// SearchComparator Less Than
	SearchComparatorLt = Code{Value: ptr.To("lt")}
	// SearchComparator Not Equals
	SearchComparatorNe = Code{Value: ptr.To("ne")}
	// SearchComparator Starts After
	SearchComparatorSa = Code{Value: ptr.To("sa")}
)

var (
	// SearchEntryMode Include
	SearchEntryModeInclude = Code{Value: ptr.To("include")}
	// SearchEntryMode Match
	SearchEntryModeMatch = Code{Value: ptr.To("match")}
	// SearchEntryMode Outcome
	SearchEntryModeOutcome = Code{Value: ptr.To("outcome")}
)

var (
	// SearchModifierCode Above
	SearchModifierCodeAbove = Code{Value: ptr.To("above")}
	// SearchModifierCode Below
	SearchModifierCodeBelow = Code{Value: ptr.To("below")}
	// SearchModifierCode Code Text
	SearchModifierCodeCodeText = Code{Value: ptr.To("code-text")}
	// SearchModifierCode Contains
	SearchModifierCodeContains = Code{Value: ptr.To("contains")}
	// SearchModifierCode Exact
	SearchModifierCodeExact = Code{Value: ptr.To("exact")}
	// SearchModifierCode Identifier
	SearchModifierCodeIdentifier = Code{Value: ptr.To("identifier")}
	// SearchModifierCode In
	SearchModifierCodeIn = Code{Value: ptr.To("in")}
	// SearchModifierCode Iterate
	SearchModifierCodeIterate = Code{Value: ptr.To("iterate")}
	// SearchModifierCode Missing
	SearchModifierCodeMissing = Code{Value: ptr.To("missing")}
	// SearchModifierCode Not
	SearchModifierCodeNot = Code{Value: ptr.To("not")}
	// SearchModifierCode Not In
	SearchModifierCodeNotIn = Code{Value: ptr.To("not-in")}
	// SearchModifierCode Of Type
	SearchModifierCodeOfType = Code{Value: ptr.To("of-type")}
	// SearchModifierCode Text
	SearchModifierCodeText = Code{Value: ptr.To("text")}
	// SearchModifierCode Text Advanced
	SearchModifierCodeTextAdvanced = Code{Value: ptr.To("text-advanced")}
	// SearchModifierCode Type
	SearchModifierCodeType = Code{Value: ptr.To("type")}
)

var (
	// SearchParamType Composite
	SearchParamTypeComposite = Code{Value: ptr.To("composite")}
	// SearchParamType Date/DateTime
	SearchParamTypeDate = Code{Value: ptr.To("date")}
	// SearchParamType Number
	SearchParamTypeNumber = Code{Value: ptr.To("number")}
	// SearchParamType Quantity
	SearchParamTypeQuantity = Code{Value: ptr.To("quantity")}
	// SearchParamType Reference
	SearchParamTypeReference = Code{Value: ptr.To("reference")}
	// SearchParamType Special
	SearchParamTypeSpecial = Code{Value: ptr.To("special")}
	// SearchParamType String
	SearchParamTypeString = Code{Value: ptr.To("string")}
	// SearchParamType Token
	SearchParamTypeToken = Code{Value: ptr.To("token")}
	// SearchParamType URI
	SearchParamTypeUri = Code{Value: ptr.To("uri")}
)

var (
	// SearchProcessingModeType Normal
	SearchProcessingModeTypeNormal = Code{Value: ptr.To("normal")}
	// SearchProcessingModeType Other
	SearchProcessingModeTypeOther = Code{Value: ptr.To("other")}
	// SearchProcessingModeType Phonetic
	SearchProcessingModeTypePhonetic = Code{Value: ptr.To("phonetic")}
)

var (
	// SequenceType AA Sequence
	SequenceTypeAa = Code{Value: ptr.To("aa")}
	// SequenceType DNA Sequence
	SequenceTypeDna = Code{Value: ptr.To("dna")}
	// SequenceType RNA Sequence
	SequenceTypeRna = Code{Value: ptr.To("rna")}
)

var (
	// SlicingRules Closed
	SlicingRulesClosed = Code{Value: ptr.To("closed")}
	// SlicingRules Open
	SlicingRulesOpen = Code{Value: ptr.To("open")}
	// SlicingRules Open at End
	SlicingRulesOpenAtEnd = Code{Value: ptr.To("openAtEnd")}
)

var (
	// SlotStatus Busy
	SlotStatusBusy = Code{Value: ptr.To("busy")}
	// SlotStatus Busy (Tentative)
	SlotStatusBusyTentative = Code{Value: ptr.To("busy-tentative")}
	// SlotStatus Busy (Unavailable)
	SlotStatusBusyUnavailable = Code{Value: ptr.To("busy-unavailable")}
	// SlotStatus Entered in error
	SlotStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SlotStatus Free
	SlotStatusFree = Code{Value: ptr.To("free")}
)

var (
	// SortDirection Ascending
	SortDirectionAscending = Code{Value: ptr.To("ascending")}
	// SortDirection Descending
	SortDirectionDescending = Code{Value: ptr.To("descending")}
)

var (
	// SpecimenCombined Grouped
	SpecimenCombinedGrouped = Code{Value: ptr.To("grouped")}
	// SpecimenCombined Pooled
	SpecimenCombinedPooled = Code{Value: ptr.To("pooled")}
)

var (
	// SpecimenContainedPreference Alternate
	SpecimenContainedPreferenceAlternate = Code{Value: ptr.To("alternate")}
	// SpecimenContainedPreference Preferred
	SpecimenContainedPreferencePreferred = Code{Value: ptr.To("preferred")}
)

var (
	// SpecimenStatus Available
	SpecimenStatusAvailable = Code{Value: ptr.To("available")}
	// SpecimenStatus Entered in Error
	SpecimenStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SpecimenStatus Unavailable
	SpecimenStatusUnavailable = Code{Value: ptr.To("unavailable")}
	// SpecimenStatus Unsatisfactory
	SpecimenStatusUnsatisfactory = Code{Value: ptr.To("unsatisfactory")}
)

var (
	// StrandType Crick strand of starting sequence
	StrandTypeCrick = Code{Value: ptr.To("crick")}
	// StrandType Watson strand of starting sequence
	StrandTypeWatson = Code{Value: ptr.To("watson")}
)

var (
	// StructureDefinitionKind Complex Data Type
	StructureDefinitionKindComplexType = Code{Value: ptr.To("complex-type")}
	// StructureDefinitionKind Logical
	StructureDefinitionKindLogical = Code{Value: ptr.To("logical")}
	// StructureDefinitionKind Primitive Data Type
	StructureDefinitionKindPrimitiveType = Code{Value: ptr.To("primitive-type")}
	// StructureDefinitionKind Resource
	StructureDefinitionKindResource = Code{Value: ptr.To("resource")}
)

var (
	// StructureMapGroupTypeMode Default for type + combination
	StructureMapGroupTypeModeTypeAndTypes = Code{Value: ptr.To("type-and-types")}
	// StructureMapGroupTypeMode Default for Type Combination
	StructureMapGroupTypeModeTypes = Code{Value: ptr.To("types")}
)

var (
	// StructureMapInputMode Source Instance
	StructureMapInputModeSource = Code{Value: ptr.To("source")}
	// StructureMapInputMode Target Instance
	StructureMapInputModeTarget = Code{Value: ptr.To("target")}
)

var (
	// StructureMapModelMode Produced Structure Definition
	StructureMapModelModeProduced = Code{Value: ptr.To("produced")}
	// StructureMapModelMode Queried Structure Definition
	StructureMapModelModeQueried = Code{Value: ptr.To("queried")}
	// StructureMapModelMode Source Structure Definition
	StructureMapModelModeSource = Code{Value: ptr.To("source")}
	// StructureMapModelMode Target Structure Definition
	StructureMapModelModeTarget = Code{Value: ptr.To("target")}
)

var (
	// StructureMapSourceListMode First
	StructureMapSourceListModeFirst = Code{Value: ptr.To("first")}
	// StructureMapSourceListMode Last
	StructureMapSourceListModeLast = Code{Value: ptr.To("last")}
	// StructureMapSourceListMode All but the first
	StructureMapSourceListModeNotFirst = Code{Value: ptr.To("not_first")}
	// StructureMapSourceListMode All but the last
	StructureMapSourceListModeNotLast = Code{Value: ptr.To("not_last")}
	// StructureMapSourceListMode Enforce only one
	StructureMapSourceListModeOnlyOne = Code{Value: ptr.To("only_one")}
)

var (
	// StructureMapTargetListMode First
	StructureMapTargetListModeFirst = Code{Value: ptr.To("first")}
	// StructureMapTargetListMode Last
	StructureMapTargetListModeLast = Code{Value: ptr.To("last")}
	// StructureMapTargetListMode Share
	StructureMapTargetListModeShare = Code{Value: ptr.To("share")}
	// StructureMapTargetListMode single
	StructureMapTargetListModeSingle = Code{Value: ptr.To("single")}
)

var (
	// StructureMapTransform append
	StructureMapTransformAppend = Code{Value: ptr.To("append")}
	// StructureMapTransform c
	StructureMapTransformC = Code{Value: ptr.To("c")}
	// StructureMapTransform cast
	StructureMapTransformCast = Code{Value: ptr.To("cast")}
	// StructureMapTransform cc
	StructureMapTransformCc = Code{Value: ptr.To("cc")}
	// StructureMapTransform copy
	StructureMapTransformCopy = Code{Value: ptr.To("copy")}
	// StructureMapTransform cp
	StructureMapTransformCp = Code{Value: ptr.To("cp")}
	// StructureMapTransform create
	StructureMapTransformCreate = Code{Value: ptr.To("create")}
	// StructureMapTransform dateOp
	StructureMapTransformDateOp = Code{Value: ptr.To("dateOp")}
	// StructureMapTransform escape
	StructureMapTransformEscape = Code{Value: ptr.To("escape")}
	// StructureMapTransform evaluate
	StructureMapTransformEvaluate = Code{Value: ptr.To("evaluate")}
	// StructureMapTransform id
	StructureMapTransformId = Code{Value: ptr.To("id")}
	// StructureMapTransform pointer
	StructureMapTransformPointer = Code{Value: ptr.To("pointer")}
	// StructureMapTransform qty
	StructureMapTransformQty = Code{Value: ptr.To("qty")}
	// StructureMapTransform reference
	StructureMapTransformReference = Code{Value: ptr.To("reference")}
	// StructureMapTransform translate
	StructureMapTransformTranslate = Code{Value: ptr.To("translate")}
	// StructureMapTransform truncate
	StructureMapTransformTruncate = Code{Value: ptr.To("truncate")}
	// StructureMapTransform uuid
	StructureMapTransformUuid = Code{Value: ptr.To("uuid")}
)

var (
	// SubmitDataUpdateType Incremental
	SubmitDataUpdateTypeIncremental = Code{Value: ptr.To("incremental")}
	// SubmitDataUpdateType Snapshot
	SubmitDataUpdateTypeSnapshot = Code{Value: ptr.To("snapshot")}
)

var (
	// SubscriptionNotificationType Event Notification
	SubscriptionNotificationTypeEventNotification = Code{Value: ptr.To("event-notification")}
	// SubscriptionNotificationType Handshake
	SubscriptionNotificationTypeHandshake = Code{Value: ptr.To("handshake")}
	// SubscriptionNotificationType Heartbeat
	SubscriptionNotificationTypeHeartbeat = Code{Value: ptr.To("heartbeat")}
	// SubscriptionNotificationType Query Event
	SubscriptionNotificationTypeQueryEvent = Code{Value: ptr.To("query-event")}
	// SubscriptionNotificationType Query Status
	SubscriptionNotificationTypeQueryStatus = Code{Value: ptr.To("query-status")}
)

var (
	// SubscriptionPayloadContent Empty
	SubscriptionPayloadContentEmpty = Code{Value: ptr.To("empty")}
	// SubscriptionPayloadContent Full-resource
	SubscriptionPayloadContentFullResource = Code{Value: ptr.To("full-resource")}
	// SubscriptionPayloadContent Id-only
	SubscriptionPayloadContentIdOnly = Code{Value: ptr.To("id-only")}
)

var (
	// SubscriptionStatusCodes Active
	SubscriptionStatusCodesActive = Code{Value: ptr.To("active")}
	// SubscriptionStatusCodes Entered in Error
	SubscriptionStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SubscriptionStatusCodes Error
	SubscriptionStatusCodesError = Code{Value: ptr.To("error")}
	// SubscriptionStatusCodes Off
	SubscriptionStatusCodesOff = Code{Value: ptr.To("off")}
	// SubscriptionStatusCodes Requested
	SubscriptionStatusCodesRequested = Code{Value: ptr.To("requested")}
)

var (
	// SupplyDeliveryStatus Abandoned
	SupplyDeliveryStatusAbandoned = Code{Value: ptr.To("abandoned")}
	// SupplyDeliveryStatus Delivered
	SupplyDeliveryStatusCompleted = Code{Value: ptr.To("completed")}
	// SupplyDeliveryStatus Entered In Error
	SupplyDeliveryStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SupplyDeliveryStatus In Progress
	SupplyDeliveryStatusInProgress = Code{Value: ptr.To("in-progress")}
)

var (
	// SupplyDeliverySupplyItemType Biologically Derived Product
	SupplyDeliverySupplyItemTypeBiologicallyderivedproduct = Code{Value: ptr.To("biologicallyderivedproduct")}
	// SupplyDeliverySupplyItemType Device
	SupplyDeliverySupplyItemTypeDevice = Code{Value: ptr.To("device")}
	// SupplyDeliverySupplyItemType Medication
	SupplyDeliverySupplyItemTypeMedication = Code{Value: ptr.To("medication")}
)

var (
	// SupplyRequestStatus Active
	SupplyRequestStatusActive = Code{Value: ptr.To("active")}
	// SupplyRequestStatus Cancelled
	SupplyRequestStatusCancelled = Code{Value: ptr.To("cancelled")}
	// SupplyRequestStatus Completed
	SupplyRequestStatusCompleted = Code{Value: ptr.To("completed")}
	// SupplyRequestStatus Draft
	SupplyRequestStatusDraft = Code{Value: ptr.To("draft")}
	// SupplyRequestStatus Entered in Error
	SupplyRequestStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SupplyRequestStatus Suspended
	SupplyRequestStatusSuspended = Code{Value: ptr.To("suspended")}
	// SupplyRequestStatus Unknown
	SupplyRequestStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// SystemRestfulInteraction batch
	SystemRestfulInteractionBatch = Code{Value: ptr.To("batch")}
	// SystemRestfulInteraction capabilities
	SystemRestfulInteractionCapabilities = Code{Value: ptr.To("capabilities")}
	// SystemRestfulInteraction create
	SystemRestfulInteractionCreate = Code{Value: ptr.To("create")}
	// SystemRestfulInteraction delete
	SystemRestfulInteractionDelete = Code{Value: ptr.To("delete")}
	// SystemRestfulInteraction history
	SystemRestfulInteractionHistory = Code{Value: ptr.To("history")}
	// SystemRestfulInteraction operation
	SystemRestfulInteractionOperation = Code{Value: ptr.To("operation")}
	// SystemRestfulInteraction patch
	SystemRestfulInteractionPatch = Code{Value: ptr.To("patch")}
	// SystemRestfulInteraction read
	SystemRestfulInteractionRead = Code{Value: ptr.To("read")}
	// SystemRestfulInteraction search
	SystemRestfulInteractionSearch = Code{Value: ptr.To("search")}
	// SystemRestfulInteraction transaction
	SystemRestfulInteractionTransaction = Code{Value: ptr.To("transaction")}
	// SystemRestfulInteraction update
	SystemRestfulInteractionUpdate = Code{Value: ptr.To("update")}
	// SystemRestfulInteraction vread
	SystemRestfulInteractionVread = Code{Value: ptr.To("vread")}
)

var (
	// TaskIntent Unknown
	TaskIntentUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// TaskStatus Accepted
	TaskStatusAccepted = Code{Value: ptr.To("accepted")}
	// TaskStatus Cancelled
	TaskStatusCancelled = Code{Value: ptr.To("cancelled")}
	// TaskStatus Completed
	TaskStatusCompleted = Code{Value: ptr.To("completed")}
	// TaskStatus Draft
	TaskStatusDraft = Code{Value: ptr.To("draft")}
	// TaskStatus Entered in Error
	TaskStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// TaskStatus Failed
	TaskStatusFailed = Code{Value: ptr.To("failed")}
	// TaskStatus In Progress
	TaskStatusInProgress = Code{Value: ptr.To("in-progress")}
	// TaskStatus On Hold
	TaskStatusOnHold = Code{Value: ptr.To("on-hold")}
	// TaskStatus Ready
	TaskStatusReady = Code{Value: ptr.To("ready")}
	// TaskStatus Received
	TaskStatusReceived = Code{Value: ptr.To("received")}
	// TaskStatus Rejected
	TaskStatusRejected = Code{Value: ptr.To("rejected")}
	// TaskStatus Requested
	TaskStatusRequested = Code{Value: ptr.To("requested")}
)

var (
	// TestReportActionResult Error
	TestReportActionResultError = Code{Value: ptr.To("error")}
	// TestReportActionResult Fail
	TestReportActionResultFail = Code{Value: ptr.To("fail")}
	// TestReportActionResult Pass
	TestReportActionResultPass = Code{Value: ptr.To("pass")}
	// TestReportActionResult Skip
	TestReportActionResultSkip = Code{Value: ptr.To("skip")}
	// TestReportActionResult Warning
	TestReportActionResultWarning = Code{Value: ptr.To("warning")}
)

var (
	// TestReportParticipantType Client
	TestReportParticipantTypeClient = Code{Value: ptr.To("client")}
	// TestReportParticipantType Server
	TestReportParticipantTypeServer = Code{Value: ptr.To("server")}
	// TestReportParticipantType Test Engine
	TestReportParticipantTypeTestEngine = Code{Value: ptr.To("test-engine")}
)

var (
	// TestReportResult Fail
	TestReportResultFail = Code{Value: ptr.To("fail")}
	// TestReportResult Pass
	TestReportResultPass = Code{Value: ptr.To("pass")}
	// TestReportResult Pending
	TestReportResultPending = Code{Value: ptr.To("pending")}
)

var (
	// TestReportStatus Completed
	TestReportStatusCompleted = Code{Value: ptr.To("completed")}
	// TestReportStatus Entered In Error
	TestReportStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// TestReportStatus In Progress
	TestReportStatusInProgress = Code{Value: ptr.To("in-progress")}
	// TestReportStatus Stopped
	TestReportStatusStopped = Code{Value: ptr.To("stopped")}
	// TestReportStatus Waiting
	TestReportStatusWaiting = Code{Value: ptr.To("waiting")}
)

var (
	// TestScriptRequestMethodCode DELETE
	TestScriptRequestMethodCodeDelete = Code{Value: ptr.To("delete")}
	// TestScriptRequestMethodCode GET
	TestScriptRequestMethodCodeGet = Code{Value: ptr.To("get")}
	// TestScriptRequestMethodCode HEAD
	TestScriptRequestMethodCodeHead = Code{Value: ptr.To("head")}
	// TestScriptRequestMethodCode OPTIONS
	TestScriptRequestMethodCodeOptions = Code{Value: ptr.To("options")}
	// TestScriptRequestMethodCode PATCH
	TestScriptRequestMethodCodePatch = Code{Value: ptr.To("patch")}
	// TestScriptRequestMethodCode POST
	TestScriptRequestMethodCodePost = Code{Value: ptr.To("post")}
	// TestScriptRequestMethodCode PUT
	TestScriptRequestMethodCodePut = Code{Value: ptr.To("put")}
)

var (
	// TransportIntent Unknown
	TransportIntentUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// TransportStatus Abandoned
	TransportStatusAbandoned = Code{Value: ptr.To("abandoned")}
	// TransportStatus Cancelled
	TransportStatusCancelled = Code{Value: ptr.To("cancelled")}
	// TransportStatus Completed
	TransportStatusCompleted = Code{Value: ptr.To("completed")}
	// TransportStatus Entered In Error
	TransportStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// TransportStatus In Progress
	TransportStatusInProgress = Code{Value: ptr.To("in-progress")}
	// TransportStatus Planned
	TransportStatusPlanned = Code{Value: ptr.To("planned")}
)

var (
	// TriggerType Data Access Ended
	TriggerTypeDataAccessEnded = Code{Value: ptr.To("data-access-ended")}
	// TriggerType Data Accessed
	TriggerTypeDataAccessed = Code{Value: ptr.To("data-accessed")}
	// TriggerType Data Changed
	TriggerTypeDataChanged = Code{Value: ptr.To("data-changed")}
	// TriggerType Named Event
	TriggerTypeNamedEvent = Code{Value: ptr.To("named-event")}
	// TriggerType Periodic
	TriggerTypePeriodic = Code{Value: ptr.To("periodic")}
)

var (
	// TriggeredBytype Re-run (per policy)
	TriggeredBytypeReRun = Code{Value: ptr.To("re-run")}
	// TriggeredBytype Reflex
	TriggeredBytypeReflex = Code{Value: ptr.To("reflex")}
	// TriggeredBytype Repeat (per policy)
	TriggeredBytypeRepeat = Code{Value: ptr.To("repeat")}
)

var (
	// TypeDerivationRule Constraint
	TypeDerivationRuleConstraint = Code{Value: ptr.To("constraint")}
	// TypeDerivationRule Specialization
	TypeDerivationRuleSpecialization = Code{Value: ptr.To("specialization")}
)

var (
	// TypeRestfulInteraction batch
	TypeRestfulInteractionBatch = Code{Value: ptr.To("batch")}
	// TypeRestfulInteraction capabilities
	TypeRestfulInteractionCapabilities = Code{Value: ptr.To("capabilities")}
	// TypeRestfulInteraction create
	TypeRestfulInteractionCreate = Code{Value: ptr.To("create")}
	// TypeRestfulInteraction delete
	TypeRestfulInteractionDelete = Code{Value: ptr.To("delete")}
	// TypeRestfulInteraction history
	TypeRestfulInteractionHistory = Code{Value: ptr.To("history")}
	// TypeRestfulInteraction operation
	TypeRestfulInteractionOperation = Code{Value: ptr.To("operation")}
	// TypeRestfulInteraction patch
	TypeRestfulInteractionPatch = Code{Value: ptr.To("patch")}
	// TypeRestfulInteraction read
	TypeRestfulInteractionRead = Code{Value: ptr.To("read")}
	// TypeRestfulInteraction search
	TypeRestfulInteractionSearch = Code{Value: ptr.To("search")}
	// TypeRestfulInteraction transaction
	TypeRestfulInteractionTransaction = Code{Value: ptr.To("transaction")}
	// TypeRestfulInteraction update
	TypeRestfulInteractionUpdate = Code{Value: ptr.To("update")}
	// TypeRestfulInteraction vread
	TypeRestfulInteractionVread = Code{Value: ptr.To("vread")}
)

var (
	// UDIEntryType Barcode
	UdientryTypeBarcode = Code{Value: ptr.To("barcode")}
	// UDIEntryType Card
	UdientryTypeCard = Code{Value: ptr.To("card")}
	// UDIEntryType Electronic Transmission
	UdientryTypeElectronicTransmission = Code{Value: ptr.To("electronic-transmission")}
	// UDIEntryType Manual
	UdientryTypeManual = Code{Value: ptr.To("manual")}
	// UDIEntryType RFID
	UdientryTypeRfid = Code{Value: ptr.To("rfid")}
	// UDIEntryType Self Reported
	UdientryTypeSelfReported = Code{Value: ptr.To("self-reported")}
	// UDIEntryType Unknown
	UdientryTypeUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// Use Claim
	UseClaim = Code{Value: ptr.To("claim")}
	// Use Preauthorization
	UsePreauthorization = Code{Value: ptr.To("preauthorization")}
	// Use Predetermination
	UsePredetermination = Code{Value: ptr.To("predetermination")}
)

var (
	// ValueFilterComparator Approximately
	ValueFilterComparatorAp = Code{Value: ptr.To("ap")}
	// ValueFilterComparator Ends Before
	ValueFilterComparatorEb = Code{Value: ptr.To("eb")}
	// ValueFilterComparator Equals
	ValueFilterComparatorEq = Code{Value: ptr.To("eq")}
	// ValueFilterComparator Greater or Equals
	ValueFilterComparatorGe = Code{Value: ptr.To("ge")}
	// ValueFilterComparator Greater Than
	ValueFilterComparatorGt = Code{Value: ptr.To("gt")}
	// ValueFilterComparator Less of Equal
	ValueFilterComparatorLe = Code{Value: ptr.To("le")}
	// ValueFilterComparator Less Than
	ValueFilterComparatorLt = Code{Value: ptr.To("lt")}
	// ValueFilterComparator Not Equals
	ValueFilterComparatorNe = Code{Value: ptr.To("ne")}
	// ValueFilterComparator Starts After
	ValueFilterComparatorSa = Code{Value: ptr.To("sa")}
)

var (
	// VerificationResultStatus Attested
	VerificationResultStatusAttested = Code{Value: ptr.To("attested")}
	// VerificationResultStatus Entered in Error
	VerificationResultStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// VerificationResultStatus In process
	VerificationResultStatusInProcess = Code{Value: ptr.To("in-process")}
	// VerificationResultStatus Requires revalidation
	VerificationResultStatusReqRevalid = Code{Value: ptr.To("req-revalid")}
	// VerificationResultStatus Re-Validation failed
	VerificationResultStatusRevalFail = Code{Value: ptr.To("reval-fail")}
	// VerificationResultStatus Validation failed
	VerificationResultStatusValFail = Code{Value: ptr.To("val-fail")}
	// VerificationResultStatus Validated
	VerificationResultStatusValidated = Code{Value: ptr.To("validated")}
)

var (
	// VisionBase Down
	VisionBaseDown = Code{Value: ptr.To("down")}
	// VisionBase In
	VisionBaseIn = Code{Value: ptr.To("in")}
	// VisionBase Out
	VisionBaseOut = Code{Value: ptr.To("out")}
	// VisionBase Up
	VisionBaseUp = Code{Value: ptr.To("up")}
)

var (
	// VisionEyes Left Eye
	VisionEyesLeft = Code{Value: ptr.To("left")}
	// VisionEyes Right Eye
	VisionEyesRight = Code{Value: ptr.To("right")}
)

var (
	// WeekOfMonth First
	WeekOfMonthFirst = Code{Value: ptr.To("first")}
	// WeekOfMonth Fourth
	WeekOfMonthFourth = Code{Value: ptr.To("fourth")}
	// WeekOfMonth Last
	WeekOfMonthLast = Code{Value: ptr.To("last")}
	// WeekOfMonth Second
	WeekOfMonthSecond = Code{Value: ptr.To("second")}
	// WeekOfMonth Third
	WeekOfMonthThird = Code{Value: ptr.To("third")}
)
