// DO NOT EDIT!
// Code generated by "github.com/DAMEDIC/fhir-toolbox-go/internal/generate";
// use `make generate` to regenerate.

package r4

import ptr "github.com/DAMEDIC/fhir-toolbox-go/utils/ptr"

// Value set constants for required bindings

var (
	// AccountStatus Active
	AccountStatusActive = Code{Value: ptr.To("active")}
	// AccountStatus Entered in error
	AccountStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// AccountStatus Inactive
	AccountStatusInactive = Code{Value: ptr.To("inactive")}
	// AccountStatus On Hold
	AccountStatusOnHold = Code{Value: ptr.To("on-hold")}
	// AccountStatus Unknown
	AccountStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ActionCardinalityBehavior Multiple
	ActionCardinalityBehaviorMultiple = Code{Value: ptr.To("multiple")}
	// ActionCardinalityBehavior Single
	ActionCardinalityBehaviorSingle = Code{Value: ptr.To("single")}
)

var (
	// ActionConditionKind Applicability
	ActionConditionKindApplicability = Code{Value: ptr.To("applicability")}
	// ActionConditionKind Start
	ActionConditionKindStart = Code{Value: ptr.To("start")}
	// ActionConditionKind Stop
	ActionConditionKindStop = Code{Value: ptr.To("stop")}
)

var (
	// ActionGroupingBehavior Logical Group
	ActionGroupingBehaviorLogicalGroup = Code{Value: ptr.To("logical-group")}
	// ActionGroupingBehavior Sentence Group
	ActionGroupingBehaviorSentenceGroup = Code{Value: ptr.To("sentence-group")}
	// ActionGroupingBehavior Visual Group
	ActionGroupingBehaviorVisualGroup = Code{Value: ptr.To("visual-group")}
)

var (
	// ActionParticipantType Device
	ActionParticipantTypeDevice = Code{Value: ptr.To("device")}
	// ActionParticipantType Patient
	ActionParticipantTypePatient = Code{Value: ptr.To("patient")}
	// ActionParticipantType Practitioner
	ActionParticipantTypePractitioner = Code{Value: ptr.To("practitioner")}
	// ActionParticipantType Related Person
	ActionParticipantTypeRelatedPerson = Code{Value: ptr.To("related-person")}
)

var (
	// ActionPrecheckBehavior No
	ActionPrecheckBehaviorNo = Code{Value: ptr.To("no")}
	// ActionPrecheckBehavior Yes
	ActionPrecheckBehaviorYes = Code{Value: ptr.To("yes")}
)

var (
	// ActionRelationshipType After
	ActionRelationshipTypeAfter = Code{Value: ptr.To("after")}
	// ActionRelationshipType After End
	ActionRelationshipTypeAfterEnd = Code{Value: ptr.To("after-end")}
	// ActionRelationshipType After Start
	ActionRelationshipTypeAfterStart = Code{Value: ptr.To("after-start")}
	// ActionRelationshipType Before
	ActionRelationshipTypeBefore = Code{Value: ptr.To("before")}
	// ActionRelationshipType Before End
	ActionRelationshipTypeBeforeEnd = Code{Value: ptr.To("before-end")}
	// ActionRelationshipType Before Start
	ActionRelationshipTypeBeforeStart = Code{Value: ptr.To("before-start")}
	// ActionRelationshipType Concurrent
	ActionRelationshipTypeConcurrent = Code{Value: ptr.To("concurrent")}
	// ActionRelationshipType Concurrent With End
	ActionRelationshipTypeConcurrentWithEnd = Code{Value: ptr.To("concurrent-with-end")}
	// ActionRelationshipType Concurrent With Start
	ActionRelationshipTypeConcurrentWithStart = Code{Value: ptr.To("concurrent-with-start")}
)

var (
	// ActionRequiredBehavior Could
	ActionRequiredBehaviorCould = Code{Value: ptr.To("could")}
	// ActionRequiredBehavior Must
	ActionRequiredBehaviorMust = Code{Value: ptr.To("must")}
	// ActionRequiredBehavior Must Unless Documented
	ActionRequiredBehaviorMustUnlessDocumented = Code{Value: ptr.To("must-unless-documented")}
)

var (
	// ActionSelectionBehavior All
	ActionSelectionBehaviorAll = Code{Value: ptr.To("all")}
	// ActionSelectionBehavior All Or None
	ActionSelectionBehaviorAllOrNone = Code{Value: ptr.To("all-or-none")}
	// ActionSelectionBehavior Any
	ActionSelectionBehaviorAny = Code{Value: ptr.To("any")}
	// ActionSelectionBehavior At Most One
	ActionSelectionBehaviorAtMostOne = Code{Value: ptr.To("at-most-one")}
	// ActionSelectionBehavior Exactly One
	ActionSelectionBehaviorExactlyOne = Code{Value: ptr.To("exactly-one")}
	// ActionSelectionBehavior One Or More
	ActionSelectionBehaviorOneOrMore = Code{Value: ptr.To("one-or-more")}
)

var (
	// AddressType Postal & Physical
	AddressTypeBoth = Code{Value: ptr.To("both")}
	// AddressType Physical
	AddressTypePhysical = Code{Value: ptr.To("physical")}
	// AddressType Postal
	AddressTypePostal = Code{Value: ptr.To("postal")}
)

var (
	// AddressUse Billing
	AddressUseBilling = Code{Value: ptr.To("billing")}
	// AddressUse Home
	AddressUseHome = Code{Value: ptr.To("home")}
	// AddressUse Old / Incorrect
	AddressUseOld = Code{Value: ptr.To("old")}
	// AddressUse Temporary
	AddressUseTemp = Code{Value: ptr.To("temp")}
	// AddressUse Work
	AddressUseWork = Code{Value: ptr.To("work")}
)

var (
	// AdministrativeGender Female
	AdministrativeGenderFemale = Code{Value: ptr.To("female")}
	// AdministrativeGender Male
	AdministrativeGenderMale = Code{Value: ptr.To("male")}
	// AdministrativeGender Other
	AdministrativeGenderOther = Code{Value: ptr.To("other")}
	// AdministrativeGender Unknown
	AdministrativeGenderUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// AdverseEventActuality Adverse Event
	AdverseEventActualityActual = Code{Value: ptr.To("actual")}
	// AdverseEventActuality Potential Adverse Event
	AdverseEventActualityPotential = Code{Value: ptr.To("potential")}
)

var (
	// AdverseEventOutcome Fatal
	AdverseEventOutcomeFatal = Code{Value: ptr.To("fatal")}
	// AdverseEventOutcome Ongoing
	AdverseEventOutcomeOngoing = Code{Value: ptr.To("ongoing")}
	// AdverseEventOutcome Recovering
	AdverseEventOutcomeRecovering = Code{Value: ptr.To("recovering")}
	// AdverseEventOutcome Resolved
	AdverseEventOutcomeResolved = Code{Value: ptr.To("resolved")}
	// AdverseEventOutcome Resolved with Sequelae
	AdverseEventOutcomeResolvedWithSequelae = Code{Value: ptr.To("resolvedWithSequelae")}
	// AdverseEventOutcome Unknown
	AdverseEventOutcomeUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// AdverseEventSeverity Mild
	AdverseEventSeverityMild = Code{Value: ptr.To("mild")}
	// AdverseEventSeverity Moderate
	AdverseEventSeverityModerate = Code{Value: ptr.To("moderate")}
	// AdverseEventSeverity Severe
	AdverseEventSeveritySevere = Code{Value: ptr.To("severe")}
)

var (
	// AggregationMode Contained
	AggregationModeContained = Code{Value: ptr.To("contained")}
	// AggregationMode Referenced
	AggregationModeReferenced = Code{Value: ptr.To("referenced")}
)

var (
	// AllergyIntoleranceCategory Biologic
	AllergyIntoleranceCategoryBiologic = Code{Value: ptr.To("biologic")}
	// AllergyIntoleranceCategory Environment
	AllergyIntoleranceCategoryEnvironment = Code{Value: ptr.To("environment")}
	// AllergyIntoleranceCategory Food
	AllergyIntoleranceCategoryFood = Code{Value: ptr.To("food")}
	// AllergyIntoleranceCategory Medication
	AllergyIntoleranceCategoryMedication = Code{Value: ptr.To("medication")}
)

var (
	// AllergyIntoleranceClinicalStatusCodes Active
	AllergyIntoleranceClinicalStatusCodesActive = Code{Value: ptr.To("active")}
	// AllergyIntoleranceClinicalStatusCodes Inactive
	AllergyIntoleranceClinicalStatusCodesInactive = Code{Value: ptr.To("inactive")}
)

var (
	// AllergyIntoleranceCriticality High Risk
	AllergyIntoleranceCriticalityHigh = Code{Value: ptr.To("high")}
	// AllergyIntoleranceCriticality Low Risk
	AllergyIntoleranceCriticalityLow = Code{Value: ptr.To("low")}
	// AllergyIntoleranceCriticality Unable to Assess Risk
	AllergyIntoleranceCriticalityUnableToAssess = Code{Value: ptr.To("unable-to-assess")}
)

var (
	// AllergyIntoleranceSeverity Mild
	AllergyIntoleranceSeverityMild = Code{Value: ptr.To("mild")}
	// AllergyIntoleranceSeverity Moderate
	AllergyIntoleranceSeverityModerate = Code{Value: ptr.To("moderate")}
	// AllergyIntoleranceSeverity Severe
	AllergyIntoleranceSeveritySevere = Code{Value: ptr.To("severe")}
)

var (
	// AllergyIntoleranceType Allergy
	AllergyIntoleranceTypeAllergy = Code{Value: ptr.To("allergy")}
	// AllergyIntoleranceType Intolerance
	AllergyIntoleranceTypeIntolerance = Code{Value: ptr.To("intolerance")}
)

var (
	// AllergyIntoleranceVerificationStatusCodes Confirmed
	AllergyIntoleranceVerificationStatusCodesConfirmed = Code{Value: ptr.To("confirmed")}
	// AllergyIntoleranceVerificationStatusCodes Entered in Error
	AllergyIntoleranceVerificationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// AllergyIntoleranceVerificationStatusCodes Refuted
	AllergyIntoleranceVerificationStatusCodesRefuted = Code{Value: ptr.To("refuted")}
	// AllergyIntoleranceVerificationStatusCodes Unconfirmed
	AllergyIntoleranceVerificationStatusCodesUnconfirmed = Code{Value: ptr.To("unconfirmed")}
)

var (
	// AppointmentStatus Arrived
	AppointmentStatusArrived = Code{Value: ptr.To("arrived")}
	// AppointmentStatus Booked
	AppointmentStatusBooked = Code{Value: ptr.To("booked")}
	// AppointmentStatus Cancelled
	AppointmentStatusCancelled = Code{Value: ptr.To("cancelled")}
	// AppointmentStatus Checked In
	AppointmentStatusCheckedIn = Code{Value: ptr.To("checked-in")}
	// AppointmentStatus Entered in error
	AppointmentStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// AppointmentStatus Fulfilled
	AppointmentStatusFulfilled = Code{Value: ptr.To("fulfilled")}
	// AppointmentStatus No Show
	AppointmentStatusNoshow = Code{Value: ptr.To("noshow")}
	// AppointmentStatus Pending
	AppointmentStatusPending = Code{Value: ptr.To("pending")}
	// AppointmentStatus Proposed
	AppointmentStatusProposed = Code{Value: ptr.To("proposed")}
	// AppointmentStatus Waitlisted
	AppointmentStatusWaitlist = Code{Value: ptr.To("waitlist")}
)

var (
	// AssertionDirectionType request
	AssertionDirectionTypeRequest = Code{Value: ptr.To("request")}
	// AssertionDirectionType response
	AssertionDirectionTypeResponse = Code{Value: ptr.To("response")}
)

var (
	// AssertionOperatorType contains
	AssertionOperatorTypeContains = Code{Value: ptr.To("contains")}
	// AssertionOperatorType empty
	AssertionOperatorTypeEmpty = Code{Value: ptr.To("empty")}
	// AssertionOperatorType equals
	AssertionOperatorTypeEquals = Code{Value: ptr.To("equals")}
	// AssertionOperatorType evaluate
	AssertionOperatorTypeEval = Code{Value: ptr.To("eval")}
	// AssertionOperatorType greaterThan
	AssertionOperatorTypeGreaterThan = Code{Value: ptr.To("greaterThan")}
	// AssertionOperatorType in
	AssertionOperatorTypeIn = Code{Value: ptr.To("in")}
	// AssertionOperatorType lessThan
	AssertionOperatorTypeLessThan = Code{Value: ptr.To("lessThan")}
	// AssertionOperatorType notContains
	AssertionOperatorTypeNotContains = Code{Value: ptr.To("notContains")}
	// AssertionOperatorType notEmpty
	AssertionOperatorTypeNotEmpty = Code{Value: ptr.To("notEmpty")}
	// AssertionOperatorType notEquals
	AssertionOperatorTypeNotEquals = Code{Value: ptr.To("notEquals")}
	// AssertionOperatorType notIn
	AssertionOperatorTypeNotIn = Code{Value: ptr.To("notIn")}
)

var (
	// AssertionResponseTypes bad
	AssertionResponseTypesBad = Code{Value: ptr.To("bad")}
	// AssertionResponseTypes conflict
	AssertionResponseTypesConflict = Code{Value: ptr.To("conflict")}
	// AssertionResponseTypes created
	AssertionResponseTypesCreated = Code{Value: ptr.To("created")}
	// AssertionResponseTypes forbidden
	AssertionResponseTypesForbidden = Code{Value: ptr.To("forbidden")}
	// AssertionResponseTypes gone
	AssertionResponseTypesGone = Code{Value: ptr.To("gone")}
	// AssertionResponseTypes methodNotAllowed
	AssertionResponseTypesMethodNotAllowed = Code{Value: ptr.To("methodNotAllowed")}
	// AssertionResponseTypes noContent
	AssertionResponseTypesNoContent = Code{Value: ptr.To("noContent")}
	// AssertionResponseTypes notFound
	AssertionResponseTypesNotFound = Code{Value: ptr.To("notFound")}
	// AssertionResponseTypes notModified
	AssertionResponseTypesNotModified = Code{Value: ptr.To("notModified")}
	// AssertionResponseTypes okay
	AssertionResponseTypesOkay = Code{Value: ptr.To("okay")}
	// AssertionResponseTypes preconditionFailed
	AssertionResponseTypesPreconditionFailed = Code{Value: ptr.To("preconditionFailed")}
	// AssertionResponseTypes unprocessable
	AssertionResponseTypesUnprocessable = Code{Value: ptr.To("unprocessable")}
)

var (
	// AuditEventAction Create
	AuditEventActionC = Code{Value: ptr.To("C")}
	// AuditEventAction Delete
	AuditEventActionD = Code{Value: ptr.To("D")}
	// AuditEventAction Execute
	AuditEventActionE = Code{Value: ptr.To("E")}
	// AuditEventAction Read/View/Print
	AuditEventActionR = Code{Value: ptr.To("R")}
	// AuditEventAction Update
	AuditEventActionU = Code{Value: ptr.To("U")}
)

var (
	// AuditEventAgentNetworkType Machine Name
	AuditEventAgentNetworkType1 = Code{Value: ptr.To("1")}
	// AuditEventAgentNetworkType IP Address
	AuditEventAgentNetworkType2 = Code{Value: ptr.To("2")}
	// AuditEventAgentNetworkType Telephone Number
	AuditEventAgentNetworkType3 = Code{Value: ptr.To("3")}
	// AuditEventAgentNetworkType Email address
	AuditEventAgentNetworkType4 = Code{Value: ptr.To("4")}
	// AuditEventAgentNetworkType URI
	AuditEventAgentNetworkType5 = Code{Value: ptr.To("5")}
)

var (
	// AuditEventOutcome Success
	AuditEventOutcome0 = Code{Value: ptr.To("0")}
	// AuditEventOutcome Major failure
	AuditEventOutcome12 = Code{Value: ptr.To("12")}
	// AuditEventOutcome Minor failure
	AuditEventOutcome4 = Code{Value: ptr.To("4")}
	// AuditEventOutcome Serious failure
	AuditEventOutcome8 = Code{Value: ptr.To("8")}
)

var (
	// BenefitCostApplicability In Network
	BenefitCostApplicabilityInNetwork = Code{Value: ptr.To("in-network")}
	// BenefitCostApplicability Other
	BenefitCostApplicabilityOther = Code{Value: ptr.To("other")}
	// BenefitCostApplicability Out of Network
	BenefitCostApplicabilityOutOfNetwork = Code{Value: ptr.To("out-of-network")}
)

var (
	// BindingStrength Example
	BindingStrengthExample = Code{Value: ptr.To("example")}
	// BindingStrength Extensible
	BindingStrengthExtensible = Code{Value: ptr.To("extensible")}
	// BindingStrength Preferred
	BindingStrengthPreferred = Code{Value: ptr.To("preferred")}
	// BindingStrength Required
	BindingStrengthRequired = Code{Value: ptr.To("required")}
)

var (
	// BiologicallyDerivedProductCategory BiologicalAgent
	BiologicallyDerivedProductCategoryBiologicalAgent = Code{Value: ptr.To("biologicalAgent")}
	// BiologicallyDerivedProductCategory Cells
	BiologicallyDerivedProductCategoryCells = Code{Value: ptr.To("cells")}
	// BiologicallyDerivedProductCategory Fluid
	BiologicallyDerivedProductCategoryFluid = Code{Value: ptr.To("fluid")}
	// BiologicallyDerivedProductCategory Organ
	BiologicallyDerivedProductCategoryOrgan = Code{Value: ptr.To("organ")}
	// BiologicallyDerivedProductCategory Tissue
	BiologicallyDerivedProductCategoryTissue = Code{Value: ptr.To("tissue")}
)

var (
	// BiologicallyDerivedProductStatus Available
	BiologicallyDerivedProductStatusAvailable = Code{Value: ptr.To("available")}
	// BiologicallyDerivedProductStatus Unavailable
	BiologicallyDerivedProductStatusUnavailable = Code{Value: ptr.To("unavailable")}
)

var (
	// BiologicallyDerivedProductStorageScale Celsius
	BiologicallyDerivedProductStorageScaleCelsius = Code{Value: ptr.To("celsius")}
	// BiologicallyDerivedProductStorageScale Fahrenheit
	BiologicallyDerivedProductStorageScaleFarenheit = Code{Value: ptr.To("farenheit")}
	// BiologicallyDerivedProductStorageScale Kelvin
	BiologicallyDerivedProductStorageScaleKelvin = Code{Value: ptr.To("kelvin")}
)

var (
	// BundleType Batch
	BundleTypeBatch = Code{Value: ptr.To("batch")}
	// BundleType Batch Response
	BundleTypeBatchResponse = Code{Value: ptr.To("batch-response")}
	// BundleType Collection
	BundleTypeCollection = Code{Value: ptr.To("collection")}
	// BundleType Document
	BundleTypeDocument = Code{Value: ptr.To("document")}
	// BundleType History List
	BundleTypeHistory = Code{Value: ptr.To("history")}
	// BundleType Message
	BundleTypeMessage = Code{Value: ptr.To("message")}
	// BundleType Search Results
	BundleTypeSearchset = Code{Value: ptr.To("searchset")}
	// BundleType Transaction
	BundleTypeTransaction = Code{Value: ptr.To("transaction")}
	// BundleType Transaction Response
	BundleTypeTransactionResponse = Code{Value: ptr.To("transaction-response")}
)

var (
	// CapabilityStatementKind Capability
	CapabilityStatementKindCapability = Code{Value: ptr.To("capability")}
	// CapabilityStatementKind Instance
	CapabilityStatementKindInstance = Code{Value: ptr.To("instance")}
	// CapabilityStatementKind Requirements
	CapabilityStatementKindRequirements = Code{Value: ptr.To("requirements")}
)

var (
	// CarePlanActivityKind Account
	CarePlanActivityKindAccount = Code{Value: ptr.To("Account")}
	// CarePlanActivityKind ActivityDefinition
	CarePlanActivityKindActivityDefinition = Code{Value: ptr.To("ActivityDefinition")}
	// CarePlanActivityKind AdverseEvent
	CarePlanActivityKindAdverseEvent = Code{Value: ptr.To("AdverseEvent")}
	// CarePlanActivityKind AllergyIntolerance
	CarePlanActivityKindAllergyIntolerance = Code{Value: ptr.To("AllergyIntolerance")}
	// CarePlanActivityKind Appointment
	CarePlanActivityKindAppointment = Code{Value: ptr.To("Appointment")}
	// CarePlanActivityKind AppointmentResponse
	CarePlanActivityKindAppointmentResponse = Code{Value: ptr.To("AppointmentResponse")}
	// CarePlanActivityKind AuditEvent
	CarePlanActivityKindAuditEvent = Code{Value: ptr.To("AuditEvent")}
	// CarePlanActivityKind Basic
	CarePlanActivityKindBasic = Code{Value: ptr.To("Basic")}
	// CarePlanActivityKind Binary
	CarePlanActivityKindBinary = Code{Value: ptr.To("Binary")}
	// CarePlanActivityKind BiologicallyDerivedProduct
	CarePlanActivityKindBiologicallyDerivedProduct = Code{Value: ptr.To("BiologicallyDerivedProduct")}
	// CarePlanActivityKind BodyStructure
	CarePlanActivityKindBodyStructure = Code{Value: ptr.To("BodyStructure")}
	// CarePlanActivityKind Bundle
	CarePlanActivityKindBundle = Code{Value: ptr.To("Bundle")}
	// CarePlanActivityKind CapabilityStatement
	CarePlanActivityKindCapabilityStatement = Code{Value: ptr.To("CapabilityStatement")}
	// CarePlanActivityKind CarePlan
	CarePlanActivityKindCarePlan = Code{Value: ptr.To("CarePlan")}
	// CarePlanActivityKind CareTeam
	CarePlanActivityKindCareTeam = Code{Value: ptr.To("CareTeam")}
	// CarePlanActivityKind CatalogEntry
	CarePlanActivityKindCatalogEntry = Code{Value: ptr.To("CatalogEntry")}
	// CarePlanActivityKind ChargeItem
	CarePlanActivityKindChargeItem = Code{Value: ptr.To("ChargeItem")}
	// CarePlanActivityKind ChargeItemDefinition
	CarePlanActivityKindChargeItemDefinition = Code{Value: ptr.To("ChargeItemDefinition")}
	// CarePlanActivityKind Claim
	CarePlanActivityKindClaim = Code{Value: ptr.To("Claim")}
	// CarePlanActivityKind ClaimResponse
	CarePlanActivityKindClaimResponse = Code{Value: ptr.To("ClaimResponse")}
	// CarePlanActivityKind ClinicalImpression
	CarePlanActivityKindClinicalImpression = Code{Value: ptr.To("ClinicalImpression")}
	// CarePlanActivityKind CodeSystem
	CarePlanActivityKindCodeSystem = Code{Value: ptr.To("CodeSystem")}
	// CarePlanActivityKind Communication
	CarePlanActivityKindCommunication = Code{Value: ptr.To("Communication")}
	// CarePlanActivityKind CommunicationRequest
	CarePlanActivityKindCommunicationRequest = Code{Value: ptr.To("CommunicationRequest")}
	// CarePlanActivityKind CompartmentDefinition
	CarePlanActivityKindCompartmentDefinition = Code{Value: ptr.To("CompartmentDefinition")}
	// CarePlanActivityKind Composition
	CarePlanActivityKindComposition = Code{Value: ptr.To("Composition")}
	// CarePlanActivityKind ConceptMap
	CarePlanActivityKindConceptMap = Code{Value: ptr.To("ConceptMap")}
	// CarePlanActivityKind Condition
	CarePlanActivityKindCondition = Code{Value: ptr.To("Condition")}
	// CarePlanActivityKind Consent
	CarePlanActivityKindConsent = Code{Value: ptr.To("Consent")}
	// CarePlanActivityKind Contract
	CarePlanActivityKindContract = Code{Value: ptr.To("Contract")}
	// CarePlanActivityKind Coverage
	CarePlanActivityKindCoverage = Code{Value: ptr.To("Coverage")}
	// CarePlanActivityKind CoverageEligibilityRequest
	CarePlanActivityKindCoverageEligibilityRequest = Code{Value: ptr.To("CoverageEligibilityRequest")}
	// CarePlanActivityKind CoverageEligibilityResponse
	CarePlanActivityKindCoverageEligibilityResponse = Code{Value: ptr.To("CoverageEligibilityResponse")}
	// CarePlanActivityKind DetectedIssue
	CarePlanActivityKindDetectedIssue = Code{Value: ptr.To("DetectedIssue")}
	// CarePlanActivityKind Device
	CarePlanActivityKindDevice = Code{Value: ptr.To("Device")}
	// CarePlanActivityKind DeviceDefinition
	CarePlanActivityKindDeviceDefinition = Code{Value: ptr.To("DeviceDefinition")}
	// CarePlanActivityKind DeviceMetric
	CarePlanActivityKindDeviceMetric = Code{Value: ptr.To("DeviceMetric")}
	// CarePlanActivityKind DeviceRequest
	CarePlanActivityKindDeviceRequest = Code{Value: ptr.To("DeviceRequest")}
	// CarePlanActivityKind DeviceUseStatement
	CarePlanActivityKindDeviceUseStatement = Code{Value: ptr.To("DeviceUseStatement")}
	// CarePlanActivityKind DiagnosticReport
	CarePlanActivityKindDiagnosticReport = Code{Value: ptr.To("DiagnosticReport")}
	// CarePlanActivityKind DocumentManifest
	CarePlanActivityKindDocumentManifest = Code{Value: ptr.To("DocumentManifest")}
	// CarePlanActivityKind DocumentReference
	CarePlanActivityKindDocumentReference = Code{Value: ptr.To("DocumentReference")}
	// CarePlanActivityKind DomainResource
	CarePlanActivityKindDomainResource = Code{Value: ptr.To("DomainResource")}
	// CarePlanActivityKind EffectEvidenceSynthesis
	CarePlanActivityKindEffectEvidenceSynthesis = Code{Value: ptr.To("EffectEvidenceSynthesis")}
	// CarePlanActivityKind Encounter
	CarePlanActivityKindEncounter = Code{Value: ptr.To("Encounter")}
	// CarePlanActivityKind Endpoint
	CarePlanActivityKindEndpoint = Code{Value: ptr.To("Endpoint")}
	// CarePlanActivityKind EnrollmentRequest
	CarePlanActivityKindEnrollmentRequest = Code{Value: ptr.To("EnrollmentRequest")}
	// CarePlanActivityKind EnrollmentResponse
	CarePlanActivityKindEnrollmentResponse = Code{Value: ptr.To("EnrollmentResponse")}
	// CarePlanActivityKind EpisodeOfCare
	CarePlanActivityKindEpisodeOfCare = Code{Value: ptr.To("EpisodeOfCare")}
	// CarePlanActivityKind EventDefinition
	CarePlanActivityKindEventDefinition = Code{Value: ptr.To("EventDefinition")}
	// CarePlanActivityKind Evidence
	CarePlanActivityKindEvidence = Code{Value: ptr.To("Evidence")}
	// CarePlanActivityKind EvidenceVariable
	CarePlanActivityKindEvidenceVariable = Code{Value: ptr.To("EvidenceVariable")}
	// CarePlanActivityKind ExampleScenario
	CarePlanActivityKindExampleScenario = Code{Value: ptr.To("ExampleScenario")}
	// CarePlanActivityKind ExplanationOfBenefit
	CarePlanActivityKindExplanationOfBenefit = Code{Value: ptr.To("ExplanationOfBenefit")}
	// CarePlanActivityKind FamilyMemberHistory
	CarePlanActivityKindFamilyMemberHistory = Code{Value: ptr.To("FamilyMemberHistory")}
	// CarePlanActivityKind Flag
	CarePlanActivityKindFlag = Code{Value: ptr.To("Flag")}
	// CarePlanActivityKind Goal
	CarePlanActivityKindGoal = Code{Value: ptr.To("Goal")}
	// CarePlanActivityKind GraphDefinition
	CarePlanActivityKindGraphDefinition = Code{Value: ptr.To("GraphDefinition")}
	// CarePlanActivityKind Group
	CarePlanActivityKindGroup = Code{Value: ptr.To("Group")}
	// CarePlanActivityKind GuidanceResponse
	CarePlanActivityKindGuidanceResponse = Code{Value: ptr.To("GuidanceResponse")}
	// CarePlanActivityKind HealthcareService
	CarePlanActivityKindHealthcareService = Code{Value: ptr.To("HealthcareService")}
	// CarePlanActivityKind ImagingStudy
	CarePlanActivityKindImagingStudy = Code{Value: ptr.To("ImagingStudy")}
	// CarePlanActivityKind Immunization
	CarePlanActivityKindImmunization = Code{Value: ptr.To("Immunization")}
	// CarePlanActivityKind ImmunizationEvaluation
	CarePlanActivityKindImmunizationEvaluation = Code{Value: ptr.To("ImmunizationEvaluation")}
	// CarePlanActivityKind ImmunizationRecommendation
	CarePlanActivityKindImmunizationRecommendation = Code{Value: ptr.To("ImmunizationRecommendation")}
	// CarePlanActivityKind ImplementationGuide
	CarePlanActivityKindImplementationGuide = Code{Value: ptr.To("ImplementationGuide")}
	// CarePlanActivityKind InsurancePlan
	CarePlanActivityKindInsurancePlan = Code{Value: ptr.To("InsurancePlan")}
	// CarePlanActivityKind Invoice
	CarePlanActivityKindInvoice = Code{Value: ptr.To("Invoice")}
	// CarePlanActivityKind Library
	CarePlanActivityKindLibrary = Code{Value: ptr.To("Library")}
	// CarePlanActivityKind Linkage
	CarePlanActivityKindLinkage = Code{Value: ptr.To("Linkage")}
	// CarePlanActivityKind List
	CarePlanActivityKindList = Code{Value: ptr.To("List")}
	// CarePlanActivityKind Location
	CarePlanActivityKindLocation = Code{Value: ptr.To("Location")}
	// CarePlanActivityKind Measure
	CarePlanActivityKindMeasure = Code{Value: ptr.To("Measure")}
	// CarePlanActivityKind MeasureReport
	CarePlanActivityKindMeasureReport = Code{Value: ptr.To("MeasureReport")}
	// CarePlanActivityKind Media
	CarePlanActivityKindMedia = Code{Value: ptr.To("Media")}
	// CarePlanActivityKind Medication
	CarePlanActivityKindMedication = Code{Value: ptr.To("Medication")}
	// CarePlanActivityKind MedicationAdministration
	CarePlanActivityKindMedicationAdministration = Code{Value: ptr.To("MedicationAdministration")}
	// CarePlanActivityKind MedicationDispense
	CarePlanActivityKindMedicationDispense = Code{Value: ptr.To("MedicationDispense")}
	// CarePlanActivityKind MedicationKnowledge
	CarePlanActivityKindMedicationKnowledge = Code{Value: ptr.To("MedicationKnowledge")}
	// CarePlanActivityKind MedicationRequest
	CarePlanActivityKindMedicationRequest = Code{Value: ptr.To("MedicationRequest")}
	// CarePlanActivityKind MedicationStatement
	CarePlanActivityKindMedicationStatement = Code{Value: ptr.To("MedicationStatement")}
	// CarePlanActivityKind MedicinalProduct
	CarePlanActivityKindMedicinalProduct = Code{Value: ptr.To("MedicinalProduct")}
	// CarePlanActivityKind MedicinalProductAuthorization
	CarePlanActivityKindMedicinalProductAuthorization = Code{Value: ptr.To("MedicinalProductAuthorization")}
	// CarePlanActivityKind MedicinalProductContraindication
	CarePlanActivityKindMedicinalProductContraindication = Code{Value: ptr.To("MedicinalProductContraindication")}
	// CarePlanActivityKind MedicinalProductIndication
	CarePlanActivityKindMedicinalProductIndication = Code{Value: ptr.To("MedicinalProductIndication")}
	// CarePlanActivityKind MedicinalProductIngredient
	CarePlanActivityKindMedicinalProductIngredient = Code{Value: ptr.To("MedicinalProductIngredient")}
	// CarePlanActivityKind MedicinalProductInteraction
	CarePlanActivityKindMedicinalProductInteraction = Code{Value: ptr.To("MedicinalProductInteraction")}
	// CarePlanActivityKind MedicinalProductManufactured
	CarePlanActivityKindMedicinalProductManufactured = Code{Value: ptr.To("MedicinalProductManufactured")}
	// CarePlanActivityKind MedicinalProductPackaged
	CarePlanActivityKindMedicinalProductPackaged = Code{Value: ptr.To("MedicinalProductPackaged")}
	// CarePlanActivityKind MedicinalProductPharmaceutical
	CarePlanActivityKindMedicinalProductPharmaceutical = Code{Value: ptr.To("MedicinalProductPharmaceutical")}
	// CarePlanActivityKind MedicinalProductUndesirableEffect
	CarePlanActivityKindMedicinalProductUndesirableEffect = Code{Value: ptr.To("MedicinalProductUndesirableEffect")}
	// CarePlanActivityKind MessageDefinition
	CarePlanActivityKindMessageDefinition = Code{Value: ptr.To("MessageDefinition")}
	// CarePlanActivityKind MessageHeader
	CarePlanActivityKindMessageHeader = Code{Value: ptr.To("MessageHeader")}
	// CarePlanActivityKind MolecularSequence
	CarePlanActivityKindMolecularSequence = Code{Value: ptr.To("MolecularSequence")}
	// CarePlanActivityKind NamingSystem
	CarePlanActivityKindNamingSystem = Code{Value: ptr.To("NamingSystem")}
	// CarePlanActivityKind NutritionOrder
	CarePlanActivityKindNutritionOrder = Code{Value: ptr.To("NutritionOrder")}
	// CarePlanActivityKind Observation
	CarePlanActivityKindObservation = Code{Value: ptr.To("Observation")}
	// CarePlanActivityKind ObservationDefinition
	CarePlanActivityKindObservationDefinition = Code{Value: ptr.To("ObservationDefinition")}
	// CarePlanActivityKind OperationDefinition
	CarePlanActivityKindOperationDefinition = Code{Value: ptr.To("OperationDefinition")}
	// CarePlanActivityKind OperationOutcome
	CarePlanActivityKindOperationOutcome = Code{Value: ptr.To("OperationOutcome")}
	// CarePlanActivityKind Organization
	CarePlanActivityKindOrganization = Code{Value: ptr.To("Organization")}
	// CarePlanActivityKind OrganizationAffiliation
	CarePlanActivityKindOrganizationAffiliation = Code{Value: ptr.To("OrganizationAffiliation")}
	// CarePlanActivityKind Parameters
	CarePlanActivityKindParameters = Code{Value: ptr.To("Parameters")}
	// CarePlanActivityKind Patient
	CarePlanActivityKindPatient = Code{Value: ptr.To("Patient")}
	// CarePlanActivityKind PaymentNotice
	CarePlanActivityKindPaymentNotice = Code{Value: ptr.To("PaymentNotice")}
	// CarePlanActivityKind PaymentReconciliation
	CarePlanActivityKindPaymentReconciliation = Code{Value: ptr.To("PaymentReconciliation")}
	// CarePlanActivityKind Person
	CarePlanActivityKindPerson = Code{Value: ptr.To("Person")}
	// CarePlanActivityKind PlanDefinition
	CarePlanActivityKindPlanDefinition = Code{Value: ptr.To("PlanDefinition")}
	// CarePlanActivityKind Practitioner
	CarePlanActivityKindPractitioner = Code{Value: ptr.To("Practitioner")}
	// CarePlanActivityKind PractitionerRole
	CarePlanActivityKindPractitionerRole = Code{Value: ptr.To("PractitionerRole")}
	// CarePlanActivityKind Procedure
	CarePlanActivityKindProcedure = Code{Value: ptr.To("Procedure")}
	// CarePlanActivityKind Provenance
	CarePlanActivityKindProvenance = Code{Value: ptr.To("Provenance")}
	// CarePlanActivityKind Questionnaire
	CarePlanActivityKindQuestionnaire = Code{Value: ptr.To("Questionnaire")}
	// CarePlanActivityKind QuestionnaireResponse
	CarePlanActivityKindQuestionnaireResponse = Code{Value: ptr.To("QuestionnaireResponse")}
	// CarePlanActivityKind RelatedPerson
	CarePlanActivityKindRelatedPerson = Code{Value: ptr.To("RelatedPerson")}
	// CarePlanActivityKind RequestGroup
	CarePlanActivityKindRequestGroup = Code{Value: ptr.To("RequestGroup")}
	// CarePlanActivityKind ResearchDefinition
	CarePlanActivityKindResearchDefinition = Code{Value: ptr.To("ResearchDefinition")}
	// CarePlanActivityKind ResearchElementDefinition
	CarePlanActivityKindResearchElementDefinition = Code{Value: ptr.To("ResearchElementDefinition")}
	// CarePlanActivityKind ResearchStudy
	CarePlanActivityKindResearchStudy = Code{Value: ptr.To("ResearchStudy")}
	// CarePlanActivityKind ResearchSubject
	CarePlanActivityKindResearchSubject = Code{Value: ptr.To("ResearchSubject")}
	// CarePlanActivityKind Resource
	CarePlanActivityKindResource = Code{Value: ptr.To("Resource")}
	// CarePlanActivityKind RiskAssessment
	CarePlanActivityKindRiskAssessment = Code{Value: ptr.To("RiskAssessment")}
	// CarePlanActivityKind RiskEvidenceSynthesis
	CarePlanActivityKindRiskEvidenceSynthesis = Code{Value: ptr.To("RiskEvidenceSynthesis")}
	// CarePlanActivityKind Schedule
	CarePlanActivityKindSchedule = Code{Value: ptr.To("Schedule")}
	// CarePlanActivityKind SearchParameter
	CarePlanActivityKindSearchParameter = Code{Value: ptr.To("SearchParameter")}
	// CarePlanActivityKind ServiceRequest
	CarePlanActivityKindServiceRequest = Code{Value: ptr.To("ServiceRequest")}
	// CarePlanActivityKind Slot
	CarePlanActivityKindSlot = Code{Value: ptr.To("Slot")}
	// CarePlanActivityKind Specimen
	CarePlanActivityKindSpecimen = Code{Value: ptr.To("Specimen")}
	// CarePlanActivityKind SpecimenDefinition
	CarePlanActivityKindSpecimenDefinition = Code{Value: ptr.To("SpecimenDefinition")}
	// CarePlanActivityKind StructureDefinition
	CarePlanActivityKindStructureDefinition = Code{Value: ptr.To("StructureDefinition")}
	// CarePlanActivityKind StructureMap
	CarePlanActivityKindStructureMap = Code{Value: ptr.To("StructureMap")}
	// CarePlanActivityKind Subscription
	CarePlanActivityKindSubscription = Code{Value: ptr.To("Subscription")}
	// CarePlanActivityKind Substance
	CarePlanActivityKindSubstance = Code{Value: ptr.To("Substance")}
	// CarePlanActivityKind SubstanceNucleicAcid
	CarePlanActivityKindSubstanceNucleicAcid = Code{Value: ptr.To("SubstanceNucleicAcid")}
	// CarePlanActivityKind SubstancePolymer
	CarePlanActivityKindSubstancePolymer = Code{Value: ptr.To("SubstancePolymer")}
	// CarePlanActivityKind SubstanceProtein
	CarePlanActivityKindSubstanceProtein = Code{Value: ptr.To("SubstanceProtein")}
	// CarePlanActivityKind SubstanceReferenceInformation
	CarePlanActivityKindSubstanceReferenceInformation = Code{Value: ptr.To("SubstanceReferenceInformation")}
	// CarePlanActivityKind SubstanceSourceMaterial
	CarePlanActivityKindSubstanceSourceMaterial = Code{Value: ptr.To("SubstanceSourceMaterial")}
	// CarePlanActivityKind SubstanceSpecification
	CarePlanActivityKindSubstanceSpecification = Code{Value: ptr.To("SubstanceSpecification")}
	// CarePlanActivityKind SupplyDelivery
	CarePlanActivityKindSupplyDelivery = Code{Value: ptr.To("SupplyDelivery")}
	// CarePlanActivityKind SupplyRequest
	CarePlanActivityKindSupplyRequest = Code{Value: ptr.To("SupplyRequest")}
	// CarePlanActivityKind Task
	CarePlanActivityKindTask = Code{Value: ptr.To("Task")}
	// CarePlanActivityKind TerminologyCapabilities
	CarePlanActivityKindTerminologyCapabilities = Code{Value: ptr.To("TerminologyCapabilities")}
	// CarePlanActivityKind TestReport
	CarePlanActivityKindTestReport = Code{Value: ptr.To("TestReport")}
	// CarePlanActivityKind TestScript
	CarePlanActivityKindTestScript = Code{Value: ptr.To("TestScript")}
	// CarePlanActivityKind ValueSet
	CarePlanActivityKindValueSet = Code{Value: ptr.To("ValueSet")}
	// CarePlanActivityKind VerificationResult
	CarePlanActivityKindVerificationResult = Code{Value: ptr.To("VerificationResult")}
	// CarePlanActivityKind VisionPrescription
	CarePlanActivityKindVisionPrescription = Code{Value: ptr.To("VisionPrescription")}
)

var (
	// CarePlanActivityStatus Cancelled
	CarePlanActivityStatusCancelled = Code{Value: ptr.To("cancelled")}
	// CarePlanActivityStatus Completed
	CarePlanActivityStatusCompleted = Code{Value: ptr.To("completed")}
	// CarePlanActivityStatus Entered in Error
	CarePlanActivityStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// CarePlanActivityStatus In Progress
	CarePlanActivityStatusInProgress = Code{Value: ptr.To("in-progress")}
	// CarePlanActivityStatus Not Started
	CarePlanActivityStatusNotStarted = Code{Value: ptr.To("not-started")}
	// CarePlanActivityStatus On Hold
	CarePlanActivityStatusOnHold = Code{Value: ptr.To("on-hold")}
	// CarePlanActivityStatus Scheduled
	CarePlanActivityStatusScheduled = Code{Value: ptr.To("scheduled")}
	// CarePlanActivityStatus Unknown
	CarePlanActivityStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// CarePlanIntent Directive
	CarePlanIntentDirective = Code{Value: ptr.To("directive")}
	// CarePlanIntent Option
	CarePlanIntentOption = Code{Value: ptr.To("option")}
	// CarePlanIntent Order
	CarePlanIntentOrder = Code{Value: ptr.To("order")}
	// CarePlanIntent Plan
	CarePlanIntentPlan = Code{Value: ptr.To("plan")}
	// CarePlanIntent Proposal
	CarePlanIntentProposal = Code{Value: ptr.To("proposal")}
)

var (
	// CareTeamStatus Active
	CareTeamStatusActive = Code{Value: ptr.To("active")}
	// CareTeamStatus Entered in Error
	CareTeamStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// CareTeamStatus Inactive
	CareTeamStatusInactive = Code{Value: ptr.To("inactive")}
	// CareTeamStatus Proposed
	CareTeamStatusProposed = Code{Value: ptr.To("proposed")}
	// CareTeamStatus Suspended
	CareTeamStatusSuspended = Code{Value: ptr.To("suspended")}
)

var (
	// CatalogEntryRelationType Replaced By
	CatalogEntryRelationTypeIsReplacedBy = Code{Value: ptr.To("is-replaced-by")}
	// CatalogEntryRelationType Triggers
	CatalogEntryRelationTypeTriggers = Code{Value: ptr.To("triggers")}
)

var (
	// ChargeItemStatus Aborted
	ChargeItemStatusAborted = Code{Value: ptr.To("aborted")}
	// ChargeItemStatus Billable
	ChargeItemStatusBillable = Code{Value: ptr.To("billable")}
	// ChargeItemStatus Billed
	ChargeItemStatusBilled = Code{Value: ptr.To("billed")}
	// ChargeItemStatus Entered in Error
	ChargeItemStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ChargeItemStatus Not billable
	ChargeItemStatusNotBillable = Code{Value: ptr.To("not-billable")}
	// ChargeItemStatus Planned
	ChargeItemStatusPlanned = Code{Value: ptr.To("planned")}
	// ChargeItemStatus Unknown
	ChargeItemStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ClaimProcessingCodes Processing Complete
	ClaimProcessingCodesComplete = Code{Value: ptr.To("complete")}
	// ClaimProcessingCodes Error
	ClaimProcessingCodesError = Code{Value: ptr.To("error")}
	// ClaimProcessingCodes Partial Processing
	ClaimProcessingCodesPartial = Code{Value: ptr.To("partial")}
	// ClaimProcessingCodes Queued
	ClaimProcessingCodesQueued = Code{Value: ptr.To("queued")}
)

var (
	// ClinicalImpressionStatus Completed
	ClinicalImpressionStatusCompleted = Code{Value: ptr.To("completed")}
	// ClinicalImpressionStatus Entered in Error
	ClinicalImpressionStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ClinicalImpressionStatus In Progress
	ClinicalImpressionStatusInProgress = Code{Value: ptr.To("in-progress")}
	// ClinicalImpressionStatus Not Done
	ClinicalImpressionStatusNotDone = Code{Value: ptr.To("not-done")}
	// ClinicalImpressionStatus On Hold
	ClinicalImpressionStatusOnHold = Code{Value: ptr.To("on-hold")}
	// ClinicalImpressionStatus Preparation
	ClinicalImpressionStatusPreparation = Code{Value: ptr.To("preparation")}
	// ClinicalImpressionStatus Stopped
	ClinicalImpressionStatusStopped = Code{Value: ptr.To("stopped")}
	// ClinicalImpressionStatus Unknown
	ClinicalImpressionStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// CodeSearchSupport Implicit Codes
	CodeSearchSupportAll = Code{Value: ptr.To("all")}
	// CodeSearchSupport Explicit Codes
	CodeSearchSupportExplicit = Code{Value: ptr.To("explicit")}
)

var (
	// CodeSystemContentMode Complete
	CodeSystemContentModeComplete = Code{Value: ptr.To("complete")}
	// CodeSystemContentMode Example
	CodeSystemContentModeExample = Code{Value: ptr.To("example")}
	// CodeSystemContentMode Fragment
	CodeSystemContentModeFragment = Code{Value: ptr.To("fragment")}
	// CodeSystemContentMode Not Present
	CodeSystemContentModeNotPresent = Code{Value: ptr.To("not-present")}
	// CodeSystemContentMode Supplement
	CodeSystemContentModeSupplement = Code{Value: ptr.To("supplement")}
)

var (
	// CodeSystemHierarchyMeaning Classified With
	CodeSystemHierarchyMeaningClassifiedWith = Code{Value: ptr.To("classified-with")}
	// CodeSystemHierarchyMeaning Grouped By
	CodeSystemHierarchyMeaningGroupedBy = Code{Value: ptr.To("grouped-by")}
	// CodeSystemHierarchyMeaning Is-A
	CodeSystemHierarchyMeaningIsA = Code{Value: ptr.To("is-a")}
	// CodeSystemHierarchyMeaning Part Of
	CodeSystemHierarchyMeaningPartOf = Code{Value: ptr.To("part-of")}
)

var (
	// CompartmentType Device
	CompartmentTypeDevice = Code{Value: ptr.To("Device")}
	// CompartmentType Encounter
	CompartmentTypeEncounter = Code{Value: ptr.To("Encounter")}
	// CompartmentType Patient
	CompartmentTypePatient = Code{Value: ptr.To("Patient")}
	// CompartmentType Practitioner
	CompartmentTypePractitioner = Code{Value: ptr.To("Practitioner")}
	// CompartmentType RelatedPerson
	CompartmentTypeRelatedPerson = Code{Value: ptr.To("RelatedPerson")}
)

var (
	// CompositionAttestationMode Legal
	CompositionAttestationModeLegal = Code{Value: ptr.To("legal")}
	// CompositionAttestationMode Official
	CompositionAttestationModeOfficial = Code{Value: ptr.To("official")}
	// CompositionAttestationMode Personal
	CompositionAttestationModePersonal = Code{Value: ptr.To("personal")}
	// CompositionAttestationMode Professional
	CompositionAttestationModeProfessional = Code{Value: ptr.To("professional")}
)

var (
	// CompositionStatus Amended
	CompositionStatusAmended = Code{Value: ptr.To("amended")}
	// CompositionStatus Entered in Error
	CompositionStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// CompositionStatus Final
	CompositionStatusFinal = Code{Value: ptr.To("final")}
	// CompositionStatus Preliminary
	CompositionStatusPreliminary = Code{Value: ptr.To("preliminary")}
)

var (
	// ConceptMapEquivalence Related To
	ConceptMapEquivalenceRelatedto = Code{Value: ptr.To("relatedto")}
	// ConceptMapEquivalence Unmatched
	ConceptMapEquivalenceUnmatched = Code{Value: ptr.To("unmatched")}
)

var (
	// ConceptMapGroupUnmappedMode Fixed Code
	ConceptMapGroupUnmappedModeFixed = Code{Value: ptr.To("fixed")}
	// ConceptMapGroupUnmappedMode Other Map
	ConceptMapGroupUnmappedModeOtherMap = Code{Value: ptr.To("other-map")}
	// ConceptMapGroupUnmappedMode Provided Code
	ConceptMapGroupUnmappedModeProvided = Code{Value: ptr.To("provided")}
)

var (
	// ConditionClinicalStatusCodes Active
	ConditionClinicalStatusCodesActive = Code{Value: ptr.To("active")}
	// ConditionClinicalStatusCodes Inactive
	ConditionClinicalStatusCodesInactive = Code{Value: ptr.To("inactive")}
)

var (
	// ConditionVerificationStatus Confirmed
	ConditionVerificationStatusConfirmed = Code{Value: ptr.To("confirmed")}
	// ConditionVerificationStatus Entered in Error
	ConditionVerificationStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ConditionVerificationStatus Refuted
	ConditionVerificationStatusRefuted = Code{Value: ptr.To("refuted")}
	// ConditionVerificationStatus Unconfirmed
	ConditionVerificationStatusUnconfirmed = Code{Value: ptr.To("unconfirmed")}
)

var (
	// ConditionalDeleteStatus Multiple Deletes Supported
	ConditionalDeleteStatusMultiple = Code{Value: ptr.To("multiple")}
	// ConditionalDeleteStatus Not Supported
	ConditionalDeleteStatusNotSupported = Code{Value: ptr.To("not-supported")}
	// ConditionalDeleteStatus Single Deletes Supported
	ConditionalDeleteStatusSingle = Code{Value: ptr.To("single")}
)

var (
	// ConditionalReadStatus Full Support
	ConditionalReadStatusFullSupport = Code{Value: ptr.To("full-support")}
	// ConditionalReadStatus If-Modified-Since
	ConditionalReadStatusModifiedSince = Code{Value: ptr.To("modified-since")}
	// ConditionalReadStatus If-None-Match
	ConditionalReadStatusNotMatch = Code{Value: ptr.To("not-match")}
	// ConditionalReadStatus Not Supported
	ConditionalReadStatusNotSupported = Code{Value: ptr.To("not-supported")}
)

var (
	// ConsentDataMeaning AuthoredBy
	ConsentDataMeaningAuthoredby = Code{Value: ptr.To("authoredby")}
	// ConsentDataMeaning Dependents
	ConsentDataMeaningDependents = Code{Value: ptr.To("dependents")}
	// ConsentDataMeaning Instance
	ConsentDataMeaningInstance = Code{Value: ptr.To("instance")}
	// ConsentDataMeaning Related
	ConsentDataMeaningRelated = Code{Value: ptr.To("related")}
)

var (
	// ConsentProvisionType Opt Out
	ConsentProvisionTypeDeny = Code{Value: ptr.To("deny")}
	// ConsentProvisionType Opt In
	ConsentProvisionTypePermit = Code{Value: ptr.To("permit")}
)

var (
	// ConsentState Active
	ConsentStateActive = Code{Value: ptr.To("active")}
	// ConsentState Pending
	ConsentStateDraft = Code{Value: ptr.To("draft")}
	// ConsentState Entered in Error
	ConsentStateEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ConsentState Inactive
	ConsentStateInactive = Code{Value: ptr.To("inactive")}
	// ConsentState Proposed
	ConsentStateProposed = Code{Value: ptr.To("proposed")}
	// ConsentState Rejected
	ConsentStateRejected = Code{Value: ptr.To("rejected")}
)

var (
	// ConstraintSeverity Error
	ConstraintSeverityError = Code{Value: ptr.To("error")}
	// ConstraintSeverity Warning
	ConstraintSeverityWarning = Code{Value: ptr.To("warning")}
)

var (
	// ContactPointSystem Email
	ContactPointSystemEmail = Code{Value: ptr.To("email")}
	// ContactPointSystem Fax
	ContactPointSystemFax = Code{Value: ptr.To("fax")}
	// ContactPointSystem Other
	ContactPointSystemOther = Code{Value: ptr.To("other")}
	// ContactPointSystem Pager
	ContactPointSystemPager = Code{Value: ptr.To("pager")}
	// ContactPointSystem Phone
	ContactPointSystemPhone = Code{Value: ptr.To("phone")}
	// ContactPointSystem SMS
	ContactPointSystemSms = Code{Value: ptr.To("sms")}
	// ContactPointSystem URL
	ContactPointSystemUrl = Code{Value: ptr.To("url")}
)

var (
	// ContactPointUse Home
	ContactPointUseHome = Code{Value: ptr.To("home")}
	// ContactPointUse Mobile
	ContactPointUseMobile = Code{Value: ptr.To("mobile")}
	// ContactPointUse Old
	ContactPointUseOld = Code{Value: ptr.To("old")}
	// ContactPointUse Temp
	ContactPointUseTemp = Code{Value: ptr.To("temp")}
	// ContactPointUse Work
	ContactPointUseWork = Code{Value: ptr.To("work")}
)

var (
	// ContractResourcePublicationStatusCodes Amended
	ContractResourcePublicationStatusCodesAmended = Code{Value: ptr.To("amended")}
	// ContractResourcePublicationStatusCodes Appended
	ContractResourcePublicationStatusCodesAppended = Code{Value: ptr.To("appended")}
	// ContractResourcePublicationStatusCodes Cancelled
	ContractResourcePublicationStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// ContractResourcePublicationStatusCodes Disputed
	ContractResourcePublicationStatusCodesDisputed = Code{Value: ptr.To("disputed")}
	// ContractResourcePublicationStatusCodes Entered in Error
	ContractResourcePublicationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ContractResourcePublicationStatusCodes Executable
	ContractResourcePublicationStatusCodesExecutable = Code{Value: ptr.To("executable")}
	// ContractResourcePublicationStatusCodes Executed
	ContractResourcePublicationStatusCodesExecuted = Code{Value: ptr.To("executed")}
	// ContractResourcePublicationStatusCodes Negotiable
	ContractResourcePublicationStatusCodesNegotiable = Code{Value: ptr.To("negotiable")}
	// ContractResourcePublicationStatusCodes Offered
	ContractResourcePublicationStatusCodesOffered = Code{Value: ptr.To("offered")}
	// ContractResourcePublicationStatusCodes Policy
	ContractResourcePublicationStatusCodesPolicy = Code{Value: ptr.To("policy")}
	// ContractResourcePublicationStatusCodes Rejected
	ContractResourcePublicationStatusCodesRejected = Code{Value: ptr.To("rejected")}
	// ContractResourcePublicationStatusCodes Renewed
	ContractResourcePublicationStatusCodesRenewed = Code{Value: ptr.To("renewed")}
	// ContractResourcePublicationStatusCodes Resolved
	ContractResourcePublicationStatusCodesResolved = Code{Value: ptr.To("resolved")}
	// ContractResourcePublicationStatusCodes Revoked
	ContractResourcePublicationStatusCodesRevoked = Code{Value: ptr.To("revoked")}
	// ContractResourcePublicationStatusCodes Terminated
	ContractResourcePublicationStatusCodesTerminated = Code{Value: ptr.To("terminated")}
)

var (
	// ContractResourceStatusCodes Amended
	ContractResourceStatusCodesAmended = Code{Value: ptr.To("amended")}
	// ContractResourceStatusCodes Appended
	ContractResourceStatusCodesAppended = Code{Value: ptr.To("appended")}
	// ContractResourceStatusCodes Cancelled
	ContractResourceStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// ContractResourceStatusCodes Disputed
	ContractResourceStatusCodesDisputed = Code{Value: ptr.To("disputed")}
	// ContractResourceStatusCodes Entered in Error
	ContractResourceStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ContractResourceStatusCodes Executable
	ContractResourceStatusCodesExecutable = Code{Value: ptr.To("executable")}
	// ContractResourceStatusCodes Executed
	ContractResourceStatusCodesExecuted = Code{Value: ptr.To("executed")}
	// ContractResourceStatusCodes Negotiable
	ContractResourceStatusCodesNegotiable = Code{Value: ptr.To("negotiable")}
	// ContractResourceStatusCodes Offered
	ContractResourceStatusCodesOffered = Code{Value: ptr.To("offered")}
	// ContractResourceStatusCodes Policy
	ContractResourceStatusCodesPolicy = Code{Value: ptr.To("policy")}
	// ContractResourceStatusCodes Rejected
	ContractResourceStatusCodesRejected = Code{Value: ptr.To("rejected")}
	// ContractResourceStatusCodes Renewed
	ContractResourceStatusCodesRenewed = Code{Value: ptr.To("renewed")}
	// ContractResourceStatusCodes Resolved
	ContractResourceStatusCodesResolved = Code{Value: ptr.To("resolved")}
	// ContractResourceStatusCodes Revoked
	ContractResourceStatusCodesRevoked = Code{Value: ptr.To("revoked")}
	// ContractResourceStatusCodes Terminated
	ContractResourceStatusCodesTerminated = Code{Value: ptr.To("terminated")}
)

var (
	// ContributorType Author
	ContributorTypeAuthor = Code{Value: ptr.To("author")}
	// ContributorType Editor
	ContributorTypeEditor = Code{Value: ptr.To("editor")}
	// ContributorType Endorser
	ContributorTypeEndorser = Code{Value: ptr.To("endorser")}
	// ContributorType Reviewer
	ContributorTypeReviewer = Code{Value: ptr.To("reviewer")}
)

var (
	// DaysOfWeek Friday
	DaysOfWeekFri = Code{Value: ptr.To("fri")}
	// DaysOfWeek Monday
	DaysOfWeekMon = Code{Value: ptr.To("mon")}
	// DaysOfWeek Saturday
	DaysOfWeekSat = Code{Value: ptr.To("sat")}
	// DaysOfWeek Sunday
	DaysOfWeekSun = Code{Value: ptr.To("sun")}
	// DaysOfWeek Thursday
	DaysOfWeekThu = Code{Value: ptr.To("thu")}
	// DaysOfWeek Tuesday
	DaysOfWeekTue = Code{Value: ptr.To("tue")}
	// DaysOfWeek Wednesday
	DaysOfWeekWed = Code{Value: ptr.To("wed")}
)

var (
	// DetectedIssueSeverity High
	DetectedIssueSeverityHigh = Code{Value: ptr.To("high")}
	// DetectedIssueSeverity Low
	DetectedIssueSeverityLow = Code{Value: ptr.To("low")}
	// DetectedIssueSeverity Moderate
	DetectedIssueSeverityModerate = Code{Value: ptr.To("moderate")}
)

var (
	// DeviceMetricCalibrationState Calibrated
	DeviceMetricCalibrationStateCalibrated = Code{Value: ptr.To("calibrated")}
	// DeviceMetricCalibrationState Calibration Required
	DeviceMetricCalibrationStateCalibrationRequired = Code{Value: ptr.To("calibration-required")}
	// DeviceMetricCalibrationState Not Calibrated
	DeviceMetricCalibrationStateNotCalibrated = Code{Value: ptr.To("not-calibrated")}
	// DeviceMetricCalibrationState Unspecified
	DeviceMetricCalibrationStateUnspecified = Code{Value: ptr.To("unspecified")}
)

var (
	// DeviceMetricCalibrationType Gain
	DeviceMetricCalibrationTypeGain = Code{Value: ptr.To("gain")}
	// DeviceMetricCalibrationType Offset
	DeviceMetricCalibrationTypeOffset = Code{Value: ptr.To("offset")}
	// DeviceMetricCalibrationType Two Point
	DeviceMetricCalibrationTypeTwoPoint = Code{Value: ptr.To("two-point")}
	// DeviceMetricCalibrationType Unspecified
	DeviceMetricCalibrationTypeUnspecified = Code{Value: ptr.To("unspecified")}
)

var (
	// DeviceMetricCategory Calculation
	DeviceMetricCategoryCalculation = Code{Value: ptr.To("calculation")}
	// DeviceMetricCategory Measurement
	DeviceMetricCategoryMeasurement = Code{Value: ptr.To("measurement")}
	// DeviceMetricCategory Setting
	DeviceMetricCategorySetting = Code{Value: ptr.To("setting")}
	// DeviceMetricCategory Unspecified
	DeviceMetricCategoryUnspecified = Code{Value: ptr.To("unspecified")}
)

var (
	// DeviceMetricColor Color Black
	DeviceMetricColorBlack = Code{Value: ptr.To("black")}
	// DeviceMetricColor Color Blue
	DeviceMetricColorBlue = Code{Value: ptr.To("blue")}
	// DeviceMetricColor Color Cyan
	DeviceMetricColorCyan = Code{Value: ptr.To("cyan")}
	// DeviceMetricColor Color Green
	DeviceMetricColorGreen = Code{Value: ptr.To("green")}
	// DeviceMetricColor Color Magenta
	DeviceMetricColorMagenta = Code{Value: ptr.To("magenta")}
	// DeviceMetricColor Color Red
	DeviceMetricColorRed = Code{Value: ptr.To("red")}
	// DeviceMetricColor Color White
	DeviceMetricColorWhite = Code{Value: ptr.To("white")}
	// DeviceMetricColor Color Yellow
	DeviceMetricColorYellow = Code{Value: ptr.To("yellow")}
)

var (
	// DeviceMetricOperationalStatus Entered In Error
	DeviceMetricOperationalStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DeviceMetricOperationalStatus Off
	DeviceMetricOperationalStatusOff = Code{Value: ptr.To("off")}
	// DeviceMetricOperationalStatus On
	DeviceMetricOperationalStatusOn = Code{Value: ptr.To("on")}
	// DeviceMetricOperationalStatus Standby
	DeviceMetricOperationalStatusStandby = Code{Value: ptr.To("standby")}
)

var (
	// DeviceNameType Manufacturer name
	DeviceNameTypeManufacturerName = Code{Value: ptr.To("manufacturer-name")}
	// DeviceNameType Model name
	DeviceNameTypeModelName = Code{Value: ptr.To("model-name")}
	// DeviceNameType other
	DeviceNameTypeOther = Code{Value: ptr.To("other")}
	// DeviceNameType Patient Reported name
	DeviceNameTypePatientReportedName = Code{Value: ptr.To("patient-reported-name")}
	// DeviceNameType UDI Label name
	DeviceNameTypeUdiLabelName = Code{Value: ptr.To("udi-label-name")}
	// DeviceNameType User Friendly name
	DeviceNameTypeUserFriendlyName = Code{Value: ptr.To("user-friendly-name")}
)

var (
	// DeviceUseStatementStatus Active
	DeviceUseStatementStatusActive = Code{Value: ptr.To("active")}
	// DeviceUseStatementStatus Completed
	DeviceUseStatementStatusCompleted = Code{Value: ptr.To("completed")}
	// DeviceUseStatementStatus Entered in Error
	DeviceUseStatementStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DeviceUseStatementStatus Intended
	DeviceUseStatementStatusIntended = Code{Value: ptr.To("intended")}
	// DeviceUseStatementStatus On Hold
	DeviceUseStatementStatusOnHold = Code{Value: ptr.To("on-hold")}
	// DeviceUseStatementStatus Stopped
	DeviceUseStatementStatusStopped = Code{Value: ptr.To("stopped")}
)

var (
	// DiagnosticReportStatus Amended
	DiagnosticReportStatusAmended = Code{Value: ptr.To("amended")}
	// DiagnosticReportStatus Cancelled
	DiagnosticReportStatusCancelled = Code{Value: ptr.To("cancelled")}
	// DiagnosticReportStatus Entered in Error
	DiagnosticReportStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DiagnosticReportStatus Final
	DiagnosticReportStatusFinal = Code{Value: ptr.To("final")}
	// DiagnosticReportStatus Partial
	DiagnosticReportStatusPartial = Code{Value: ptr.To("partial")}
	// DiagnosticReportStatus Registered
	DiagnosticReportStatusRegistered = Code{Value: ptr.To("registered")}
	// DiagnosticReportStatus Unknown
	DiagnosticReportStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// DiscriminatorType Exists
	DiscriminatorTypeExists = Code{Value: ptr.To("exists")}
	// DiscriminatorType Pattern
	DiscriminatorTypePattern = Code{Value: ptr.To("pattern")}
	// DiscriminatorType Profile
	DiscriminatorTypeProfile = Code{Value: ptr.To("profile")}
	// DiscriminatorType Type
	DiscriminatorTypeType = Code{Value: ptr.To("type")}
	// DiscriminatorType Value
	DiscriminatorTypeValue = Code{Value: ptr.To("value")}
)

var (
	// DocumentMode Consumer
	DocumentModeConsumer = Code{Value: ptr.To("consumer")}
	// DocumentMode Producer
	DocumentModeProducer = Code{Value: ptr.To("producer")}
)

var (
	// DocumentReferenceStatus Current
	DocumentReferenceStatusCurrent = Code{Value: ptr.To("current")}
	// DocumentReferenceStatus Entered in Error
	DocumentReferenceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// DocumentReferenceStatus Superseded
	DocumentReferenceStatusSuperseded = Code{Value: ptr.To("superseded")}
)

var (
	// DocumentRelationshipType Appends
	DocumentRelationshipTypeAppends = Code{Value: ptr.To("appends")}
	// DocumentRelationshipType Replaces
	DocumentRelationshipTypeReplaces = Code{Value: ptr.To("replaces")}
	// DocumentRelationshipType Signs
	DocumentRelationshipTypeSigns = Code{Value: ptr.To("signs")}
	// DocumentRelationshipType Transforms
	DocumentRelationshipTypeTransforms = Code{Value: ptr.To("transforms")}
)

var (
	// EligibilityRequestPurpose Coverage auth-requirements
	EligibilityRequestPurposeAuthRequirements = Code{Value: ptr.To("auth-requirements")}
	// EligibilityRequestPurpose Coverage benefits
	EligibilityRequestPurposeBenefits = Code{Value: ptr.To("benefits")}
	// EligibilityRequestPurpose Coverage Discovery
	EligibilityRequestPurposeDiscovery = Code{Value: ptr.To("discovery")}
	// EligibilityRequestPurpose Coverage Validation
	EligibilityRequestPurposeValidation = Code{Value: ptr.To("validation")}
)

var (
	// EligibilityResponsePurpose Coverage auth-requirements
	EligibilityResponsePurposeAuthRequirements = Code{Value: ptr.To("auth-requirements")}
	// EligibilityResponsePurpose Coverage benefits
	EligibilityResponsePurposeBenefits = Code{Value: ptr.To("benefits")}
	// EligibilityResponsePurpose Coverage Discovery
	EligibilityResponsePurposeDiscovery = Code{Value: ptr.To("discovery")}
	// EligibilityResponsePurpose Coverage Validation
	EligibilityResponsePurposeValidation = Code{Value: ptr.To("validation")}
)

var (
	// EnableWhenBehavior All
	EnableWhenBehaviorAll = Code{Value: ptr.To("all")}
	// EnableWhenBehavior Any
	EnableWhenBehaviorAny = Code{Value: ptr.To("any")}
)

var (
	// EncounterLocationStatus Active
	EncounterLocationStatusActive = Code{Value: ptr.To("active")}
	// EncounterLocationStatus Completed
	EncounterLocationStatusCompleted = Code{Value: ptr.To("completed")}
	// EncounterLocationStatus Planned
	EncounterLocationStatusPlanned = Code{Value: ptr.To("planned")}
	// EncounterLocationStatus Reserved
	EncounterLocationStatusReserved = Code{Value: ptr.To("reserved")}
)

var (
	// EncounterStatus Arrived
	EncounterStatusArrived = Code{Value: ptr.To("arrived")}
	// EncounterStatus Cancelled
	EncounterStatusCancelled = Code{Value: ptr.To("cancelled")}
	// EncounterStatus Entered in Error
	EncounterStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EncounterStatus Finished
	EncounterStatusFinished = Code{Value: ptr.To("finished")}
	// EncounterStatus In Progress
	EncounterStatusInProgress = Code{Value: ptr.To("in-progress")}
	// EncounterStatus On Leave
	EncounterStatusOnleave = Code{Value: ptr.To("onleave")}
	// EncounterStatus Planned
	EncounterStatusPlanned = Code{Value: ptr.To("planned")}
	// EncounterStatus Triaged
	EncounterStatusTriaged = Code{Value: ptr.To("triaged")}
	// EncounterStatus Unknown
	EncounterStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// EndpointStatus Active
	EndpointStatusActive = Code{Value: ptr.To("active")}
	// EndpointStatus Entered in error
	EndpointStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EndpointStatus Error
	EndpointStatusError = Code{Value: ptr.To("error")}
	// EndpointStatus Off
	EndpointStatusOff = Code{Value: ptr.To("off")}
	// EndpointStatus Suspended
	EndpointStatusSuspended = Code{Value: ptr.To("suspended")}
	// EndpointStatus Test
	EndpointStatusTest = Code{Value: ptr.To("test")}
)

var (
	// EpisodeOfCareStatus Active
	EpisodeOfCareStatusActive = Code{Value: ptr.To("active")}
	// EpisodeOfCareStatus Cancelled
	EpisodeOfCareStatusCancelled = Code{Value: ptr.To("cancelled")}
	// EpisodeOfCareStatus Entered in Error
	EpisodeOfCareStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EpisodeOfCareStatus Finished
	EpisodeOfCareStatusFinished = Code{Value: ptr.To("finished")}
	// EpisodeOfCareStatus On Hold
	EpisodeOfCareStatusOnhold = Code{Value: ptr.To("onhold")}
	// EpisodeOfCareStatus Planned
	EpisodeOfCareStatusPlanned = Code{Value: ptr.To("planned")}
	// EpisodeOfCareStatus Waitlist
	EpisodeOfCareStatusWaitlist = Code{Value: ptr.To("waitlist")}
)

var (
	// EventCapabilityMode Receiver
	EventCapabilityModeReceiver = Code{Value: ptr.To("receiver")}
	// EventCapabilityMode Sender
	EventCapabilityModeSender = Code{Value: ptr.To("sender")}
)

var (
	// EventStatus Completed
	EventStatusCompleted = Code{Value: ptr.To("completed")}
	// EventStatus Entered in Error
	EventStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// EventStatus In Progress
	EventStatusInProgress = Code{Value: ptr.To("in-progress")}
	// EventStatus Not Done
	EventStatusNotDone = Code{Value: ptr.To("not-done")}
	// EventStatus On Hold
	EventStatusOnHold = Code{Value: ptr.To("on-hold")}
	// EventStatus Preparation
	EventStatusPreparation = Code{Value: ptr.To("preparation")}
	// EventStatus Stopped
	EventStatusStopped = Code{Value: ptr.To("stopped")}
	// EventStatus Unknown
	EventStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// EventTiming Afternoon
	EventTimingAft = Code{Value: ptr.To("AFT")}
	// EventTiming Early Afternoon
	EventTimingAftEarly = Code{Value: ptr.To("AFT.early")}
	// EventTiming Late Afternoon
	EventTimingAftLate = Code{Value: ptr.To("AFT.late")}
	// EventTiming Evening
	EventTimingEve = Code{Value: ptr.To("EVE")}
	// EventTiming Early Evening
	EventTimingEveEarly = Code{Value: ptr.To("EVE.early")}
	// EventTiming Late Evening
	EventTimingEveLate = Code{Value: ptr.To("EVE.late")}
	// EventTiming Morning
	EventTimingMorn = Code{Value: ptr.To("MORN")}
	// EventTiming Early Morning
	EventTimingMornEarly = Code{Value: ptr.To("MORN.early")}
	// EventTiming Late Morning
	EventTimingMornLate = Code{Value: ptr.To("MORN.late")}
	// EventTiming Night
	EventTimingNight = Code{Value: ptr.To("NIGHT")}
	// EventTiming Noon
	EventTimingNoon = Code{Value: ptr.To("NOON")}
	// EventTiming After Sleep
	EventTimingPhs = Code{Value: ptr.To("PHS")}
)

var (
	// EvidenceVariableType Continuous
	EvidenceVariableTypeContinuous = Code{Value: ptr.To("continuous")}
	// EvidenceVariableType Descriptive
	EvidenceVariableTypeDescriptive = Code{Value: ptr.To("descriptive")}
	// EvidenceVariableType Dichotomous
	EvidenceVariableTypeDichotomous = Code{Value: ptr.To("dichotomous")}
)

var (
	// ExampleScenarioActorType System
	ExampleScenarioActorTypeEntity = Code{Value: ptr.To("entity")}
	// ExampleScenarioActorType Person
	ExampleScenarioActorTypePerson = Code{Value: ptr.To("person")}
)

var (
	// ExplanationOfBenefitStatus Active
	ExplanationOfBenefitStatusActive = Code{Value: ptr.To("active")}
	// ExplanationOfBenefitStatus Cancelled
	ExplanationOfBenefitStatusCancelled = Code{Value: ptr.To("cancelled")}
	// ExplanationOfBenefitStatus Draft
	ExplanationOfBenefitStatusDraft = Code{Value: ptr.To("draft")}
	// ExplanationOfBenefitStatus Entered In Error
	ExplanationOfBenefitStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
)

var (
	// ExposureState Exposure
	ExposureStateExposure = Code{Value: ptr.To("exposure")}
	// ExposureState Exposure Alternative
	ExposureStateExposureAlternative = Code{Value: ptr.To("exposure-alternative")}
)

var (
	// ExtensionContextType Element ID
	ExtensionContextTypeElement = Code{Value: ptr.To("element")}
	// ExtensionContextType Extension URL
	ExtensionContextTypeExtension = Code{Value: ptr.To("extension")}
	// ExtensionContextType FHIRPath
	ExtensionContextTypeFhirpath = Code{Value: ptr.To("fhirpath")}
)

var (
	// FHIRAllTypes Address
	FhirallTypesAddress = Code{Value: ptr.To("Address")}
	// FHIRAllTypes Age
	FhirallTypesAge = Code{Value: ptr.To("Age")}
	// FHIRAllTypes Annotation
	FhirallTypesAnnotation = Code{Value: ptr.To("Annotation")}
	// FHIRAllTypes Attachment
	FhirallTypesAttachment = Code{Value: ptr.To("Attachment")}
	// FHIRAllTypes BackboneElement
	FhirallTypesBackboneElement = Code{Value: ptr.To("BackboneElement")}
	// FHIRAllTypes base64Binary
	FhirallTypesBase64Binary = Code{Value: ptr.To("base64Binary")}
	// FHIRAllTypes boolean
	FhirallTypesBoolean = Code{Value: ptr.To("boolean")}
	// FHIRAllTypes canonical
	FhirallTypesCanonical = Code{Value: ptr.To("canonical")}
	// FHIRAllTypes code
	FhirallTypesCode = Code{Value: ptr.To("code")}
	// FHIRAllTypes CodeableConcept
	FhirallTypesCodeableConcept = Code{Value: ptr.To("CodeableConcept")}
	// FHIRAllTypes Coding
	FhirallTypesCoding = Code{Value: ptr.To("Coding")}
	// FHIRAllTypes ContactDetail
	FhirallTypesContactDetail = Code{Value: ptr.To("ContactDetail")}
	// FHIRAllTypes ContactPoint
	FhirallTypesContactPoint = Code{Value: ptr.To("ContactPoint")}
	// FHIRAllTypes Contributor
	FhirallTypesContributor = Code{Value: ptr.To("Contributor")}
	// FHIRAllTypes Count
	FhirallTypesCount = Code{Value: ptr.To("Count")}
	// FHIRAllTypes DataRequirement
	FhirallTypesDataRequirement = Code{Value: ptr.To("DataRequirement")}
	// FHIRAllTypes date
	FhirallTypesDate = Code{Value: ptr.To("date")}
	// FHIRAllTypes dateTime
	FhirallTypesDateTime = Code{Value: ptr.To("dateTime")}
	// FHIRAllTypes decimal
	FhirallTypesDecimal = Code{Value: ptr.To("decimal")}
	// FHIRAllTypes Distance
	FhirallTypesDistance = Code{Value: ptr.To("Distance")}
	// FHIRAllTypes Dosage
	FhirallTypesDosage = Code{Value: ptr.To("Dosage")}
	// FHIRAllTypes Duration
	FhirallTypesDuration = Code{Value: ptr.To("Duration")}
	// FHIRAllTypes Element
	FhirallTypesElement = Code{Value: ptr.To("Element")}
	// FHIRAllTypes ElementDefinition
	FhirallTypesElementDefinition = Code{Value: ptr.To("ElementDefinition")}
	// FHIRAllTypes Expression
	FhirallTypesExpression = Code{Value: ptr.To("Expression")}
	// FHIRAllTypes Extension
	FhirallTypesExtension = Code{Value: ptr.To("Extension")}
	// FHIRAllTypes HumanName
	FhirallTypesHumanName = Code{Value: ptr.To("HumanName")}
	// FHIRAllTypes id
	FhirallTypesId = Code{Value: ptr.To("id")}
	// FHIRAllTypes Identifier
	FhirallTypesIdentifier = Code{Value: ptr.To("Identifier")}
	// FHIRAllTypes instant
	FhirallTypesInstant = Code{Value: ptr.To("instant")}
	// FHIRAllTypes integer
	FhirallTypesInteger = Code{Value: ptr.To("integer")}
	// FHIRAllTypes markdown
	FhirallTypesMarkdown = Code{Value: ptr.To("markdown")}
	// FHIRAllTypes MarketingStatus
	FhirallTypesMarketingStatus = Code{Value: ptr.To("MarketingStatus")}
	// FHIRAllTypes Meta
	FhirallTypesMeta = Code{Value: ptr.To("Meta")}
	// FHIRAllTypes Money
	FhirallTypesMoney = Code{Value: ptr.To("Money")}
	// FHIRAllTypes MoneyQuantity
	FhirallTypesMoneyQuantity = Code{Value: ptr.To("MoneyQuantity")}
	// FHIRAllTypes Narrative
	FhirallTypesNarrative = Code{Value: ptr.To("Narrative")}
	// FHIRAllTypes oid
	FhirallTypesOid = Code{Value: ptr.To("oid")}
	// FHIRAllTypes ParameterDefinition
	FhirallTypesParameterDefinition = Code{Value: ptr.To("ParameterDefinition")}
	// FHIRAllTypes Period
	FhirallTypesPeriod = Code{Value: ptr.To("Period")}
	// FHIRAllTypes Population
	FhirallTypesPopulation = Code{Value: ptr.To("Population")}
	// FHIRAllTypes positiveInt
	FhirallTypesPositiveInt = Code{Value: ptr.To("positiveInt")}
	// FHIRAllTypes ProdCharacteristic
	FhirallTypesProdCharacteristic = Code{Value: ptr.To("ProdCharacteristic")}
	// FHIRAllTypes ProductShelfLife
	FhirallTypesProductShelfLife = Code{Value: ptr.To("ProductShelfLife")}
	// FHIRAllTypes Quantity
	FhirallTypesQuantity = Code{Value: ptr.To("Quantity")}
	// FHIRAllTypes Range
	FhirallTypesRange = Code{Value: ptr.To("Range")}
	// FHIRAllTypes Ratio
	FhirallTypesRatio = Code{Value: ptr.To("Ratio")}
	// FHIRAllTypes Reference
	FhirallTypesReference = Code{Value: ptr.To("Reference")}
	// FHIRAllTypes RelatedArtifact
	FhirallTypesRelatedArtifact = Code{Value: ptr.To("RelatedArtifact")}
	// FHIRAllTypes SampledData
	FhirallTypesSampledData = Code{Value: ptr.To("SampledData")}
	// FHIRAllTypes Signature
	FhirallTypesSignature = Code{Value: ptr.To("Signature")}
	// FHIRAllTypes SimpleQuantity
	FhirallTypesSimpleQuantity = Code{Value: ptr.To("SimpleQuantity")}
	// FHIRAllTypes string
	FhirallTypesString = Code{Value: ptr.To("string")}
	// FHIRAllTypes SubstanceAmount
	FhirallTypesSubstanceAmount = Code{Value: ptr.To("SubstanceAmount")}
	// FHIRAllTypes time
	FhirallTypesTime = Code{Value: ptr.To("time")}
	// FHIRAllTypes Timing
	FhirallTypesTiming = Code{Value: ptr.To("Timing")}
	// FHIRAllTypes TriggerDefinition
	FhirallTypesTriggerDefinition = Code{Value: ptr.To("TriggerDefinition")}
	// FHIRAllTypes unsignedInt
	FhirallTypesUnsignedInt = Code{Value: ptr.To("unsignedInt")}
	// FHIRAllTypes uri
	FhirallTypesUri = Code{Value: ptr.To("uri")}
	// FHIRAllTypes url
	FhirallTypesUrl = Code{Value: ptr.To("url")}
	// FHIRAllTypes UsageContext
	FhirallTypesUsageContext = Code{Value: ptr.To("UsageContext")}
	// FHIRAllTypes uuid
	FhirallTypesUuid = Code{Value: ptr.To("uuid")}
	// FHIRAllTypes XHTML
	FhirallTypesXhtml = Code{Value: ptr.To("xhtml")}
)

var (
	// FHIRDefinedType Address
	FhirdefinedTypeAddress = Code{Value: ptr.To("Address")}
	// FHIRDefinedType Age
	FhirdefinedTypeAge = Code{Value: ptr.To("Age")}
	// FHIRDefinedType Annotation
	FhirdefinedTypeAnnotation = Code{Value: ptr.To("Annotation")}
	// FHIRDefinedType Attachment
	FhirdefinedTypeAttachment = Code{Value: ptr.To("Attachment")}
	// FHIRDefinedType BackboneElement
	FhirdefinedTypeBackboneElement = Code{Value: ptr.To("BackboneElement")}
	// FHIRDefinedType base64Binary
	FhirdefinedTypeBase64Binary = Code{Value: ptr.To("base64Binary")}
	// FHIRDefinedType boolean
	FhirdefinedTypeBoolean = Code{Value: ptr.To("boolean")}
	// FHIRDefinedType canonical
	FhirdefinedTypeCanonical = Code{Value: ptr.To("canonical")}
	// FHIRDefinedType code
	FhirdefinedTypeCode = Code{Value: ptr.To("code")}
	// FHIRDefinedType CodeableConcept
	FhirdefinedTypeCodeableConcept = Code{Value: ptr.To("CodeableConcept")}
	// FHIRDefinedType Coding
	FhirdefinedTypeCoding = Code{Value: ptr.To("Coding")}
	// FHIRDefinedType ContactDetail
	FhirdefinedTypeContactDetail = Code{Value: ptr.To("ContactDetail")}
	// FHIRDefinedType ContactPoint
	FhirdefinedTypeContactPoint = Code{Value: ptr.To("ContactPoint")}
	// FHIRDefinedType Contributor
	FhirdefinedTypeContributor = Code{Value: ptr.To("Contributor")}
	// FHIRDefinedType Count
	FhirdefinedTypeCount = Code{Value: ptr.To("Count")}
	// FHIRDefinedType DataRequirement
	FhirdefinedTypeDataRequirement = Code{Value: ptr.To("DataRequirement")}
	// FHIRDefinedType date
	FhirdefinedTypeDate = Code{Value: ptr.To("date")}
	// FHIRDefinedType dateTime
	FhirdefinedTypeDateTime = Code{Value: ptr.To("dateTime")}
	// FHIRDefinedType decimal
	FhirdefinedTypeDecimal = Code{Value: ptr.To("decimal")}
	// FHIRDefinedType Distance
	FhirdefinedTypeDistance = Code{Value: ptr.To("Distance")}
	// FHIRDefinedType Dosage
	FhirdefinedTypeDosage = Code{Value: ptr.To("Dosage")}
	// FHIRDefinedType Duration
	FhirdefinedTypeDuration = Code{Value: ptr.To("Duration")}
	// FHIRDefinedType Element
	FhirdefinedTypeElement = Code{Value: ptr.To("Element")}
	// FHIRDefinedType ElementDefinition
	FhirdefinedTypeElementDefinition = Code{Value: ptr.To("ElementDefinition")}
	// FHIRDefinedType Expression
	FhirdefinedTypeExpression = Code{Value: ptr.To("Expression")}
	// FHIRDefinedType Extension
	FhirdefinedTypeExtension = Code{Value: ptr.To("Extension")}
	// FHIRDefinedType HumanName
	FhirdefinedTypeHumanName = Code{Value: ptr.To("HumanName")}
	// FHIRDefinedType id
	FhirdefinedTypeId = Code{Value: ptr.To("id")}
	// FHIRDefinedType Identifier
	FhirdefinedTypeIdentifier = Code{Value: ptr.To("Identifier")}
	// FHIRDefinedType instant
	FhirdefinedTypeInstant = Code{Value: ptr.To("instant")}
	// FHIRDefinedType integer
	FhirdefinedTypeInteger = Code{Value: ptr.To("integer")}
	// FHIRDefinedType markdown
	FhirdefinedTypeMarkdown = Code{Value: ptr.To("markdown")}
	// FHIRDefinedType MarketingStatus
	FhirdefinedTypeMarketingStatus = Code{Value: ptr.To("MarketingStatus")}
	// FHIRDefinedType Meta
	FhirdefinedTypeMeta = Code{Value: ptr.To("Meta")}
	// FHIRDefinedType Money
	FhirdefinedTypeMoney = Code{Value: ptr.To("Money")}
	// FHIRDefinedType MoneyQuantity
	FhirdefinedTypeMoneyQuantity = Code{Value: ptr.To("MoneyQuantity")}
	// FHIRDefinedType Narrative
	FhirdefinedTypeNarrative = Code{Value: ptr.To("Narrative")}
	// FHIRDefinedType oid
	FhirdefinedTypeOid = Code{Value: ptr.To("oid")}
	// FHIRDefinedType ParameterDefinition
	FhirdefinedTypeParameterDefinition = Code{Value: ptr.To("ParameterDefinition")}
	// FHIRDefinedType Period
	FhirdefinedTypePeriod = Code{Value: ptr.To("Period")}
	// FHIRDefinedType Population
	FhirdefinedTypePopulation = Code{Value: ptr.To("Population")}
	// FHIRDefinedType positiveInt
	FhirdefinedTypePositiveInt = Code{Value: ptr.To("positiveInt")}
	// FHIRDefinedType ProdCharacteristic
	FhirdefinedTypeProdCharacteristic = Code{Value: ptr.To("ProdCharacteristic")}
	// FHIRDefinedType ProductShelfLife
	FhirdefinedTypeProductShelfLife = Code{Value: ptr.To("ProductShelfLife")}
	// FHIRDefinedType Quantity
	FhirdefinedTypeQuantity = Code{Value: ptr.To("Quantity")}
	// FHIRDefinedType Range
	FhirdefinedTypeRange = Code{Value: ptr.To("Range")}
	// FHIRDefinedType Ratio
	FhirdefinedTypeRatio = Code{Value: ptr.To("Ratio")}
	// FHIRDefinedType Reference
	FhirdefinedTypeReference = Code{Value: ptr.To("Reference")}
	// FHIRDefinedType RelatedArtifact
	FhirdefinedTypeRelatedArtifact = Code{Value: ptr.To("RelatedArtifact")}
	// FHIRDefinedType SampledData
	FhirdefinedTypeSampledData = Code{Value: ptr.To("SampledData")}
	// FHIRDefinedType Signature
	FhirdefinedTypeSignature = Code{Value: ptr.To("Signature")}
	// FHIRDefinedType SimpleQuantity
	FhirdefinedTypeSimpleQuantity = Code{Value: ptr.To("SimpleQuantity")}
	// FHIRDefinedType string
	FhirdefinedTypeString = Code{Value: ptr.To("string")}
	// FHIRDefinedType SubstanceAmount
	FhirdefinedTypeSubstanceAmount = Code{Value: ptr.To("SubstanceAmount")}
	// FHIRDefinedType time
	FhirdefinedTypeTime = Code{Value: ptr.To("time")}
	// FHIRDefinedType Timing
	FhirdefinedTypeTiming = Code{Value: ptr.To("Timing")}
	// FHIRDefinedType TriggerDefinition
	FhirdefinedTypeTriggerDefinition = Code{Value: ptr.To("TriggerDefinition")}
	// FHIRDefinedType unsignedInt
	FhirdefinedTypeUnsignedInt = Code{Value: ptr.To("unsignedInt")}
	// FHIRDefinedType uri
	FhirdefinedTypeUri = Code{Value: ptr.To("uri")}
	// FHIRDefinedType url
	FhirdefinedTypeUrl = Code{Value: ptr.To("url")}
	// FHIRDefinedType UsageContext
	FhirdefinedTypeUsageContext = Code{Value: ptr.To("UsageContext")}
	// FHIRDefinedType uuid
	FhirdefinedTypeUuid = Code{Value: ptr.To("uuid")}
	// FHIRDefinedType XHTML
	FhirdefinedTypeXhtml = Code{Value: ptr.To("xhtml")}
)

var (
	// FHIRDeviceStatus Active
	FhirdeviceStatusActive = Code{Value: ptr.To("active")}
	// FHIRDeviceStatus Entered in Error
	FhirdeviceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FHIRDeviceStatus Inactive
	FhirdeviceStatusInactive = Code{Value: ptr.To("inactive")}
	// FHIRDeviceStatus Unknown
	FhirdeviceStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// FHIRSubstanceStatus Active
	FhirsubstanceStatusActive = Code{Value: ptr.To("active")}
	// FHIRSubstanceStatus Entered in Error
	FhirsubstanceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FHIRSubstanceStatus Inactive
	FhirsubstanceStatusInactive = Code{Value: ptr.To("inactive")}
)

var (
	// FHIRVersion 0.01
	Fhirversion001 = Code{Value: ptr.To("0.01")}
	// FHIRVersion 0.05
	Fhirversion005 = Code{Value: ptr.To("0.05")}
	// FHIRVersion 0.06
	Fhirversion006 = Code{Value: ptr.To("0.06")}
	// FHIRVersion 0.0.80
	Fhirversion0080 = Code{Value: ptr.To("0.0.80")}
	// FHIRVersion 0.0.81
	Fhirversion0081 = Code{Value: ptr.To("0.0.81")}
	// FHIRVersion 0.0.82
	Fhirversion0082 = Code{Value: ptr.To("0.0.82")}
	// FHIRVersion 0.11
	Fhirversion011 = Code{Value: ptr.To("0.11")}
	// FHIRVersion 0.4.0
	Fhirversion040 = Code{Value: ptr.To("0.4.0")}
	// FHIRVersion 0.5.0
	Fhirversion050 = Code{Value: ptr.To("0.5.0")}
	// FHIRVersion 1.0.0
	Fhirversion100 = Code{Value: ptr.To("1.0.0")}
	// FHIRVersion 1.0.1
	Fhirversion101 = Code{Value: ptr.To("1.0.1")}
	// FHIRVersion 1.0.2
	Fhirversion102 = Code{Value: ptr.To("1.0.2")}
	// FHIRVersion 1.1.0
	Fhirversion110 = Code{Value: ptr.To("1.1.0")}
	// FHIRVersion 1.4.0
	Fhirversion140 = Code{Value: ptr.To("1.4.0")}
	// FHIRVersion 1.6.0
	Fhirversion160 = Code{Value: ptr.To("1.6.0")}
	// FHIRVersion 1.8.0
	Fhirversion180 = Code{Value: ptr.To("1.8.0")}
	// FHIRVersion 3.0.0
	Fhirversion300 = Code{Value: ptr.To("3.0.0")}
	// FHIRVersion 3.0.1
	Fhirversion301 = Code{Value: ptr.To("3.0.1")}
	// FHIRVersion 3.3.0
	Fhirversion330 = Code{Value: ptr.To("3.3.0")}
	// FHIRVersion 3.5.0
	Fhirversion350 = Code{Value: ptr.To("3.5.0")}
	// FHIRVersion 4.0.0
	Fhirversion400 = Code{Value: ptr.To("4.0.0")}
	// FHIRVersion 4.0.1
	Fhirversion401 = Code{Value: ptr.To("4.0.1")}
)

var (
	// FamilyHistoryStatus Completed
	FamilyHistoryStatusCompleted = Code{Value: ptr.To("completed")}
	// FamilyHistoryStatus Entered in Error
	FamilyHistoryStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FamilyHistoryStatus Health Unknown
	FamilyHistoryStatusHealthUnknown = Code{Value: ptr.To("health-unknown")}
	// FamilyHistoryStatus Partial
	FamilyHistoryStatusPartial = Code{Value: ptr.To("partial")}
)

var (
	// FilterOperator Descendent Of (by subsumption)
	FilterOperatorDescendentOf = Code{Value: ptr.To("descendent-of")}
	// FilterOperator Equals
	FilterOperatorEqualTo = Code{Value: ptr.To("=")}
	// FilterOperator Exists
	FilterOperatorExists = Code{Value: ptr.To("exists")}
	// FilterOperator Generalizes (by Subsumption)
	FilterOperatorGeneralizes = Code{Value: ptr.To("generalizes")}
	// FilterOperator In Set
	FilterOperatorIn = Code{Value: ptr.To("in")}
	// FilterOperator Is A (by subsumption)
	FilterOperatorIsA = Code{Value: ptr.To("is-a")}
	// FilterOperator Not (Is A) (by subsumption)
	FilterOperatorIsNotA = Code{Value: ptr.To("is-not-a")}
	// FilterOperator Not in Set
	FilterOperatorNotIn = Code{Value: ptr.To("not-in")}
	// FilterOperator Regular Expression
	FilterOperatorRegex = Code{Value: ptr.To("regex")}
)

var (
	// FinancialResourceStatusCodes Active
	FinancialResourceStatusCodesActive = Code{Value: ptr.To("active")}
	// FinancialResourceStatusCodes Cancelled
	FinancialResourceStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// FinancialResourceStatusCodes Draft
	FinancialResourceStatusCodesDraft = Code{Value: ptr.To("draft")}
	// FinancialResourceStatusCodes Entered in Error
	FinancialResourceStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
)

var (
	// FlagStatus Active
	FlagStatusActive = Code{Value: ptr.To("active")}
	// FlagStatus Entered in Error
	FlagStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// FlagStatus Inactive
	FlagStatusInactive = Code{Value: ptr.To("inactive")}
)

var (
	// GoalLifecycleStatus Accepted
	GoalLifecycleStatusAccepted = Code{Value: ptr.To("accepted")}
	// GoalLifecycleStatus Cancelled
	GoalLifecycleStatusCancelled = Code{Value: ptr.To("cancelled")}
	// GoalLifecycleStatus Entered in Error
	GoalLifecycleStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// GoalLifecycleStatus Planned
	GoalLifecycleStatusPlanned = Code{Value: ptr.To("planned")}
	// GoalLifecycleStatus Proposed
	GoalLifecycleStatusProposed = Code{Value: ptr.To("proposed")}
	// GoalLifecycleStatus Rejected
	GoalLifecycleStatusRejected = Code{Value: ptr.To("rejected")}
)

var (
	// GraphCompartmentRule Custom
	GraphCompartmentRuleCustom = Code{Value: ptr.To("custom")}
	// GraphCompartmentRule Different
	GraphCompartmentRuleDifferent = Code{Value: ptr.To("different")}
	// GraphCompartmentRule Identical
	GraphCompartmentRuleIdentical = Code{Value: ptr.To("identical")}
	// GraphCompartmentRule Matching
	GraphCompartmentRuleMatching = Code{Value: ptr.To("matching")}
)

var (
	// GraphCompartmentUse Condition
	GraphCompartmentUseCondition = Code{Value: ptr.To("condition")}
	// GraphCompartmentUse Requirement
	GraphCompartmentUseRequirement = Code{Value: ptr.To("requirement")}
)

var (
	// GroupMeasure Mean
	GroupMeasureMean = Code{Value: ptr.To("mean")}
	// GroupMeasure Mean of Study Means
	GroupMeasureMeanOfMean = Code{Value: ptr.To("mean-of-mean")}
	// GroupMeasure Mean of Study Medins
	GroupMeasureMeanOfMedian = Code{Value: ptr.To("mean-of-median")}
	// GroupMeasure Median
	GroupMeasureMedian = Code{Value: ptr.To("median")}
	// GroupMeasure Median of Study Means
	GroupMeasureMedianOfMean = Code{Value: ptr.To("median-of-mean")}
	// GroupMeasure Median of Study Medians
	GroupMeasureMedianOfMedian = Code{Value: ptr.To("median-of-median")}
)

var (
	// GroupType Animal
	GroupTypeAnimal = Code{Value: ptr.To("animal")}
	// GroupType Device
	GroupTypeDevice = Code{Value: ptr.To("device")}
	// GroupType Medication
	GroupTypeMedication = Code{Value: ptr.To("medication")}
	// GroupType Person
	GroupTypePerson = Code{Value: ptr.To("person")}
	// GroupType Practitioner
	GroupTypePractitioner = Code{Value: ptr.To("practitioner")}
	// GroupType Substance
	GroupTypeSubstance = Code{Value: ptr.To("substance")}
)

var (
	// GuidanceResponseStatus Data Requested
	GuidanceResponseStatusDataRequested = Code{Value: ptr.To("data-requested")}
	// GuidanceResponseStatus Data Required
	GuidanceResponseStatusDataRequired = Code{Value: ptr.To("data-required")}
	// GuidanceResponseStatus Entered In Error
	GuidanceResponseStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// GuidanceResponseStatus Failure
	GuidanceResponseStatusFailure = Code{Value: ptr.To("failure")}
	// GuidanceResponseStatus In Progress
	GuidanceResponseStatusInProgress = Code{Value: ptr.To("in-progress")}
	// GuidanceResponseStatus Success
	GuidanceResponseStatusSuccess = Code{Value: ptr.To("success")}
)

var (
	// GuidePageGeneration Generated
	GuidePageGenerationGenerated = Code{Value: ptr.To("generated")}
	// GuidePageGeneration HTML
	GuidePageGenerationHtml = Code{Value: ptr.To("html")}
	// GuidePageGeneration Markdown
	GuidePageGenerationMarkdown = Code{Value: ptr.To("markdown")}
	// GuidePageGeneration XML
	GuidePageGenerationXml = Code{Value: ptr.To("xml")}
)

var (
	// GuideParameterCode Apply Metadata Value
	GuideParameterCodeApply = Code{Value: ptr.To("apply")}
	// GuideParameterCode Expansion Profile
	GuideParameterCodeExpansionParameter = Code{Value: ptr.To("expansion-parameter")}
	// GuideParameterCode Generate JSON
	GuideParameterCodeGenerateJson = Code{Value: ptr.To("generate-json")}
	// GuideParameterCode Generate Turtle
	GuideParameterCodeGenerateTurtle = Code{Value: ptr.To("generate-turtle")}
	// GuideParameterCode Generate XML
	GuideParameterCodeGenerateXml = Code{Value: ptr.To("generate-xml")}
	// GuideParameterCode HTML Template
	GuideParameterCodeHtmlTemplate = Code{Value: ptr.To("html-template")}
	// GuideParameterCode Pages Path
	GuideParameterCodePathPages = Code{Value: ptr.To("path-pages")}
	// GuideParameterCode Resource Path
	GuideParameterCodePathResource = Code{Value: ptr.To("path-resource")}
	// GuideParameterCode Terminology Cache Path
	GuideParameterCodePathTxCache = Code{Value: ptr.To("path-tx-cache")}
	// GuideParameterCode Broken Links Rule
	GuideParameterCodeRuleBrokenLinks = Code{Value: ptr.To("rule-broken-links")}
)

var (
	// HTTPVerb DELETE
	HttpverbDelete = Code{Value: ptr.To("DELETE")}
	// HTTPVerb GET
	HttpverbGet = Code{Value: ptr.To("GET")}
	// HTTPVerb HEAD
	HttpverbHead = Code{Value: ptr.To("HEAD")}
	// HTTPVerb PATCH
	HttpverbPatch = Code{Value: ptr.To("PATCH")}
	// HTTPVerb POST
	HttpverbPost = Code{Value: ptr.To("POST")}
	// HTTPVerb PUT
	HttpverbPut = Code{Value: ptr.To("PUT")}
)

var (
	// IdentifierUse Official
	IdentifierUseOfficial = Code{Value: ptr.To("official")}
	// IdentifierUse Old
	IdentifierUseOld = Code{Value: ptr.To("old")}
	// IdentifierUse Secondary
	IdentifierUseSecondary = Code{Value: ptr.To("secondary")}
	// IdentifierUse Temp
	IdentifierUseTemp = Code{Value: ptr.To("temp")}
	// IdentifierUse Usual
	IdentifierUseUsual = Code{Value: ptr.To("usual")}
)

var (
	// IdentityAssuranceLevel Level 1
	IdentityAssuranceLevelLevel1 = Code{Value: ptr.To("level1")}
	// IdentityAssuranceLevel Level 2
	IdentityAssuranceLevelLevel2 = Code{Value: ptr.To("level2")}
	// IdentityAssuranceLevel Level 3
	IdentityAssuranceLevelLevel3 = Code{Value: ptr.To("level3")}
	// IdentityAssuranceLevel Level 4
	IdentityAssuranceLevelLevel4 = Code{Value: ptr.To("level4")}
)

var (
	// ImagingStudyStatus Available
	ImagingStudyStatusAvailable = Code{Value: ptr.To("available")}
	// ImagingStudyStatus Cancelled
	ImagingStudyStatusCancelled = Code{Value: ptr.To("cancelled")}
	// ImagingStudyStatus Entered in Error
	ImagingStudyStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ImagingStudyStatus Registered
	ImagingStudyStatusRegistered = Code{Value: ptr.To("registered")}
	// ImagingStudyStatus Unknown
	ImagingStudyStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ImmunizationEvaluationStatusCodes Completed
	ImmunizationEvaluationStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// ImmunizationEvaluationStatusCodes Entered in Error
	ImmunizationEvaluationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ImmunizationEvaluationStatusCodes In Progress
	ImmunizationEvaluationStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// ImmunizationEvaluationStatusCodes Not Done
	ImmunizationEvaluationStatusCodesNotDone = Code{Value: ptr.To("not-done")}
	// ImmunizationEvaluationStatusCodes On Hold
	ImmunizationEvaluationStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// ImmunizationEvaluationStatusCodes Stopped
	ImmunizationEvaluationStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// ImmunizationEvaluationStatusCodes Unknown
	ImmunizationEvaluationStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ImmunizationStatusCodes Completed
	ImmunizationStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// ImmunizationStatusCodes Entered in Error
	ImmunizationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ImmunizationStatusCodes In Progress
	ImmunizationStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// ImmunizationStatusCodes Not Done
	ImmunizationStatusCodesNotDone = Code{Value: ptr.To("not-done")}
	// ImmunizationStatusCodes On Hold
	ImmunizationStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// ImmunizationStatusCodes Preparation
	ImmunizationStatusCodesPreparation = Code{Value: ptr.To("preparation")}
	// ImmunizationStatusCodes Stopped
	ImmunizationStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// ImmunizationStatusCodes Unknown
	ImmunizationStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// InvoicePriceComponentType base price
	InvoicePriceComponentTypeBase = Code{Value: ptr.To("base")}
	// InvoicePriceComponentType deduction
	InvoicePriceComponentTypeDeduction = Code{Value: ptr.To("deduction")}
	// InvoicePriceComponentType discount
	InvoicePriceComponentTypeDiscount = Code{Value: ptr.To("discount")}
	// InvoicePriceComponentType informational
	InvoicePriceComponentTypeInformational = Code{Value: ptr.To("informational")}
	// InvoicePriceComponentType surcharge
	InvoicePriceComponentTypeSurcharge = Code{Value: ptr.To("surcharge")}
	// InvoicePriceComponentType tax
	InvoicePriceComponentTypeTax = Code{Value: ptr.To("tax")}
)

var (
	// InvoiceStatus balanced
	InvoiceStatusBalanced = Code{Value: ptr.To("balanced")}
	// InvoiceStatus cancelled
	InvoiceStatusCancelled = Code{Value: ptr.To("cancelled")}
	// InvoiceStatus draft
	InvoiceStatusDraft = Code{Value: ptr.To("draft")}
	// InvoiceStatus entered in error
	InvoiceStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// InvoiceStatus issued
	InvoiceStatusIssued = Code{Value: ptr.To("issued")}
)

var (
	// IssueSeverity Error
	IssueSeverityError = Code{Value: ptr.To("error")}
	// IssueSeverity Fatal
	IssueSeverityFatal = Code{Value: ptr.To("fatal")}
	// IssueSeverity Information
	IssueSeverityInformation = Code{Value: ptr.To("information")}
	// IssueSeverity Warning
	IssueSeverityWarning = Code{Value: ptr.To("warning")}
)

var (
	// IssueType Informational Note
	IssueTypeInformational = Code{Value: ptr.To("informational")}
	// IssueType Invalid Content
	IssueTypeInvalid = Code{Value: ptr.To("invalid")}
	// IssueType Processing Failure
	IssueTypeProcessing = Code{Value: ptr.To("processing")}
	// IssueType Security Problem
	IssueTypeSecurity = Code{Value: ptr.To("security")}
	// IssueType Transient Issue
	IssueTypeTransient = Code{Value: ptr.To("transient")}
)

var (
	// LinkType Refer
	LinkTypeRefer = Code{Value: ptr.To("refer")}
	// LinkType Replaced-by
	LinkTypeReplacedBy = Code{Value: ptr.To("replaced-by")}
	// LinkType Replaces
	LinkTypeReplaces = Code{Value: ptr.To("replaces")}
	// LinkType See also
	LinkTypeSeealso = Code{Value: ptr.To("seealso")}
)

var (
	// LinkageType Alternate Record
	LinkageTypeAlternate = Code{Value: ptr.To("alternate")}
	// LinkageType Historical/Obsolete Record
	LinkageTypeHistorical = Code{Value: ptr.To("historical")}
	// LinkageType Source of Truth
	LinkageTypeSource = Code{Value: ptr.To("source")}
)

var (
	// ListMode Change List
	ListModeChanges = Code{Value: ptr.To("changes")}
	// ListMode Snapshot List
	ListModeSnapshot = Code{Value: ptr.To("snapshot")}
	// ListMode Working List
	ListModeWorking = Code{Value: ptr.To("working")}
)

var (
	// ListStatus Current
	ListStatusCurrent = Code{Value: ptr.To("current")}
	// ListStatus Entered In Error
	ListStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ListStatus Retired
	ListStatusRetired = Code{Value: ptr.To("retired")}
)

var (
	// LocationMode Instance
	LocationModeInstance = Code{Value: ptr.To("instance")}
	// LocationMode Kind
	LocationModeKind = Code{Value: ptr.To("kind")}
)

var (
	// LocationStatus Active
	LocationStatusActive = Code{Value: ptr.To("active")}
	// LocationStatus Inactive
	LocationStatusInactive = Code{Value: ptr.To("inactive")}
	// LocationStatus Suspended
	LocationStatusSuspended = Code{Value: ptr.To("suspended")}
)

var (
	// MeasureImprovementNotation Decreased score indicates improvement
	MeasureImprovementNotationDecrease = Code{Value: ptr.To("decrease")}
	// MeasureImprovementNotation Increased score indicates improvement
	MeasureImprovementNotationIncrease = Code{Value: ptr.To("increase")}
)

var (
	// MeasureReportStatus Complete
	MeasureReportStatusComplete = Code{Value: ptr.To("complete")}
	// MeasureReportStatus Error
	MeasureReportStatusError = Code{Value: ptr.To("error")}
	// MeasureReportStatus Pending
	MeasureReportStatusPending = Code{Value: ptr.To("pending")}
)

var (
	// MeasureReportType Data Collection
	MeasureReportTypeDataCollection = Code{Value: ptr.To("data-collection")}
	// MeasureReportType Individual
	MeasureReportTypeIndividual = Code{Value: ptr.To("individual")}
	// MeasureReportType Subject List
	MeasureReportTypeSubjectList = Code{Value: ptr.To("subject-list")}
	// MeasureReportType Summary
	MeasureReportTypeSummary = Code{Value: ptr.To("summary")}
)

var (
	// Medication Status Codes Active
	MedicationStatusCodesActive = Code{Value: ptr.To("active")}
	// Medication Status Codes Completed
	MedicationStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// Medication Status Codes Entered in Error
	MedicationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// Medication Status Codes Intended
	MedicationStatusCodesIntended = Code{Value: ptr.To("intended")}
	// Medication Status Codes Not Taken
	MedicationStatusCodesNotTaken = Code{Value: ptr.To("not-taken")}
	// Medication Status Codes On Hold
	MedicationStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// Medication Status Codes Stopped
	MedicationStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// Medication Status Codes Unknown
	MedicationStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// MedicationAdministration Status Codes Completed
	MedicationAdministrationStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// MedicationAdministration Status Codes Entered in Error
	MedicationAdministrationStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationAdministration Status Codes In Progress
	MedicationAdministrationStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// MedicationAdministration Status Codes Not Done
	MedicationAdministrationStatusCodesNotDone = Code{Value: ptr.To("not-done")}
	// MedicationAdministration Status Codes On Hold
	MedicationAdministrationStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// MedicationAdministration Status Codes Stopped
	MedicationAdministrationStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// MedicationAdministration Status Codes Unknown
	MedicationAdministrationStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// MedicationDispense Status Codes Cancelled
	MedicationDispenseStatusCodesCancelled = Code{Value: ptr.To("cancelled")}
	// MedicationDispense Status Codes Completed
	MedicationDispenseStatusCodesCompleted = Code{Value: ptr.To("completed")}
	// MedicationDispense Status Codes Declined
	MedicationDispenseStatusCodesDeclined = Code{Value: ptr.To("declined")}
	// MedicationDispense Status Codes Entered in Error
	MedicationDispenseStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationDispense Status Codes In Progress
	MedicationDispenseStatusCodesInProgress = Code{Value: ptr.To("in-progress")}
	// MedicationDispense Status Codes On Hold
	MedicationDispenseStatusCodesOnHold = Code{Value: ptr.To("on-hold")}
	// MedicationDispense Status Codes Preparation
	MedicationDispenseStatusCodesPreparation = Code{Value: ptr.To("preparation")}
	// MedicationDispense Status Codes Stopped
	MedicationDispenseStatusCodesStopped = Code{Value: ptr.To("stopped")}
	// MedicationDispense Status Codes Unknown
	MedicationDispenseStatusCodesUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// MedicationKnowledge Status Codes Active
	MedicationKnowledgeStatusCodesActive = Code{Value: ptr.To("active")}
	// MedicationKnowledge Status Codes Entered in Error
	MedicationKnowledgeStatusCodesEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// MedicationKnowledge Status Codes Inactive
	MedicationKnowledgeStatusCodesInactive = Code{Value: ptr.To("inactive")}
)

var (
	// MessageSignificanceCategory Consequence
	MessageSignificanceCategoryConsequence = Code{Value: ptr.To("consequence")}
	// MessageSignificanceCategory Currency
	MessageSignificanceCategoryCurrency = Code{Value: ptr.To("currency")}
	// MessageSignificanceCategory Notification
	MessageSignificanceCategoryNotification = Code{Value: ptr.To("notification")}
)

var (
	// NameUse Anonymous
	NameUseAnonymous = Code{Value: ptr.To("anonymous")}
	// NameUse Nickname
	NameUseNickname = Code{Value: ptr.To("nickname")}
	// NameUse Official
	NameUseOfficial = Code{Value: ptr.To("official")}
	// NameUse Old
	NameUseOld = Code{Value: ptr.To("old")}
	// NameUse Temp
	NameUseTemp = Code{Value: ptr.To("temp")}
	// NameUse Usual
	NameUseUsual = Code{Value: ptr.To("usual")}
)

var (
	// NamingSystemIdentifierType OID
	NamingSystemIdentifierTypeOid = Code{Value: ptr.To("oid")}
	// NamingSystemIdentifierType Other
	NamingSystemIdentifierTypeOther = Code{Value: ptr.To("other")}
	// NamingSystemIdentifierType URI
	NamingSystemIdentifierTypeUri = Code{Value: ptr.To("uri")}
	// NamingSystemIdentifierType UUID
	NamingSystemIdentifierTypeUuid = Code{Value: ptr.To("uuid")}
)

var (
	// NamingSystemType Code System
	NamingSystemTypeCodesystem = Code{Value: ptr.To("codesystem")}
	// NamingSystemType Identifier
	NamingSystemTypeIdentifier = Code{Value: ptr.To("identifier")}
	// NamingSystemType Root
	NamingSystemTypeRoot = Code{Value: ptr.To("root")}
)

var (
	// NarrativeStatus Additional
	NarrativeStatusAdditional = Code{Value: ptr.To("additional")}
	// NarrativeStatus Empty
	NarrativeStatusEmpty = Code{Value: ptr.To("empty")}
	// NarrativeStatus Extensions
	NarrativeStatusExtensions = Code{Value: ptr.To("extensions")}
	// NarrativeStatus Generated
	NarrativeStatusGenerated = Code{Value: ptr.To("generated")}
)

var (
	// NoteType Display
	NoteTypeDisplay = Code{Value: ptr.To("display")}
	// NoteType Print (Form)
	NoteTypePrint = Code{Value: ptr.To("print")}
	// NoteType Print (Operator)
	NoteTypePrintoper = Code{Value: ptr.To("printoper")}
)

var (
	// ObservationDataType boolean
	ObservationDataTypeBoolean = Code{Value: ptr.To("boolean")}
	// ObservationDataType CodeableConcept
	ObservationDataTypeCodeableConcept = Code{Value: ptr.To("CodeableConcept")}
	// ObservationDataType dateTime
	ObservationDataTypeDateTime = Code{Value: ptr.To("dateTime")}
	// ObservationDataType integer
	ObservationDataTypeInteger = Code{Value: ptr.To("integer")}
	// ObservationDataType Period
	ObservationDataTypePeriod = Code{Value: ptr.To("Period")}
	// ObservationDataType Quantity
	ObservationDataTypeQuantity = Code{Value: ptr.To("Quantity")}
	// ObservationDataType Range
	ObservationDataTypeRange = Code{Value: ptr.To("Range")}
	// ObservationDataType Ratio
	ObservationDataTypeRatio = Code{Value: ptr.To("Ratio")}
	// ObservationDataType SampledData
	ObservationDataTypeSampledData = Code{Value: ptr.To("SampledData")}
	// ObservationDataType string
	ObservationDataTypeString = Code{Value: ptr.To("string")}
	// ObservationDataType time
	ObservationDataTypeTime = Code{Value: ptr.To("time")}
)

var (
	// ObservationRangeCategory absolute range
	ObservationRangeCategoryAbsolute = Code{Value: ptr.To("absolute")}
	// ObservationRangeCategory critical range
	ObservationRangeCategoryCritical = Code{Value: ptr.To("critical")}
	// ObservationRangeCategory reference range
	ObservationRangeCategoryReference = Code{Value: ptr.To("reference")}
)

var (
	// ObservationStatus Amended
	ObservationStatusAmended = Code{Value: ptr.To("amended")}
	// ObservationStatus Cancelled
	ObservationStatusCancelled = Code{Value: ptr.To("cancelled")}
	// ObservationStatus Entered in Error
	ObservationStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// ObservationStatus Final
	ObservationStatusFinal = Code{Value: ptr.To("final")}
	// ObservationStatus Preliminary
	ObservationStatusPreliminary = Code{Value: ptr.To("preliminary")}
	// ObservationStatus Registered
	ObservationStatusRegistered = Code{Value: ptr.To("registered")}
	// ObservationStatus Unknown
	ObservationStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// OperationKind Operation
	OperationKindOperation = Code{Value: ptr.To("operation")}
	// OperationKind Query
	OperationKindQuery = Code{Value: ptr.To("query")}
)

var (
	// OperationParameterUse In
	OperationParameterUseIn = Code{Value: ptr.To("in")}
	// OperationParameterUse Out
	OperationParameterUseOut = Code{Value: ptr.To("out")}
)

var (
	// ParticipantRequired Information Only
	ParticipantRequiredInformationOnly = Code{Value: ptr.To("information-only")}
	// ParticipantRequired Optional
	ParticipantRequiredOptional = Code{Value: ptr.To("optional")}
	// ParticipantRequired Required
	ParticipantRequiredRequired = Code{Value: ptr.To("required")}
)

var (
	// ParticipationStatus Accepted
	ParticipationStatusAccepted = Code{Value: ptr.To("accepted")}
	// ParticipationStatus Declined
	ParticipationStatusDeclined = Code{Value: ptr.To("declined")}
	// ParticipationStatus Needs Action
	ParticipationStatusNeedsAction = Code{Value: ptr.To("needs-action")}
	// ParticipationStatus Tentative
	ParticipationStatusTentative = Code{Value: ptr.To("tentative")}
)

var (
	// PropertyRepresentation CDA Text Format
	PropertyRepresentationCdaText = Code{Value: ptr.To("cdaText")}
	// PropertyRepresentation Type Attribute
	PropertyRepresentationTypeAttr = Code{Value: ptr.To("typeAttr")}
	// PropertyRepresentation XHTML
	PropertyRepresentationXhtml = Code{Value: ptr.To("xhtml")}
	// PropertyRepresentation XML Attribute
	PropertyRepresentationXmlAttr = Code{Value: ptr.To("xmlAttr")}
	// PropertyRepresentation XML Text
	PropertyRepresentationXmlText = Code{Value: ptr.To("xmlText")}
)

var (
	// PropertyType boolean
	PropertyTypeBoolean = Code{Value: ptr.To("boolean")}
	// PropertyType code (internal reference)
	PropertyTypeCode = Code{Value: ptr.To("code")}
	// PropertyType Coding (external reference)
	PropertyTypeCoding = Code{Value: ptr.To("Coding")}
	// PropertyType dateTime
	PropertyTypeDateTime = Code{Value: ptr.To("dateTime")}
	// PropertyType decimal
	PropertyTypeDecimal = Code{Value: ptr.To("decimal")}
	// PropertyType integer
	PropertyTypeInteger = Code{Value: ptr.To("integer")}
	// PropertyType string
	PropertyTypeString = Code{Value: ptr.To("string")}
)

var (
	// ProvenanceEntityRole Derivation
	ProvenanceEntityRoleDerivation = Code{Value: ptr.To("derivation")}
)

var (
	// PublicationStatus Active
	PublicationStatusActive = Code{Value: ptr.To("active")}
	// PublicationStatus Draft
	PublicationStatusDraft = Code{Value: ptr.To("draft")}
	// PublicationStatus Retired
	PublicationStatusRetired = Code{Value: ptr.To("retired")}
	// PublicationStatus Unknown
	PublicationStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// QuantityComparator Greater than
	QuantityComparatorGreaterThan = Code{Value: ptr.To(">")}
	// QuantityComparator Greater or Equal to
	QuantityComparatorGreaterThanOrEqualTo = Code{Value: ptr.To(">=")}
	// QuantityComparator Less than
	QuantityComparatorLessThan = Code{Value: ptr.To("<")}
	// QuantityComparator Less or Equal to
	QuantityComparatorLessThanOrEqualTo = Code{Value: ptr.To("<=")}
)

var (
	// QuestionnaireItemOperator Equals
	QuestionnaireItemOperatorEqualTo = Code{Value: ptr.To("=")}
	// QuestionnaireItemOperator Exists
	QuestionnaireItemOperatorExists = Code{Value: ptr.To("exists")}
	// QuestionnaireItemOperator Greater Than
	QuestionnaireItemOperatorGreaterThan = Code{Value: ptr.To(">")}
	// QuestionnaireItemOperator Greater or Equals
	QuestionnaireItemOperatorGreaterThanOrEqualTo = Code{Value: ptr.To(">=")}
	// QuestionnaireItemOperator Less Than
	QuestionnaireItemOperatorLessThan = Code{Value: ptr.To("<")}
	// QuestionnaireItemOperator Less or Equals
	QuestionnaireItemOperatorLessThanOrEqualTo = Code{Value: ptr.To("<=")}
	// QuestionnaireItemOperator Not Equals
	QuestionnaireItemOperatorNotEqualTo = Code{Value: ptr.To("!=")}
)

var (
	// QuestionnaireItemType Display
	QuestionnaireItemTypeDisplay = Code{Value: ptr.To("display")}
	// QuestionnaireItemType Group
	QuestionnaireItemTypeGroup = Code{Value: ptr.To("group")}
	// QuestionnaireItemType Question
	QuestionnaireItemTypeQuestion = Code{Value: ptr.To("question")}
)

var (
	// QuestionnaireResponseStatus Amended
	QuestionnaireResponseStatusAmended = Code{Value: ptr.To("amended")}
	// QuestionnaireResponseStatus Completed
	QuestionnaireResponseStatusCompleted = Code{Value: ptr.To("completed")}
	// QuestionnaireResponseStatus Entered in Error
	QuestionnaireResponseStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// QuestionnaireResponseStatus In Progress
	QuestionnaireResponseStatusInProgress = Code{Value: ptr.To("in-progress")}
	// QuestionnaireResponseStatus Stopped
	QuestionnaireResponseStatusStopped = Code{Value: ptr.To("stopped")}
)

var (
	// ReferenceHandlingPolicy Reference Integrity Enforced
	ReferenceHandlingPolicyEnforced = Code{Value: ptr.To("enforced")}
	// ReferenceHandlingPolicy Literal References
	ReferenceHandlingPolicyLiteral = Code{Value: ptr.To("literal")}
	// ReferenceHandlingPolicy Local References Only
	ReferenceHandlingPolicyLocal = Code{Value: ptr.To("local")}
	// ReferenceHandlingPolicy Logical References
	ReferenceHandlingPolicyLogical = Code{Value: ptr.To("logical")}
	// ReferenceHandlingPolicy Resolves References
	ReferenceHandlingPolicyResolves = Code{Value: ptr.To("resolves")}
)

var (
	// ReferenceVersionRules Either Specific or independent
	ReferenceVersionRulesEither = Code{Value: ptr.To("either")}
	// ReferenceVersionRules Version independent
	ReferenceVersionRulesIndependent = Code{Value: ptr.To("independent")}
	// ReferenceVersionRules Version Specific
	ReferenceVersionRulesSpecific = Code{Value: ptr.To("specific")}
)

var (
	// RelatedArtifactType Citation
	RelatedArtifactTypeCitation = Code{Value: ptr.To("citation")}
	// RelatedArtifactType Composed Of
	RelatedArtifactTypeComposedOf = Code{Value: ptr.To("composed-of")}
	// RelatedArtifactType Depends On
	RelatedArtifactTypeDependsOn = Code{Value: ptr.To("depends-on")}
	// RelatedArtifactType Derived From
	RelatedArtifactTypeDerivedFrom = Code{Value: ptr.To("derived-from")}
	// RelatedArtifactType Documentation
	RelatedArtifactTypeDocumentation = Code{Value: ptr.To("documentation")}
	// RelatedArtifactType Justification
	RelatedArtifactTypeJustification = Code{Value: ptr.To("justification")}
	// RelatedArtifactType Predecessor
	RelatedArtifactTypePredecessor = Code{Value: ptr.To("predecessor")}
	// RelatedArtifactType Successor
	RelatedArtifactTypeSuccessor = Code{Value: ptr.To("successor")}
)

var (
	// RequestIntent Directive
	RequestIntentDirective = Code{Value: ptr.To("directive")}
	// RequestIntent Option
	RequestIntentOption = Code{Value: ptr.To("option")}
	// RequestIntent Order
	RequestIntentOrder = Code{Value: ptr.To("order")}
	// RequestIntent Plan
	RequestIntentPlan = Code{Value: ptr.To("plan")}
	// RequestIntent Proposal
	RequestIntentProposal = Code{Value: ptr.To("proposal")}
)

var (
	// RequestPriority ASAP
	RequestPriorityAsap = Code{Value: ptr.To("asap")}
	// RequestPriority Routine
	RequestPriorityRoutine = Code{Value: ptr.To("routine")}
	// RequestPriority STAT
	RequestPriorityStat = Code{Value: ptr.To("stat")}
	// RequestPriority Urgent
	RequestPriorityUrgent = Code{Value: ptr.To("urgent")}
)

var (
	// RequestResourceType Appointment
	RequestResourceTypeAppointment = Code{Value: ptr.To("Appointment")}
	// RequestResourceType AppointmentResponse
	RequestResourceTypeAppointmentResponse = Code{Value: ptr.To("AppointmentResponse")}
	// RequestResourceType CarePlan
	RequestResourceTypeCarePlan = Code{Value: ptr.To("CarePlan")}
	// RequestResourceType Claim
	RequestResourceTypeClaim = Code{Value: ptr.To("Claim")}
	// RequestResourceType CommunicationRequest
	RequestResourceTypeCommunicationRequest = Code{Value: ptr.To("CommunicationRequest")}
	// RequestResourceType Contract
	RequestResourceTypeContract = Code{Value: ptr.To("Contract")}
	// RequestResourceType DeviceRequest
	RequestResourceTypeDeviceRequest = Code{Value: ptr.To("DeviceRequest")}
	// RequestResourceType EnrollmentRequest
	RequestResourceTypeEnrollmentRequest = Code{Value: ptr.To("EnrollmentRequest")}
	// RequestResourceType ImmunizationRecommendation
	RequestResourceTypeImmunizationRecommendation = Code{Value: ptr.To("ImmunizationRecommendation")}
	// RequestResourceType MedicationRequest
	RequestResourceTypeMedicationRequest = Code{Value: ptr.To("MedicationRequest")}
	// RequestResourceType NutritionOrder
	RequestResourceTypeNutritionOrder = Code{Value: ptr.To("NutritionOrder")}
	// RequestResourceType ServiceRequest
	RequestResourceTypeServiceRequest = Code{Value: ptr.To("ServiceRequest")}
	// RequestResourceType SupplyRequest
	RequestResourceTypeSupplyRequest = Code{Value: ptr.To("SupplyRequest")}
	// RequestResourceType Task
	RequestResourceTypeTask = Code{Value: ptr.To("Task")}
	// RequestResourceType VisionPrescription
	RequestResourceTypeVisionPrescription = Code{Value: ptr.To("VisionPrescription")}
)

var (
	// RequestStatus Active
	RequestStatusActive = Code{Value: ptr.To("active")}
	// RequestStatus Completed
	RequestStatusCompleted = Code{Value: ptr.To("completed")}
	// RequestStatus Draft
	RequestStatusDraft = Code{Value: ptr.To("draft")}
	// RequestStatus Entered in Error
	RequestStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// RequestStatus On Hold
	RequestStatusOnHold = Code{Value: ptr.To("on-hold")}
	// RequestStatus Revoked
	RequestStatusRevoked = Code{Value: ptr.To("revoked")}
	// RequestStatus Unknown
	RequestStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// ResearchElementType Exposure
	ResearchElementTypeExposure = Code{Value: ptr.To("exposure")}
	// ResearchElementType Outcome
	ResearchElementTypeOutcome = Code{Value: ptr.To("outcome")}
	// ResearchElementType Population
	ResearchElementTypePopulation = Code{Value: ptr.To("population")}
)

var (
	// ResearchStudyStatus Active
	ResearchStudyStatusActive = Code{Value: ptr.To("active")}
	// ResearchStudyStatus Administratively Completed
	ResearchStudyStatusAdministrativelyCompleted = Code{Value: ptr.To("administratively-completed")}
	// ResearchStudyStatus Approved
	ResearchStudyStatusApproved = Code{Value: ptr.To("approved")}
	// ResearchStudyStatus Closed to Accrual
	ResearchStudyStatusClosedToAccrual = Code{Value: ptr.To("closed-to-accrual")}
	// ResearchStudyStatus Closed to Accrual and Intervention
	ResearchStudyStatusClosedToAccrualAndIntervention = Code{Value: ptr.To("closed-to-accrual-and-intervention")}
	// ResearchStudyStatus Completed
	ResearchStudyStatusCompleted = Code{Value: ptr.To("completed")}
	// ResearchStudyStatus Disapproved
	ResearchStudyStatusDisapproved = Code{Value: ptr.To("disapproved")}
	// ResearchStudyStatus In Review
	ResearchStudyStatusInReview = Code{Value: ptr.To("in-review")}
	// ResearchStudyStatus Temporarily Closed to Accrual
	ResearchStudyStatusTemporarilyClosedToAccrual = Code{Value: ptr.To("temporarily-closed-to-accrual")}
	// ResearchStudyStatus Temporarily Closed to Accrual and Intervention
	ResearchStudyStatusTemporarilyClosedToAccrualAndIntervention = Code{Value: ptr.To("temporarily-closed-to-accrual-and-intervention")}
	// ResearchStudyStatus Withdrawn
	ResearchStudyStatusWithdrawn = Code{Value: ptr.To("withdrawn")}
)

var (
	// ResearchSubjectStatus Candidate
	ResearchSubjectStatusCandidate = Code{Value: ptr.To("candidate")}
	// ResearchSubjectStatus Eligible
	ResearchSubjectStatusEligible = Code{Value: ptr.To("eligible")}
	// ResearchSubjectStatus Follow-up
	ResearchSubjectStatusFollowUp = Code{Value: ptr.To("follow-up")}
	// ResearchSubjectStatus Ineligible
	ResearchSubjectStatusIneligible = Code{Value: ptr.To("ineligible")}
	// ResearchSubjectStatus Not Registered
	ResearchSubjectStatusNotRegistered = Code{Value: ptr.To("not-registered")}
	// ResearchSubjectStatus Off-study
	ResearchSubjectStatusOffStudy = Code{Value: ptr.To("off-study")}
	// ResearchSubjectStatus On-study
	ResearchSubjectStatusOnStudy = Code{Value: ptr.To("on-study")}
	// ResearchSubjectStatus On-study-intervention
	ResearchSubjectStatusOnStudyIntervention = Code{Value: ptr.To("on-study-intervention")}
	// ResearchSubjectStatus On-study-observation
	ResearchSubjectStatusOnStudyObservation = Code{Value: ptr.To("on-study-observation")}
	// ResearchSubjectStatus Pending on-study
	ResearchSubjectStatusPendingOnStudy = Code{Value: ptr.To("pending-on-study")}
	// ResearchSubjectStatus Potential Candidate
	ResearchSubjectStatusPotentialCandidate = Code{Value: ptr.To("potential-candidate")}
	// ResearchSubjectStatus Screening
	ResearchSubjectStatusScreening = Code{Value: ptr.To("screening")}
	// ResearchSubjectStatus Withdrawn
	ResearchSubjectStatusWithdrawn = Code{Value: ptr.To("withdrawn")}
)

var (
	// ResourceType Account
	ResourceTypeAccount = Code{Value: ptr.To("Account")}
	// ResourceType ActivityDefinition
	ResourceTypeActivityDefinition = Code{Value: ptr.To("ActivityDefinition")}
	// ResourceType AdverseEvent
	ResourceTypeAdverseEvent = Code{Value: ptr.To("AdverseEvent")}
	// ResourceType AllergyIntolerance
	ResourceTypeAllergyIntolerance = Code{Value: ptr.To("AllergyIntolerance")}
	// ResourceType Appointment
	ResourceTypeAppointment = Code{Value: ptr.To("Appointment")}
	// ResourceType AppointmentResponse
	ResourceTypeAppointmentResponse = Code{Value: ptr.To("AppointmentResponse")}
	// ResourceType AuditEvent
	ResourceTypeAuditEvent = Code{Value: ptr.To("AuditEvent")}
	// ResourceType Basic
	ResourceTypeBasic = Code{Value: ptr.To("Basic")}
	// ResourceType Binary
	ResourceTypeBinary = Code{Value: ptr.To("Binary")}
	// ResourceType BiologicallyDerivedProduct
	ResourceTypeBiologicallyDerivedProduct = Code{Value: ptr.To("BiologicallyDerivedProduct")}
	// ResourceType BodyStructure
	ResourceTypeBodyStructure = Code{Value: ptr.To("BodyStructure")}
	// ResourceType Bundle
	ResourceTypeBundle = Code{Value: ptr.To("Bundle")}
	// ResourceType CapabilityStatement
	ResourceTypeCapabilityStatement = Code{Value: ptr.To("CapabilityStatement")}
	// ResourceType CarePlan
	ResourceTypeCarePlan = Code{Value: ptr.To("CarePlan")}
	// ResourceType CareTeam
	ResourceTypeCareTeam = Code{Value: ptr.To("CareTeam")}
	// ResourceType CatalogEntry
	ResourceTypeCatalogEntry = Code{Value: ptr.To("CatalogEntry")}
	// ResourceType ChargeItem
	ResourceTypeChargeItem = Code{Value: ptr.To("ChargeItem")}
	// ResourceType ChargeItemDefinition
	ResourceTypeChargeItemDefinition = Code{Value: ptr.To("ChargeItemDefinition")}
	// ResourceType Claim
	ResourceTypeClaim = Code{Value: ptr.To("Claim")}
	// ResourceType ClaimResponse
	ResourceTypeClaimResponse = Code{Value: ptr.To("ClaimResponse")}
	// ResourceType ClinicalImpression
	ResourceTypeClinicalImpression = Code{Value: ptr.To("ClinicalImpression")}
	// ResourceType CodeSystem
	ResourceTypeCodeSystem = Code{Value: ptr.To("CodeSystem")}
	// ResourceType Communication
	ResourceTypeCommunication = Code{Value: ptr.To("Communication")}
	// ResourceType CommunicationRequest
	ResourceTypeCommunicationRequest = Code{Value: ptr.To("CommunicationRequest")}
	// ResourceType CompartmentDefinition
	ResourceTypeCompartmentDefinition = Code{Value: ptr.To("CompartmentDefinition")}
	// ResourceType Composition
	ResourceTypeComposition = Code{Value: ptr.To("Composition")}
	// ResourceType ConceptMap
	ResourceTypeConceptMap = Code{Value: ptr.To("ConceptMap")}
	// ResourceType Condition
	ResourceTypeCondition = Code{Value: ptr.To("Condition")}
	// ResourceType Consent
	ResourceTypeConsent = Code{Value: ptr.To("Consent")}
	// ResourceType Contract
	ResourceTypeContract = Code{Value: ptr.To("Contract")}
	// ResourceType Coverage
	ResourceTypeCoverage = Code{Value: ptr.To("Coverage")}
	// ResourceType CoverageEligibilityRequest
	ResourceTypeCoverageEligibilityRequest = Code{Value: ptr.To("CoverageEligibilityRequest")}
	// ResourceType CoverageEligibilityResponse
	ResourceTypeCoverageEligibilityResponse = Code{Value: ptr.To("CoverageEligibilityResponse")}
	// ResourceType DetectedIssue
	ResourceTypeDetectedIssue = Code{Value: ptr.To("DetectedIssue")}
	// ResourceType Device
	ResourceTypeDevice = Code{Value: ptr.To("Device")}
	// ResourceType DeviceDefinition
	ResourceTypeDeviceDefinition = Code{Value: ptr.To("DeviceDefinition")}
	// ResourceType DeviceMetric
	ResourceTypeDeviceMetric = Code{Value: ptr.To("DeviceMetric")}
	// ResourceType DeviceRequest
	ResourceTypeDeviceRequest = Code{Value: ptr.To("DeviceRequest")}
	// ResourceType DeviceUseStatement
	ResourceTypeDeviceUseStatement = Code{Value: ptr.To("DeviceUseStatement")}
	// ResourceType DiagnosticReport
	ResourceTypeDiagnosticReport = Code{Value: ptr.To("DiagnosticReport")}
	// ResourceType DocumentManifest
	ResourceTypeDocumentManifest = Code{Value: ptr.To("DocumentManifest")}
	// ResourceType DocumentReference
	ResourceTypeDocumentReference = Code{Value: ptr.To("DocumentReference")}
	// ResourceType DomainResource
	ResourceTypeDomainResource = Code{Value: ptr.To("DomainResource")}
	// ResourceType EffectEvidenceSynthesis
	ResourceTypeEffectEvidenceSynthesis = Code{Value: ptr.To("EffectEvidenceSynthesis")}
	// ResourceType Encounter
	ResourceTypeEncounter = Code{Value: ptr.To("Encounter")}
	// ResourceType Endpoint
	ResourceTypeEndpoint = Code{Value: ptr.To("Endpoint")}
	// ResourceType EnrollmentRequest
	ResourceTypeEnrollmentRequest = Code{Value: ptr.To("EnrollmentRequest")}
	// ResourceType EnrollmentResponse
	ResourceTypeEnrollmentResponse = Code{Value: ptr.To("EnrollmentResponse")}
	// ResourceType EpisodeOfCare
	ResourceTypeEpisodeOfCare = Code{Value: ptr.To("EpisodeOfCare")}
	// ResourceType EventDefinition
	ResourceTypeEventDefinition = Code{Value: ptr.To("EventDefinition")}
	// ResourceType Evidence
	ResourceTypeEvidence = Code{Value: ptr.To("Evidence")}
	// ResourceType EvidenceVariable
	ResourceTypeEvidenceVariable = Code{Value: ptr.To("EvidenceVariable")}
	// ResourceType ExampleScenario
	ResourceTypeExampleScenario = Code{Value: ptr.To("ExampleScenario")}
	// ResourceType ExplanationOfBenefit
	ResourceTypeExplanationOfBenefit = Code{Value: ptr.To("ExplanationOfBenefit")}
	// ResourceType FamilyMemberHistory
	ResourceTypeFamilyMemberHistory = Code{Value: ptr.To("FamilyMemberHistory")}
	// ResourceType Flag
	ResourceTypeFlag = Code{Value: ptr.To("Flag")}
	// ResourceType Goal
	ResourceTypeGoal = Code{Value: ptr.To("Goal")}
	// ResourceType GraphDefinition
	ResourceTypeGraphDefinition = Code{Value: ptr.To("GraphDefinition")}
	// ResourceType Group
	ResourceTypeGroup = Code{Value: ptr.To("Group")}
	// ResourceType GuidanceResponse
	ResourceTypeGuidanceResponse = Code{Value: ptr.To("GuidanceResponse")}
	// ResourceType HealthcareService
	ResourceTypeHealthcareService = Code{Value: ptr.To("HealthcareService")}
	// ResourceType ImagingStudy
	ResourceTypeImagingStudy = Code{Value: ptr.To("ImagingStudy")}
	// ResourceType Immunization
	ResourceTypeImmunization = Code{Value: ptr.To("Immunization")}
	// ResourceType ImmunizationEvaluation
	ResourceTypeImmunizationEvaluation = Code{Value: ptr.To("ImmunizationEvaluation")}
	// ResourceType ImmunizationRecommendation
	ResourceTypeImmunizationRecommendation = Code{Value: ptr.To("ImmunizationRecommendation")}
	// ResourceType ImplementationGuide
	ResourceTypeImplementationGuide = Code{Value: ptr.To("ImplementationGuide")}
	// ResourceType InsurancePlan
	ResourceTypeInsurancePlan = Code{Value: ptr.To("InsurancePlan")}
	// ResourceType Invoice
	ResourceTypeInvoice = Code{Value: ptr.To("Invoice")}
	// ResourceType Library
	ResourceTypeLibrary = Code{Value: ptr.To("Library")}
	// ResourceType Linkage
	ResourceTypeLinkage = Code{Value: ptr.To("Linkage")}
	// ResourceType List
	ResourceTypeList = Code{Value: ptr.To("List")}
	// ResourceType Location
	ResourceTypeLocation = Code{Value: ptr.To("Location")}
	// ResourceType Measure
	ResourceTypeMeasure = Code{Value: ptr.To("Measure")}
	// ResourceType MeasureReport
	ResourceTypeMeasureReport = Code{Value: ptr.To("MeasureReport")}
	// ResourceType Media
	ResourceTypeMedia = Code{Value: ptr.To("Media")}
	// ResourceType Medication
	ResourceTypeMedication = Code{Value: ptr.To("Medication")}
	// ResourceType MedicationAdministration
	ResourceTypeMedicationAdministration = Code{Value: ptr.To("MedicationAdministration")}
	// ResourceType MedicationDispense
	ResourceTypeMedicationDispense = Code{Value: ptr.To("MedicationDispense")}
	// ResourceType MedicationKnowledge
	ResourceTypeMedicationKnowledge = Code{Value: ptr.To("MedicationKnowledge")}
	// ResourceType MedicationRequest
	ResourceTypeMedicationRequest = Code{Value: ptr.To("MedicationRequest")}
	// ResourceType MedicationStatement
	ResourceTypeMedicationStatement = Code{Value: ptr.To("MedicationStatement")}
	// ResourceType MedicinalProduct
	ResourceTypeMedicinalProduct = Code{Value: ptr.To("MedicinalProduct")}
	// ResourceType MedicinalProductAuthorization
	ResourceTypeMedicinalProductAuthorization = Code{Value: ptr.To("MedicinalProductAuthorization")}
	// ResourceType MedicinalProductContraindication
	ResourceTypeMedicinalProductContraindication = Code{Value: ptr.To("MedicinalProductContraindication")}
	// ResourceType MedicinalProductIndication
	ResourceTypeMedicinalProductIndication = Code{Value: ptr.To("MedicinalProductIndication")}
	// ResourceType MedicinalProductIngredient
	ResourceTypeMedicinalProductIngredient = Code{Value: ptr.To("MedicinalProductIngredient")}
	// ResourceType MedicinalProductInteraction
	ResourceTypeMedicinalProductInteraction = Code{Value: ptr.To("MedicinalProductInteraction")}
	// ResourceType MedicinalProductManufactured
	ResourceTypeMedicinalProductManufactured = Code{Value: ptr.To("MedicinalProductManufactured")}
	// ResourceType MedicinalProductPackaged
	ResourceTypeMedicinalProductPackaged = Code{Value: ptr.To("MedicinalProductPackaged")}
	// ResourceType MedicinalProductPharmaceutical
	ResourceTypeMedicinalProductPharmaceutical = Code{Value: ptr.To("MedicinalProductPharmaceutical")}
	// ResourceType MedicinalProductUndesirableEffect
	ResourceTypeMedicinalProductUndesirableEffect = Code{Value: ptr.To("MedicinalProductUndesirableEffect")}
	// ResourceType MessageDefinition
	ResourceTypeMessageDefinition = Code{Value: ptr.To("MessageDefinition")}
	// ResourceType MessageHeader
	ResourceTypeMessageHeader = Code{Value: ptr.To("MessageHeader")}
	// ResourceType MolecularSequence
	ResourceTypeMolecularSequence = Code{Value: ptr.To("MolecularSequence")}
	// ResourceType NamingSystem
	ResourceTypeNamingSystem = Code{Value: ptr.To("NamingSystem")}
	// ResourceType NutritionOrder
	ResourceTypeNutritionOrder = Code{Value: ptr.To("NutritionOrder")}
	// ResourceType Observation
	ResourceTypeObservation = Code{Value: ptr.To("Observation")}
	// ResourceType ObservationDefinition
	ResourceTypeObservationDefinition = Code{Value: ptr.To("ObservationDefinition")}
	// ResourceType OperationDefinition
	ResourceTypeOperationDefinition = Code{Value: ptr.To("OperationDefinition")}
	// ResourceType OperationOutcome
	ResourceTypeOperationOutcome = Code{Value: ptr.To("OperationOutcome")}
	// ResourceType Organization
	ResourceTypeOrganization = Code{Value: ptr.To("Organization")}
	// ResourceType OrganizationAffiliation
	ResourceTypeOrganizationAffiliation = Code{Value: ptr.To("OrganizationAffiliation")}
	// ResourceType Parameters
	ResourceTypeParameters = Code{Value: ptr.To("Parameters")}
	// ResourceType Patient
	ResourceTypePatient = Code{Value: ptr.To("Patient")}
	// ResourceType PaymentNotice
	ResourceTypePaymentNotice = Code{Value: ptr.To("PaymentNotice")}
	// ResourceType PaymentReconciliation
	ResourceTypePaymentReconciliation = Code{Value: ptr.To("PaymentReconciliation")}
	// ResourceType Person
	ResourceTypePerson = Code{Value: ptr.To("Person")}
	// ResourceType PlanDefinition
	ResourceTypePlanDefinition = Code{Value: ptr.To("PlanDefinition")}
	// ResourceType Practitioner
	ResourceTypePractitioner = Code{Value: ptr.To("Practitioner")}
	// ResourceType PractitionerRole
	ResourceTypePractitionerRole = Code{Value: ptr.To("PractitionerRole")}
	// ResourceType Procedure
	ResourceTypeProcedure = Code{Value: ptr.To("Procedure")}
	// ResourceType Provenance
	ResourceTypeProvenance = Code{Value: ptr.To("Provenance")}
	// ResourceType Questionnaire
	ResourceTypeQuestionnaire = Code{Value: ptr.To("Questionnaire")}
	// ResourceType QuestionnaireResponse
	ResourceTypeQuestionnaireResponse = Code{Value: ptr.To("QuestionnaireResponse")}
	// ResourceType RelatedPerson
	ResourceTypeRelatedPerson = Code{Value: ptr.To("RelatedPerson")}
	// ResourceType RequestGroup
	ResourceTypeRequestGroup = Code{Value: ptr.To("RequestGroup")}
	// ResourceType ResearchDefinition
	ResourceTypeResearchDefinition = Code{Value: ptr.To("ResearchDefinition")}
	// ResourceType ResearchElementDefinition
	ResourceTypeResearchElementDefinition = Code{Value: ptr.To("ResearchElementDefinition")}
	// ResourceType ResearchStudy
	ResourceTypeResearchStudy = Code{Value: ptr.To("ResearchStudy")}
	// ResourceType ResearchSubject
	ResourceTypeResearchSubject = Code{Value: ptr.To("ResearchSubject")}
	// ResourceType Resource
	ResourceTypeResource = Code{Value: ptr.To("Resource")}
	// ResourceType RiskAssessment
	ResourceTypeRiskAssessment = Code{Value: ptr.To("RiskAssessment")}
	// ResourceType RiskEvidenceSynthesis
	ResourceTypeRiskEvidenceSynthesis = Code{Value: ptr.To("RiskEvidenceSynthesis")}
	// ResourceType Schedule
	ResourceTypeSchedule = Code{Value: ptr.To("Schedule")}
	// ResourceType SearchParameter
	ResourceTypeSearchParameter = Code{Value: ptr.To("SearchParameter")}
	// ResourceType ServiceRequest
	ResourceTypeServiceRequest = Code{Value: ptr.To("ServiceRequest")}
	// ResourceType Slot
	ResourceTypeSlot = Code{Value: ptr.To("Slot")}
	// ResourceType Specimen
	ResourceTypeSpecimen = Code{Value: ptr.To("Specimen")}
	// ResourceType SpecimenDefinition
	ResourceTypeSpecimenDefinition = Code{Value: ptr.To("SpecimenDefinition")}
	// ResourceType StructureDefinition
	ResourceTypeStructureDefinition = Code{Value: ptr.To("StructureDefinition")}
	// ResourceType StructureMap
	ResourceTypeStructureMap = Code{Value: ptr.To("StructureMap")}
	// ResourceType Subscription
	ResourceTypeSubscription = Code{Value: ptr.To("Subscription")}
	// ResourceType Substance
	ResourceTypeSubstance = Code{Value: ptr.To("Substance")}
	// ResourceType SubstanceNucleicAcid
	ResourceTypeSubstanceNucleicAcid = Code{Value: ptr.To("SubstanceNucleicAcid")}
	// ResourceType SubstancePolymer
	ResourceTypeSubstancePolymer = Code{Value: ptr.To("SubstancePolymer")}
	// ResourceType SubstanceProtein
	ResourceTypeSubstanceProtein = Code{Value: ptr.To("SubstanceProtein")}
	// ResourceType SubstanceReferenceInformation
	ResourceTypeSubstanceReferenceInformation = Code{Value: ptr.To("SubstanceReferenceInformation")}
	// ResourceType SubstanceSourceMaterial
	ResourceTypeSubstanceSourceMaterial = Code{Value: ptr.To("SubstanceSourceMaterial")}
	// ResourceType SubstanceSpecification
	ResourceTypeSubstanceSpecification = Code{Value: ptr.To("SubstanceSpecification")}
	// ResourceType SupplyDelivery
	ResourceTypeSupplyDelivery = Code{Value: ptr.To("SupplyDelivery")}
	// ResourceType SupplyRequest
	ResourceTypeSupplyRequest = Code{Value: ptr.To("SupplyRequest")}
	// ResourceType Task
	ResourceTypeTask = Code{Value: ptr.To("Task")}
	// ResourceType TerminologyCapabilities
	ResourceTypeTerminologyCapabilities = Code{Value: ptr.To("TerminologyCapabilities")}
	// ResourceType TestReport
	ResourceTypeTestReport = Code{Value: ptr.To("TestReport")}
	// ResourceType TestScript
	ResourceTypeTestScript = Code{Value: ptr.To("TestScript")}
	// ResourceType ValueSet
	ResourceTypeValueSet = Code{Value: ptr.To("ValueSet")}
	// ResourceType VerificationResult
	ResourceTypeVerificationResult = Code{Value: ptr.To("VerificationResult")}
	// ResourceType VisionPrescription
	ResourceTypeVisionPrescription = Code{Value: ptr.To("VisionPrescription")}
)

var (
	// ResourceVersionPolicy No VersionId Support
	ResourceVersionPolicyNoVersion = Code{Value: ptr.To("no-version")}
	// ResourceVersionPolicy Versioned
	ResourceVersionPolicyVersioned = Code{Value: ptr.To("versioned")}
	// ResourceVersionPolicy VersionId tracked fully
	ResourceVersionPolicyVersionedUpdate = Code{Value: ptr.To("versioned-update")}
)

var (
	// ResponseType Fatal Error
	ResponseTypeFatalError = Code{Value: ptr.To("fatal-error")}
	// ResponseType OK
	ResponseTypeOk = Code{Value: ptr.To("ok")}
	// ResponseType Transient Error
	ResponseTypeTransientError = Code{Value: ptr.To("transient-error")}
)

var (
	// RestfulCapabilityMode Client
	RestfulCapabilityModeClient = Code{Value: ptr.To("client")}
	// RestfulCapabilityMode Server
	RestfulCapabilityModeServer = Code{Value: ptr.To("server")}
)

var (
	// SPDXLicense BSD Zero Clause License
	Spdxlicense0Bsd = Code{Value: ptr.To("0BSD")}
	// SPDXLicense Attribution Assurance License
	SpdxlicenseAal = Code{Value: ptr.To("AAL")}
	// SPDXLicense Abstyles License
	SpdxlicenseAbstyles = Code{Value: ptr.To("Abstyles")}
	// SPDXLicense Adobe Systems Incorporated Source Code License Agreement
	SpdxlicenseAdobe2006 = Code{Value: ptr.To("Adobe-2006")}
	// SPDXLicense Adobe Glyph List License
	SpdxlicenseAdobeGlyph = Code{Value: ptr.To("Adobe-Glyph")}
	// SPDXLicense Amazon Digital Services License
	SpdxlicenseAdsl = Code{Value: ptr.To("ADSL")}
	// SPDXLicense Academic Free License v1.1
	SpdxlicenseAfl11 = Code{Value: ptr.To("AFL-1.1")}
	// SPDXLicense Academic Free License v1.2
	SpdxlicenseAfl12 = Code{Value: ptr.To("AFL-1.2")}
	// SPDXLicense Academic Free License v2.0
	SpdxlicenseAfl20 = Code{Value: ptr.To("AFL-2.0")}
	// SPDXLicense Academic Free License v2.1
	SpdxlicenseAfl21 = Code{Value: ptr.To("AFL-2.1")}
	// SPDXLicense Academic Free License v3.0
	SpdxlicenseAfl30 = Code{Value: ptr.To("AFL-3.0")}
	// SPDXLicense Afmparse License
	SpdxlicenseAfmparse = Code{Value: ptr.To("Afmparse")}
	// SPDXLicense Affero General Public License v1.0 only
	SpdxlicenseAgpl10Only = Code{Value: ptr.To("AGPL-1.0-only")}
	// SPDXLicense Affero General Public License v1.0 or later
	SpdxlicenseAgpl10OrLater = Code{Value: ptr.To("AGPL-1.0-or-later")}
	// SPDXLicense GNU Affero General Public License v3.0 only
	SpdxlicenseAgpl30Only = Code{Value: ptr.To("AGPL-3.0-only")}
	// SPDXLicense GNU Affero General Public License v3.0 or later
	SpdxlicenseAgpl30OrLater = Code{Value: ptr.To("AGPL-3.0-or-later")}
	// SPDXLicense Aladdin Free Public License
	SpdxlicenseAladdin = Code{Value: ptr.To("Aladdin")}
	// SPDXLicense AMD's plpa_map.c License
	SpdxlicenseAmdplpa = Code{Value: ptr.To("AMDPLPA")}
	// SPDXLicense Apple MIT License
	SpdxlicenseAml = Code{Value: ptr.To("AML")}
	// SPDXLicense Academy of Motion Picture Arts and Sciences BSD
	SpdxlicenseAmpas = Code{Value: ptr.To("AMPAS")}
	// SPDXLicense ANTLR Software Rights Notice
	SpdxlicenseAntlrPd = Code{Value: ptr.To("ANTLR-PD")}
	// SPDXLicense Apache License 1.0
	SpdxlicenseApache10 = Code{Value: ptr.To("Apache-1.0")}
	// SPDXLicense Apache License 1.1
	SpdxlicenseApache11 = Code{Value: ptr.To("Apache-1.1")}
	// SPDXLicense Apache License 2.0
	SpdxlicenseApache20 = Code{Value: ptr.To("Apache-2.0")}
	// SPDXLicense Adobe Postscript AFM License
	SpdxlicenseApafml = Code{Value: ptr.To("APAFML")}
	// SPDXLicense Adaptive Public License 1.0
	SpdxlicenseApl10 = Code{Value: ptr.To("APL-1.0")}
	// SPDXLicense Apple Public Source License 1.0
	SpdxlicenseApsl10 = Code{Value: ptr.To("APSL-1.0")}
	// SPDXLicense Apple Public Source License 1.1
	SpdxlicenseApsl11 = Code{Value: ptr.To("APSL-1.1")}
	// SPDXLicense Apple Public Source License 1.2
	SpdxlicenseApsl12 = Code{Value: ptr.To("APSL-1.2")}
	// SPDXLicense Apple Public Source License 2.0
	SpdxlicenseApsl20 = Code{Value: ptr.To("APSL-2.0")}
	// SPDXLicense Artistic License 1.0
	SpdxlicenseArtistic10 = Code{Value: ptr.To("Artistic-1.0")}
	// SPDXLicense Artistic License 1.0 w/clause 8
	SpdxlicenseArtistic10Cl8 = Code{Value: ptr.To("Artistic-1.0-cl8")}
	// SPDXLicense Artistic License 1.0 (Perl)
	SpdxlicenseArtistic10Perl = Code{Value: ptr.To("Artistic-1.0-Perl")}
	// SPDXLicense Artistic License 2.0
	SpdxlicenseArtistic20 = Code{Value: ptr.To("Artistic-2.0")}
	// SPDXLicense Bahyph License
	SpdxlicenseBahyph = Code{Value: ptr.To("Bahyph")}
	// SPDXLicense Barr License
	SpdxlicenseBarr = Code{Value: ptr.To("Barr")}
	// SPDXLicense Beerware License
	SpdxlicenseBeerware = Code{Value: ptr.To("Beerware")}
	// SPDXLicense BitTorrent Open Source License v1.0
	SpdxlicenseBitTorrent10 = Code{Value: ptr.To("BitTorrent-1.0")}
	// SPDXLicense BitTorrent Open Source License v1.1
	SpdxlicenseBitTorrent11 = Code{Value: ptr.To("BitTorrent-1.1")}
	// SPDXLicense Borceux license
	SpdxlicenseBorceux = Code{Value: ptr.To("Borceux")}
	// SPDXLicense BSD 1-Clause License
	SpdxlicenseBsd1Clause = Code{Value: ptr.To("BSD-1-Clause")}
	// SPDXLicense BSD 2-Clause "Simplified" License
	SpdxlicenseBsd2Clause = Code{Value: ptr.To("BSD-2-Clause")}
	// SPDXLicense BSD 2-Clause FreeBSD License
	SpdxlicenseBsd2ClauseFreeBsd = Code{Value: ptr.To("BSD-2-Clause-FreeBSD")}
	// SPDXLicense BSD 2-Clause NetBSD License
	SpdxlicenseBsd2ClauseNetBsd = Code{Value: ptr.To("BSD-2-Clause-NetBSD")}
	// SPDXLicense BSD-2-Clause Plus Patent License
	SpdxlicenseBsd2ClausePatent = Code{Value: ptr.To("BSD-2-Clause-Patent")}
	// SPDXLicense BSD 3-Clause "New" or "Revised" License
	SpdxlicenseBsd3Clause = Code{Value: ptr.To("BSD-3-Clause")}
	// SPDXLicense BSD with attribution
	SpdxlicenseBsd3ClauseAttribution = Code{Value: ptr.To("BSD-3-Clause-Attribution")}
	// SPDXLicense BSD 3-Clause Clear License
	SpdxlicenseBsd3ClauseClear = Code{Value: ptr.To("BSD-3-Clause-Clear")}
	// SPDXLicense Lawrence Berkeley National Labs BSD variant license
	SpdxlicenseBsd3ClauseLbnl = Code{Value: ptr.To("BSD-3-Clause-LBNL")}
	// SPDXLicense BSD 3-Clause No Nuclear License
	SpdxlicenseBsd3ClauseNoNuclearLicense = Code{Value: ptr.To("BSD-3-Clause-No-Nuclear-License")}
	// SPDXLicense BSD 3-Clause No Nuclear License 2014
	SpdxlicenseBsd3ClauseNoNuclearLicense2014 = Code{Value: ptr.To("BSD-3-Clause-No-Nuclear-License-2014")}
	// SPDXLicense BSD 3-Clause No Nuclear Warranty
	SpdxlicenseBsd3ClauseNoNuclearWarranty = Code{Value: ptr.To("BSD-3-Clause-No-Nuclear-Warranty")}
	// SPDXLicense BSD 4-Clause "Original" or "Old" License
	SpdxlicenseBsd4Clause = Code{Value: ptr.To("BSD-4-Clause")}
	// SPDXLicense BSD-4-Clause (University of California-Specific)
	SpdxlicenseBsd4ClauseUc = Code{Value: ptr.To("BSD-4-Clause-UC")}
	// SPDXLicense BSD Protection License
	SpdxlicenseBsdProtection = Code{Value: ptr.To("BSD-Protection")}
	// SPDXLicense BSD Source Code Attribution
	SpdxlicenseBsdSourceCode = Code{Value: ptr.To("BSD-Source-Code")}
	// SPDXLicense Boost Software License 1.0
	SpdxlicenseBsl10 = Code{Value: ptr.To("BSL-1.0")}
	// SPDXLicense bzip2 and libbzip2 License v1.0.5
	SpdxlicenseBzip2105 = Code{Value: ptr.To("bzip2-1.0.5")}
	// SPDXLicense bzip2 and libbzip2 License v1.0.6
	SpdxlicenseBzip2106 = Code{Value: ptr.To("bzip2-1.0.6")}
	// SPDXLicense Caldera License
	SpdxlicenseCaldera = Code{Value: ptr.To("Caldera")}
	// SPDXLicense Computer Associates Trusted Open Source License 1.1
	SpdxlicenseCatosl11 = Code{Value: ptr.To("CATOSL-1.1")}
	// SPDXLicense Creative Commons Zero v1.0 Universal
	SpdxlicenseCc010 = Code{Value: ptr.To("CC0-1.0")}
	// SPDXLicense Creative Commons Attribution 1.0 Generic
	SpdxlicenseCcBy10 = Code{Value: ptr.To("CC-BY-1.0")}
	// SPDXLicense Creative Commons Attribution 2.0 Generic
	SpdxlicenseCcBy20 = Code{Value: ptr.To("CC-BY-2.0")}
	// SPDXLicense Creative Commons Attribution 2.5 Generic
	SpdxlicenseCcBy25 = Code{Value: ptr.To("CC-BY-2.5")}
	// SPDXLicense Creative Commons Attribution 3.0 Unported
	SpdxlicenseCcBy30 = Code{Value: ptr.To("CC-BY-3.0")}
	// SPDXLicense Creative Commons Attribution 4.0 International
	SpdxlicenseCcBy40 = Code{Value: ptr.To("CC-BY-4.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 1.0 Generic
	SpdxlicenseCcByNc10 = Code{Value: ptr.To("CC-BY-NC-1.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 2.0 Generic
	SpdxlicenseCcByNc20 = Code{Value: ptr.To("CC-BY-NC-2.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 2.5 Generic
	SpdxlicenseCcByNc25 = Code{Value: ptr.To("CC-BY-NC-2.5")}
	// SPDXLicense Creative Commons Attribution Non Commercial 3.0 Unported
	SpdxlicenseCcByNc30 = Code{Value: ptr.To("CC-BY-NC-3.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial 4.0 International
	SpdxlicenseCcByNc40 = Code{Value: ptr.To("CC-BY-NC-4.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 1.0 Generic
	SpdxlicenseCcByNcNd10 = Code{Value: ptr.To("CC-BY-NC-ND-1.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 2.0 Generic
	SpdxlicenseCcByNcNd20 = Code{Value: ptr.To("CC-BY-NC-ND-2.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 2.5 Generic
	SpdxlicenseCcByNcNd25 = Code{Value: ptr.To("CC-BY-NC-ND-2.5")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 3.0 Unported
	SpdxlicenseCcByNcNd30 = Code{Value: ptr.To("CC-BY-NC-ND-3.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial No Derivatives 4.0 International
	SpdxlicenseCcByNcNd40 = Code{Value: ptr.To("CC-BY-NC-ND-4.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 1.0 Generic
	SpdxlicenseCcByNcSa10 = Code{Value: ptr.To("CC-BY-NC-SA-1.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 2.0 Generic
	SpdxlicenseCcByNcSa20 = Code{Value: ptr.To("CC-BY-NC-SA-2.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 2.5 Generic
	SpdxlicenseCcByNcSa25 = Code{Value: ptr.To("CC-BY-NC-SA-2.5")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 3.0 Unported
	SpdxlicenseCcByNcSa30 = Code{Value: ptr.To("CC-BY-NC-SA-3.0")}
	// SPDXLicense Creative Commons Attribution Non Commercial Share Alike 4.0 International
	SpdxlicenseCcByNcSa40 = Code{Value: ptr.To("CC-BY-NC-SA-4.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 1.0 Generic
	SpdxlicenseCcByNd10 = Code{Value: ptr.To("CC-BY-ND-1.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 2.0 Generic
	SpdxlicenseCcByNd20 = Code{Value: ptr.To("CC-BY-ND-2.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 2.5 Generic
	SpdxlicenseCcByNd25 = Code{Value: ptr.To("CC-BY-ND-2.5")}
	// SPDXLicense Creative Commons Attribution No Derivatives 3.0 Unported
	SpdxlicenseCcByNd30 = Code{Value: ptr.To("CC-BY-ND-3.0")}
	// SPDXLicense Creative Commons Attribution No Derivatives 4.0 International
	SpdxlicenseCcByNd40 = Code{Value: ptr.To("CC-BY-ND-4.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 1.0 Generic
	SpdxlicenseCcBySa10 = Code{Value: ptr.To("CC-BY-SA-1.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 2.0 Generic
	SpdxlicenseCcBySa20 = Code{Value: ptr.To("CC-BY-SA-2.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 2.5 Generic
	SpdxlicenseCcBySa25 = Code{Value: ptr.To("CC-BY-SA-2.5")}
	// SPDXLicense Creative Commons Attribution Share Alike 3.0 Unported
	SpdxlicenseCcBySa30 = Code{Value: ptr.To("CC-BY-SA-3.0")}
	// SPDXLicense Creative Commons Attribution Share Alike 4.0 International
	SpdxlicenseCcBySa40 = Code{Value: ptr.To("CC-BY-SA-4.0")}
	// SPDXLicense Common Development and Distribution License 1.0
	SpdxlicenseCddl10 = Code{Value: ptr.To("CDDL-1.0")}
	// SPDXLicense Common Development and Distribution License 1.1
	SpdxlicenseCddl11 = Code{Value: ptr.To("CDDL-1.1")}
	// SPDXLicense Community Data License Agreement Permissive 1.0
	SpdxlicenseCdlaPermissive10 = Code{Value: ptr.To("CDLA-Permissive-1.0")}
	// SPDXLicense Community Data License Agreement Sharing 1.0
	SpdxlicenseCdlaSharing10 = Code{Value: ptr.To("CDLA-Sharing-1.0")}
	// SPDXLicense CeCILL Free Software License Agreement v1.0
	SpdxlicenseCecill10 = Code{Value: ptr.To("CECILL-1.0")}
	// SPDXLicense CeCILL Free Software License Agreement v1.1
	SpdxlicenseCecill11 = Code{Value: ptr.To("CECILL-1.1")}
	// SPDXLicense CeCILL Free Software License Agreement v2.0
	SpdxlicenseCecill20 = Code{Value: ptr.To("CECILL-2.0")}
	// SPDXLicense CeCILL Free Software License Agreement v2.1
	SpdxlicenseCecill21 = Code{Value: ptr.To("CECILL-2.1")}
	// SPDXLicense CeCILL-B Free Software License Agreement
	SpdxlicenseCecillB = Code{Value: ptr.To("CECILL-B")}
	// SPDXLicense CeCILL-C Free Software License Agreement
	SpdxlicenseCecillC = Code{Value: ptr.To("CECILL-C")}
	// SPDXLicense Clarified Artistic License
	SpdxlicenseClArtistic = Code{Value: ptr.To("ClArtistic")}
	// SPDXLicense CNRI Jython License
	SpdxlicenseCnriJython = Code{Value: ptr.To("CNRI-Jython")}
	// SPDXLicense CNRI Python License
	SpdxlicenseCnriPython = Code{Value: ptr.To("CNRI-Python")}
	// SPDXLicense CNRI Python Open Source GPL Compatible License Agreement
	SpdxlicenseCnriPythonGplCompatible = Code{Value: ptr.To("CNRI-Python-GPL-Compatible")}
	// SPDXLicense Condor Public License v1.1
	SpdxlicenseCondor11 = Code{Value: ptr.To("Condor-1.1")}
	// SPDXLicense Common Public Attribution License 1.0
	SpdxlicenseCpal10 = Code{Value: ptr.To("CPAL-1.0")}
	// SPDXLicense Common Public License 1.0
	SpdxlicenseCpl10 = Code{Value: ptr.To("CPL-1.0")}
	// SPDXLicense Code Project Open License 1.02
	SpdxlicenseCpol102 = Code{Value: ptr.To("CPOL-1.02")}
	// SPDXLicense Crossword License
	SpdxlicenseCrossword = Code{Value: ptr.To("Crossword")}
	// SPDXLicense CrystalStacker License
	SpdxlicenseCrystalStacker = Code{Value: ptr.To("CrystalStacker")}
	// SPDXLicense CUA Office Public License v1.0
	SpdxlicenseCuaOpl10 = Code{Value: ptr.To("CUA-OPL-1.0")}
	// SPDXLicense Cube License
	SpdxlicenseCube = Code{Value: ptr.To("Cube")}
	// SPDXLicense curl License
	SpdxlicenseCurl = Code{Value: ptr.To("curl")}
	// SPDXLicense Deutsche Freie Software Lizenz
	SpdxlicenseDFsl10 = Code{Value: ptr.To("D-FSL-1.0")}
	// SPDXLicense diffmark license
	SpdxlicenseDiffmark = Code{Value: ptr.To("diffmark")}
	// SPDXLicense DOC License
	SpdxlicenseDoc = Code{Value: ptr.To("DOC")}
	// SPDXLicense Dotseqn License
	SpdxlicenseDotseqn = Code{Value: ptr.To("Dotseqn")}
	// SPDXLicense DSDP License
	SpdxlicenseDsdp = Code{Value: ptr.To("DSDP")}
	// SPDXLicense dvipdfm License
	SpdxlicenseDvipdfm = Code{Value: ptr.To("dvipdfm")}
	// SPDXLicense eGenix.com Public License 1.1.0
	SpdxlicenseEGenix = Code{Value: ptr.To("eGenix")}
	// SPDXLicense Educational Community License v1.0
	SpdxlicenseEcl10 = Code{Value: ptr.To("ECL-1.0")}
	// SPDXLicense Educational Community License v2.0
	SpdxlicenseEcl20 = Code{Value: ptr.To("ECL-2.0")}
	// SPDXLicense Eiffel Forum License v1.0
	SpdxlicenseEfl10 = Code{Value: ptr.To("EFL-1.0")}
	// SPDXLicense Eiffel Forum License v2.0
	SpdxlicenseEfl20 = Code{Value: ptr.To("EFL-2.0")}
	// SPDXLicense Entessa Public License v1.0
	SpdxlicenseEntessa = Code{Value: ptr.To("Entessa")}
	// SPDXLicense Eclipse Public License 1.0
	SpdxlicenseEpl10 = Code{Value: ptr.To("EPL-1.0")}
	// SPDXLicense Eclipse Public License 2.0
	SpdxlicenseEpl20 = Code{Value: ptr.To("EPL-2.0")}
	// SPDXLicense Erlang Public License v1.1
	SpdxlicenseErlPl11 = Code{Value: ptr.To("ErlPL-1.1")}
	// SPDXLicense EU DataGrid Software License
	SpdxlicenseEudatagrid = Code{Value: ptr.To("EUDatagrid")}
	// SPDXLicense European Union Public License 1.0
	SpdxlicenseEupl10 = Code{Value: ptr.To("EUPL-1.0")}
	// SPDXLicense European Union Public License 1.1
	SpdxlicenseEupl11 = Code{Value: ptr.To("EUPL-1.1")}
	// SPDXLicense European Union Public License 1.2
	SpdxlicenseEupl12 = Code{Value: ptr.To("EUPL-1.2")}
	// SPDXLicense Eurosym License
	SpdxlicenseEurosym = Code{Value: ptr.To("Eurosym")}
	// SPDXLicense Fair License
	SpdxlicenseFair = Code{Value: ptr.To("Fair")}
	// SPDXLicense Frameworx Open License 1.0
	SpdxlicenseFrameworx10 = Code{Value: ptr.To("Frameworx-1.0")}
	// SPDXLicense FreeImage Public License v1.0
	SpdxlicenseFreeImage = Code{Value: ptr.To("FreeImage")}
	// SPDXLicense FSF All Permissive License
	SpdxlicenseFsfap = Code{Value: ptr.To("FSFAP")}
	// SPDXLicense FSF Unlimited License
	SpdxlicenseFsful = Code{Value: ptr.To("FSFUL")}
	// SPDXLicense FSF Unlimited License (with License Retention)
	SpdxlicenseFsfullr = Code{Value: ptr.To("FSFULLR")}
	// SPDXLicense Freetype Project License
	SpdxlicenseFtl = Code{Value: ptr.To("FTL")}
	// SPDXLicense gSOAP Public License v1.3b
	SpdxlicenseGSoap13B = Code{Value: ptr.To("gSOAP-1.3b")}
	// SPDXLicense GNU Free Documentation License v1.1 only
	SpdxlicenseGfdl11Only = Code{Value: ptr.To("GFDL-1.1-only")}
	// SPDXLicense GNU Free Documentation License v1.1 or later
	SpdxlicenseGfdl11OrLater = Code{Value: ptr.To("GFDL-1.1-or-later")}
	// SPDXLicense GNU Free Documentation License v1.2 only
	SpdxlicenseGfdl12Only = Code{Value: ptr.To("GFDL-1.2-only")}
	// SPDXLicense GNU Free Documentation License v1.2 or later
	SpdxlicenseGfdl12OrLater = Code{Value: ptr.To("GFDL-1.2-or-later")}
	// SPDXLicense GNU Free Documentation License v1.3 only
	SpdxlicenseGfdl13Only = Code{Value: ptr.To("GFDL-1.3-only")}
	// SPDXLicense GNU Free Documentation License v1.3 or later
	SpdxlicenseGfdl13OrLater = Code{Value: ptr.To("GFDL-1.3-or-later")}
	// SPDXLicense Giftware License
	SpdxlicenseGiftware = Code{Value: ptr.To("Giftware")}
	// SPDXLicense GL2PS License
	SpdxlicenseGl2Ps = Code{Value: ptr.To("GL2PS")}
	// SPDXLicense 3dfx Glide License
	SpdxlicenseGlide = Code{Value: ptr.To("Glide")}
	// SPDXLicense Glulxe License
	SpdxlicenseGlulxe = Code{Value: ptr.To("Glulxe")}
	// SPDXLicense gnuplot License
	SpdxlicenseGnuplot = Code{Value: ptr.To("gnuplot")}
	// SPDXLicense GNU General Public License v1.0 only
	SpdxlicenseGpl10Only = Code{Value: ptr.To("GPL-1.0-only")}
	// SPDXLicense GNU General Public License v1.0 or later
	SpdxlicenseGpl10OrLater = Code{Value: ptr.To("GPL-1.0-or-later")}
	// SPDXLicense GNU General Public License v2.0 only
	SpdxlicenseGpl20Only = Code{Value: ptr.To("GPL-2.0-only")}
	// SPDXLicense GNU General Public License v2.0 or later
	SpdxlicenseGpl20OrLater = Code{Value: ptr.To("GPL-2.0-or-later")}
	// SPDXLicense GNU General Public License v3.0 only
	SpdxlicenseGpl30Only = Code{Value: ptr.To("GPL-3.0-only")}
	// SPDXLicense GNU General Public License v3.0 or later
	SpdxlicenseGpl30OrLater = Code{Value: ptr.To("GPL-3.0-or-later")}
	// SPDXLicense Haskell Language Report License
	SpdxlicenseHaskellReport = Code{Value: ptr.To("HaskellReport")}
	// SPDXLicense Historical Permission Notice and Disclaimer
	SpdxlicenseHpnd = Code{Value: ptr.To("HPND")}
	// SPDXLicense iMatix Standard Function Library Agreement
	SpdxlicenseIMatix = Code{Value: ptr.To("iMatix")}
	// SPDXLicense IBM PowerPC Initialization and Boot Software
	SpdxlicenseIbmPibs = Code{Value: ptr.To("IBM-pibs")}
	// SPDXLicense ICU License
	SpdxlicenseIcu = Code{Value: ptr.To("ICU")}
	// SPDXLicense Independent JPEG Group License
	SpdxlicenseIjg = Code{Value: ptr.To("IJG")}
	// SPDXLicense ImageMagick License
	SpdxlicenseImageMagick = Code{Value: ptr.To("ImageMagick")}
	// SPDXLicense Imlib2 License
	SpdxlicenseImlib2 = Code{Value: ptr.To("Imlib2")}
	// SPDXLicense Info-ZIP License
	SpdxlicenseInfoZip = Code{Value: ptr.To("Info-ZIP")}
	// SPDXLicense Intel Open Source License
	SpdxlicenseIntel = Code{Value: ptr.To("Intel")}
	// SPDXLicense Intel ACPI Software License Agreement
	SpdxlicenseIntelAcpi = Code{Value: ptr.To("Intel-ACPI")}
	// SPDXLicense Interbase Public License v1.0
	SpdxlicenseInterbase10 = Code{Value: ptr.To("Interbase-1.0")}
	// SPDXLicense IPA Font License
	SpdxlicenseIpa = Code{Value: ptr.To("IPA")}
	// SPDXLicense IBM Public License v1.0
	SpdxlicenseIpl10 = Code{Value: ptr.To("IPL-1.0")}
	// SPDXLicense ISC License
	SpdxlicenseIsc = Code{Value: ptr.To("ISC")}
	// SPDXLicense JasPer License
	SpdxlicenseJasPer20 = Code{Value: ptr.To("JasPer-2.0")}
	// SPDXLicense JSON License
	SpdxlicenseJson = Code{Value: ptr.To("JSON")}
	// SPDXLicense Licence Art Libre 1.2
	SpdxlicenseLal12 = Code{Value: ptr.To("LAL-1.2")}
	// SPDXLicense Licence Art Libre 1.3
	SpdxlicenseLal13 = Code{Value: ptr.To("LAL-1.3")}
	// SPDXLicense Latex2e License
	SpdxlicenseLatex2E = Code{Value: ptr.To("Latex2e")}
	// SPDXLicense Leptonica License
	SpdxlicenseLeptonica = Code{Value: ptr.To("Leptonica")}
	// SPDXLicense GNU Library General Public License v2 only
	SpdxlicenseLgpl20Only = Code{Value: ptr.To("LGPL-2.0-only")}
	// SPDXLicense GNU Library General Public License v2 or later
	SpdxlicenseLgpl20OrLater = Code{Value: ptr.To("LGPL-2.0-or-later")}
	// SPDXLicense GNU Lesser General Public License v2.1 only
	SpdxlicenseLgpl21Only = Code{Value: ptr.To("LGPL-2.1-only")}
	// SPDXLicense GNU Lesser General Public License v2.1 or later
	SpdxlicenseLgpl21OrLater = Code{Value: ptr.To("LGPL-2.1-or-later")}
	// SPDXLicense GNU Lesser General Public License v3.0 only
	SpdxlicenseLgpl30Only = Code{Value: ptr.To("LGPL-3.0-only")}
	// SPDXLicense GNU Lesser General Public License v3.0 or later
	SpdxlicenseLgpl30OrLater = Code{Value: ptr.To("LGPL-3.0-or-later")}
	// SPDXLicense Lesser General Public License For Linguistic Resources
	SpdxlicenseLgpllr = Code{Value: ptr.To("LGPLLR")}
	// SPDXLicense Licence Libre du Québec – Permissive version 1.1
	SpdxlicenseLiLiQP11 = Code{Value: ptr.To("LiLiQ-P-1.1")}
	// SPDXLicense Licence Libre du Québec – Réciprocité version 1.1
	SpdxlicenseLiLiQR11 = Code{Value: ptr.To("LiLiQ-R-1.1")}
	// SPDXLicense Licence Libre du Québec – Réciprocité forte version 1.1
	SpdxlicenseLiLiQRplus11 = Code{Value: ptr.To("LiLiQ-Rplus-1.1")}
	// SPDXLicense libpng License
	SpdxlicenseLibpng = Code{Value: ptr.To("Libpng")}
	// SPDXLicense libtiff License
	SpdxlicenseLibtiff = Code{Value: ptr.To("libtiff")}
	// SPDXLicense Linux Kernel Variant of OpenIB.org license
	SpdxlicenseLinuxOpenIb = Code{Value: ptr.To("Linux-OpenIB")}
	// SPDXLicense Lucent Public License Version 1.0
	SpdxlicenseLpl10 = Code{Value: ptr.To("LPL-1.0")}
	// SPDXLicense Lucent Public License v1.02
	SpdxlicenseLpl102 = Code{Value: ptr.To("LPL-1.02")}
	// SPDXLicense LaTeX Project Public License v1.0
	SpdxlicenseLppl10 = Code{Value: ptr.To("LPPL-1.0")}
	// SPDXLicense LaTeX Project Public License v1.1
	SpdxlicenseLppl11 = Code{Value: ptr.To("LPPL-1.1")}
	// SPDXLicense LaTeX Project Public License v1.2
	SpdxlicenseLppl12 = Code{Value: ptr.To("LPPL-1.2")}
	// SPDXLicense LaTeX Project Public License v1.3a
	SpdxlicenseLppl13A = Code{Value: ptr.To("LPPL-1.3a")}
	// SPDXLicense LaTeX Project Public License v1.3c
	SpdxlicenseLppl13C = Code{Value: ptr.To("LPPL-1.3c")}
	// SPDXLicense MakeIndex License
	SpdxlicenseMakeIndex = Code{Value: ptr.To("MakeIndex")}
	// SPDXLicense MirOS License
	SpdxlicenseMirOs = Code{Value: ptr.To("MirOS")}
	// SPDXLicense MIT License
	SpdxlicenseMit = Code{Value: ptr.To("MIT")}
	// SPDXLicense MIT No Attribution
	SpdxlicenseMit0 = Code{Value: ptr.To("MIT-0")}
	// SPDXLicense Enlightenment License (e16)
	SpdxlicenseMitAdvertising = Code{Value: ptr.To("MIT-advertising")}
	// SPDXLicense CMU License
	SpdxlicenseMitCmu = Code{Value: ptr.To("MIT-CMU")}
	// SPDXLicense enna License
	SpdxlicenseMitEnna = Code{Value: ptr.To("MIT-enna")}
	// SPDXLicense feh License
	SpdxlicenseMitFeh = Code{Value: ptr.To("MIT-feh")}
	// SPDXLicense MIT +no-false-attribs license
	SpdxlicenseMitnfa = Code{Value: ptr.To("MITNFA")}
	// SPDXLicense Motosoto License
	SpdxlicenseMotosoto = Code{Value: ptr.To("Motosoto")}
	// SPDXLicense mpich2 License
	SpdxlicenseMpich2 = Code{Value: ptr.To("mpich2")}
	// SPDXLicense Mozilla Public License 1.0
	SpdxlicenseMpl10 = Code{Value: ptr.To("MPL-1.0")}
	// SPDXLicense Mozilla Public License 1.1
	SpdxlicenseMpl11 = Code{Value: ptr.To("MPL-1.1")}
	// SPDXLicense Mozilla Public License 2.0
	SpdxlicenseMpl20 = Code{Value: ptr.To("MPL-2.0")}
	// SPDXLicense Mozilla Public License 2.0 (no copyleft exception)
	SpdxlicenseMpl20NoCopyleftException = Code{Value: ptr.To("MPL-2.0-no-copyleft-exception")}
	// SPDXLicense Microsoft Public License
	SpdxlicenseMsPl = Code{Value: ptr.To("MS-PL")}
	// SPDXLicense Microsoft Reciprocal License
	SpdxlicenseMsRl = Code{Value: ptr.To("MS-RL")}
	// SPDXLicense Matrix Template Library License
	SpdxlicenseMtll = Code{Value: ptr.To("MTLL")}
	// SPDXLicense Multics License
	SpdxlicenseMultics = Code{Value: ptr.To("Multics")}
	// SPDXLicense Mup License
	SpdxlicenseMup = Code{Value: ptr.To("Mup")}
	// SPDXLicense NASA Open Source Agreement 1.3
	SpdxlicenseNasa13 = Code{Value: ptr.To("NASA-1.3")}
	// SPDXLicense Naumen Public License
	SpdxlicenseNaumen = Code{Value: ptr.To("Naumen")}
	// SPDXLicense Net Boolean Public License v1
	SpdxlicenseNbpl10 = Code{Value: ptr.To("NBPL-1.0")}
	// SPDXLicense University of Illinois/NCSA Open Source License
	SpdxlicenseNcsa = Code{Value: ptr.To("NCSA")}
	// SPDXLicense NetCDF license
	SpdxlicenseNetCdf = Code{Value: ptr.To("NetCDF")}
	// SPDXLicense Net-SNMP License
	SpdxlicenseNetSnmp = Code{Value: ptr.To("Net-SNMP")}
	// SPDXLicense Newsletr License
	SpdxlicenseNewsletr = Code{Value: ptr.To("Newsletr")}
	// SPDXLicense Nethack General Public License
	SpdxlicenseNgpl = Code{Value: ptr.To("NGPL")}
	// SPDXLicense Norwegian Licence for Open Government Data
	SpdxlicenseNlod10 = Code{Value: ptr.To("NLOD-1.0")}
	// SPDXLicense No Limit Public License
	SpdxlicenseNlpl = Code{Value: ptr.To("NLPL")}
	// SPDXLicense Nokia Open Source License
	SpdxlicenseNokia = Code{Value: ptr.To("Nokia")}
	// SPDXLicense Netizen Open Source License
	SpdxlicenseNosl = Code{Value: ptr.To("NOSL")}
	// SPDXLicense Not open source
	SpdxlicenseNotOpenSource = Code{Value: ptr.To("not-open-source")}
	// SPDXLicense Noweb License
	SpdxlicenseNoweb = Code{Value: ptr.To("Noweb")}
	// SPDXLicense Netscape Public License v1.0
	SpdxlicenseNpl10 = Code{Value: ptr.To("NPL-1.0")}
	// SPDXLicense Netscape Public License v1.1
	SpdxlicenseNpl11 = Code{Value: ptr.To("NPL-1.1")}
	// SPDXLicense Non-Profit Open Software License 3.0
	SpdxlicenseNposl30 = Code{Value: ptr.To("NPOSL-3.0")}
	// SPDXLicense NRL License
	SpdxlicenseNrl = Code{Value: ptr.To("NRL")}
	// SPDXLicense NTP License
	SpdxlicenseNtp = Code{Value: ptr.To("NTP")}
	// SPDXLicense Open CASCADE Technology Public License
	SpdxlicenseOcctPl = Code{Value: ptr.To("OCCT-PL")}
	// SPDXLicense OCLC Research Public License 2.0
	SpdxlicenseOclc20 = Code{Value: ptr.To("OCLC-2.0")}
	// SPDXLicense ODC Open Database License v1.0
	SpdxlicenseOdbL10 = Code{Value: ptr.To("ODbL-1.0")}
	// SPDXLicense SIL Open Font License 1.0
	SpdxlicenseOfl10 = Code{Value: ptr.To("OFL-1.0")}
	// SPDXLicense SIL Open Font License 1.1
	SpdxlicenseOfl11 = Code{Value: ptr.To("OFL-1.1")}
	// SPDXLicense Open Group Test Suite License
	SpdxlicenseOgtsl = Code{Value: ptr.To("OGTSL")}
	// SPDXLicense Open LDAP Public License v1.1
	SpdxlicenseOldap11 = Code{Value: ptr.To("OLDAP-1.1")}
	// SPDXLicense Open LDAP Public License v1.2
	SpdxlicenseOldap12 = Code{Value: ptr.To("OLDAP-1.2")}
	// SPDXLicense Open LDAP Public License v1.3
	SpdxlicenseOldap13 = Code{Value: ptr.To("OLDAP-1.3")}
	// SPDXLicense Open LDAP Public License v1.4
	SpdxlicenseOldap14 = Code{Value: ptr.To("OLDAP-1.4")}
	// SPDXLicense Open LDAP Public License v2.0 (or possibly 2.0A and 2.0B)
	SpdxlicenseOldap20 = Code{Value: ptr.To("OLDAP-2.0")}
	// SPDXLicense Open LDAP Public License v2.0.1
	SpdxlicenseOldap201 = Code{Value: ptr.To("OLDAP-2.0.1")}
	// SPDXLicense Open LDAP Public License v2.1
	SpdxlicenseOldap21 = Code{Value: ptr.To("OLDAP-2.1")}
	// SPDXLicense Open LDAP Public License v2.2
	SpdxlicenseOldap22 = Code{Value: ptr.To("OLDAP-2.2")}
	// SPDXLicense Open LDAP Public License v2.2.1
	SpdxlicenseOldap221 = Code{Value: ptr.To("OLDAP-2.2.1")}
	// SPDXLicense Open LDAP Public License 2.2.2
	SpdxlicenseOldap222 = Code{Value: ptr.To("OLDAP-2.2.2")}
	// SPDXLicense Open LDAP Public License v2.3
	SpdxlicenseOldap23 = Code{Value: ptr.To("OLDAP-2.3")}
	// SPDXLicense Open LDAP Public License v2.4
	SpdxlicenseOldap24 = Code{Value: ptr.To("OLDAP-2.4")}
	// SPDXLicense Open LDAP Public License v2.5
	SpdxlicenseOldap25 = Code{Value: ptr.To("OLDAP-2.5")}
	// SPDXLicense Open LDAP Public License v2.6
	SpdxlicenseOldap26 = Code{Value: ptr.To("OLDAP-2.6")}
	// SPDXLicense Open LDAP Public License v2.7
	SpdxlicenseOldap27 = Code{Value: ptr.To("OLDAP-2.7")}
	// SPDXLicense Open LDAP Public License v2.8
	SpdxlicenseOldap28 = Code{Value: ptr.To("OLDAP-2.8")}
	// SPDXLicense Open Market License
	SpdxlicenseOml = Code{Value: ptr.To("OML")}
	// SPDXLicense OpenSSL License
	SpdxlicenseOpenSsl = Code{Value: ptr.To("OpenSSL")}
	// SPDXLicense Open Public License v1.0
	SpdxlicenseOpl10 = Code{Value: ptr.To("OPL-1.0")}
	// SPDXLicense OSET Public License version 2.1
	SpdxlicenseOsetPl21 = Code{Value: ptr.To("OSET-PL-2.1")}
	// SPDXLicense Open Software License 1.0
	SpdxlicenseOsl10 = Code{Value: ptr.To("OSL-1.0")}
	// SPDXLicense Open Software License 1.1
	SpdxlicenseOsl11 = Code{Value: ptr.To("OSL-1.1")}
	// SPDXLicense Open Software License 2.0
	SpdxlicenseOsl20 = Code{Value: ptr.To("OSL-2.0")}
	// SPDXLicense Open Software License 2.1
	SpdxlicenseOsl21 = Code{Value: ptr.To("OSL-2.1")}
	// SPDXLicense Open Software License 3.0
	SpdxlicenseOsl30 = Code{Value: ptr.To("OSL-3.0")}
	// SPDXLicense ODC Public Domain Dedication & License 1.0
	SpdxlicensePddl10 = Code{Value: ptr.To("PDDL-1.0")}
	// SPDXLicense PHP License v3.0
	SpdxlicensePhp30 = Code{Value: ptr.To("PHP-3.0")}
	// SPDXLicense PHP License v3.01
	SpdxlicensePhp301 = Code{Value: ptr.To("PHP-3.01")}
	// SPDXLicense Plexus Classworlds License
	SpdxlicensePlexus = Code{Value: ptr.To("Plexus")}
	// SPDXLicense PostgreSQL License
	SpdxlicensePostgreSql = Code{Value: ptr.To("PostgreSQL")}
	// SPDXLicense psfrag License
	SpdxlicensePsfrag = Code{Value: ptr.To("psfrag")}
	// SPDXLicense psutils License
	SpdxlicensePsutils = Code{Value: ptr.To("psutils")}
	// SPDXLicense Python License 2.0
	SpdxlicensePython20 = Code{Value: ptr.To("Python-2.0")}
	// SPDXLicense Qhull License
	SpdxlicenseQhull = Code{Value: ptr.To("Qhull")}
	// SPDXLicense Q Public License 1.0
	SpdxlicenseQpl10 = Code{Value: ptr.To("QPL-1.0")}
	// SPDXLicense Rdisc License
	SpdxlicenseRdisc = Code{Value: ptr.To("Rdisc")}
	// SPDXLicense Red Hat eCos Public License v1.1
	SpdxlicenseRheCos11 = Code{Value: ptr.To("RHeCos-1.1")}
	// SPDXLicense Reciprocal Public License 1.1
	SpdxlicenseRpl11 = Code{Value: ptr.To("RPL-1.1")}
	// SPDXLicense Reciprocal Public License 1.5
	SpdxlicenseRpl15 = Code{Value: ptr.To("RPL-1.5")}
	// SPDXLicense RealNetworks Public Source License v1.0
	SpdxlicenseRpsl10 = Code{Value: ptr.To("RPSL-1.0")}
	// SPDXLicense RSA Message-Digest License
	SpdxlicenseRsaMd = Code{Value: ptr.To("RSA-MD")}
	// SPDXLicense Ricoh Source Code Public License
	SpdxlicenseRscpl = Code{Value: ptr.To("RSCPL")}
	// SPDXLicense Ruby License
	SpdxlicenseRuby = Code{Value: ptr.To("Ruby")}
	// SPDXLicense Sax Public Domain Notice
	SpdxlicenseSaxPd = Code{Value: ptr.To("SAX-PD")}
	// SPDXLicense Saxpath License
	SpdxlicenseSaxpath = Code{Value: ptr.To("Saxpath")}
	// SPDXLicense SCEA Shared Source License
	SpdxlicenseScea = Code{Value: ptr.To("SCEA")}
	// SPDXLicense Sendmail License
	SpdxlicenseSendmail = Code{Value: ptr.To("Sendmail")}
	// SPDXLicense SGI Free Software License B v1.0
	SpdxlicenseSgiB10 = Code{Value: ptr.To("SGI-B-1.0")}
	// SPDXLicense SGI Free Software License B v1.1
	SpdxlicenseSgiB11 = Code{Value: ptr.To("SGI-B-1.1")}
	// SPDXLicense SGI Free Software License B v2.0
	SpdxlicenseSgiB20 = Code{Value: ptr.To("SGI-B-2.0")}
	// SPDXLicense Simple Public License 2.0
	SpdxlicenseSimPl20 = Code{Value: ptr.To("SimPL-2.0")}
	// SPDXLicense Sun Industry Standards Source License v1.1
	SpdxlicenseSissl = Code{Value: ptr.To("SISSL")}
	// SPDXLicense Sun Industry Standards Source License v1.2
	SpdxlicenseSissl12 = Code{Value: ptr.To("SISSL-1.2")}
	// SPDXLicense Sleepycat License
	SpdxlicenseSleepycat = Code{Value: ptr.To("Sleepycat")}
	// SPDXLicense Standard ML of New Jersey License
	SpdxlicenseSmlnj = Code{Value: ptr.To("SMLNJ")}
	// SPDXLicense Secure Messaging Protocol Public License
	SpdxlicenseSmppl = Code{Value: ptr.To("SMPPL")}
	// SPDXLicense SNIA Public License 1.1
	SpdxlicenseSnia = Code{Value: ptr.To("SNIA")}
	// SPDXLicense Spencer License 86
	SpdxlicenseSpencer86 = Code{Value: ptr.To("Spencer-86")}
	// SPDXLicense Spencer License 94
	SpdxlicenseSpencer94 = Code{Value: ptr.To("Spencer-94")}
	// SPDXLicense Spencer License 99
	SpdxlicenseSpencer99 = Code{Value: ptr.To("Spencer-99")}
	// SPDXLicense Sun Public License v1.0
	SpdxlicenseSpl10 = Code{Value: ptr.To("SPL-1.0")}
	// SPDXLicense SugarCRM Public License v1.1.3
	SpdxlicenseSugarCrm113 = Code{Value: ptr.To("SugarCRM-1.1.3")}
	// SPDXLicense Scheme Widget Library (SWL) Software License Agreement
	SpdxlicenseSwl = Code{Value: ptr.To("SWL")}
	// SPDXLicense TCL/TK License
	SpdxlicenseTcl = Code{Value: ptr.To("TCL")}
	// SPDXLicense TCP Wrappers License
	SpdxlicenseTcpWrappers = Code{Value: ptr.To("TCP-wrappers")}
	// SPDXLicense TMate Open Source License
	SpdxlicenseTmate = Code{Value: ptr.To("TMate")}
	// SPDXLicense TORQUE v2.5+ Software License v1.1
	SpdxlicenseTorque11 = Code{Value: ptr.To("TORQUE-1.1")}
	// SPDXLicense Trusster Open Source License
	SpdxlicenseTosl = Code{Value: ptr.To("TOSL")}
	// SPDXLicense Unicode License Agreement - Data Files and Software (2015)
	SpdxlicenseUnicodeDfs2015 = Code{Value: ptr.To("Unicode-DFS-2015")}
	// SPDXLicense Unicode License Agreement - Data Files and Software (2016)
	SpdxlicenseUnicodeDfs2016 = Code{Value: ptr.To("Unicode-DFS-2016")}
	// SPDXLicense Unicode Terms of Use
	SpdxlicenseUnicodeTou = Code{Value: ptr.To("Unicode-TOU")}
	// SPDXLicense The Unlicense
	SpdxlicenseUnlicense = Code{Value: ptr.To("Unlicense")}
	// SPDXLicense Universal Permissive License v1.0
	SpdxlicenseUpl10 = Code{Value: ptr.To("UPL-1.0")}
	// SPDXLicense Vim License
	SpdxlicenseVim = Code{Value: ptr.To("Vim")}
	// SPDXLicense VOSTROM Public License for Open Source
	SpdxlicenseVostrom = Code{Value: ptr.To("VOSTROM")}
	// SPDXLicense Vovida Software License v1.0
	SpdxlicenseVsl10 = Code{Value: ptr.To("VSL-1.0")}
	// SPDXLicense W3C Software Notice and License (2002-12-31)
	SpdxlicenseW3C = Code{Value: ptr.To("W3C")}
	// SPDXLicense W3C Software Notice and License (1998-07-20)
	SpdxlicenseW3C19980720 = Code{Value: ptr.To("W3C-19980720")}
	// SPDXLicense W3C Software Notice and Document License (2015-05-13)
	SpdxlicenseW3C20150513 = Code{Value: ptr.To("W3C-20150513")}
	// SPDXLicense Sybase Open Watcom Public License 1.0
	SpdxlicenseWatcom10 = Code{Value: ptr.To("Watcom-1.0")}
	// SPDXLicense Wsuipa License
	SpdxlicenseWsuipa = Code{Value: ptr.To("Wsuipa")}
	// SPDXLicense Do What The F*ck You Want To Public License
	SpdxlicenseWtfpl = Code{Value: ptr.To("WTFPL")}
	// SPDXLicense X11 License
	SpdxlicenseX11 = Code{Value: ptr.To("X11")}
	// SPDXLicense Xerox License
	SpdxlicenseXerox = Code{Value: ptr.To("Xerox")}
	// SPDXLicense XFree86 License 1.1
	SpdxlicenseXfree8611 = Code{Value: ptr.To("XFree86-1.1")}
	// SPDXLicense xinetd License
	SpdxlicenseXinetd = Code{Value: ptr.To("xinetd")}
	// SPDXLicense X.Net License
	SpdxlicenseXnet = Code{Value: ptr.To("Xnet")}
	// SPDXLicense XPP License
	SpdxlicenseXpp = Code{Value: ptr.To("xpp")}
	// SPDXLicense XSkat License
	SpdxlicenseXskat = Code{Value: ptr.To("XSkat")}
	// SPDXLicense Yahoo! Public License v1.0
	SpdxlicenseYpl10 = Code{Value: ptr.To("YPL-1.0")}
	// SPDXLicense Yahoo! Public License v1.1
	SpdxlicenseYpl11 = Code{Value: ptr.To("YPL-1.1")}
	// SPDXLicense Zed License
	SpdxlicenseZed = Code{Value: ptr.To("Zed")}
	// SPDXLicense Zend License v2.0
	SpdxlicenseZend20 = Code{Value: ptr.To("Zend-2.0")}
	// SPDXLicense Zimbra Public License v1.3
	SpdxlicenseZimbra13 = Code{Value: ptr.To("Zimbra-1.3")}
	// SPDXLicense Zimbra Public License v1.4
	SpdxlicenseZimbra14 = Code{Value: ptr.To("Zimbra-1.4")}
	// SPDXLicense zlib License
	SpdxlicenseZlib = Code{Value: ptr.To("Zlib")}
	// SPDXLicense zlib/libpng License with Acknowledgement
	SpdxlicenseZlibAcknowledgement = Code{Value: ptr.To("zlib-acknowledgement")}
	// SPDXLicense Zope Public License 1.1
	SpdxlicenseZpl11 = Code{Value: ptr.To("ZPL-1.1")}
	// SPDXLicense Zope Public License 2.0
	SpdxlicenseZpl20 = Code{Value: ptr.To("ZPL-2.0")}
	// SPDXLicense Zope Public License 2.1
	SpdxlicenseZpl21 = Code{Value: ptr.To("ZPL-2.1")}
)

var (
	// SearchComparator Approximately
	SearchComparatorAp = Code{Value: ptr.To("ap")}
	// SearchComparator Ends Before
	SearchComparatorEb = Code{Value: ptr.To("eb")}
	// SearchComparator Equals
	SearchComparatorEq = Code{Value: ptr.To("eq")}
	// SearchComparator Greater or Equals
	SearchComparatorGe = Code{Value: ptr.To("ge")}
	// SearchComparator Greater Than
	SearchComparatorGt = Code{Value: ptr.To("gt")}
	// SearchComparator Less of Equal
	SearchComparatorLe = Code{Value: ptr.To("le")}
	// SearchComparator Less Than
	SearchComparatorLt = Code{Value: ptr.To("lt")}
	// SearchComparator Not Equals
	SearchComparatorNe = Code{Value: ptr.To("ne")}
	// SearchComparator Starts After
	SearchComparatorSa = Code{Value: ptr.To("sa")}
)

var (
	// SearchEntryMode Include
	SearchEntryModeInclude = Code{Value: ptr.To("include")}
	// SearchEntryMode Match
	SearchEntryModeMatch = Code{Value: ptr.To("match")}
	// SearchEntryMode Outcome
	SearchEntryModeOutcome = Code{Value: ptr.To("outcome")}
)

var (
	// SearchModifierCode Above
	SearchModifierCodeAbove = Code{Value: ptr.To("above")}
	// SearchModifierCode Below
	SearchModifierCodeBelow = Code{Value: ptr.To("below")}
	// SearchModifierCode Contains
	SearchModifierCodeContains = Code{Value: ptr.To("contains")}
	// SearchModifierCode Exact
	SearchModifierCodeExact = Code{Value: ptr.To("exact")}
	// SearchModifierCode Identifier
	SearchModifierCodeIdentifier = Code{Value: ptr.To("identifier")}
	// SearchModifierCode In
	SearchModifierCodeIn = Code{Value: ptr.To("in")}
	// SearchModifierCode Missing
	SearchModifierCodeMissing = Code{Value: ptr.To("missing")}
	// SearchModifierCode Not
	SearchModifierCodeNot = Code{Value: ptr.To("not")}
	// SearchModifierCode Not In
	SearchModifierCodeNotIn = Code{Value: ptr.To("not-in")}
	// SearchModifierCode Of Type
	SearchModifierCodeOfType = Code{Value: ptr.To("ofType")}
	// SearchModifierCode Text
	SearchModifierCodeText = Code{Value: ptr.To("text")}
	// SearchModifierCode Type
	SearchModifierCodeType = Code{Value: ptr.To("type")}
)

var (
	// SearchParamType Composite
	SearchParamTypeComposite = Code{Value: ptr.To("composite")}
	// SearchParamType Date/DateTime
	SearchParamTypeDate = Code{Value: ptr.To("date")}
	// SearchParamType Number
	SearchParamTypeNumber = Code{Value: ptr.To("number")}
	// SearchParamType Quantity
	SearchParamTypeQuantity = Code{Value: ptr.To("quantity")}
	// SearchParamType Reference
	SearchParamTypeReference = Code{Value: ptr.To("reference")}
	// SearchParamType Special
	SearchParamTypeSpecial = Code{Value: ptr.To("special")}
	// SearchParamType String
	SearchParamTypeString = Code{Value: ptr.To("string")}
	// SearchParamType Token
	SearchParamTypeToken = Code{Value: ptr.To("token")}
	// SearchParamType URI
	SearchParamTypeUri = Code{Value: ptr.To("uri")}
)

var (
	// SlicingRules Closed
	SlicingRulesClosed = Code{Value: ptr.To("closed")}
	// SlicingRules Open
	SlicingRulesOpen = Code{Value: ptr.To("open")}
	// SlicingRules Open at End
	SlicingRulesOpenAtEnd = Code{Value: ptr.To("openAtEnd")}
)

var (
	// SlotStatus Busy
	SlotStatusBusy = Code{Value: ptr.To("busy")}
	// SlotStatus Busy (Tentative)
	SlotStatusBusyTentative = Code{Value: ptr.To("busy-tentative")}
	// SlotStatus Busy (Unavailable)
	SlotStatusBusyUnavailable = Code{Value: ptr.To("busy-unavailable")}
	// SlotStatus Entered in error
	SlotStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SlotStatus Free
	SlotStatusFree = Code{Value: ptr.To("free")}
)

var (
	// SortDirection Ascending
	SortDirectionAscending = Code{Value: ptr.To("ascending")}
	// SortDirection Descending
	SortDirectionDescending = Code{Value: ptr.To("descending")}
)

var (
	// SpecimenContainedPreference Alternate
	SpecimenContainedPreferenceAlternate = Code{Value: ptr.To("alternate")}
	// SpecimenContainedPreference Preferred
	SpecimenContainedPreferencePreferred = Code{Value: ptr.To("preferred")}
)

var (
	// SpecimenStatus Available
	SpecimenStatusAvailable = Code{Value: ptr.To("available")}
	// SpecimenStatus Entered in Error
	SpecimenStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SpecimenStatus Unavailable
	SpecimenStatusUnavailable = Code{Value: ptr.To("unavailable")}
	// SpecimenStatus Unsatisfactory
	SpecimenStatusUnsatisfactory = Code{Value: ptr.To("unsatisfactory")}
)

var (
	// StructureDefinitionKind Complex Data Type
	StructureDefinitionKindComplexType = Code{Value: ptr.To("complex-type")}
	// StructureDefinitionKind Logical
	StructureDefinitionKindLogical = Code{Value: ptr.To("logical")}
	// StructureDefinitionKind Primitive Data Type
	StructureDefinitionKindPrimitiveType = Code{Value: ptr.To("primitive-type")}
	// StructureDefinitionKind Resource
	StructureDefinitionKindResource = Code{Value: ptr.To("resource")}
)

var (
	// StructureMapContextType Type
	StructureMapContextTypeType = Code{Value: ptr.To("type")}
	// StructureMapContextType Variable
	StructureMapContextTypeVariable = Code{Value: ptr.To("variable")}
)

var (
	// StructureMapGroupTypeMode Not a Default
	StructureMapGroupTypeModeNone = Code{Value: ptr.To("none")}
	// StructureMapGroupTypeMode Default for type + combination
	StructureMapGroupTypeModeTypeAndTypes = Code{Value: ptr.To("type-and-types")}
	// StructureMapGroupTypeMode Default for Type Combination
	StructureMapGroupTypeModeTypes = Code{Value: ptr.To("types")}
)

var (
	// StructureMapInputMode Source Instance
	StructureMapInputModeSource = Code{Value: ptr.To("source")}
	// StructureMapInputMode Target Instance
	StructureMapInputModeTarget = Code{Value: ptr.To("target")}
)

var (
	// StructureMapModelMode Produced Structure Definition
	StructureMapModelModeProduced = Code{Value: ptr.To("produced")}
	// StructureMapModelMode Queried Structure Definition
	StructureMapModelModeQueried = Code{Value: ptr.To("queried")}
	// StructureMapModelMode Source Structure Definition
	StructureMapModelModeSource = Code{Value: ptr.To("source")}
	// StructureMapModelMode Target Structure Definition
	StructureMapModelModeTarget = Code{Value: ptr.To("target")}
)

var (
	// StructureMapSourceListMode First
	StructureMapSourceListModeFirst = Code{Value: ptr.To("first")}
	// StructureMapSourceListMode Last
	StructureMapSourceListModeLast = Code{Value: ptr.To("last")}
	// StructureMapSourceListMode All but the first
	StructureMapSourceListModeNotFirst = Code{Value: ptr.To("not_first")}
	// StructureMapSourceListMode All but the last
	StructureMapSourceListModeNotLast = Code{Value: ptr.To("not_last")}
	// StructureMapSourceListMode Enforce only one
	StructureMapSourceListModeOnlyOne = Code{Value: ptr.To("only_one")}
)

var (
	// StructureMapTargetListMode Collate
	StructureMapTargetListModeCollate = Code{Value: ptr.To("collate")}
	// StructureMapTargetListMode First
	StructureMapTargetListModeFirst = Code{Value: ptr.To("first")}
	// StructureMapTargetListMode Last
	StructureMapTargetListModeLast = Code{Value: ptr.To("last")}
	// StructureMapTargetListMode Share
	StructureMapTargetListModeShare = Code{Value: ptr.To("share")}
)

var (
	// StructureMapTransform append
	StructureMapTransformAppend = Code{Value: ptr.To("append")}
	// StructureMapTransform c
	StructureMapTransformC = Code{Value: ptr.To("c")}
	// StructureMapTransform cast
	StructureMapTransformCast = Code{Value: ptr.To("cast")}
	// StructureMapTransform cc
	StructureMapTransformCc = Code{Value: ptr.To("cc")}
	// StructureMapTransform copy
	StructureMapTransformCopy = Code{Value: ptr.To("copy")}
	// StructureMapTransform cp
	StructureMapTransformCp = Code{Value: ptr.To("cp")}
	// StructureMapTransform create
	StructureMapTransformCreate = Code{Value: ptr.To("create")}
	// StructureMapTransform dateOp
	StructureMapTransformDateOp = Code{Value: ptr.To("dateOp")}
	// StructureMapTransform escape
	StructureMapTransformEscape = Code{Value: ptr.To("escape")}
	// StructureMapTransform evaluate
	StructureMapTransformEvaluate = Code{Value: ptr.To("evaluate")}
	// StructureMapTransform id
	StructureMapTransformId = Code{Value: ptr.To("id")}
	// StructureMapTransform pointer
	StructureMapTransformPointer = Code{Value: ptr.To("pointer")}
	// StructureMapTransform qty
	StructureMapTransformQty = Code{Value: ptr.To("qty")}
	// StructureMapTransform reference
	StructureMapTransformReference = Code{Value: ptr.To("reference")}
	// StructureMapTransform translate
	StructureMapTransformTranslate = Code{Value: ptr.To("translate")}
	// StructureMapTransform truncate
	StructureMapTransformTruncate = Code{Value: ptr.To("truncate")}
	// StructureMapTransform uuid
	StructureMapTransformUuid = Code{Value: ptr.To("uuid")}
)

var (
	// SubscriptionChannelType Email
	SubscriptionChannelTypeEmail = Code{Value: ptr.To("email")}
	// SubscriptionChannelType Message
	SubscriptionChannelTypeMessage = Code{Value: ptr.To("message")}
	// SubscriptionChannelType Rest Hook
	SubscriptionChannelTypeRestHook = Code{Value: ptr.To("rest-hook")}
	// SubscriptionChannelType SMS
	SubscriptionChannelTypeSms = Code{Value: ptr.To("sms")}
	// SubscriptionChannelType Websocket
	SubscriptionChannelTypeWebsocket = Code{Value: ptr.To("websocket")}
)

var (
	// SubscriptionStatus Active
	SubscriptionStatusActive = Code{Value: ptr.To("active")}
	// SubscriptionStatus Error
	SubscriptionStatusError = Code{Value: ptr.To("error")}
	// SubscriptionStatus Off
	SubscriptionStatusOff = Code{Value: ptr.To("off")}
	// SubscriptionStatus Requested
	SubscriptionStatusRequested = Code{Value: ptr.To("requested")}
)

var (
	// SupplyDeliveryStatus Abandoned
	SupplyDeliveryStatusAbandoned = Code{Value: ptr.To("abandoned")}
	// SupplyDeliveryStatus Delivered
	SupplyDeliveryStatusCompleted = Code{Value: ptr.To("completed")}
	// SupplyDeliveryStatus Entered In Error
	SupplyDeliveryStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SupplyDeliveryStatus In Progress
	SupplyDeliveryStatusInProgress = Code{Value: ptr.To("in-progress")}
)

var (
	// SupplyItemType Device
	SupplyItemTypeDevice = Code{Value: ptr.To("device")}
	// SupplyItemType Medication
	SupplyItemTypeMedication = Code{Value: ptr.To("medication")}
)

var (
	// SupplyRequestStatus Active
	SupplyRequestStatusActive = Code{Value: ptr.To("active")}
	// SupplyRequestStatus Cancelled
	SupplyRequestStatusCancelled = Code{Value: ptr.To("cancelled")}
	// SupplyRequestStatus Completed
	SupplyRequestStatusCompleted = Code{Value: ptr.To("completed")}
	// SupplyRequestStatus Draft
	SupplyRequestStatusDraft = Code{Value: ptr.To("draft")}
	// SupplyRequestStatus Entered in Error
	SupplyRequestStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// SupplyRequestStatus Suspended
	SupplyRequestStatusSuspended = Code{Value: ptr.To("suspended")}
	// SupplyRequestStatus Unknown
	SupplyRequestStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// SystemRestfulInteraction batch
	SystemRestfulInteractionBatch = Code{Value: ptr.To("batch")}
	// SystemRestfulInteraction capabilities
	SystemRestfulInteractionCapabilities = Code{Value: ptr.To("capabilities")}
	// SystemRestfulInteraction create
	SystemRestfulInteractionCreate = Code{Value: ptr.To("create")}
	// SystemRestfulInteraction delete
	SystemRestfulInteractionDelete = Code{Value: ptr.To("delete")}
	// SystemRestfulInteraction history
	SystemRestfulInteractionHistory = Code{Value: ptr.To("history")}
	// SystemRestfulInteraction operation
	SystemRestfulInteractionOperation = Code{Value: ptr.To("operation")}
	// SystemRestfulInteraction patch
	SystemRestfulInteractionPatch = Code{Value: ptr.To("patch")}
	// SystemRestfulInteraction read
	SystemRestfulInteractionRead = Code{Value: ptr.To("read")}
	// SystemRestfulInteraction search
	SystemRestfulInteractionSearch = Code{Value: ptr.To("search")}
	// SystemRestfulInteraction transaction
	SystemRestfulInteractionTransaction = Code{Value: ptr.To("transaction")}
	// SystemRestfulInteraction update
	SystemRestfulInteractionUpdate = Code{Value: ptr.To("update")}
	// SystemRestfulInteraction vread
	SystemRestfulInteractionVread = Code{Value: ptr.To("vread")}
)

var (
	// TaskIntent Unknown
	TaskIntentUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// TaskStatus Accepted
	TaskStatusAccepted = Code{Value: ptr.To("accepted")}
	// TaskStatus Cancelled
	TaskStatusCancelled = Code{Value: ptr.To("cancelled")}
	// TaskStatus Completed
	TaskStatusCompleted = Code{Value: ptr.To("completed")}
	// TaskStatus Draft
	TaskStatusDraft = Code{Value: ptr.To("draft")}
	// TaskStatus Entered in Error
	TaskStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// TaskStatus Failed
	TaskStatusFailed = Code{Value: ptr.To("failed")}
	// TaskStatus In Progress
	TaskStatusInProgress = Code{Value: ptr.To("in-progress")}
	// TaskStatus On Hold
	TaskStatusOnHold = Code{Value: ptr.To("on-hold")}
	// TaskStatus Ready
	TaskStatusReady = Code{Value: ptr.To("ready")}
	// TaskStatus Received
	TaskStatusReceived = Code{Value: ptr.To("received")}
	// TaskStatus Rejected
	TaskStatusRejected = Code{Value: ptr.To("rejected")}
	// TaskStatus Requested
	TaskStatusRequested = Code{Value: ptr.To("requested")}
)

var (
	// TestReportActionResult Error
	TestReportActionResultError = Code{Value: ptr.To("error")}
	// TestReportActionResult Fail
	TestReportActionResultFail = Code{Value: ptr.To("fail")}
	// TestReportActionResult Pass
	TestReportActionResultPass = Code{Value: ptr.To("pass")}
	// TestReportActionResult Skip
	TestReportActionResultSkip = Code{Value: ptr.To("skip")}
	// TestReportActionResult Warning
	TestReportActionResultWarning = Code{Value: ptr.To("warning")}
)

var (
	// TestReportParticipantType Client
	TestReportParticipantTypeClient = Code{Value: ptr.To("client")}
	// TestReportParticipantType Server
	TestReportParticipantTypeServer = Code{Value: ptr.To("server")}
	// TestReportParticipantType Test Engine
	TestReportParticipantTypeTestEngine = Code{Value: ptr.To("test-engine")}
)

var (
	// TestReportResult Fail
	TestReportResultFail = Code{Value: ptr.To("fail")}
	// TestReportResult Pass
	TestReportResultPass = Code{Value: ptr.To("pass")}
	// TestReportResult Pending
	TestReportResultPending = Code{Value: ptr.To("pending")}
)

var (
	// TestReportStatus Completed
	TestReportStatusCompleted = Code{Value: ptr.To("completed")}
	// TestReportStatus Entered In Error
	TestReportStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// TestReportStatus In Progress
	TestReportStatusInProgress = Code{Value: ptr.To("in-progress")}
	// TestReportStatus Stopped
	TestReportStatusStopped = Code{Value: ptr.To("stopped")}
	// TestReportStatus Waiting
	TestReportStatusWaiting = Code{Value: ptr.To("waiting")}
)

var (
	// TestScriptRequestMethodCode DELETE
	TestScriptRequestMethodCodeDelete = Code{Value: ptr.To("delete")}
	// TestScriptRequestMethodCode GET
	TestScriptRequestMethodCodeGet = Code{Value: ptr.To("get")}
	// TestScriptRequestMethodCode HEAD
	TestScriptRequestMethodCodeHead = Code{Value: ptr.To("head")}
	// TestScriptRequestMethodCode OPTIONS
	TestScriptRequestMethodCodeOptions = Code{Value: ptr.To("options")}
	// TestScriptRequestMethodCode PATCH
	TestScriptRequestMethodCodePatch = Code{Value: ptr.To("patch")}
	// TestScriptRequestMethodCode POST
	TestScriptRequestMethodCodePost = Code{Value: ptr.To("post")}
	// TestScriptRequestMethodCode PUT
	TestScriptRequestMethodCodePut = Code{Value: ptr.To("put")}
)

var (
	// TriggerType Data Access Ended
	TriggerTypeDataAccessEnded = Code{Value: ptr.To("data-access-ended")}
	// TriggerType Data Accessed
	TriggerTypeDataAccessed = Code{Value: ptr.To("data-accessed")}
	// TriggerType Data Changed
	TriggerTypeDataChanged = Code{Value: ptr.To("data-changed")}
	// TriggerType Named Event
	TriggerTypeNamedEvent = Code{Value: ptr.To("named-event")}
	// TriggerType Periodic
	TriggerTypePeriodic = Code{Value: ptr.To("periodic")}
)

var (
	// TypeDerivationRule Constraint
	TypeDerivationRuleConstraint = Code{Value: ptr.To("constraint")}
	// TypeDerivationRule Specialization
	TypeDerivationRuleSpecialization = Code{Value: ptr.To("specialization")}
)

var (
	// TypeRestfulInteraction batch
	TypeRestfulInteractionBatch = Code{Value: ptr.To("batch")}
	// TypeRestfulInteraction capabilities
	TypeRestfulInteractionCapabilities = Code{Value: ptr.To("capabilities")}
	// TypeRestfulInteraction create
	TypeRestfulInteractionCreate = Code{Value: ptr.To("create")}
	// TypeRestfulInteraction delete
	TypeRestfulInteractionDelete = Code{Value: ptr.To("delete")}
	// TypeRestfulInteraction history
	TypeRestfulInteractionHistory = Code{Value: ptr.To("history")}
	// TypeRestfulInteraction operation
	TypeRestfulInteractionOperation = Code{Value: ptr.To("operation")}
	// TypeRestfulInteraction patch
	TypeRestfulInteractionPatch = Code{Value: ptr.To("patch")}
	// TypeRestfulInteraction read
	TypeRestfulInteractionRead = Code{Value: ptr.To("read")}
	// TypeRestfulInteraction search
	TypeRestfulInteractionSearch = Code{Value: ptr.To("search")}
	// TypeRestfulInteraction transaction
	TypeRestfulInteractionTransaction = Code{Value: ptr.To("transaction")}
	// TypeRestfulInteraction update
	TypeRestfulInteractionUpdate = Code{Value: ptr.To("update")}
	// TypeRestfulInteraction vread
	TypeRestfulInteractionVread = Code{Value: ptr.To("vread")}
)

var (
	// UDIEntryType Barcode
	UdientryTypeBarcode = Code{Value: ptr.To("barcode")}
	// UDIEntryType Card
	UdientryTypeCard = Code{Value: ptr.To("card")}
	// UDIEntryType Manual
	UdientryTypeManual = Code{Value: ptr.To("manual")}
	// UDIEntryType RFID
	UdientryTypeRfid = Code{Value: ptr.To("rfid")}
	// UDIEntryType Self Reported
	UdientryTypeSelfReported = Code{Value: ptr.To("self-reported")}
	// UDIEntryType Unknown
	UdientryTypeUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// Use Claim
	UseClaim = Code{Value: ptr.To("claim")}
	// Use Preauthorization
	UsePreauthorization = Code{Value: ptr.To("preauthorization")}
	// Use Predetermination
	UsePredetermination = Code{Value: ptr.To("predetermination")}
)

var (
	// VisionBase Down
	VisionBaseDown = Code{Value: ptr.To("down")}
	// VisionBase In
	VisionBaseIn = Code{Value: ptr.To("in")}
	// VisionBase Out
	VisionBaseOut = Code{Value: ptr.To("out")}
	// VisionBase Up
	VisionBaseUp = Code{Value: ptr.To("up")}
)

var (
	// VisionEyes Left Eye
	VisionEyesLeft = Code{Value: ptr.To("left")}
	// VisionEyes Right Eye
	VisionEyesRight = Code{Value: ptr.To("right")}
)

var (
	// XPathUsageType Distance
	XpathUsageTypeDistance = Code{Value: ptr.To("distance")}
	// XPathUsageType Nearby
	XpathUsageTypeNearby = Code{Value: ptr.To("nearby")}
	// XPathUsageType Normal
	XpathUsageTypeNormal = Code{Value: ptr.To("normal")}
	// XPathUsageType Other
	XpathUsageTypeOther = Code{Value: ptr.To("other")}
	// XPathUsageType Phonetic
	XpathUsageTypePhonetic = Code{Value: ptr.To("phonetic")}
)

var (
	// medicationRequest Intent Filler Order
	MedicationRequestIntentFillerOrder = Code{Value: ptr.To("filler-order")}
	// medicationRequest Intent Instance Order
	MedicationRequestIntentInstanceOrder = Code{Value: ptr.To("instance-order")}
	// medicationRequest Intent Option
	MedicationRequestIntentOption = Code{Value: ptr.To("option")}
	// medicationRequest Intent Order
	MedicationRequestIntentOrder = Code{Value: ptr.To("order")}
	// medicationRequest Intent Original Order
	MedicationRequestIntentOriginalOrder = Code{Value: ptr.To("original-order")}
	// medicationRequest Intent Plan
	MedicationRequestIntentPlan = Code{Value: ptr.To("plan")}
	// medicationRequest Intent Proposal
	MedicationRequestIntentProposal = Code{Value: ptr.To("proposal")}
	// medicationRequest Intent Reflex Order
	MedicationRequestIntentReflexOrder = Code{Value: ptr.To("reflex-order")}
)

var (
	// medicationrequest Status Active
	MedicationrequestStatusActive = Code{Value: ptr.To("active")}
	// medicationrequest Status Cancelled
	MedicationrequestStatusCancelled = Code{Value: ptr.To("cancelled")}
	// medicationrequest Status Completed
	MedicationrequestStatusCompleted = Code{Value: ptr.To("completed")}
	// medicationrequest Status Draft
	MedicationrequestStatusDraft = Code{Value: ptr.To("draft")}
	// medicationrequest Status Entered in Error
	MedicationrequestStatusEnteredInError = Code{Value: ptr.To("entered-in-error")}
	// medicationrequest Status On Hold
	MedicationrequestStatusOnHold = Code{Value: ptr.To("on-hold")}
	// medicationrequest Status Stopped
	MedicationrequestStatusStopped = Code{Value: ptr.To("stopped")}
	// medicationrequest Status Unknown
	MedicationrequestStatusUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// messageheader-response-request Always
	MessageheaderResponseRequestAlways = Code{Value: ptr.To("always")}
	// messageheader-response-request Never
	MessageheaderResponseRequestNever = Code{Value: ptr.To("never")}
	// messageheader-response-request Error/reject conditions only
	MessageheaderResponseRequestOnError = Code{Value: ptr.To("on-error")}
	// messageheader-response-request Successful completion only
	MessageheaderResponseRequestOnSuccess = Code{Value: ptr.To("on-success")}
)

var (
	// orientationType Antisense orientation of referenceSeq
	OrientationTypeAntisense = Code{Value: ptr.To("antisense")}
	// orientationType Sense orientation of referenceSeq
	OrientationTypeSense = Code{Value: ptr.To("sense")}
)

var (
	// qualityType INDEL Comparison
	QualityTypeIndel = Code{Value: ptr.To("indel")}
	// qualityType SNP Comparison
	QualityTypeSnp = Code{Value: ptr.To("snp")}
	// qualityType UNKNOWN Comparison
	QualityTypeUnknown = Code{Value: ptr.To("unknown")}
)

var (
	// repositoryType Click and see
	RepositoryTypeDirectlink = Code{Value: ptr.To("directlink")}
	// repositoryType Result cannot be access unless an account is logged in
	RepositoryTypeLogin = Code{Value: ptr.To("login")}
	// repositoryType Result need to be fetched with API and need LOGIN( or cookies are required when visiting the link of resource)
	RepositoryTypeOauth = Code{Value: ptr.To("oauth")}
	// repositoryType The URL is the RESTful or other kind of API that can access to the result.
	RepositoryTypeOpenapi = Code{Value: ptr.To("openapi")}
	// repositoryType Some other complicated or particular way to get resource from URL.
	RepositoryTypeOther = Code{Value: ptr.To("other")}
)

var (
	// sequenceType AA Sequence
	SequenceTypeAa = Code{Value: ptr.To("aa")}
	// sequenceType DNA Sequence
	SequenceTypeDna = Code{Value: ptr.To("dna")}
	// sequenceType RNA Sequence
	SequenceTypeRna = Code{Value: ptr.To("rna")}
)

var (
	// status Attested
	StatusAttested = Code{Value: ptr.To("attested")}
	// status In process
	StatusInProcess = Code{Value: ptr.To("in-process")}
	// status Requires revalidation
	StatusReqRevalid = Code{Value: ptr.To("req-revalid")}
	// status Re-Validation failed
	StatusRevalFail = Code{Value: ptr.To("reval-fail")}
	// status Validation failed
	StatusValFail = Code{Value: ptr.To("val-fail")}
	// status Validated
	StatusValidated = Code{Value: ptr.To("validated")}
)

var (
	// strandType Crick strand of referenceSeq
	StrandTypeCrick = Code{Value: ptr.To("crick")}
	// strandType Watson strand of referenceSeq
	StrandTypeWatson = Code{Value: ptr.To("watson")}
)
