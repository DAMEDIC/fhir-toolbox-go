package r4

import (
	"encoding/json"
	"fmt"
)

// Base StructureDefinition for ElementDefinition Type: Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
	//
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension
	// The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
	Path String
	// Codes that define how this element is represented in instances, when the deviation varies from the normal case.
	Representation []Code
	// The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
	SliceName *String
	// If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
	SliceIsConstraining *Boolean
	// A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
	Label *String
	// A code that has the same meaning as the element in a particular terminology.
	Code []Coding
	// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
	Slicing *ElementDefinitionSlicing
	// A concise description of what this element means (e.g. for use in autogenerated summaries).
	Short *String
	// Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
	Definition *Markdown
	// Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
	Comment *Markdown
	// This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
	Requirements *Markdown
	// Identifies additional names by which this element might also be known.
	Alias []String
	// The minimum number of times this element SHALL appear in the instance.
	Min *UnsignedInt
	// The maximum number of times this element is permitted to appear in the instance.
	Max *String
	// Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
	Base *ElementDefinitionBase
	// Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
	ContentReference *Uri
	// The data type or resource that the value of this element is permitted to be.
	Type []ElementDefinitionType
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValue isElementDefinitionDefaultValue
	// The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
	MeaningWhenMissing *Markdown
	// If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
	OrderMeaning *String
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	Fixed isElementDefinitionFixed
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
	//
	// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
	//
	// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
	//
	// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
	//
	// 1. If primitive: it must match exactly the pattern value
	// 2. If a complex object: it must match (recursively) the pattern value
	// 3. If an array: it must match (recursively) the pattern value.
	Pattern isElementDefinitionPattern
	// A sample value for this element demonstrating the type of information that would typically be found in the element.
	Example []ElementDefinitionExample
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValue isElementDefinitionMinValue
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValue isElementDefinitionMaxValue
	// Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
	MaxLength *Integer
	// A reference to an invariant that may make additional statements about the cardinality or value in the instance.
	Condition []Id
	// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
	Constraint []ElementDefinitionConstraint
	// If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
	MustSupport *Boolean
	// If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
	IsModifier *Boolean
	// Explains how that element affects the interpretation of the resource or element that contains it.
	IsModifierReason *String
	// Whether the element should be included if a client requests a search with the parameter _summary=true.
	IsSummary *Boolean
	// Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
	Binding *ElementDefinitionBinding
	// Identifies a concept from an external specification that roughly corresponds to this element.
	Mapping []ElementDefinitionMapping
}
type isElementDefinitionDefaultValue interface {
	isElementDefinitionDefaultValue()
}

func (r Base64Binary) isElementDefinitionDefaultValue()        {}
func (r Boolean) isElementDefinitionDefaultValue()             {}
func (r Canonical) isElementDefinitionDefaultValue()           {}
func (r Code) isElementDefinitionDefaultValue()                {}
func (r Date) isElementDefinitionDefaultValue()                {}
func (r DateTime) isElementDefinitionDefaultValue()            {}
func (r Decimal) isElementDefinitionDefaultValue()             {}
func (r Id) isElementDefinitionDefaultValue()                  {}
func (r Instant) isElementDefinitionDefaultValue()             {}
func (r Integer) isElementDefinitionDefaultValue()             {}
func (r Markdown) isElementDefinitionDefaultValue()            {}
func (r Oid) isElementDefinitionDefaultValue()                 {}
func (r PositiveInt) isElementDefinitionDefaultValue()         {}
func (r String) isElementDefinitionDefaultValue()              {}
func (r Time) isElementDefinitionDefaultValue()                {}
func (r UnsignedInt) isElementDefinitionDefaultValue()         {}
func (r Uri) isElementDefinitionDefaultValue()                 {}
func (r Url) isElementDefinitionDefaultValue()                 {}
func (r Uuid) isElementDefinitionDefaultValue()                {}
func (r Address) isElementDefinitionDefaultValue()             {}
func (r Age) isElementDefinitionDefaultValue()                 {}
func (r Annotation) isElementDefinitionDefaultValue()          {}
func (r Attachment) isElementDefinitionDefaultValue()          {}
func (r CodeableConcept) isElementDefinitionDefaultValue()     {}
func (r Coding) isElementDefinitionDefaultValue()              {}
func (r ContactPoint) isElementDefinitionDefaultValue()        {}
func (r Count) isElementDefinitionDefaultValue()               {}
func (r Distance) isElementDefinitionDefaultValue()            {}
func (r Duration) isElementDefinitionDefaultValue()            {}
func (r HumanName) isElementDefinitionDefaultValue()           {}
func (r Identifier) isElementDefinitionDefaultValue()          {}
func (r Money) isElementDefinitionDefaultValue()               {}
func (r Period) isElementDefinitionDefaultValue()              {}
func (r Quantity) isElementDefinitionDefaultValue()            {}
func (r Range) isElementDefinitionDefaultValue()               {}
func (r Ratio) isElementDefinitionDefaultValue()               {}
func (r Reference) isElementDefinitionDefaultValue()           {}
func (r SampledData) isElementDefinitionDefaultValue()         {}
func (r Signature) isElementDefinitionDefaultValue()           {}
func (r Timing) isElementDefinitionDefaultValue()              {}
func (r ContactDetail) isElementDefinitionDefaultValue()       {}
func (r Contributor) isElementDefinitionDefaultValue()         {}
func (r DataRequirement) isElementDefinitionDefaultValue()     {}
func (r Expression) isElementDefinitionDefaultValue()          {}
func (r ParameterDefinition) isElementDefinitionDefaultValue() {}
func (r RelatedArtifact) isElementDefinitionDefaultValue()     {}
func (r TriggerDefinition) isElementDefinitionDefaultValue()   {}
func (r UsageContext) isElementDefinitionDefaultValue()        {}
func (r Dosage) isElementDefinitionDefaultValue()              {}
func (r Meta) isElementDefinitionDefaultValue()                {}

type isElementDefinitionFixed interface {
	isElementDefinitionFixed()
}

func (r Base64Binary) isElementDefinitionFixed()        {}
func (r Boolean) isElementDefinitionFixed()             {}
func (r Canonical) isElementDefinitionFixed()           {}
func (r Code) isElementDefinitionFixed()                {}
func (r Date) isElementDefinitionFixed()                {}
func (r DateTime) isElementDefinitionFixed()            {}
func (r Decimal) isElementDefinitionFixed()             {}
func (r Id) isElementDefinitionFixed()                  {}
func (r Instant) isElementDefinitionFixed()             {}
func (r Integer) isElementDefinitionFixed()             {}
func (r Markdown) isElementDefinitionFixed()            {}
func (r Oid) isElementDefinitionFixed()                 {}
func (r PositiveInt) isElementDefinitionFixed()         {}
func (r String) isElementDefinitionFixed()              {}
func (r Time) isElementDefinitionFixed()                {}
func (r UnsignedInt) isElementDefinitionFixed()         {}
func (r Uri) isElementDefinitionFixed()                 {}
func (r Url) isElementDefinitionFixed()                 {}
func (r Uuid) isElementDefinitionFixed()                {}
func (r Address) isElementDefinitionFixed()             {}
func (r Age) isElementDefinitionFixed()                 {}
func (r Annotation) isElementDefinitionFixed()          {}
func (r Attachment) isElementDefinitionFixed()          {}
func (r CodeableConcept) isElementDefinitionFixed()     {}
func (r Coding) isElementDefinitionFixed()              {}
func (r ContactPoint) isElementDefinitionFixed()        {}
func (r Count) isElementDefinitionFixed()               {}
func (r Distance) isElementDefinitionFixed()            {}
func (r Duration) isElementDefinitionFixed()            {}
func (r HumanName) isElementDefinitionFixed()           {}
func (r Identifier) isElementDefinitionFixed()          {}
func (r Money) isElementDefinitionFixed()               {}
func (r Period) isElementDefinitionFixed()              {}
func (r Quantity) isElementDefinitionFixed()            {}
func (r Range) isElementDefinitionFixed()               {}
func (r Ratio) isElementDefinitionFixed()               {}
func (r Reference) isElementDefinitionFixed()           {}
func (r SampledData) isElementDefinitionFixed()         {}
func (r Signature) isElementDefinitionFixed()           {}
func (r Timing) isElementDefinitionFixed()              {}
func (r ContactDetail) isElementDefinitionFixed()       {}
func (r Contributor) isElementDefinitionFixed()         {}
func (r DataRequirement) isElementDefinitionFixed()     {}
func (r Expression) isElementDefinitionFixed()          {}
func (r ParameterDefinition) isElementDefinitionFixed() {}
func (r RelatedArtifact) isElementDefinitionFixed()     {}
func (r TriggerDefinition) isElementDefinitionFixed()   {}
func (r UsageContext) isElementDefinitionFixed()        {}
func (r Dosage) isElementDefinitionFixed()              {}
func (r Meta) isElementDefinitionFixed()                {}

type isElementDefinitionPattern interface {
	isElementDefinitionPattern()
}

func (r Base64Binary) isElementDefinitionPattern()        {}
func (r Boolean) isElementDefinitionPattern()             {}
func (r Canonical) isElementDefinitionPattern()           {}
func (r Code) isElementDefinitionPattern()                {}
func (r Date) isElementDefinitionPattern()                {}
func (r DateTime) isElementDefinitionPattern()            {}
func (r Decimal) isElementDefinitionPattern()             {}
func (r Id) isElementDefinitionPattern()                  {}
func (r Instant) isElementDefinitionPattern()             {}
func (r Integer) isElementDefinitionPattern()             {}
func (r Markdown) isElementDefinitionPattern()            {}
func (r Oid) isElementDefinitionPattern()                 {}
func (r PositiveInt) isElementDefinitionPattern()         {}
func (r String) isElementDefinitionPattern()              {}
func (r Time) isElementDefinitionPattern()                {}
func (r UnsignedInt) isElementDefinitionPattern()         {}
func (r Uri) isElementDefinitionPattern()                 {}
func (r Url) isElementDefinitionPattern()                 {}
func (r Uuid) isElementDefinitionPattern()                {}
func (r Address) isElementDefinitionPattern()             {}
func (r Age) isElementDefinitionPattern()                 {}
func (r Annotation) isElementDefinitionPattern()          {}
func (r Attachment) isElementDefinitionPattern()          {}
func (r CodeableConcept) isElementDefinitionPattern()     {}
func (r Coding) isElementDefinitionPattern()              {}
func (r ContactPoint) isElementDefinitionPattern()        {}
func (r Count) isElementDefinitionPattern()               {}
func (r Distance) isElementDefinitionPattern()            {}
func (r Duration) isElementDefinitionPattern()            {}
func (r HumanName) isElementDefinitionPattern()           {}
func (r Identifier) isElementDefinitionPattern()          {}
func (r Money) isElementDefinitionPattern()               {}
func (r Period) isElementDefinitionPattern()              {}
func (r Quantity) isElementDefinitionPattern()            {}
func (r Range) isElementDefinitionPattern()               {}
func (r Ratio) isElementDefinitionPattern()               {}
func (r Reference) isElementDefinitionPattern()           {}
func (r SampledData) isElementDefinitionPattern()         {}
func (r Signature) isElementDefinitionPattern()           {}
func (r Timing) isElementDefinitionPattern()              {}
func (r ContactDetail) isElementDefinitionPattern()       {}
func (r Contributor) isElementDefinitionPattern()         {}
func (r DataRequirement) isElementDefinitionPattern()     {}
func (r Expression) isElementDefinitionPattern()          {}
func (r ParameterDefinition) isElementDefinitionPattern() {}
func (r RelatedArtifact) isElementDefinitionPattern()     {}
func (r TriggerDefinition) isElementDefinitionPattern()   {}
func (r UsageContext) isElementDefinitionPattern()        {}
func (r Dosage) isElementDefinitionPattern()              {}
func (r Meta) isElementDefinitionPattern()                {}

type isElementDefinitionMinValue interface {
	isElementDefinitionMinValue()
}

func (r Date) isElementDefinitionMinValue()        {}
func (r DateTime) isElementDefinitionMinValue()    {}
func (r Instant) isElementDefinitionMinValue()     {}
func (r Time) isElementDefinitionMinValue()        {}
func (r Decimal) isElementDefinitionMinValue()     {}
func (r Integer) isElementDefinitionMinValue()     {}
func (r PositiveInt) isElementDefinitionMinValue() {}
func (r UnsignedInt) isElementDefinitionMinValue() {}
func (r Quantity) isElementDefinitionMinValue()    {}

type isElementDefinitionMaxValue interface {
	isElementDefinitionMaxValue()
}

func (r Date) isElementDefinitionMaxValue()        {}
func (r DateTime) isElementDefinitionMaxValue()    {}
func (r Instant) isElementDefinitionMaxValue()     {}
func (r Time) isElementDefinitionMaxValue()        {}
func (r Decimal) isElementDefinitionMaxValue()     {}
func (r Integer) isElementDefinitionMaxValue()     {}
func (r PositiveInt) isElementDefinitionMaxValue() {}
func (r UnsignedInt) isElementDefinitionMaxValue() {}
func (r Quantity) isElementDefinitionMaxValue()    {}

type jsonElementDefinition struct {
	Id                                       *string                       `json:"id,omitempty"`
	Extension                                []Extension                   `json:"extension,omitempty"`
	ModifierExtension                        []Extension                   `json:"modifierExtension,omitempty"`
	Path                                     String                        `json:"path,omitempty"`
	PathPrimitiveElement                     *primitiveElement             `json:"_path,omitempty"`
	Representation                           []Code                        `json:"representation,omitempty"`
	RepresentationPrimitiveElement           []*primitiveElement           `json:"_representation,omitempty"`
	SliceName                                *String                       `json:"sliceName,omitempty"`
	SliceNamePrimitiveElement                *primitiveElement             `json:"_sliceName,omitempty"`
	SliceIsConstraining                      *Boolean                      `json:"sliceIsConstraining,omitempty"`
	SliceIsConstrainingPrimitiveElement      *primitiveElement             `json:"_sliceIsConstraining,omitempty"`
	Label                                    *String                       `json:"label,omitempty"`
	LabelPrimitiveElement                    *primitiveElement             `json:"_label,omitempty"`
	Code                                     []Coding                      `json:"code,omitempty"`
	Slicing                                  *ElementDefinitionSlicing     `json:"slicing,omitempty"`
	Short                                    *String                       `json:"short,omitempty"`
	ShortPrimitiveElement                    *primitiveElement             `json:"_short,omitempty"`
	Definition                               *Markdown                     `json:"definition,omitempty"`
	DefinitionPrimitiveElement               *primitiveElement             `json:"_definition,omitempty"`
	Comment                                  *Markdown                     `json:"comment,omitempty"`
	CommentPrimitiveElement                  *primitiveElement             `json:"_comment,omitempty"`
	Requirements                             *Markdown                     `json:"requirements,omitempty"`
	RequirementsPrimitiveElement             *primitiveElement             `json:"_requirements,omitempty"`
	Alias                                    []String                      `json:"alias,omitempty"`
	AliasPrimitiveElement                    []*primitiveElement           `json:"_alias,omitempty"`
	Min                                      *UnsignedInt                  `json:"min,omitempty"`
	MinPrimitiveElement                      *primitiveElement             `json:"_min,omitempty"`
	Max                                      *String                       `json:"max,omitempty"`
	MaxPrimitiveElement                      *primitiveElement             `json:"_max,omitempty"`
	Base                                     *ElementDefinitionBase        `json:"base,omitempty"`
	ContentReference                         *Uri                          `json:"contentReference,omitempty"`
	ContentReferencePrimitiveElement         *primitiveElement             `json:"_contentReference,omitempty"`
	Type                                     []ElementDefinitionType       `json:"type,omitempty"`
	DefaultValueBase64Binary                 *Base64Binary                 `json:"defaultValueBase64Binary,omitempty"`
	DefaultValueBase64BinaryPrimitiveElement *primitiveElement             `json:"_defaultValueBase64Binary,omitempty"`
	DefaultValueBoolean                      *Boolean                      `json:"defaultValueBoolean,omitempty"`
	DefaultValueBooleanPrimitiveElement      *primitiveElement             `json:"_defaultValueBoolean,omitempty"`
	DefaultValueCanonical                    *Canonical                    `json:"defaultValueCanonical,omitempty"`
	DefaultValueCanonicalPrimitiveElement    *primitiveElement             `json:"_defaultValueCanonical,omitempty"`
	DefaultValueCode                         *Code                         `json:"defaultValueCode,omitempty"`
	DefaultValueCodePrimitiveElement         *primitiveElement             `json:"_defaultValueCode,omitempty"`
	DefaultValueDate                         *Date                         `json:"defaultValueDate,omitempty"`
	DefaultValueDatePrimitiveElement         *primitiveElement             `json:"_defaultValueDate,omitempty"`
	DefaultValueDateTime                     *DateTime                     `json:"defaultValueDateTime,omitempty"`
	DefaultValueDateTimePrimitiveElement     *primitiveElement             `json:"_defaultValueDateTime,omitempty"`
	DefaultValueDecimal                      *Decimal                      `json:"defaultValueDecimal,omitempty"`
	DefaultValueDecimalPrimitiveElement      *primitiveElement             `json:"_defaultValueDecimal,omitempty"`
	DefaultValueId                           *Id                           `json:"defaultValueId,omitempty"`
	DefaultValueIdPrimitiveElement           *primitiveElement             `json:"_defaultValueId,omitempty"`
	DefaultValueInstant                      *Instant                      `json:"defaultValueInstant,omitempty"`
	DefaultValueInstantPrimitiveElement      *primitiveElement             `json:"_defaultValueInstant,omitempty"`
	DefaultValueInteger                      *Integer                      `json:"defaultValueInteger,omitempty"`
	DefaultValueIntegerPrimitiveElement      *primitiveElement             `json:"_defaultValueInteger,omitempty"`
	DefaultValueMarkdown                     *Markdown                     `json:"defaultValueMarkdown,omitempty"`
	DefaultValueMarkdownPrimitiveElement     *primitiveElement             `json:"_defaultValueMarkdown,omitempty"`
	DefaultValueOid                          *Oid                          `json:"defaultValueOid,omitempty"`
	DefaultValueOidPrimitiveElement          *primitiveElement             `json:"_defaultValueOid,omitempty"`
	DefaultValuePositiveInt                  *PositiveInt                  `json:"defaultValuePositiveInt,omitempty"`
	DefaultValuePositiveIntPrimitiveElement  *primitiveElement             `json:"_defaultValuePositiveInt,omitempty"`
	DefaultValueString                       *String                       `json:"defaultValueString,omitempty"`
	DefaultValueStringPrimitiveElement       *primitiveElement             `json:"_defaultValueString,omitempty"`
	DefaultValueTime                         *Time                         `json:"defaultValueTime,omitempty"`
	DefaultValueTimePrimitiveElement         *primitiveElement             `json:"_defaultValueTime,omitempty"`
	DefaultValueUnsignedInt                  *UnsignedInt                  `json:"defaultValueUnsignedInt,omitempty"`
	DefaultValueUnsignedIntPrimitiveElement  *primitiveElement             `json:"_defaultValueUnsignedInt,omitempty"`
	DefaultValueUri                          *Uri                          `json:"defaultValueUri,omitempty"`
	DefaultValueUriPrimitiveElement          *primitiveElement             `json:"_defaultValueUri,omitempty"`
	DefaultValueUrl                          *Url                          `json:"defaultValueUrl,omitempty"`
	DefaultValueUrlPrimitiveElement          *primitiveElement             `json:"_defaultValueUrl,omitempty"`
	DefaultValueUuid                         *Uuid                         `json:"defaultValueUuid,omitempty"`
	DefaultValueUuidPrimitiveElement         *primitiveElement             `json:"_defaultValueUuid,omitempty"`
	DefaultValueAddress                      *Address                      `json:"defaultValueAddress,omitempty"`
	DefaultValueAge                          *Age                          `json:"defaultValueAge,omitempty"`
	DefaultValueAnnotation                   *Annotation                   `json:"defaultValueAnnotation,omitempty"`
	DefaultValueAttachment                   *Attachment                   `json:"defaultValueAttachment,omitempty"`
	DefaultValueCodeableConcept              *CodeableConcept              `json:"defaultValueCodeableConcept,omitempty"`
	DefaultValueCoding                       *Coding                       `json:"defaultValueCoding,omitempty"`
	DefaultValueContactPoint                 *ContactPoint                 `json:"defaultValueContactPoint,omitempty"`
	DefaultValueCount                        *Count                        `json:"defaultValueCount,omitempty"`
	DefaultValueDistance                     *Distance                     `json:"defaultValueDistance,omitempty"`
	DefaultValueDuration                     *Duration                     `json:"defaultValueDuration,omitempty"`
	DefaultValueHumanName                    *HumanName                    `json:"defaultValueHumanName,omitempty"`
	DefaultValueIdentifier                   *Identifier                   `json:"defaultValueIdentifier,omitempty"`
	DefaultValueMoney                        *Money                        `json:"defaultValueMoney,omitempty"`
	DefaultValuePeriod                       *Period                       `json:"defaultValuePeriod,omitempty"`
	DefaultValueQuantity                     *Quantity                     `json:"defaultValueQuantity,omitempty"`
	DefaultValueRange                        *Range                        `json:"defaultValueRange,omitempty"`
	DefaultValueRatio                        *Ratio                        `json:"defaultValueRatio,omitempty"`
	DefaultValueReference                    *Reference                    `json:"defaultValueReference,omitempty"`
	DefaultValueSampledData                  *SampledData                  `json:"defaultValueSampledData,omitempty"`
	DefaultValueSignature                    *Signature                    `json:"defaultValueSignature,omitempty"`
	DefaultValueTiming                       *Timing                       `json:"defaultValueTiming,omitempty"`
	DefaultValueContactDetail                *ContactDetail                `json:"defaultValueContactDetail,omitempty"`
	DefaultValueContributor                  *Contributor                  `json:"defaultValueContributor,omitempty"`
	DefaultValueDataRequirement              *DataRequirement              `json:"defaultValueDataRequirement,omitempty"`
	DefaultValueExpression                   *Expression                   `json:"defaultValueExpression,omitempty"`
	DefaultValueParameterDefinition          *ParameterDefinition          `json:"defaultValueParameterDefinition,omitempty"`
	DefaultValueRelatedArtifact              *RelatedArtifact              `json:"defaultValueRelatedArtifact,omitempty"`
	DefaultValueTriggerDefinition            *TriggerDefinition            `json:"defaultValueTriggerDefinition,omitempty"`
	DefaultValueUsageContext                 *UsageContext                 `json:"defaultValueUsageContext,omitempty"`
	DefaultValueDosage                       *Dosage                       `json:"defaultValueDosage,omitempty"`
	DefaultValueMeta                         *Meta                         `json:"defaultValueMeta,omitempty"`
	MeaningWhenMissing                       *Markdown                     `json:"meaningWhenMissing,omitempty"`
	MeaningWhenMissingPrimitiveElement       *primitiveElement             `json:"_meaningWhenMissing,omitempty"`
	OrderMeaning                             *String                       `json:"orderMeaning,omitempty"`
	OrderMeaningPrimitiveElement             *primitiveElement             `json:"_orderMeaning,omitempty"`
	FixedBase64Binary                        *Base64Binary                 `json:"fixedBase64Binary,omitempty"`
	FixedBase64BinaryPrimitiveElement        *primitiveElement             `json:"_fixedBase64Binary,omitempty"`
	FixedBoolean                             *Boolean                      `json:"fixedBoolean,omitempty"`
	FixedBooleanPrimitiveElement             *primitiveElement             `json:"_fixedBoolean,omitempty"`
	FixedCanonical                           *Canonical                    `json:"fixedCanonical,omitempty"`
	FixedCanonicalPrimitiveElement           *primitiveElement             `json:"_fixedCanonical,omitempty"`
	FixedCode                                *Code                         `json:"fixedCode,omitempty"`
	FixedCodePrimitiveElement                *primitiveElement             `json:"_fixedCode,omitempty"`
	FixedDate                                *Date                         `json:"fixedDate,omitempty"`
	FixedDatePrimitiveElement                *primitiveElement             `json:"_fixedDate,omitempty"`
	FixedDateTime                            *DateTime                     `json:"fixedDateTime,omitempty"`
	FixedDateTimePrimitiveElement            *primitiveElement             `json:"_fixedDateTime,omitempty"`
	FixedDecimal                             *Decimal                      `json:"fixedDecimal,omitempty"`
	FixedDecimalPrimitiveElement             *primitiveElement             `json:"_fixedDecimal,omitempty"`
	FixedId                                  *Id                           `json:"fixedId,omitempty"`
	FixedIdPrimitiveElement                  *primitiveElement             `json:"_fixedId,omitempty"`
	FixedInstant                             *Instant                      `json:"fixedInstant,omitempty"`
	FixedInstantPrimitiveElement             *primitiveElement             `json:"_fixedInstant,omitempty"`
	FixedInteger                             *Integer                      `json:"fixedInteger,omitempty"`
	FixedIntegerPrimitiveElement             *primitiveElement             `json:"_fixedInteger,omitempty"`
	FixedMarkdown                            *Markdown                     `json:"fixedMarkdown,omitempty"`
	FixedMarkdownPrimitiveElement            *primitiveElement             `json:"_fixedMarkdown,omitempty"`
	FixedOid                                 *Oid                          `json:"fixedOid,omitempty"`
	FixedOidPrimitiveElement                 *primitiveElement             `json:"_fixedOid,omitempty"`
	FixedPositiveInt                         *PositiveInt                  `json:"fixedPositiveInt,omitempty"`
	FixedPositiveIntPrimitiveElement         *primitiveElement             `json:"_fixedPositiveInt,omitempty"`
	FixedString                              *String                       `json:"fixedString,omitempty"`
	FixedStringPrimitiveElement              *primitiveElement             `json:"_fixedString,omitempty"`
	FixedTime                                *Time                         `json:"fixedTime,omitempty"`
	FixedTimePrimitiveElement                *primitiveElement             `json:"_fixedTime,omitempty"`
	FixedUnsignedInt                         *UnsignedInt                  `json:"fixedUnsignedInt,omitempty"`
	FixedUnsignedIntPrimitiveElement         *primitiveElement             `json:"_fixedUnsignedInt,omitempty"`
	FixedUri                                 *Uri                          `json:"fixedUri,omitempty"`
	FixedUriPrimitiveElement                 *primitiveElement             `json:"_fixedUri,omitempty"`
	FixedUrl                                 *Url                          `json:"fixedUrl,omitempty"`
	FixedUrlPrimitiveElement                 *primitiveElement             `json:"_fixedUrl,omitempty"`
	FixedUuid                                *Uuid                         `json:"fixedUuid,omitempty"`
	FixedUuidPrimitiveElement                *primitiveElement             `json:"_fixedUuid,omitempty"`
	FixedAddress                             *Address                      `json:"fixedAddress,omitempty"`
	FixedAge                                 *Age                          `json:"fixedAge,omitempty"`
	FixedAnnotation                          *Annotation                   `json:"fixedAnnotation,omitempty"`
	FixedAttachment                          *Attachment                   `json:"fixedAttachment,omitempty"`
	FixedCodeableConcept                     *CodeableConcept              `json:"fixedCodeableConcept,omitempty"`
	FixedCoding                              *Coding                       `json:"fixedCoding,omitempty"`
	FixedContactPoint                        *ContactPoint                 `json:"fixedContactPoint,omitempty"`
	FixedCount                               *Count                        `json:"fixedCount,omitempty"`
	FixedDistance                            *Distance                     `json:"fixedDistance,omitempty"`
	FixedDuration                            *Duration                     `json:"fixedDuration,omitempty"`
	FixedHumanName                           *HumanName                    `json:"fixedHumanName,omitempty"`
	FixedIdentifier                          *Identifier                   `json:"fixedIdentifier,omitempty"`
	FixedMoney                               *Money                        `json:"fixedMoney,omitempty"`
	FixedPeriod                              *Period                       `json:"fixedPeriod,omitempty"`
	FixedQuantity                            *Quantity                     `json:"fixedQuantity,omitempty"`
	FixedRange                               *Range                        `json:"fixedRange,omitempty"`
	FixedRatio                               *Ratio                        `json:"fixedRatio,omitempty"`
	FixedReference                           *Reference                    `json:"fixedReference,omitempty"`
	FixedSampledData                         *SampledData                  `json:"fixedSampledData,omitempty"`
	FixedSignature                           *Signature                    `json:"fixedSignature,omitempty"`
	FixedTiming                              *Timing                       `json:"fixedTiming,omitempty"`
	FixedContactDetail                       *ContactDetail                `json:"fixedContactDetail,omitempty"`
	FixedContributor                         *Contributor                  `json:"fixedContributor,omitempty"`
	FixedDataRequirement                     *DataRequirement              `json:"fixedDataRequirement,omitempty"`
	FixedExpression                          *Expression                   `json:"fixedExpression,omitempty"`
	FixedParameterDefinition                 *ParameterDefinition          `json:"fixedParameterDefinition,omitempty"`
	FixedRelatedArtifact                     *RelatedArtifact              `json:"fixedRelatedArtifact,omitempty"`
	FixedTriggerDefinition                   *TriggerDefinition            `json:"fixedTriggerDefinition,omitempty"`
	FixedUsageContext                        *UsageContext                 `json:"fixedUsageContext,omitempty"`
	FixedDosage                              *Dosage                       `json:"fixedDosage,omitempty"`
	FixedMeta                                *Meta                         `json:"fixedMeta,omitempty"`
	PatternBase64Binary                      *Base64Binary                 `json:"patternBase64Binary,omitempty"`
	PatternBase64BinaryPrimitiveElement      *primitiveElement             `json:"_patternBase64Binary,omitempty"`
	PatternBoolean                           *Boolean                      `json:"patternBoolean,omitempty"`
	PatternBooleanPrimitiveElement           *primitiveElement             `json:"_patternBoolean,omitempty"`
	PatternCanonical                         *Canonical                    `json:"patternCanonical,omitempty"`
	PatternCanonicalPrimitiveElement         *primitiveElement             `json:"_patternCanonical,omitempty"`
	PatternCode                              *Code                         `json:"patternCode,omitempty"`
	PatternCodePrimitiveElement              *primitiveElement             `json:"_patternCode,omitempty"`
	PatternDate                              *Date                         `json:"patternDate,omitempty"`
	PatternDatePrimitiveElement              *primitiveElement             `json:"_patternDate,omitempty"`
	PatternDateTime                          *DateTime                     `json:"patternDateTime,omitempty"`
	PatternDateTimePrimitiveElement          *primitiveElement             `json:"_patternDateTime,omitempty"`
	PatternDecimal                           *Decimal                      `json:"patternDecimal,omitempty"`
	PatternDecimalPrimitiveElement           *primitiveElement             `json:"_patternDecimal,omitempty"`
	PatternId                                *Id                           `json:"patternId,omitempty"`
	PatternIdPrimitiveElement                *primitiveElement             `json:"_patternId,omitempty"`
	PatternInstant                           *Instant                      `json:"patternInstant,omitempty"`
	PatternInstantPrimitiveElement           *primitiveElement             `json:"_patternInstant,omitempty"`
	PatternInteger                           *Integer                      `json:"patternInteger,omitempty"`
	PatternIntegerPrimitiveElement           *primitiveElement             `json:"_patternInteger,omitempty"`
	PatternMarkdown                          *Markdown                     `json:"patternMarkdown,omitempty"`
	PatternMarkdownPrimitiveElement          *primitiveElement             `json:"_patternMarkdown,omitempty"`
	PatternOid                               *Oid                          `json:"patternOid,omitempty"`
	PatternOidPrimitiveElement               *primitiveElement             `json:"_patternOid,omitempty"`
	PatternPositiveInt                       *PositiveInt                  `json:"patternPositiveInt,omitempty"`
	PatternPositiveIntPrimitiveElement       *primitiveElement             `json:"_patternPositiveInt,omitempty"`
	PatternString                            *String                       `json:"patternString,omitempty"`
	PatternStringPrimitiveElement            *primitiveElement             `json:"_patternString,omitempty"`
	PatternTime                              *Time                         `json:"patternTime,omitempty"`
	PatternTimePrimitiveElement              *primitiveElement             `json:"_patternTime,omitempty"`
	PatternUnsignedInt                       *UnsignedInt                  `json:"patternUnsignedInt,omitempty"`
	PatternUnsignedIntPrimitiveElement       *primitiveElement             `json:"_patternUnsignedInt,omitempty"`
	PatternUri                               *Uri                          `json:"patternUri,omitempty"`
	PatternUriPrimitiveElement               *primitiveElement             `json:"_patternUri,omitempty"`
	PatternUrl                               *Url                          `json:"patternUrl,omitempty"`
	PatternUrlPrimitiveElement               *primitiveElement             `json:"_patternUrl,omitempty"`
	PatternUuid                              *Uuid                         `json:"patternUuid,omitempty"`
	PatternUuidPrimitiveElement              *primitiveElement             `json:"_patternUuid,omitempty"`
	PatternAddress                           *Address                      `json:"patternAddress,omitempty"`
	PatternAge                               *Age                          `json:"patternAge,omitempty"`
	PatternAnnotation                        *Annotation                   `json:"patternAnnotation,omitempty"`
	PatternAttachment                        *Attachment                   `json:"patternAttachment,omitempty"`
	PatternCodeableConcept                   *CodeableConcept              `json:"patternCodeableConcept,omitempty"`
	PatternCoding                            *Coding                       `json:"patternCoding,omitempty"`
	PatternContactPoint                      *ContactPoint                 `json:"patternContactPoint,omitempty"`
	PatternCount                             *Count                        `json:"patternCount,omitempty"`
	PatternDistance                          *Distance                     `json:"patternDistance,omitempty"`
	PatternDuration                          *Duration                     `json:"patternDuration,omitempty"`
	PatternHumanName                         *HumanName                    `json:"patternHumanName,omitempty"`
	PatternIdentifier                        *Identifier                   `json:"patternIdentifier,omitempty"`
	PatternMoney                             *Money                        `json:"patternMoney,omitempty"`
	PatternPeriod                            *Period                       `json:"patternPeriod,omitempty"`
	PatternQuantity                          *Quantity                     `json:"patternQuantity,omitempty"`
	PatternRange                             *Range                        `json:"patternRange,omitempty"`
	PatternRatio                             *Ratio                        `json:"patternRatio,omitempty"`
	PatternReference                         *Reference                    `json:"patternReference,omitempty"`
	PatternSampledData                       *SampledData                  `json:"patternSampledData,omitempty"`
	PatternSignature                         *Signature                    `json:"patternSignature,omitempty"`
	PatternTiming                            *Timing                       `json:"patternTiming,omitempty"`
	PatternContactDetail                     *ContactDetail                `json:"patternContactDetail,omitempty"`
	PatternContributor                       *Contributor                  `json:"patternContributor,omitempty"`
	PatternDataRequirement                   *DataRequirement              `json:"patternDataRequirement,omitempty"`
	PatternExpression                        *Expression                   `json:"patternExpression,omitempty"`
	PatternParameterDefinition               *ParameterDefinition          `json:"patternParameterDefinition,omitempty"`
	PatternRelatedArtifact                   *RelatedArtifact              `json:"patternRelatedArtifact,omitempty"`
	PatternTriggerDefinition                 *TriggerDefinition            `json:"patternTriggerDefinition,omitempty"`
	PatternUsageContext                      *UsageContext                 `json:"patternUsageContext,omitempty"`
	PatternDosage                            *Dosage                       `json:"patternDosage,omitempty"`
	PatternMeta                              *Meta                         `json:"patternMeta,omitempty"`
	Example                                  []ElementDefinitionExample    `json:"example,omitempty"`
	MinValueDate                             *Date                         `json:"minValueDate,omitempty"`
	MinValueDatePrimitiveElement             *primitiveElement             `json:"_minValueDate,omitempty"`
	MinValueDateTime                         *DateTime                     `json:"minValueDateTime,omitempty"`
	MinValueDateTimePrimitiveElement         *primitiveElement             `json:"_minValueDateTime,omitempty"`
	MinValueInstant                          *Instant                      `json:"minValueInstant,omitempty"`
	MinValueInstantPrimitiveElement          *primitiveElement             `json:"_minValueInstant,omitempty"`
	MinValueTime                             *Time                         `json:"minValueTime,omitempty"`
	MinValueTimePrimitiveElement             *primitiveElement             `json:"_minValueTime,omitempty"`
	MinValueDecimal                          *Decimal                      `json:"minValueDecimal,omitempty"`
	MinValueDecimalPrimitiveElement          *primitiveElement             `json:"_minValueDecimal,omitempty"`
	MinValueInteger                          *Integer                      `json:"minValueInteger,omitempty"`
	MinValueIntegerPrimitiveElement          *primitiveElement             `json:"_minValueInteger,omitempty"`
	MinValuePositiveInt                      *PositiveInt                  `json:"minValuePositiveInt,omitempty"`
	MinValuePositiveIntPrimitiveElement      *primitiveElement             `json:"_minValuePositiveInt,omitempty"`
	MinValueUnsignedInt                      *UnsignedInt                  `json:"minValueUnsignedInt,omitempty"`
	MinValueUnsignedIntPrimitiveElement      *primitiveElement             `json:"_minValueUnsignedInt,omitempty"`
	MinValueQuantity                         *Quantity                     `json:"minValueQuantity,omitempty"`
	MaxValueDate                             *Date                         `json:"maxValueDate,omitempty"`
	MaxValueDatePrimitiveElement             *primitiveElement             `json:"_maxValueDate,omitempty"`
	MaxValueDateTime                         *DateTime                     `json:"maxValueDateTime,omitempty"`
	MaxValueDateTimePrimitiveElement         *primitiveElement             `json:"_maxValueDateTime,omitempty"`
	MaxValueInstant                          *Instant                      `json:"maxValueInstant,omitempty"`
	MaxValueInstantPrimitiveElement          *primitiveElement             `json:"_maxValueInstant,omitempty"`
	MaxValueTime                             *Time                         `json:"maxValueTime,omitempty"`
	MaxValueTimePrimitiveElement             *primitiveElement             `json:"_maxValueTime,omitempty"`
	MaxValueDecimal                          *Decimal                      `json:"maxValueDecimal,omitempty"`
	MaxValueDecimalPrimitiveElement          *primitiveElement             `json:"_maxValueDecimal,omitempty"`
	MaxValueInteger                          *Integer                      `json:"maxValueInteger,omitempty"`
	MaxValueIntegerPrimitiveElement          *primitiveElement             `json:"_maxValueInteger,omitempty"`
	MaxValuePositiveInt                      *PositiveInt                  `json:"maxValuePositiveInt,omitempty"`
	MaxValuePositiveIntPrimitiveElement      *primitiveElement             `json:"_maxValuePositiveInt,omitempty"`
	MaxValueUnsignedInt                      *UnsignedInt                  `json:"maxValueUnsignedInt,omitempty"`
	MaxValueUnsignedIntPrimitiveElement      *primitiveElement             `json:"_maxValueUnsignedInt,omitempty"`
	MaxValueQuantity                         *Quantity                     `json:"maxValueQuantity,omitempty"`
	MaxLength                                *Integer                      `json:"maxLength,omitempty"`
	MaxLengthPrimitiveElement                *primitiveElement             `json:"_maxLength,omitempty"`
	Condition                                []Id                          `json:"condition,omitempty"`
	ConditionPrimitiveElement                []*primitiveElement           `json:"_condition,omitempty"`
	Constraint                               []ElementDefinitionConstraint `json:"constraint,omitempty"`
	MustSupport                              *Boolean                      `json:"mustSupport,omitempty"`
	MustSupportPrimitiveElement              *primitiveElement             `json:"_mustSupport,omitempty"`
	IsModifier                               *Boolean                      `json:"isModifier,omitempty"`
	IsModifierPrimitiveElement               *primitiveElement             `json:"_isModifier,omitempty"`
	IsModifierReason                         *String                       `json:"isModifierReason,omitempty"`
	IsModifierReasonPrimitiveElement         *primitiveElement             `json:"_isModifierReason,omitempty"`
	IsSummary                                *Boolean                      `json:"isSummary,omitempty"`
	IsSummaryPrimitiveElement                *primitiveElement             `json:"_isSummary,omitempty"`
	Binding                                  *ElementDefinitionBinding     `json:"binding,omitempty"`
	Mapping                                  []ElementDefinitionMapping    `json:"mapping,omitempty"`
}

func (r ElementDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinition) marshalJSON() jsonElementDefinition {
	m := jsonElementDefinition{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.ModifierExtension = r.ModifierExtension
	m.Path = r.Path
	if r.Path.Id != nil || r.Path.Extension != nil {
		m.PathPrimitiveElement = &primitiveElement{Id: r.Path.Id, Extension: r.Path.Extension}
	}
	m.Representation = r.Representation
	anyRepresentationIdOrExtension := false
	for _, e := range r.Representation {
		if e.Id != nil || e.Extension != nil {
			anyRepresentationIdOrExtension = true
			break
		}
	}
	if anyRepresentationIdOrExtension {
		m.RepresentationPrimitiveElement = make([]*primitiveElement, 0, len(r.Representation))
		for _, e := range r.Representation {
			if e.Id != nil || e.Extension != nil {
				m.RepresentationPrimitiveElement = append(m.RepresentationPrimitiveElement, &primitiveElement{Id: e.Id, Extension: e.Extension})
			} else {
				m.RepresentationPrimitiveElement = append(m.RepresentationPrimitiveElement, nil)
			}
		}
	}
	m.SliceName = r.SliceName
	if r.SliceName != nil && (r.SliceName.Id != nil || r.SliceName.Extension != nil) {
		m.SliceNamePrimitiveElement = &primitiveElement{Id: r.SliceName.Id, Extension: r.SliceName.Extension}
	}
	m.SliceIsConstraining = r.SliceIsConstraining
	if r.SliceIsConstraining != nil && (r.SliceIsConstraining.Id != nil || r.SliceIsConstraining.Extension != nil) {
		m.SliceIsConstrainingPrimitiveElement = &primitiveElement{Id: r.SliceIsConstraining.Id, Extension: r.SliceIsConstraining.Extension}
	}
	m.Label = r.Label
	if r.Label != nil && (r.Label.Id != nil || r.Label.Extension != nil) {
		m.LabelPrimitiveElement = &primitiveElement{Id: r.Label.Id, Extension: r.Label.Extension}
	}
	m.Code = r.Code
	m.Slicing = r.Slicing
	m.Short = r.Short
	if r.Short != nil && (r.Short.Id != nil || r.Short.Extension != nil) {
		m.ShortPrimitiveElement = &primitiveElement{Id: r.Short.Id, Extension: r.Short.Extension}
	}
	m.Definition = r.Definition
	if r.Definition != nil && (r.Definition.Id != nil || r.Definition.Extension != nil) {
		m.DefinitionPrimitiveElement = &primitiveElement{Id: r.Definition.Id, Extension: r.Definition.Extension}
	}
	m.Comment = r.Comment
	if r.Comment != nil && (r.Comment.Id != nil || r.Comment.Extension != nil) {
		m.CommentPrimitiveElement = &primitiveElement{Id: r.Comment.Id, Extension: r.Comment.Extension}
	}
	m.Requirements = r.Requirements
	if r.Requirements != nil && (r.Requirements.Id != nil || r.Requirements.Extension != nil) {
		m.RequirementsPrimitiveElement = &primitiveElement{Id: r.Requirements.Id, Extension: r.Requirements.Extension}
	}
	m.Alias = r.Alias
	anyAliasIdOrExtension := false
	for _, e := range r.Alias {
		if e.Id != nil || e.Extension != nil {
			anyAliasIdOrExtension = true
			break
		}
	}
	if anyAliasIdOrExtension {
		m.AliasPrimitiveElement = make([]*primitiveElement, 0, len(r.Alias))
		for _, e := range r.Alias {
			if e.Id != nil || e.Extension != nil {
				m.AliasPrimitiveElement = append(m.AliasPrimitiveElement, &primitiveElement{Id: e.Id, Extension: e.Extension})
			} else {
				m.AliasPrimitiveElement = append(m.AliasPrimitiveElement, nil)
			}
		}
	}
	m.Min = r.Min
	if r.Min != nil && (r.Min.Id != nil || r.Min.Extension != nil) {
		m.MinPrimitiveElement = &primitiveElement{Id: r.Min.Id, Extension: r.Min.Extension}
	}
	m.Max = r.Max
	if r.Max != nil && (r.Max.Id != nil || r.Max.Extension != nil) {
		m.MaxPrimitiveElement = &primitiveElement{Id: r.Max.Id, Extension: r.Max.Extension}
	}
	m.Base = r.Base
	m.ContentReference = r.ContentReference
	if r.ContentReference != nil && (r.ContentReference.Id != nil || r.ContentReference.Extension != nil) {
		m.ContentReferencePrimitiveElement = &primitiveElement{Id: r.ContentReference.Id, Extension: r.ContentReference.Extension}
	}
	m.Type = r.Type
	switch v := r.DefaultValue.(type) {
	case Base64Binary:
		m.DefaultValueBase64Binary = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Base64Binary:
		m.DefaultValueBase64Binary = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Boolean:
		m.DefaultValueBoolean = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Boolean:
		m.DefaultValueBoolean = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Canonical:
		m.DefaultValueCanonical = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Canonical:
		m.DefaultValueCanonical = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Code:
		m.DefaultValueCode = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Code:
		m.DefaultValueCode = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Date:
		m.DefaultValueDate = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Date:
		m.DefaultValueDate = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case DateTime:
		m.DefaultValueDateTime = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *DateTime:
		m.DefaultValueDateTime = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Decimal:
		m.DefaultValueDecimal = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Decimal:
		m.DefaultValueDecimal = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Id:
		m.DefaultValueId = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Id:
		m.DefaultValueId = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Instant:
		m.DefaultValueInstant = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Instant:
		m.DefaultValueInstant = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Integer:
		m.DefaultValueInteger = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Integer:
		m.DefaultValueInteger = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Markdown:
		m.DefaultValueMarkdown = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Markdown:
		m.DefaultValueMarkdown = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Oid:
		m.DefaultValueOid = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Oid:
		m.DefaultValueOid = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case PositiveInt:
		m.DefaultValuePositiveInt = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *PositiveInt:
		m.DefaultValuePositiveInt = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case String:
		m.DefaultValueString = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *String:
		m.DefaultValueString = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Time:
		m.DefaultValueTime = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Time:
		m.DefaultValueTime = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case UnsignedInt:
		m.DefaultValueUnsignedInt = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *UnsignedInt:
		m.DefaultValueUnsignedInt = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uri:
		m.DefaultValueUri = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uri:
		m.DefaultValueUri = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Url:
		m.DefaultValueUrl = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Url:
		m.DefaultValueUrl = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uuid:
		m.DefaultValueUuid = &v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uuid:
		m.DefaultValueUuid = v
		if v.Id != nil || v.Extension != nil {
			m.DefaultValueUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Address:
		m.DefaultValueAddress = &v
	case *Address:
		m.DefaultValueAddress = v
	case Age:
		m.DefaultValueAge = &v
	case *Age:
		m.DefaultValueAge = v
	case Annotation:
		m.DefaultValueAnnotation = &v
	case *Annotation:
		m.DefaultValueAnnotation = v
	case Attachment:
		m.DefaultValueAttachment = &v
	case *Attachment:
		m.DefaultValueAttachment = v
	case CodeableConcept:
		m.DefaultValueCodeableConcept = &v
	case *CodeableConcept:
		m.DefaultValueCodeableConcept = v
	case Coding:
		m.DefaultValueCoding = &v
	case *Coding:
		m.DefaultValueCoding = v
	case ContactPoint:
		m.DefaultValueContactPoint = &v
	case *ContactPoint:
		m.DefaultValueContactPoint = v
	case Count:
		m.DefaultValueCount = &v
	case *Count:
		m.DefaultValueCount = v
	case Distance:
		m.DefaultValueDistance = &v
	case *Distance:
		m.DefaultValueDistance = v
	case Duration:
		m.DefaultValueDuration = &v
	case *Duration:
		m.DefaultValueDuration = v
	case HumanName:
		m.DefaultValueHumanName = &v
	case *HumanName:
		m.DefaultValueHumanName = v
	case Identifier:
		m.DefaultValueIdentifier = &v
	case *Identifier:
		m.DefaultValueIdentifier = v
	case Money:
		m.DefaultValueMoney = &v
	case *Money:
		m.DefaultValueMoney = v
	case Period:
		m.DefaultValuePeriod = &v
	case *Period:
		m.DefaultValuePeriod = v
	case Quantity:
		m.DefaultValueQuantity = &v
	case *Quantity:
		m.DefaultValueQuantity = v
	case Range:
		m.DefaultValueRange = &v
	case *Range:
		m.DefaultValueRange = v
	case Ratio:
		m.DefaultValueRatio = &v
	case *Ratio:
		m.DefaultValueRatio = v
	case Reference:
		m.DefaultValueReference = &v
	case *Reference:
		m.DefaultValueReference = v
	case SampledData:
		m.DefaultValueSampledData = &v
	case *SampledData:
		m.DefaultValueSampledData = v
	case Signature:
		m.DefaultValueSignature = &v
	case *Signature:
		m.DefaultValueSignature = v
	case Timing:
		m.DefaultValueTiming = &v
	case *Timing:
		m.DefaultValueTiming = v
	case ContactDetail:
		m.DefaultValueContactDetail = &v
	case *ContactDetail:
		m.DefaultValueContactDetail = v
	case Contributor:
		m.DefaultValueContributor = &v
	case *Contributor:
		m.DefaultValueContributor = v
	case DataRequirement:
		m.DefaultValueDataRequirement = &v
	case *DataRequirement:
		m.DefaultValueDataRequirement = v
	case Expression:
		m.DefaultValueExpression = &v
	case *Expression:
		m.DefaultValueExpression = v
	case ParameterDefinition:
		m.DefaultValueParameterDefinition = &v
	case *ParameterDefinition:
		m.DefaultValueParameterDefinition = v
	case RelatedArtifact:
		m.DefaultValueRelatedArtifact = &v
	case *RelatedArtifact:
		m.DefaultValueRelatedArtifact = v
	case TriggerDefinition:
		m.DefaultValueTriggerDefinition = &v
	case *TriggerDefinition:
		m.DefaultValueTriggerDefinition = v
	case UsageContext:
		m.DefaultValueUsageContext = &v
	case *UsageContext:
		m.DefaultValueUsageContext = v
	case Dosage:
		m.DefaultValueDosage = &v
	case *Dosage:
		m.DefaultValueDosage = v
	case Meta:
		m.DefaultValueMeta = &v
	case *Meta:
		m.DefaultValueMeta = v
	}
	m.MeaningWhenMissing = r.MeaningWhenMissing
	if r.MeaningWhenMissing != nil && (r.MeaningWhenMissing.Id != nil || r.MeaningWhenMissing.Extension != nil) {
		m.MeaningWhenMissingPrimitiveElement = &primitiveElement{Id: r.MeaningWhenMissing.Id, Extension: r.MeaningWhenMissing.Extension}
	}
	m.OrderMeaning = r.OrderMeaning
	if r.OrderMeaning != nil && (r.OrderMeaning.Id != nil || r.OrderMeaning.Extension != nil) {
		m.OrderMeaningPrimitiveElement = &primitiveElement{Id: r.OrderMeaning.Id, Extension: r.OrderMeaning.Extension}
	}
	switch v := r.Fixed.(type) {
	case Base64Binary:
		m.FixedBase64Binary = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Base64Binary:
		m.FixedBase64Binary = v
		if v.Id != nil || v.Extension != nil {
			m.FixedBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Boolean:
		m.FixedBoolean = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Boolean:
		m.FixedBoolean = v
		if v.Id != nil || v.Extension != nil {
			m.FixedBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Canonical:
		m.FixedCanonical = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Canonical:
		m.FixedCanonical = v
		if v.Id != nil || v.Extension != nil {
			m.FixedCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Code:
		m.FixedCode = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Code:
		m.FixedCode = v
		if v.Id != nil || v.Extension != nil {
			m.FixedCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Date:
		m.FixedDate = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Date:
		m.FixedDate = v
		if v.Id != nil || v.Extension != nil {
			m.FixedDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case DateTime:
		m.FixedDateTime = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *DateTime:
		m.FixedDateTime = v
		if v.Id != nil || v.Extension != nil {
			m.FixedDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Decimal:
		m.FixedDecimal = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Decimal:
		m.FixedDecimal = v
		if v.Id != nil || v.Extension != nil {
			m.FixedDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Id:
		m.FixedId = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Id:
		m.FixedId = v
		if v.Id != nil || v.Extension != nil {
			m.FixedIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Instant:
		m.FixedInstant = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Instant:
		m.FixedInstant = v
		if v.Id != nil || v.Extension != nil {
			m.FixedInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Integer:
		m.FixedInteger = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Integer:
		m.FixedInteger = v
		if v.Id != nil || v.Extension != nil {
			m.FixedIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Markdown:
		m.FixedMarkdown = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Markdown:
		m.FixedMarkdown = v
		if v.Id != nil || v.Extension != nil {
			m.FixedMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Oid:
		m.FixedOid = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Oid:
		m.FixedOid = v
		if v.Id != nil || v.Extension != nil {
			m.FixedOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case PositiveInt:
		m.FixedPositiveInt = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedPositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *PositiveInt:
		m.FixedPositiveInt = v
		if v.Id != nil || v.Extension != nil {
			m.FixedPositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case String:
		m.FixedString = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *String:
		m.FixedString = v
		if v.Id != nil || v.Extension != nil {
			m.FixedStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Time:
		m.FixedTime = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Time:
		m.FixedTime = v
		if v.Id != nil || v.Extension != nil {
			m.FixedTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case UnsignedInt:
		m.FixedUnsignedInt = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *UnsignedInt:
		m.FixedUnsignedInt = v
		if v.Id != nil || v.Extension != nil {
			m.FixedUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uri:
		m.FixedUri = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uri:
		m.FixedUri = v
		if v.Id != nil || v.Extension != nil {
			m.FixedUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Url:
		m.FixedUrl = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Url:
		m.FixedUrl = v
		if v.Id != nil || v.Extension != nil {
			m.FixedUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uuid:
		m.FixedUuid = &v
		if v.Id != nil || v.Extension != nil {
			m.FixedUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uuid:
		m.FixedUuid = v
		if v.Id != nil || v.Extension != nil {
			m.FixedUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Address:
		m.FixedAddress = &v
	case *Address:
		m.FixedAddress = v
	case Age:
		m.FixedAge = &v
	case *Age:
		m.FixedAge = v
	case Annotation:
		m.FixedAnnotation = &v
	case *Annotation:
		m.FixedAnnotation = v
	case Attachment:
		m.FixedAttachment = &v
	case *Attachment:
		m.FixedAttachment = v
	case CodeableConcept:
		m.FixedCodeableConcept = &v
	case *CodeableConcept:
		m.FixedCodeableConcept = v
	case Coding:
		m.FixedCoding = &v
	case *Coding:
		m.FixedCoding = v
	case ContactPoint:
		m.FixedContactPoint = &v
	case *ContactPoint:
		m.FixedContactPoint = v
	case Count:
		m.FixedCount = &v
	case *Count:
		m.FixedCount = v
	case Distance:
		m.FixedDistance = &v
	case *Distance:
		m.FixedDistance = v
	case Duration:
		m.FixedDuration = &v
	case *Duration:
		m.FixedDuration = v
	case HumanName:
		m.FixedHumanName = &v
	case *HumanName:
		m.FixedHumanName = v
	case Identifier:
		m.FixedIdentifier = &v
	case *Identifier:
		m.FixedIdentifier = v
	case Money:
		m.FixedMoney = &v
	case *Money:
		m.FixedMoney = v
	case Period:
		m.FixedPeriod = &v
	case *Period:
		m.FixedPeriod = v
	case Quantity:
		m.FixedQuantity = &v
	case *Quantity:
		m.FixedQuantity = v
	case Range:
		m.FixedRange = &v
	case *Range:
		m.FixedRange = v
	case Ratio:
		m.FixedRatio = &v
	case *Ratio:
		m.FixedRatio = v
	case Reference:
		m.FixedReference = &v
	case *Reference:
		m.FixedReference = v
	case SampledData:
		m.FixedSampledData = &v
	case *SampledData:
		m.FixedSampledData = v
	case Signature:
		m.FixedSignature = &v
	case *Signature:
		m.FixedSignature = v
	case Timing:
		m.FixedTiming = &v
	case *Timing:
		m.FixedTiming = v
	case ContactDetail:
		m.FixedContactDetail = &v
	case *ContactDetail:
		m.FixedContactDetail = v
	case Contributor:
		m.FixedContributor = &v
	case *Contributor:
		m.FixedContributor = v
	case DataRequirement:
		m.FixedDataRequirement = &v
	case *DataRequirement:
		m.FixedDataRequirement = v
	case Expression:
		m.FixedExpression = &v
	case *Expression:
		m.FixedExpression = v
	case ParameterDefinition:
		m.FixedParameterDefinition = &v
	case *ParameterDefinition:
		m.FixedParameterDefinition = v
	case RelatedArtifact:
		m.FixedRelatedArtifact = &v
	case *RelatedArtifact:
		m.FixedRelatedArtifact = v
	case TriggerDefinition:
		m.FixedTriggerDefinition = &v
	case *TriggerDefinition:
		m.FixedTriggerDefinition = v
	case UsageContext:
		m.FixedUsageContext = &v
	case *UsageContext:
		m.FixedUsageContext = v
	case Dosage:
		m.FixedDosage = &v
	case *Dosage:
		m.FixedDosage = v
	case Meta:
		m.FixedMeta = &v
	case *Meta:
		m.FixedMeta = v
	}
	switch v := r.Pattern.(type) {
	case Base64Binary:
		m.PatternBase64Binary = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Base64Binary:
		m.PatternBase64Binary = v
		if v.Id != nil || v.Extension != nil {
			m.PatternBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Boolean:
		m.PatternBoolean = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Boolean:
		m.PatternBoolean = v
		if v.Id != nil || v.Extension != nil {
			m.PatternBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Canonical:
		m.PatternCanonical = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Canonical:
		m.PatternCanonical = v
		if v.Id != nil || v.Extension != nil {
			m.PatternCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Code:
		m.PatternCode = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Code:
		m.PatternCode = v
		if v.Id != nil || v.Extension != nil {
			m.PatternCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Date:
		m.PatternDate = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Date:
		m.PatternDate = v
		if v.Id != nil || v.Extension != nil {
			m.PatternDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case DateTime:
		m.PatternDateTime = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *DateTime:
		m.PatternDateTime = v
		if v.Id != nil || v.Extension != nil {
			m.PatternDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Decimal:
		m.PatternDecimal = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Decimal:
		m.PatternDecimal = v
		if v.Id != nil || v.Extension != nil {
			m.PatternDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Id:
		m.PatternId = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Id:
		m.PatternId = v
		if v.Id != nil || v.Extension != nil {
			m.PatternIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Instant:
		m.PatternInstant = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Instant:
		m.PatternInstant = v
		if v.Id != nil || v.Extension != nil {
			m.PatternInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Integer:
		m.PatternInteger = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Integer:
		m.PatternInteger = v
		if v.Id != nil || v.Extension != nil {
			m.PatternIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Markdown:
		m.PatternMarkdown = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Markdown:
		m.PatternMarkdown = v
		if v.Id != nil || v.Extension != nil {
			m.PatternMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Oid:
		m.PatternOid = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Oid:
		m.PatternOid = v
		if v.Id != nil || v.Extension != nil {
			m.PatternOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case PositiveInt:
		m.PatternPositiveInt = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternPositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *PositiveInt:
		m.PatternPositiveInt = v
		if v.Id != nil || v.Extension != nil {
			m.PatternPositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case String:
		m.PatternString = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *String:
		m.PatternString = v
		if v.Id != nil || v.Extension != nil {
			m.PatternStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Time:
		m.PatternTime = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Time:
		m.PatternTime = v
		if v.Id != nil || v.Extension != nil {
			m.PatternTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case UnsignedInt:
		m.PatternUnsignedInt = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *UnsignedInt:
		m.PatternUnsignedInt = v
		if v.Id != nil || v.Extension != nil {
			m.PatternUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uri:
		m.PatternUri = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uri:
		m.PatternUri = v
		if v.Id != nil || v.Extension != nil {
			m.PatternUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Url:
		m.PatternUrl = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Url:
		m.PatternUrl = v
		if v.Id != nil || v.Extension != nil {
			m.PatternUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uuid:
		m.PatternUuid = &v
		if v.Id != nil || v.Extension != nil {
			m.PatternUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uuid:
		m.PatternUuid = v
		if v.Id != nil || v.Extension != nil {
			m.PatternUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Address:
		m.PatternAddress = &v
	case *Address:
		m.PatternAddress = v
	case Age:
		m.PatternAge = &v
	case *Age:
		m.PatternAge = v
	case Annotation:
		m.PatternAnnotation = &v
	case *Annotation:
		m.PatternAnnotation = v
	case Attachment:
		m.PatternAttachment = &v
	case *Attachment:
		m.PatternAttachment = v
	case CodeableConcept:
		m.PatternCodeableConcept = &v
	case *CodeableConcept:
		m.PatternCodeableConcept = v
	case Coding:
		m.PatternCoding = &v
	case *Coding:
		m.PatternCoding = v
	case ContactPoint:
		m.PatternContactPoint = &v
	case *ContactPoint:
		m.PatternContactPoint = v
	case Count:
		m.PatternCount = &v
	case *Count:
		m.PatternCount = v
	case Distance:
		m.PatternDistance = &v
	case *Distance:
		m.PatternDistance = v
	case Duration:
		m.PatternDuration = &v
	case *Duration:
		m.PatternDuration = v
	case HumanName:
		m.PatternHumanName = &v
	case *HumanName:
		m.PatternHumanName = v
	case Identifier:
		m.PatternIdentifier = &v
	case *Identifier:
		m.PatternIdentifier = v
	case Money:
		m.PatternMoney = &v
	case *Money:
		m.PatternMoney = v
	case Period:
		m.PatternPeriod = &v
	case *Period:
		m.PatternPeriod = v
	case Quantity:
		m.PatternQuantity = &v
	case *Quantity:
		m.PatternQuantity = v
	case Range:
		m.PatternRange = &v
	case *Range:
		m.PatternRange = v
	case Ratio:
		m.PatternRatio = &v
	case *Ratio:
		m.PatternRatio = v
	case Reference:
		m.PatternReference = &v
	case *Reference:
		m.PatternReference = v
	case SampledData:
		m.PatternSampledData = &v
	case *SampledData:
		m.PatternSampledData = v
	case Signature:
		m.PatternSignature = &v
	case *Signature:
		m.PatternSignature = v
	case Timing:
		m.PatternTiming = &v
	case *Timing:
		m.PatternTiming = v
	case ContactDetail:
		m.PatternContactDetail = &v
	case *ContactDetail:
		m.PatternContactDetail = v
	case Contributor:
		m.PatternContributor = &v
	case *Contributor:
		m.PatternContributor = v
	case DataRequirement:
		m.PatternDataRequirement = &v
	case *DataRequirement:
		m.PatternDataRequirement = v
	case Expression:
		m.PatternExpression = &v
	case *Expression:
		m.PatternExpression = v
	case ParameterDefinition:
		m.PatternParameterDefinition = &v
	case *ParameterDefinition:
		m.PatternParameterDefinition = v
	case RelatedArtifact:
		m.PatternRelatedArtifact = &v
	case *RelatedArtifact:
		m.PatternRelatedArtifact = v
	case TriggerDefinition:
		m.PatternTriggerDefinition = &v
	case *TriggerDefinition:
		m.PatternTriggerDefinition = v
	case UsageContext:
		m.PatternUsageContext = &v
	case *UsageContext:
		m.PatternUsageContext = v
	case Dosage:
		m.PatternDosage = &v
	case *Dosage:
		m.PatternDosage = v
	case Meta:
		m.PatternMeta = &v
	case *Meta:
		m.PatternMeta = v
	}
	m.Example = r.Example
	switch v := r.MinValue.(type) {
	case Date:
		m.MinValueDate = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Date:
		m.MinValueDate = v
		if v.Id != nil || v.Extension != nil {
			m.MinValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case DateTime:
		m.MinValueDateTime = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *DateTime:
		m.MinValueDateTime = v
		if v.Id != nil || v.Extension != nil {
			m.MinValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Instant:
		m.MinValueInstant = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Instant:
		m.MinValueInstant = v
		if v.Id != nil || v.Extension != nil {
			m.MinValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Time:
		m.MinValueTime = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Time:
		m.MinValueTime = v
		if v.Id != nil || v.Extension != nil {
			m.MinValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Decimal:
		m.MinValueDecimal = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Decimal:
		m.MinValueDecimal = v
		if v.Id != nil || v.Extension != nil {
			m.MinValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Integer:
		m.MinValueInteger = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Integer:
		m.MinValueInteger = v
		if v.Id != nil || v.Extension != nil {
			m.MinValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case PositiveInt:
		m.MinValuePositiveInt = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *PositiveInt:
		m.MinValuePositiveInt = v
		if v.Id != nil || v.Extension != nil {
			m.MinValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case UnsignedInt:
		m.MinValueUnsignedInt = &v
		if v.Id != nil || v.Extension != nil {
			m.MinValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *UnsignedInt:
		m.MinValueUnsignedInt = v
		if v.Id != nil || v.Extension != nil {
			m.MinValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Quantity:
		m.MinValueQuantity = &v
	case *Quantity:
		m.MinValueQuantity = v
	}
	switch v := r.MaxValue.(type) {
	case Date:
		m.MaxValueDate = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Date:
		m.MaxValueDate = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case DateTime:
		m.MaxValueDateTime = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *DateTime:
		m.MaxValueDateTime = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Instant:
		m.MaxValueInstant = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Instant:
		m.MaxValueInstant = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Time:
		m.MaxValueTime = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Time:
		m.MaxValueTime = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Decimal:
		m.MaxValueDecimal = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Decimal:
		m.MaxValueDecimal = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Integer:
		m.MaxValueInteger = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Integer:
		m.MaxValueInteger = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case PositiveInt:
		m.MaxValuePositiveInt = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *PositiveInt:
		m.MaxValuePositiveInt = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case UnsignedInt:
		m.MaxValueUnsignedInt = &v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *UnsignedInt:
		m.MaxValueUnsignedInt = v
		if v.Id != nil || v.Extension != nil {
			m.MaxValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Quantity:
		m.MaxValueQuantity = &v
	case *Quantity:
		m.MaxValueQuantity = v
	}
	m.MaxLength = r.MaxLength
	if r.MaxLength != nil && (r.MaxLength.Id != nil || r.MaxLength.Extension != nil) {
		m.MaxLengthPrimitiveElement = &primitiveElement{Id: r.MaxLength.Id, Extension: r.MaxLength.Extension}
	}
	m.Condition = r.Condition
	anyConditionIdOrExtension := false
	for _, e := range r.Condition {
		if e.Id != nil || e.Extension != nil {
			anyConditionIdOrExtension = true
			break
		}
	}
	if anyConditionIdOrExtension {
		m.ConditionPrimitiveElement = make([]*primitiveElement, 0, len(r.Condition))
		for _, e := range r.Condition {
			if e.Id != nil || e.Extension != nil {
				m.ConditionPrimitiveElement = append(m.ConditionPrimitiveElement, &primitiveElement{Id: e.Id, Extension: e.Extension})
			} else {
				m.ConditionPrimitiveElement = append(m.ConditionPrimitiveElement, nil)
			}
		}
	}
	m.Constraint = r.Constraint
	m.MustSupport = r.MustSupport
	if r.MustSupport != nil && (r.MustSupport.Id != nil || r.MustSupport.Extension != nil) {
		m.MustSupportPrimitiveElement = &primitiveElement{Id: r.MustSupport.Id, Extension: r.MustSupport.Extension}
	}
	m.IsModifier = r.IsModifier
	if r.IsModifier != nil && (r.IsModifier.Id != nil || r.IsModifier.Extension != nil) {
		m.IsModifierPrimitiveElement = &primitiveElement{Id: r.IsModifier.Id, Extension: r.IsModifier.Extension}
	}
	m.IsModifierReason = r.IsModifierReason
	if r.IsModifierReason != nil && (r.IsModifierReason.Id != nil || r.IsModifierReason.Extension != nil) {
		m.IsModifierReasonPrimitiveElement = &primitiveElement{Id: r.IsModifierReason.Id, Extension: r.IsModifierReason.Extension}
	}
	m.IsSummary = r.IsSummary
	if r.IsSummary != nil && (r.IsSummary.Id != nil || r.IsSummary.Extension != nil) {
		m.IsSummaryPrimitiveElement = &primitiveElement{Id: r.IsSummary.Id, Extension: r.IsSummary.Extension}
	}
	m.Binding = r.Binding
	m.Mapping = r.Mapping
	return m
}
func (r *ElementDefinition) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinition
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinition) unmarshalJSON(m jsonElementDefinition) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.ModifierExtension = m.ModifierExtension
	r.Path = m.Path
	if m.PathPrimitiveElement != nil {
		r.Path.Id = m.PathPrimitiveElement.Id
		r.Path.Extension = m.PathPrimitiveElement.Extension
	}
	r.Representation = m.Representation
	for i, e := range m.RepresentationPrimitiveElement {
		if len(r.Representation) > i {
			r.Representation[i].Id = e.Id
			r.Representation[i].Extension = e.Extension
		} else {
			r.Representation = append(r.Representation, Code{Id: e.Id, Extension: e.Extension})
		}
	}
	r.SliceName = m.SliceName
	if m.SliceNamePrimitiveElement != nil {
		r.SliceName.Id = m.SliceNamePrimitiveElement.Id
		r.SliceName.Extension = m.SliceNamePrimitiveElement.Extension
	}
	r.SliceIsConstraining = m.SliceIsConstraining
	if m.SliceIsConstrainingPrimitiveElement != nil {
		r.SliceIsConstraining.Id = m.SliceIsConstrainingPrimitiveElement.Id
		r.SliceIsConstraining.Extension = m.SliceIsConstrainingPrimitiveElement.Extension
	}
	r.Label = m.Label
	if m.LabelPrimitiveElement != nil {
		r.Label.Id = m.LabelPrimitiveElement.Id
		r.Label.Extension = m.LabelPrimitiveElement.Extension
	}
	r.Code = m.Code
	r.Slicing = m.Slicing
	r.Short = m.Short
	if m.ShortPrimitiveElement != nil {
		r.Short.Id = m.ShortPrimitiveElement.Id
		r.Short.Extension = m.ShortPrimitiveElement.Extension
	}
	r.Definition = m.Definition
	if m.DefinitionPrimitiveElement != nil {
		r.Definition.Id = m.DefinitionPrimitiveElement.Id
		r.Definition.Extension = m.DefinitionPrimitiveElement.Extension
	}
	r.Comment = m.Comment
	if m.CommentPrimitiveElement != nil {
		r.Comment.Id = m.CommentPrimitiveElement.Id
		r.Comment.Extension = m.CommentPrimitiveElement.Extension
	}
	r.Requirements = m.Requirements
	if m.RequirementsPrimitiveElement != nil {
		r.Requirements.Id = m.RequirementsPrimitiveElement.Id
		r.Requirements.Extension = m.RequirementsPrimitiveElement.Extension
	}
	r.Alias = m.Alias
	for i, e := range m.AliasPrimitiveElement {
		if len(r.Alias) > i {
			r.Alias[i].Id = e.Id
			r.Alias[i].Extension = e.Extension
		} else {
			r.Alias = append(r.Alias, String{Id: e.Id, Extension: e.Extension})
		}
	}
	r.Min = m.Min
	if m.MinPrimitiveElement != nil {
		r.Min.Id = m.MinPrimitiveElement.Id
		r.Min.Extension = m.MinPrimitiveElement.Extension
	}
	r.Max = m.Max
	if m.MaxPrimitiveElement != nil {
		r.Max.Id = m.MaxPrimitiveElement.Id
		r.Max.Extension = m.MaxPrimitiveElement.Extension
	}
	r.Base = m.Base
	r.ContentReference = m.ContentReference
	if m.ContentReferencePrimitiveElement != nil {
		r.ContentReference.Id = m.ContentReferencePrimitiveElement.Id
		r.ContentReference.Extension = m.ContentReferencePrimitiveElement.Extension
	}
	r.Type = m.Type
	if m.DefaultValueBase64Binary != nil || m.DefaultValueBase64BinaryPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueBase64Binary
		if m.DefaultValueBase64BinaryPrimitiveElement != nil {
			if v == nil {
				v = &Base64Binary{}
			}
			v.Id = m.DefaultValueBase64BinaryPrimitiveElement.Id
			v.Extension = m.DefaultValueBase64BinaryPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueBoolean != nil || m.DefaultValueBooleanPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueBoolean
		if m.DefaultValueBooleanPrimitiveElement != nil {
			if v == nil {
				v = &Boolean{}
			}
			v.Id = m.DefaultValueBooleanPrimitiveElement.Id
			v.Extension = m.DefaultValueBooleanPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueCanonical != nil || m.DefaultValueCanonicalPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueCanonical
		if m.DefaultValueCanonicalPrimitiveElement != nil {
			if v == nil {
				v = &Canonical{}
			}
			v.Id = m.DefaultValueCanonicalPrimitiveElement.Id
			v.Extension = m.DefaultValueCanonicalPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueCode != nil || m.DefaultValueCodePrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueCode
		if m.DefaultValueCodePrimitiveElement != nil {
			if v == nil {
				v = &Code{}
			}
			v.Id = m.DefaultValueCodePrimitiveElement.Id
			v.Extension = m.DefaultValueCodePrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueDate != nil || m.DefaultValueDatePrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueDate
		if m.DefaultValueDatePrimitiveElement != nil {
			if v == nil {
				v = &Date{}
			}
			v.Id = m.DefaultValueDatePrimitiveElement.Id
			v.Extension = m.DefaultValueDatePrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueDateTime != nil || m.DefaultValueDateTimePrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueDateTime
		if m.DefaultValueDateTimePrimitiveElement != nil {
			if v == nil {
				v = &DateTime{}
			}
			v.Id = m.DefaultValueDateTimePrimitiveElement.Id
			v.Extension = m.DefaultValueDateTimePrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueDecimal != nil || m.DefaultValueDecimalPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueDecimal
		if m.DefaultValueDecimalPrimitiveElement != nil {
			if v == nil {
				v = &Decimal{}
			}
			v.Id = m.DefaultValueDecimalPrimitiveElement.Id
			v.Extension = m.DefaultValueDecimalPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueId != nil || m.DefaultValueIdPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueId
		if m.DefaultValueIdPrimitiveElement != nil {
			if v == nil {
				v = &Id{}
			}
			v.Id = m.DefaultValueIdPrimitiveElement.Id
			v.Extension = m.DefaultValueIdPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueInstant != nil || m.DefaultValueInstantPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueInstant
		if m.DefaultValueInstantPrimitiveElement != nil {
			if v == nil {
				v = &Instant{}
			}
			v.Id = m.DefaultValueInstantPrimitiveElement.Id
			v.Extension = m.DefaultValueInstantPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueInteger != nil || m.DefaultValueIntegerPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueInteger
		if m.DefaultValueIntegerPrimitiveElement != nil {
			if v == nil {
				v = &Integer{}
			}
			v.Id = m.DefaultValueIntegerPrimitiveElement.Id
			v.Extension = m.DefaultValueIntegerPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueMarkdown != nil || m.DefaultValueMarkdownPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueMarkdown
		if m.DefaultValueMarkdownPrimitiveElement != nil {
			if v == nil {
				v = &Markdown{}
			}
			v.Id = m.DefaultValueMarkdownPrimitiveElement.Id
			v.Extension = m.DefaultValueMarkdownPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueOid != nil || m.DefaultValueOidPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueOid
		if m.DefaultValueOidPrimitiveElement != nil {
			if v == nil {
				v = &Oid{}
			}
			v.Id = m.DefaultValueOidPrimitiveElement.Id
			v.Extension = m.DefaultValueOidPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValuePositiveInt != nil || m.DefaultValuePositiveIntPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValuePositiveInt
		if m.DefaultValuePositiveIntPrimitiveElement != nil {
			if v == nil {
				v = &PositiveInt{}
			}
			v.Id = m.DefaultValuePositiveIntPrimitiveElement.Id
			v.Extension = m.DefaultValuePositiveIntPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueString != nil || m.DefaultValueStringPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueString
		if m.DefaultValueStringPrimitiveElement != nil {
			if v == nil {
				v = &String{}
			}
			v.Id = m.DefaultValueStringPrimitiveElement.Id
			v.Extension = m.DefaultValueStringPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueTime != nil || m.DefaultValueTimePrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueTime
		if m.DefaultValueTimePrimitiveElement != nil {
			if v == nil {
				v = &Time{}
			}
			v.Id = m.DefaultValueTimePrimitiveElement.Id
			v.Extension = m.DefaultValueTimePrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueUnsignedInt != nil || m.DefaultValueUnsignedIntPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueUnsignedInt
		if m.DefaultValueUnsignedIntPrimitiveElement != nil {
			if v == nil {
				v = &UnsignedInt{}
			}
			v.Id = m.DefaultValueUnsignedIntPrimitiveElement.Id
			v.Extension = m.DefaultValueUnsignedIntPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueUri != nil || m.DefaultValueUriPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueUri
		if m.DefaultValueUriPrimitiveElement != nil {
			if v == nil {
				v = &Uri{}
			}
			v.Id = m.DefaultValueUriPrimitiveElement.Id
			v.Extension = m.DefaultValueUriPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueUrl != nil || m.DefaultValueUrlPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueUrl
		if m.DefaultValueUrlPrimitiveElement != nil {
			if v == nil {
				v = &Url{}
			}
			v.Id = m.DefaultValueUrlPrimitiveElement.Id
			v.Extension = m.DefaultValueUrlPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueUuid != nil || m.DefaultValueUuidPrimitiveElement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueUuid
		if m.DefaultValueUuidPrimitiveElement != nil {
			if v == nil {
				v = &Uuid{}
			}
			v.Id = m.DefaultValueUuidPrimitiveElement.Id
			v.Extension = m.DefaultValueUuidPrimitiveElement.Extension
		}
		r.DefaultValue = v
	}
	if m.DefaultValueAddress != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueAddress
		r.DefaultValue = v
	}
	if m.DefaultValueAge != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueAge
		r.DefaultValue = v
	}
	if m.DefaultValueAnnotation != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueAnnotation
		r.DefaultValue = v
	}
	if m.DefaultValueAttachment != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueAttachment
		r.DefaultValue = v
	}
	if m.DefaultValueCodeableConcept != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueCodeableConcept
		r.DefaultValue = v
	}
	if m.DefaultValueCoding != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueCoding
		r.DefaultValue = v
	}
	if m.DefaultValueContactPoint != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueContactPoint
		r.DefaultValue = v
	}
	if m.DefaultValueCount != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueCount
		r.DefaultValue = v
	}
	if m.DefaultValueDistance != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueDistance
		r.DefaultValue = v
	}
	if m.DefaultValueDuration != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueDuration
		r.DefaultValue = v
	}
	if m.DefaultValueHumanName != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueHumanName
		r.DefaultValue = v
	}
	if m.DefaultValueIdentifier != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueIdentifier
		r.DefaultValue = v
	}
	if m.DefaultValueMoney != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueMoney
		r.DefaultValue = v
	}
	if m.DefaultValuePeriod != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValuePeriod
		r.DefaultValue = v
	}
	if m.DefaultValueQuantity != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueQuantity
		r.DefaultValue = v
	}
	if m.DefaultValueRange != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueRange
		r.DefaultValue = v
	}
	if m.DefaultValueRatio != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueRatio
		r.DefaultValue = v
	}
	if m.DefaultValueReference != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueReference
		r.DefaultValue = v
	}
	if m.DefaultValueSampledData != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueSampledData
		r.DefaultValue = v
	}
	if m.DefaultValueSignature != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueSignature
		r.DefaultValue = v
	}
	if m.DefaultValueTiming != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueTiming
		r.DefaultValue = v
	}
	if m.DefaultValueContactDetail != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueContactDetail
		r.DefaultValue = v
	}
	if m.DefaultValueContributor != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueContributor
		r.DefaultValue = v
	}
	if m.DefaultValueDataRequirement != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueDataRequirement
		r.DefaultValue = v
	}
	if m.DefaultValueExpression != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueExpression
		r.DefaultValue = v
	}
	if m.DefaultValueParameterDefinition != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueParameterDefinition
		r.DefaultValue = v
	}
	if m.DefaultValueRelatedArtifact != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueRelatedArtifact
		r.DefaultValue = v
	}
	if m.DefaultValueTriggerDefinition != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueTriggerDefinition
		r.DefaultValue = v
	}
	if m.DefaultValueUsageContext != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueUsageContext
		r.DefaultValue = v
	}
	if m.DefaultValueDosage != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueDosage
		r.DefaultValue = v
	}
	if m.DefaultValueMeta != nil {
		if r.DefaultValue != nil {
			return fmt.Errorf("multiple values for field \"DefaultValue\"")
		}
		v := m.DefaultValueMeta
		r.DefaultValue = v
	}
	r.MeaningWhenMissing = m.MeaningWhenMissing
	if m.MeaningWhenMissingPrimitiveElement != nil {
		r.MeaningWhenMissing.Id = m.MeaningWhenMissingPrimitiveElement.Id
		r.MeaningWhenMissing.Extension = m.MeaningWhenMissingPrimitiveElement.Extension
	}
	r.OrderMeaning = m.OrderMeaning
	if m.OrderMeaningPrimitiveElement != nil {
		r.OrderMeaning.Id = m.OrderMeaningPrimitiveElement.Id
		r.OrderMeaning.Extension = m.OrderMeaningPrimitiveElement.Extension
	}
	if m.FixedBase64Binary != nil || m.FixedBase64BinaryPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedBase64Binary
		if m.FixedBase64BinaryPrimitiveElement != nil {
			if v == nil {
				v = &Base64Binary{}
			}
			v.Id = m.FixedBase64BinaryPrimitiveElement.Id
			v.Extension = m.FixedBase64BinaryPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedBoolean != nil || m.FixedBooleanPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedBoolean
		if m.FixedBooleanPrimitiveElement != nil {
			if v == nil {
				v = &Boolean{}
			}
			v.Id = m.FixedBooleanPrimitiveElement.Id
			v.Extension = m.FixedBooleanPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedCanonical != nil || m.FixedCanonicalPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedCanonical
		if m.FixedCanonicalPrimitiveElement != nil {
			if v == nil {
				v = &Canonical{}
			}
			v.Id = m.FixedCanonicalPrimitiveElement.Id
			v.Extension = m.FixedCanonicalPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedCode != nil || m.FixedCodePrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedCode
		if m.FixedCodePrimitiveElement != nil {
			if v == nil {
				v = &Code{}
			}
			v.Id = m.FixedCodePrimitiveElement.Id
			v.Extension = m.FixedCodePrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedDate != nil || m.FixedDatePrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedDate
		if m.FixedDatePrimitiveElement != nil {
			if v == nil {
				v = &Date{}
			}
			v.Id = m.FixedDatePrimitiveElement.Id
			v.Extension = m.FixedDatePrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedDateTime != nil || m.FixedDateTimePrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedDateTime
		if m.FixedDateTimePrimitiveElement != nil {
			if v == nil {
				v = &DateTime{}
			}
			v.Id = m.FixedDateTimePrimitiveElement.Id
			v.Extension = m.FixedDateTimePrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedDecimal != nil || m.FixedDecimalPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedDecimal
		if m.FixedDecimalPrimitiveElement != nil {
			if v == nil {
				v = &Decimal{}
			}
			v.Id = m.FixedDecimalPrimitiveElement.Id
			v.Extension = m.FixedDecimalPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedId != nil || m.FixedIdPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedId
		if m.FixedIdPrimitiveElement != nil {
			if v == nil {
				v = &Id{}
			}
			v.Id = m.FixedIdPrimitiveElement.Id
			v.Extension = m.FixedIdPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedInstant != nil || m.FixedInstantPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedInstant
		if m.FixedInstantPrimitiveElement != nil {
			if v == nil {
				v = &Instant{}
			}
			v.Id = m.FixedInstantPrimitiveElement.Id
			v.Extension = m.FixedInstantPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedInteger != nil || m.FixedIntegerPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedInteger
		if m.FixedIntegerPrimitiveElement != nil {
			if v == nil {
				v = &Integer{}
			}
			v.Id = m.FixedIntegerPrimitiveElement.Id
			v.Extension = m.FixedIntegerPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedMarkdown != nil || m.FixedMarkdownPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedMarkdown
		if m.FixedMarkdownPrimitiveElement != nil {
			if v == nil {
				v = &Markdown{}
			}
			v.Id = m.FixedMarkdownPrimitiveElement.Id
			v.Extension = m.FixedMarkdownPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedOid != nil || m.FixedOidPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedOid
		if m.FixedOidPrimitiveElement != nil {
			if v == nil {
				v = &Oid{}
			}
			v.Id = m.FixedOidPrimitiveElement.Id
			v.Extension = m.FixedOidPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedPositiveInt != nil || m.FixedPositiveIntPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedPositiveInt
		if m.FixedPositiveIntPrimitiveElement != nil {
			if v == nil {
				v = &PositiveInt{}
			}
			v.Id = m.FixedPositiveIntPrimitiveElement.Id
			v.Extension = m.FixedPositiveIntPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedString != nil || m.FixedStringPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedString
		if m.FixedStringPrimitiveElement != nil {
			if v == nil {
				v = &String{}
			}
			v.Id = m.FixedStringPrimitiveElement.Id
			v.Extension = m.FixedStringPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedTime != nil || m.FixedTimePrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedTime
		if m.FixedTimePrimitiveElement != nil {
			if v == nil {
				v = &Time{}
			}
			v.Id = m.FixedTimePrimitiveElement.Id
			v.Extension = m.FixedTimePrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedUnsignedInt != nil || m.FixedUnsignedIntPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedUnsignedInt
		if m.FixedUnsignedIntPrimitiveElement != nil {
			if v == nil {
				v = &UnsignedInt{}
			}
			v.Id = m.FixedUnsignedIntPrimitiveElement.Id
			v.Extension = m.FixedUnsignedIntPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedUri != nil || m.FixedUriPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedUri
		if m.FixedUriPrimitiveElement != nil {
			if v == nil {
				v = &Uri{}
			}
			v.Id = m.FixedUriPrimitiveElement.Id
			v.Extension = m.FixedUriPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedUrl != nil || m.FixedUrlPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedUrl
		if m.FixedUrlPrimitiveElement != nil {
			if v == nil {
				v = &Url{}
			}
			v.Id = m.FixedUrlPrimitiveElement.Id
			v.Extension = m.FixedUrlPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedUuid != nil || m.FixedUuidPrimitiveElement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedUuid
		if m.FixedUuidPrimitiveElement != nil {
			if v == nil {
				v = &Uuid{}
			}
			v.Id = m.FixedUuidPrimitiveElement.Id
			v.Extension = m.FixedUuidPrimitiveElement.Extension
		}
		r.Fixed = v
	}
	if m.FixedAddress != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedAddress
		r.Fixed = v
	}
	if m.FixedAge != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedAge
		r.Fixed = v
	}
	if m.FixedAnnotation != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedAnnotation
		r.Fixed = v
	}
	if m.FixedAttachment != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedAttachment
		r.Fixed = v
	}
	if m.FixedCodeableConcept != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedCodeableConcept
		r.Fixed = v
	}
	if m.FixedCoding != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedCoding
		r.Fixed = v
	}
	if m.FixedContactPoint != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedContactPoint
		r.Fixed = v
	}
	if m.FixedCount != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedCount
		r.Fixed = v
	}
	if m.FixedDistance != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedDistance
		r.Fixed = v
	}
	if m.FixedDuration != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedDuration
		r.Fixed = v
	}
	if m.FixedHumanName != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedHumanName
		r.Fixed = v
	}
	if m.FixedIdentifier != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedIdentifier
		r.Fixed = v
	}
	if m.FixedMoney != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedMoney
		r.Fixed = v
	}
	if m.FixedPeriod != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedPeriod
		r.Fixed = v
	}
	if m.FixedQuantity != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedQuantity
		r.Fixed = v
	}
	if m.FixedRange != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedRange
		r.Fixed = v
	}
	if m.FixedRatio != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedRatio
		r.Fixed = v
	}
	if m.FixedReference != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedReference
		r.Fixed = v
	}
	if m.FixedSampledData != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedSampledData
		r.Fixed = v
	}
	if m.FixedSignature != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedSignature
		r.Fixed = v
	}
	if m.FixedTiming != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedTiming
		r.Fixed = v
	}
	if m.FixedContactDetail != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedContactDetail
		r.Fixed = v
	}
	if m.FixedContributor != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedContributor
		r.Fixed = v
	}
	if m.FixedDataRequirement != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedDataRequirement
		r.Fixed = v
	}
	if m.FixedExpression != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedExpression
		r.Fixed = v
	}
	if m.FixedParameterDefinition != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedParameterDefinition
		r.Fixed = v
	}
	if m.FixedRelatedArtifact != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedRelatedArtifact
		r.Fixed = v
	}
	if m.FixedTriggerDefinition != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedTriggerDefinition
		r.Fixed = v
	}
	if m.FixedUsageContext != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedUsageContext
		r.Fixed = v
	}
	if m.FixedDosage != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedDosage
		r.Fixed = v
	}
	if m.FixedMeta != nil {
		if r.Fixed != nil {
			return fmt.Errorf("multiple values for field \"Fixed\"")
		}
		v := m.FixedMeta
		r.Fixed = v
	}
	if m.PatternBase64Binary != nil || m.PatternBase64BinaryPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternBase64Binary
		if m.PatternBase64BinaryPrimitiveElement != nil {
			if v == nil {
				v = &Base64Binary{}
			}
			v.Id = m.PatternBase64BinaryPrimitiveElement.Id
			v.Extension = m.PatternBase64BinaryPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternBoolean != nil || m.PatternBooleanPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternBoolean
		if m.PatternBooleanPrimitiveElement != nil {
			if v == nil {
				v = &Boolean{}
			}
			v.Id = m.PatternBooleanPrimitiveElement.Id
			v.Extension = m.PatternBooleanPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternCanonical != nil || m.PatternCanonicalPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternCanonical
		if m.PatternCanonicalPrimitiveElement != nil {
			if v == nil {
				v = &Canonical{}
			}
			v.Id = m.PatternCanonicalPrimitiveElement.Id
			v.Extension = m.PatternCanonicalPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternCode != nil || m.PatternCodePrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternCode
		if m.PatternCodePrimitiveElement != nil {
			if v == nil {
				v = &Code{}
			}
			v.Id = m.PatternCodePrimitiveElement.Id
			v.Extension = m.PatternCodePrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternDate != nil || m.PatternDatePrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternDate
		if m.PatternDatePrimitiveElement != nil {
			if v == nil {
				v = &Date{}
			}
			v.Id = m.PatternDatePrimitiveElement.Id
			v.Extension = m.PatternDatePrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternDateTime != nil || m.PatternDateTimePrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternDateTime
		if m.PatternDateTimePrimitiveElement != nil {
			if v == nil {
				v = &DateTime{}
			}
			v.Id = m.PatternDateTimePrimitiveElement.Id
			v.Extension = m.PatternDateTimePrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternDecimal != nil || m.PatternDecimalPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternDecimal
		if m.PatternDecimalPrimitiveElement != nil {
			if v == nil {
				v = &Decimal{}
			}
			v.Id = m.PatternDecimalPrimitiveElement.Id
			v.Extension = m.PatternDecimalPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternId != nil || m.PatternIdPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternId
		if m.PatternIdPrimitiveElement != nil {
			if v == nil {
				v = &Id{}
			}
			v.Id = m.PatternIdPrimitiveElement.Id
			v.Extension = m.PatternIdPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternInstant != nil || m.PatternInstantPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternInstant
		if m.PatternInstantPrimitiveElement != nil {
			if v == nil {
				v = &Instant{}
			}
			v.Id = m.PatternInstantPrimitiveElement.Id
			v.Extension = m.PatternInstantPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternInteger != nil || m.PatternIntegerPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternInteger
		if m.PatternIntegerPrimitiveElement != nil {
			if v == nil {
				v = &Integer{}
			}
			v.Id = m.PatternIntegerPrimitiveElement.Id
			v.Extension = m.PatternIntegerPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternMarkdown != nil || m.PatternMarkdownPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternMarkdown
		if m.PatternMarkdownPrimitiveElement != nil {
			if v == nil {
				v = &Markdown{}
			}
			v.Id = m.PatternMarkdownPrimitiveElement.Id
			v.Extension = m.PatternMarkdownPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternOid != nil || m.PatternOidPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternOid
		if m.PatternOidPrimitiveElement != nil {
			if v == nil {
				v = &Oid{}
			}
			v.Id = m.PatternOidPrimitiveElement.Id
			v.Extension = m.PatternOidPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternPositiveInt != nil || m.PatternPositiveIntPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternPositiveInt
		if m.PatternPositiveIntPrimitiveElement != nil {
			if v == nil {
				v = &PositiveInt{}
			}
			v.Id = m.PatternPositiveIntPrimitiveElement.Id
			v.Extension = m.PatternPositiveIntPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternString != nil || m.PatternStringPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternString
		if m.PatternStringPrimitiveElement != nil {
			if v == nil {
				v = &String{}
			}
			v.Id = m.PatternStringPrimitiveElement.Id
			v.Extension = m.PatternStringPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternTime != nil || m.PatternTimePrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternTime
		if m.PatternTimePrimitiveElement != nil {
			if v == nil {
				v = &Time{}
			}
			v.Id = m.PatternTimePrimitiveElement.Id
			v.Extension = m.PatternTimePrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternUnsignedInt != nil || m.PatternUnsignedIntPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternUnsignedInt
		if m.PatternUnsignedIntPrimitiveElement != nil {
			if v == nil {
				v = &UnsignedInt{}
			}
			v.Id = m.PatternUnsignedIntPrimitiveElement.Id
			v.Extension = m.PatternUnsignedIntPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternUri != nil || m.PatternUriPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternUri
		if m.PatternUriPrimitiveElement != nil {
			if v == nil {
				v = &Uri{}
			}
			v.Id = m.PatternUriPrimitiveElement.Id
			v.Extension = m.PatternUriPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternUrl != nil || m.PatternUrlPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternUrl
		if m.PatternUrlPrimitiveElement != nil {
			if v == nil {
				v = &Url{}
			}
			v.Id = m.PatternUrlPrimitiveElement.Id
			v.Extension = m.PatternUrlPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternUuid != nil || m.PatternUuidPrimitiveElement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternUuid
		if m.PatternUuidPrimitiveElement != nil {
			if v == nil {
				v = &Uuid{}
			}
			v.Id = m.PatternUuidPrimitiveElement.Id
			v.Extension = m.PatternUuidPrimitiveElement.Extension
		}
		r.Pattern = v
	}
	if m.PatternAddress != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternAddress
		r.Pattern = v
	}
	if m.PatternAge != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternAge
		r.Pattern = v
	}
	if m.PatternAnnotation != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternAnnotation
		r.Pattern = v
	}
	if m.PatternAttachment != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternAttachment
		r.Pattern = v
	}
	if m.PatternCodeableConcept != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternCodeableConcept
		r.Pattern = v
	}
	if m.PatternCoding != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternCoding
		r.Pattern = v
	}
	if m.PatternContactPoint != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternContactPoint
		r.Pattern = v
	}
	if m.PatternCount != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternCount
		r.Pattern = v
	}
	if m.PatternDistance != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternDistance
		r.Pattern = v
	}
	if m.PatternDuration != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternDuration
		r.Pattern = v
	}
	if m.PatternHumanName != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternHumanName
		r.Pattern = v
	}
	if m.PatternIdentifier != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternIdentifier
		r.Pattern = v
	}
	if m.PatternMoney != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternMoney
		r.Pattern = v
	}
	if m.PatternPeriod != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternPeriod
		r.Pattern = v
	}
	if m.PatternQuantity != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternQuantity
		r.Pattern = v
	}
	if m.PatternRange != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternRange
		r.Pattern = v
	}
	if m.PatternRatio != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternRatio
		r.Pattern = v
	}
	if m.PatternReference != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternReference
		r.Pattern = v
	}
	if m.PatternSampledData != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternSampledData
		r.Pattern = v
	}
	if m.PatternSignature != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternSignature
		r.Pattern = v
	}
	if m.PatternTiming != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternTiming
		r.Pattern = v
	}
	if m.PatternContactDetail != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternContactDetail
		r.Pattern = v
	}
	if m.PatternContributor != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternContributor
		r.Pattern = v
	}
	if m.PatternDataRequirement != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternDataRequirement
		r.Pattern = v
	}
	if m.PatternExpression != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternExpression
		r.Pattern = v
	}
	if m.PatternParameterDefinition != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternParameterDefinition
		r.Pattern = v
	}
	if m.PatternRelatedArtifact != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternRelatedArtifact
		r.Pattern = v
	}
	if m.PatternTriggerDefinition != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternTriggerDefinition
		r.Pattern = v
	}
	if m.PatternUsageContext != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternUsageContext
		r.Pattern = v
	}
	if m.PatternDosage != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternDosage
		r.Pattern = v
	}
	if m.PatternMeta != nil {
		if r.Pattern != nil {
			return fmt.Errorf("multiple values for field \"Pattern\"")
		}
		v := m.PatternMeta
		r.Pattern = v
	}
	r.Example = m.Example
	if m.MinValueDate != nil || m.MinValueDatePrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueDate
		if m.MinValueDatePrimitiveElement != nil {
			if v == nil {
				v = &Date{}
			}
			v.Id = m.MinValueDatePrimitiveElement.Id
			v.Extension = m.MinValueDatePrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValueDateTime != nil || m.MinValueDateTimePrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueDateTime
		if m.MinValueDateTimePrimitiveElement != nil {
			if v == nil {
				v = &DateTime{}
			}
			v.Id = m.MinValueDateTimePrimitiveElement.Id
			v.Extension = m.MinValueDateTimePrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValueInstant != nil || m.MinValueInstantPrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueInstant
		if m.MinValueInstantPrimitiveElement != nil {
			if v == nil {
				v = &Instant{}
			}
			v.Id = m.MinValueInstantPrimitiveElement.Id
			v.Extension = m.MinValueInstantPrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValueTime != nil || m.MinValueTimePrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueTime
		if m.MinValueTimePrimitiveElement != nil {
			if v == nil {
				v = &Time{}
			}
			v.Id = m.MinValueTimePrimitiveElement.Id
			v.Extension = m.MinValueTimePrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValueDecimal != nil || m.MinValueDecimalPrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueDecimal
		if m.MinValueDecimalPrimitiveElement != nil {
			if v == nil {
				v = &Decimal{}
			}
			v.Id = m.MinValueDecimalPrimitiveElement.Id
			v.Extension = m.MinValueDecimalPrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValueInteger != nil || m.MinValueIntegerPrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueInteger
		if m.MinValueIntegerPrimitiveElement != nil {
			if v == nil {
				v = &Integer{}
			}
			v.Id = m.MinValueIntegerPrimitiveElement.Id
			v.Extension = m.MinValueIntegerPrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValuePositiveInt != nil || m.MinValuePositiveIntPrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValuePositiveInt
		if m.MinValuePositiveIntPrimitiveElement != nil {
			if v == nil {
				v = &PositiveInt{}
			}
			v.Id = m.MinValuePositiveIntPrimitiveElement.Id
			v.Extension = m.MinValuePositiveIntPrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValueUnsignedInt != nil || m.MinValueUnsignedIntPrimitiveElement != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueUnsignedInt
		if m.MinValueUnsignedIntPrimitiveElement != nil {
			if v == nil {
				v = &UnsignedInt{}
			}
			v.Id = m.MinValueUnsignedIntPrimitiveElement.Id
			v.Extension = m.MinValueUnsignedIntPrimitiveElement.Extension
		}
		r.MinValue = v
	}
	if m.MinValueQuantity != nil {
		if r.MinValue != nil {
			return fmt.Errorf("multiple values for field \"MinValue\"")
		}
		v := m.MinValueQuantity
		r.MinValue = v
	}
	if m.MaxValueDate != nil || m.MaxValueDatePrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueDate
		if m.MaxValueDatePrimitiveElement != nil {
			if v == nil {
				v = &Date{}
			}
			v.Id = m.MaxValueDatePrimitiveElement.Id
			v.Extension = m.MaxValueDatePrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValueDateTime != nil || m.MaxValueDateTimePrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueDateTime
		if m.MaxValueDateTimePrimitiveElement != nil {
			if v == nil {
				v = &DateTime{}
			}
			v.Id = m.MaxValueDateTimePrimitiveElement.Id
			v.Extension = m.MaxValueDateTimePrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValueInstant != nil || m.MaxValueInstantPrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueInstant
		if m.MaxValueInstantPrimitiveElement != nil {
			if v == nil {
				v = &Instant{}
			}
			v.Id = m.MaxValueInstantPrimitiveElement.Id
			v.Extension = m.MaxValueInstantPrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValueTime != nil || m.MaxValueTimePrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueTime
		if m.MaxValueTimePrimitiveElement != nil {
			if v == nil {
				v = &Time{}
			}
			v.Id = m.MaxValueTimePrimitiveElement.Id
			v.Extension = m.MaxValueTimePrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValueDecimal != nil || m.MaxValueDecimalPrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueDecimal
		if m.MaxValueDecimalPrimitiveElement != nil {
			if v == nil {
				v = &Decimal{}
			}
			v.Id = m.MaxValueDecimalPrimitiveElement.Id
			v.Extension = m.MaxValueDecimalPrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValueInteger != nil || m.MaxValueIntegerPrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueInteger
		if m.MaxValueIntegerPrimitiveElement != nil {
			if v == nil {
				v = &Integer{}
			}
			v.Id = m.MaxValueIntegerPrimitiveElement.Id
			v.Extension = m.MaxValueIntegerPrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValuePositiveInt != nil || m.MaxValuePositiveIntPrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValuePositiveInt
		if m.MaxValuePositiveIntPrimitiveElement != nil {
			if v == nil {
				v = &PositiveInt{}
			}
			v.Id = m.MaxValuePositiveIntPrimitiveElement.Id
			v.Extension = m.MaxValuePositiveIntPrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValueUnsignedInt != nil || m.MaxValueUnsignedIntPrimitiveElement != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueUnsignedInt
		if m.MaxValueUnsignedIntPrimitiveElement != nil {
			if v == nil {
				v = &UnsignedInt{}
			}
			v.Id = m.MaxValueUnsignedIntPrimitiveElement.Id
			v.Extension = m.MaxValueUnsignedIntPrimitiveElement.Extension
		}
		r.MaxValue = v
	}
	if m.MaxValueQuantity != nil {
		if r.MaxValue != nil {
			return fmt.Errorf("multiple values for field \"MaxValue\"")
		}
		v := m.MaxValueQuantity
		r.MaxValue = v
	}
	r.MaxLength = m.MaxLength
	if m.MaxLengthPrimitiveElement != nil {
		r.MaxLength.Id = m.MaxLengthPrimitiveElement.Id
		r.MaxLength.Extension = m.MaxLengthPrimitiveElement.Extension
	}
	r.Condition = m.Condition
	for i, e := range m.ConditionPrimitiveElement {
		if len(r.Condition) > i {
			r.Condition[i].Id = e.Id
			r.Condition[i].Extension = e.Extension
		} else {
			r.Condition = append(r.Condition, Id{Id: e.Id, Extension: e.Extension})
		}
	}
	r.Constraint = m.Constraint
	r.MustSupport = m.MustSupport
	if m.MustSupportPrimitiveElement != nil {
		r.MustSupport.Id = m.MustSupportPrimitiveElement.Id
		r.MustSupport.Extension = m.MustSupportPrimitiveElement.Extension
	}
	r.IsModifier = m.IsModifier
	if m.IsModifierPrimitiveElement != nil {
		r.IsModifier.Id = m.IsModifierPrimitiveElement.Id
		r.IsModifier.Extension = m.IsModifierPrimitiveElement.Extension
	}
	r.IsModifierReason = m.IsModifierReason
	if m.IsModifierReasonPrimitiveElement != nil {
		r.IsModifierReason.Id = m.IsModifierReasonPrimitiveElement.Id
		r.IsModifierReason.Extension = m.IsModifierReasonPrimitiveElement.Extension
	}
	r.IsSummary = m.IsSummary
	if m.IsSummaryPrimitiveElement != nil {
		r.IsSummary.Id = m.IsSummaryPrimitiveElement.Id
		r.IsSummary.Extension = m.IsSummaryPrimitiveElement.Extension
	}
	r.Binding = m.Binding
	r.Mapping = m.Mapping
	return nil
}
func (r ElementDefinition) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
type ElementDefinitionSlicing struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
	Discriminator []ElementDefinitionSlicingDiscriminator
	// A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
	Description *String
	// If the matching elements have to occur in the same order as defined in the profile.
	Ordered *Boolean
	// Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
	Rules Code
}
type jsonElementDefinitionSlicing struct {
	Id                          *string                                 `json:"id,omitempty"`
	Extension                   []Extension                             `json:"extension,omitempty"`
	Discriminator               []ElementDefinitionSlicingDiscriminator `json:"discriminator,omitempty"`
	Description                 *String                                 `json:"description,omitempty"`
	DescriptionPrimitiveElement *primitiveElement                       `json:"_description,omitempty"`
	Ordered                     *Boolean                                `json:"ordered,omitempty"`
	OrderedPrimitiveElement     *primitiveElement                       `json:"_ordered,omitempty"`
	Rules                       Code                                    `json:"rules,omitempty"`
	RulesPrimitiveElement       *primitiveElement                       `json:"_rules,omitempty"`
}

func (r ElementDefinitionSlicing) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionSlicing) marshalJSON() jsonElementDefinitionSlicing {
	m := jsonElementDefinitionSlicing{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Discriminator = r.Discriminator
	m.Description = r.Description
	if r.Description != nil && (r.Description.Id != nil || r.Description.Extension != nil) {
		m.DescriptionPrimitiveElement = &primitiveElement{Id: r.Description.Id, Extension: r.Description.Extension}
	}
	m.Ordered = r.Ordered
	if r.Ordered != nil && (r.Ordered.Id != nil || r.Ordered.Extension != nil) {
		m.OrderedPrimitiveElement = &primitiveElement{Id: r.Ordered.Id, Extension: r.Ordered.Extension}
	}
	m.Rules = r.Rules
	if r.Rules.Id != nil || r.Rules.Extension != nil {
		m.RulesPrimitiveElement = &primitiveElement{Id: r.Rules.Id, Extension: r.Rules.Extension}
	}
	return m
}
func (r *ElementDefinitionSlicing) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionSlicing
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionSlicing) unmarshalJSON(m jsonElementDefinitionSlicing) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Discriminator = m.Discriminator
	r.Description = m.Description
	if m.DescriptionPrimitiveElement != nil {
		r.Description.Id = m.DescriptionPrimitiveElement.Id
		r.Description.Extension = m.DescriptionPrimitiveElement.Extension
	}
	r.Ordered = m.Ordered
	if m.OrderedPrimitiveElement != nil {
		r.Ordered.Id = m.OrderedPrimitiveElement.Id
		r.Ordered.Extension = m.OrderedPrimitiveElement.Extension
	}
	r.Rules = m.Rules
	if m.RulesPrimitiveElement != nil {
		r.Rules.Id = m.RulesPrimitiveElement.Id
		r.Rules.Extension = m.RulesPrimitiveElement.Extension
	}
	return nil
}
func (r ElementDefinitionSlicing) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
type ElementDefinitionSlicingDiscriminator struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// How the element value is interpreted when discrimination is evaluated.
	Type Code
	// A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
	Path String
}
type jsonElementDefinitionSlicingDiscriminator struct {
	Id                   *string           `json:"id,omitempty"`
	Extension            []Extension       `json:"extension,omitempty"`
	Type                 Code              `json:"type,omitempty"`
	TypePrimitiveElement *primitiveElement `json:"_type,omitempty"`
	Path                 String            `json:"path,omitempty"`
	PathPrimitiveElement *primitiveElement `json:"_path,omitempty"`
}

func (r ElementDefinitionSlicingDiscriminator) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionSlicingDiscriminator) marshalJSON() jsonElementDefinitionSlicingDiscriminator {
	m := jsonElementDefinitionSlicingDiscriminator{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Type = r.Type
	if r.Type.Id != nil || r.Type.Extension != nil {
		m.TypePrimitiveElement = &primitiveElement{Id: r.Type.Id, Extension: r.Type.Extension}
	}
	m.Path = r.Path
	if r.Path.Id != nil || r.Path.Extension != nil {
		m.PathPrimitiveElement = &primitiveElement{Id: r.Path.Id, Extension: r.Path.Extension}
	}
	return m
}
func (r *ElementDefinitionSlicingDiscriminator) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionSlicingDiscriminator
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionSlicingDiscriminator) unmarshalJSON(m jsonElementDefinitionSlicingDiscriminator) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Type = m.Type
	if m.TypePrimitiveElement != nil {
		r.Type.Id = m.TypePrimitiveElement.Id
		r.Type.Extension = m.TypePrimitiveElement.Extension
	}
	r.Path = m.Path
	if m.PathPrimitiveElement != nil {
		r.Path.Id = m.PathPrimitiveElement.Id
		r.Path.Extension = m.PathPrimitiveElement.Extension
	}
	return nil
}
func (r ElementDefinitionSlicingDiscriminator) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
type ElementDefinitionBase struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
	Path String
	// Minimum cardinality of the base element identified by the path.
	Min UnsignedInt
	// Maximum cardinality of the base element identified by the path.
	Max String
}
type jsonElementDefinitionBase struct {
	Id                   *string           `json:"id,omitempty"`
	Extension            []Extension       `json:"extension,omitempty"`
	Path                 String            `json:"path,omitempty"`
	PathPrimitiveElement *primitiveElement `json:"_path,omitempty"`
	Min                  UnsignedInt       `json:"min,omitempty"`
	MinPrimitiveElement  *primitiveElement `json:"_min,omitempty"`
	Max                  String            `json:"max,omitempty"`
	MaxPrimitiveElement  *primitiveElement `json:"_max,omitempty"`
}

func (r ElementDefinitionBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionBase) marshalJSON() jsonElementDefinitionBase {
	m := jsonElementDefinitionBase{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Path = r.Path
	if r.Path.Id != nil || r.Path.Extension != nil {
		m.PathPrimitiveElement = &primitiveElement{Id: r.Path.Id, Extension: r.Path.Extension}
	}
	m.Min = r.Min
	if r.Min.Id != nil || r.Min.Extension != nil {
		m.MinPrimitiveElement = &primitiveElement{Id: r.Min.Id, Extension: r.Min.Extension}
	}
	m.Max = r.Max
	if r.Max.Id != nil || r.Max.Extension != nil {
		m.MaxPrimitiveElement = &primitiveElement{Id: r.Max.Id, Extension: r.Max.Extension}
	}
	return m
}
func (r *ElementDefinitionBase) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionBase
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionBase) unmarshalJSON(m jsonElementDefinitionBase) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Path = m.Path
	if m.PathPrimitiveElement != nil {
		r.Path.Id = m.PathPrimitiveElement.Id
		r.Path.Extension = m.PathPrimitiveElement.Extension
	}
	r.Min = m.Min
	if m.MinPrimitiveElement != nil {
		r.Min.Id = m.MinPrimitiveElement.Id
		r.Min.Extension = m.MinPrimitiveElement.Extension
	}
	r.Max = m.Max
	if m.MaxPrimitiveElement != nil {
		r.Max.Id = m.MaxPrimitiveElement.Id
		r.Max.Extension = m.MaxPrimitiveElement.Extension
	}
	return nil
}
func (r ElementDefinitionBase) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// The data type or resource that the value of this element is permitted to be.
type ElementDefinitionType struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
	Code Uri
	// Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
	Profile []Canonical
	// Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
	TargetProfile []Canonical
	// If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
	Aggregation []Code
	// Whether this reference needs to be version specific or version independent, or whether either can be used.
	Versioning *Code
}
type jsonElementDefinitionType struct {
	Id                            *string             `json:"id,omitempty"`
	Extension                     []Extension         `json:"extension,omitempty"`
	Code                          Uri                 `json:"code,omitempty"`
	CodePrimitiveElement          *primitiveElement   `json:"_code,omitempty"`
	Profile                       []Canonical         `json:"profile,omitempty"`
	ProfilePrimitiveElement       []*primitiveElement `json:"_profile,omitempty"`
	TargetProfile                 []Canonical         `json:"targetProfile,omitempty"`
	TargetProfilePrimitiveElement []*primitiveElement `json:"_targetProfile,omitempty"`
	Aggregation                   []Code              `json:"aggregation,omitempty"`
	AggregationPrimitiveElement   []*primitiveElement `json:"_aggregation,omitempty"`
	Versioning                    *Code               `json:"versioning,omitempty"`
	VersioningPrimitiveElement    *primitiveElement   `json:"_versioning,omitempty"`
}

func (r ElementDefinitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionType) marshalJSON() jsonElementDefinitionType {
	m := jsonElementDefinitionType{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Code = r.Code
	if r.Code.Id != nil || r.Code.Extension != nil {
		m.CodePrimitiveElement = &primitiveElement{Id: r.Code.Id, Extension: r.Code.Extension}
	}
	m.Profile = r.Profile
	anyProfileIdOrExtension := false
	for _, e := range r.Profile {
		if e.Id != nil || e.Extension != nil {
			anyProfileIdOrExtension = true
			break
		}
	}
	if anyProfileIdOrExtension {
		m.ProfilePrimitiveElement = make([]*primitiveElement, 0, len(r.Profile))
		for _, e := range r.Profile {
			if e.Id != nil || e.Extension != nil {
				m.ProfilePrimitiveElement = append(m.ProfilePrimitiveElement, &primitiveElement{Id: e.Id, Extension: e.Extension})
			} else {
				m.ProfilePrimitiveElement = append(m.ProfilePrimitiveElement, nil)
			}
		}
	}
	m.TargetProfile = r.TargetProfile
	anyTargetProfileIdOrExtension := false
	for _, e := range r.TargetProfile {
		if e.Id != nil || e.Extension != nil {
			anyTargetProfileIdOrExtension = true
			break
		}
	}
	if anyTargetProfileIdOrExtension {
		m.TargetProfilePrimitiveElement = make([]*primitiveElement, 0, len(r.TargetProfile))
		for _, e := range r.TargetProfile {
			if e.Id != nil || e.Extension != nil {
				m.TargetProfilePrimitiveElement = append(m.TargetProfilePrimitiveElement, &primitiveElement{Id: e.Id, Extension: e.Extension})
			} else {
				m.TargetProfilePrimitiveElement = append(m.TargetProfilePrimitiveElement, nil)
			}
		}
	}
	m.Aggregation = r.Aggregation
	anyAggregationIdOrExtension := false
	for _, e := range r.Aggregation {
		if e.Id != nil || e.Extension != nil {
			anyAggregationIdOrExtension = true
			break
		}
	}
	if anyAggregationIdOrExtension {
		m.AggregationPrimitiveElement = make([]*primitiveElement, 0, len(r.Aggregation))
		for _, e := range r.Aggregation {
			if e.Id != nil || e.Extension != nil {
				m.AggregationPrimitiveElement = append(m.AggregationPrimitiveElement, &primitiveElement{Id: e.Id, Extension: e.Extension})
			} else {
				m.AggregationPrimitiveElement = append(m.AggregationPrimitiveElement, nil)
			}
		}
	}
	m.Versioning = r.Versioning
	if r.Versioning != nil && (r.Versioning.Id != nil || r.Versioning.Extension != nil) {
		m.VersioningPrimitiveElement = &primitiveElement{Id: r.Versioning.Id, Extension: r.Versioning.Extension}
	}
	return m
}
func (r *ElementDefinitionType) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionType
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionType) unmarshalJSON(m jsonElementDefinitionType) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Code = m.Code
	if m.CodePrimitiveElement != nil {
		r.Code.Id = m.CodePrimitiveElement.Id
		r.Code.Extension = m.CodePrimitiveElement.Extension
	}
	r.Profile = m.Profile
	for i, e := range m.ProfilePrimitiveElement {
		if len(r.Profile) > i {
			r.Profile[i].Id = e.Id
			r.Profile[i].Extension = e.Extension
		} else {
			r.Profile = append(r.Profile, Canonical{Id: e.Id, Extension: e.Extension})
		}
	}
	r.TargetProfile = m.TargetProfile
	for i, e := range m.TargetProfilePrimitiveElement {
		if len(r.TargetProfile) > i {
			r.TargetProfile[i].Id = e.Id
			r.TargetProfile[i].Extension = e.Extension
		} else {
			r.TargetProfile = append(r.TargetProfile, Canonical{Id: e.Id, Extension: e.Extension})
		}
	}
	r.Aggregation = m.Aggregation
	for i, e := range m.AggregationPrimitiveElement {
		if len(r.Aggregation) > i {
			r.Aggregation[i].Id = e.Id
			r.Aggregation[i].Extension = e.Extension
		} else {
			r.Aggregation = append(r.Aggregation, Code{Id: e.Id, Extension: e.Extension})
		}
	}
	r.Versioning = m.Versioning
	if m.VersioningPrimitiveElement != nil {
		r.Versioning.Id = m.VersioningPrimitiveElement.Id
		r.Versioning.Extension = m.VersioningPrimitiveElement.Extension
	}
	return nil
}
func (r ElementDefinitionType) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// A sample value for this element demonstrating the type of information that would typically be found in the element.
type ElementDefinitionExample struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// Describes the purpose of this example amoung the set of examples.
	Label String
	// The actual value for the element, which must be one of the types allowed for this element.
	Value isElementDefinitionExampleValue
}
type isElementDefinitionExampleValue interface {
	isElementDefinitionExampleValue()
}

func (r Base64Binary) isElementDefinitionExampleValue()        {}
func (r Boolean) isElementDefinitionExampleValue()             {}
func (r Canonical) isElementDefinitionExampleValue()           {}
func (r Code) isElementDefinitionExampleValue()                {}
func (r Date) isElementDefinitionExampleValue()                {}
func (r DateTime) isElementDefinitionExampleValue()            {}
func (r Decimal) isElementDefinitionExampleValue()             {}
func (r Id) isElementDefinitionExampleValue()                  {}
func (r Instant) isElementDefinitionExampleValue()             {}
func (r Integer) isElementDefinitionExampleValue()             {}
func (r Markdown) isElementDefinitionExampleValue()            {}
func (r Oid) isElementDefinitionExampleValue()                 {}
func (r PositiveInt) isElementDefinitionExampleValue()         {}
func (r String) isElementDefinitionExampleValue()              {}
func (r Time) isElementDefinitionExampleValue()                {}
func (r UnsignedInt) isElementDefinitionExampleValue()         {}
func (r Uri) isElementDefinitionExampleValue()                 {}
func (r Url) isElementDefinitionExampleValue()                 {}
func (r Uuid) isElementDefinitionExampleValue()                {}
func (r Address) isElementDefinitionExampleValue()             {}
func (r Age) isElementDefinitionExampleValue()                 {}
func (r Annotation) isElementDefinitionExampleValue()          {}
func (r Attachment) isElementDefinitionExampleValue()          {}
func (r CodeableConcept) isElementDefinitionExampleValue()     {}
func (r Coding) isElementDefinitionExampleValue()              {}
func (r ContactPoint) isElementDefinitionExampleValue()        {}
func (r Count) isElementDefinitionExampleValue()               {}
func (r Distance) isElementDefinitionExampleValue()            {}
func (r Duration) isElementDefinitionExampleValue()            {}
func (r HumanName) isElementDefinitionExampleValue()           {}
func (r Identifier) isElementDefinitionExampleValue()          {}
func (r Money) isElementDefinitionExampleValue()               {}
func (r Period) isElementDefinitionExampleValue()              {}
func (r Quantity) isElementDefinitionExampleValue()            {}
func (r Range) isElementDefinitionExampleValue()               {}
func (r Ratio) isElementDefinitionExampleValue()               {}
func (r Reference) isElementDefinitionExampleValue()           {}
func (r SampledData) isElementDefinitionExampleValue()         {}
func (r Signature) isElementDefinitionExampleValue()           {}
func (r Timing) isElementDefinitionExampleValue()              {}
func (r ContactDetail) isElementDefinitionExampleValue()       {}
func (r Contributor) isElementDefinitionExampleValue()         {}
func (r DataRequirement) isElementDefinitionExampleValue()     {}
func (r Expression) isElementDefinitionExampleValue()          {}
func (r ParameterDefinition) isElementDefinitionExampleValue() {}
func (r RelatedArtifact) isElementDefinitionExampleValue()     {}
func (r TriggerDefinition) isElementDefinitionExampleValue()   {}
func (r UsageContext) isElementDefinitionExampleValue()        {}
func (r Dosage) isElementDefinitionExampleValue()              {}
func (r Meta) isElementDefinitionExampleValue()                {}

type jsonElementDefinitionExample struct {
	Id                                *string              `json:"id,omitempty"`
	Extension                         []Extension          `json:"extension,omitempty"`
	Label                             String               `json:"label,omitempty"`
	LabelPrimitiveElement             *primitiveElement    `json:"_label,omitempty"`
	ValueBase64Binary                 *Base64Binary        `json:"valueBase64Binary,omitempty"`
	ValueBase64BinaryPrimitiveElement *primitiveElement    `json:"_valueBase64Binary,omitempty"`
	ValueBoolean                      *Boolean             `json:"valueBoolean,omitempty"`
	ValueBooleanPrimitiveElement      *primitiveElement    `json:"_valueBoolean,omitempty"`
	ValueCanonical                    *Canonical           `json:"valueCanonical,omitempty"`
	ValueCanonicalPrimitiveElement    *primitiveElement    `json:"_valueCanonical,omitempty"`
	ValueCode                         *Code                `json:"valueCode,omitempty"`
	ValueCodePrimitiveElement         *primitiveElement    `json:"_valueCode,omitempty"`
	ValueDate                         *Date                `json:"valueDate,omitempty"`
	ValueDatePrimitiveElement         *primitiveElement    `json:"_valueDate,omitempty"`
	ValueDateTime                     *DateTime            `json:"valueDateTime,omitempty"`
	ValueDateTimePrimitiveElement     *primitiveElement    `json:"_valueDateTime,omitempty"`
	ValueDecimal                      *Decimal             `json:"valueDecimal,omitempty"`
	ValueDecimalPrimitiveElement      *primitiveElement    `json:"_valueDecimal,omitempty"`
	ValueId                           *Id                  `json:"valueId,omitempty"`
	ValueIdPrimitiveElement           *primitiveElement    `json:"_valueId,omitempty"`
	ValueInstant                      *Instant             `json:"valueInstant,omitempty"`
	ValueInstantPrimitiveElement      *primitiveElement    `json:"_valueInstant,omitempty"`
	ValueInteger                      *Integer             `json:"valueInteger,omitempty"`
	ValueIntegerPrimitiveElement      *primitiveElement    `json:"_valueInteger,omitempty"`
	ValueMarkdown                     *Markdown            `json:"valueMarkdown,omitempty"`
	ValueMarkdownPrimitiveElement     *primitiveElement    `json:"_valueMarkdown,omitempty"`
	ValueOid                          *Oid                 `json:"valueOid,omitempty"`
	ValueOidPrimitiveElement          *primitiveElement    `json:"_valueOid,omitempty"`
	ValuePositiveInt                  *PositiveInt         `json:"valuePositiveInt,omitempty"`
	ValuePositiveIntPrimitiveElement  *primitiveElement    `json:"_valuePositiveInt,omitempty"`
	ValueString                       *String              `json:"valueString,omitempty"`
	ValueStringPrimitiveElement       *primitiveElement    `json:"_valueString,omitempty"`
	ValueTime                         *Time                `json:"valueTime,omitempty"`
	ValueTimePrimitiveElement         *primitiveElement    `json:"_valueTime,omitempty"`
	ValueUnsignedInt                  *UnsignedInt         `json:"valueUnsignedInt,omitempty"`
	ValueUnsignedIntPrimitiveElement  *primitiveElement    `json:"_valueUnsignedInt,omitempty"`
	ValueUri                          *Uri                 `json:"valueUri,omitempty"`
	ValueUriPrimitiveElement          *primitiveElement    `json:"_valueUri,omitempty"`
	ValueUrl                          *Url                 `json:"valueUrl,omitempty"`
	ValueUrlPrimitiveElement          *primitiveElement    `json:"_valueUrl,omitempty"`
	ValueUuid                         *Uuid                `json:"valueUuid,omitempty"`
	ValueUuidPrimitiveElement         *primitiveElement    `json:"_valueUuid,omitempty"`
	ValueAddress                      *Address             `json:"valueAddress,omitempty"`
	ValueAge                          *Age                 `json:"valueAge,omitempty"`
	ValueAnnotation                   *Annotation          `json:"valueAnnotation,omitempty"`
	ValueAttachment                   *Attachment          `json:"valueAttachment,omitempty"`
	ValueCodeableConcept              *CodeableConcept     `json:"valueCodeableConcept,omitempty"`
	ValueCoding                       *Coding              `json:"valueCoding,omitempty"`
	ValueContactPoint                 *ContactPoint        `json:"valueContactPoint,omitempty"`
	ValueCount                        *Count               `json:"valueCount,omitempty"`
	ValueDistance                     *Distance            `json:"valueDistance,omitempty"`
	ValueDuration                     *Duration            `json:"valueDuration,omitempty"`
	ValueHumanName                    *HumanName           `json:"valueHumanName,omitempty"`
	ValueIdentifier                   *Identifier          `json:"valueIdentifier,omitempty"`
	ValueMoney                        *Money               `json:"valueMoney,omitempty"`
	ValuePeriod                       *Period              `json:"valuePeriod,omitempty"`
	ValueQuantity                     *Quantity            `json:"valueQuantity,omitempty"`
	ValueRange                        *Range               `json:"valueRange,omitempty"`
	ValueRatio                        *Ratio               `json:"valueRatio,omitempty"`
	ValueReference                    *Reference           `json:"valueReference,omitempty"`
	ValueSampledData                  *SampledData         `json:"valueSampledData,omitempty"`
	ValueSignature                    *Signature           `json:"valueSignature,omitempty"`
	ValueTiming                       *Timing              `json:"valueTiming,omitempty"`
	ValueContactDetail                *ContactDetail       `json:"valueContactDetail,omitempty"`
	ValueContributor                  *Contributor         `json:"valueContributor,omitempty"`
	ValueDataRequirement              *DataRequirement     `json:"valueDataRequirement,omitempty"`
	ValueExpression                   *Expression          `json:"valueExpression,omitempty"`
	ValueParameterDefinition          *ParameterDefinition `json:"valueParameterDefinition,omitempty"`
	ValueRelatedArtifact              *RelatedArtifact     `json:"valueRelatedArtifact,omitempty"`
	ValueTriggerDefinition            *TriggerDefinition   `json:"valueTriggerDefinition,omitempty"`
	ValueUsageContext                 *UsageContext        `json:"valueUsageContext,omitempty"`
	ValueDosage                       *Dosage              `json:"valueDosage,omitempty"`
	ValueMeta                         *Meta                `json:"valueMeta,omitempty"`
}

func (r ElementDefinitionExample) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionExample) marshalJSON() jsonElementDefinitionExample {
	m := jsonElementDefinitionExample{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Label = r.Label
	if r.Label.Id != nil || r.Label.Extension != nil {
		m.LabelPrimitiveElement = &primitiveElement{Id: r.Label.Id, Extension: r.Label.Extension}
	}
	switch v := r.Value.(type) {
	case Base64Binary:
		m.ValueBase64Binary = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Base64Binary:
		m.ValueBase64Binary = v
		if v.Id != nil || v.Extension != nil {
			m.ValueBase64BinaryPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Boolean:
		m.ValueBoolean = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Boolean:
		m.ValueBoolean = v
		if v.Id != nil || v.Extension != nil {
			m.ValueBooleanPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Canonical:
		m.ValueCanonical = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Canonical:
		m.ValueCanonical = v
		if v.Id != nil || v.Extension != nil {
			m.ValueCanonicalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Code:
		m.ValueCode = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Code:
		m.ValueCode = v
		if v.Id != nil || v.Extension != nil {
			m.ValueCodePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Date:
		m.ValueDate = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Date:
		m.ValueDate = v
		if v.Id != nil || v.Extension != nil {
			m.ValueDatePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case DateTime:
		m.ValueDateTime = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *DateTime:
		m.ValueDateTime = v
		if v.Id != nil || v.Extension != nil {
			m.ValueDateTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Decimal:
		m.ValueDecimal = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Decimal:
		m.ValueDecimal = v
		if v.Id != nil || v.Extension != nil {
			m.ValueDecimalPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Id:
		m.ValueId = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Id:
		m.ValueId = v
		if v.Id != nil || v.Extension != nil {
			m.ValueIdPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Instant:
		m.ValueInstant = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Instant:
		m.ValueInstant = v
		if v.Id != nil || v.Extension != nil {
			m.ValueInstantPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Integer:
		m.ValueInteger = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Integer:
		m.ValueInteger = v
		if v.Id != nil || v.Extension != nil {
			m.ValueIntegerPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Markdown:
		m.ValueMarkdown = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Markdown:
		m.ValueMarkdown = v
		if v.Id != nil || v.Extension != nil {
			m.ValueMarkdownPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Oid:
		m.ValueOid = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Oid:
		m.ValueOid = v
		if v.Id != nil || v.Extension != nil {
			m.ValueOidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case PositiveInt:
		m.ValuePositiveInt = &v
		if v.Id != nil || v.Extension != nil {
			m.ValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *PositiveInt:
		m.ValuePositiveInt = v
		if v.Id != nil || v.Extension != nil {
			m.ValuePositiveIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case String:
		m.ValueString = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *String:
		m.ValueString = v
		if v.Id != nil || v.Extension != nil {
			m.ValueStringPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Time:
		m.ValueTime = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Time:
		m.ValueTime = v
		if v.Id != nil || v.Extension != nil {
			m.ValueTimePrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case UnsignedInt:
		m.ValueUnsignedInt = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *UnsignedInt:
		m.ValueUnsignedInt = v
		if v.Id != nil || v.Extension != nil {
			m.ValueUnsignedIntPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uri:
		m.ValueUri = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uri:
		m.ValueUri = v
		if v.Id != nil || v.Extension != nil {
			m.ValueUriPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Url:
		m.ValueUrl = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Url:
		m.ValueUrl = v
		if v.Id != nil || v.Extension != nil {
			m.ValueUrlPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Uuid:
		m.ValueUuid = &v
		if v.Id != nil || v.Extension != nil {
			m.ValueUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case *Uuid:
		m.ValueUuid = v
		if v.Id != nil || v.Extension != nil {
			m.ValueUuidPrimitiveElement = &primitiveElement{Id: v.Id, Extension: v.Extension}
		}
	case Address:
		m.ValueAddress = &v
	case *Address:
		m.ValueAddress = v
	case Age:
		m.ValueAge = &v
	case *Age:
		m.ValueAge = v
	case Annotation:
		m.ValueAnnotation = &v
	case *Annotation:
		m.ValueAnnotation = v
	case Attachment:
		m.ValueAttachment = &v
	case *Attachment:
		m.ValueAttachment = v
	case CodeableConcept:
		m.ValueCodeableConcept = &v
	case *CodeableConcept:
		m.ValueCodeableConcept = v
	case Coding:
		m.ValueCoding = &v
	case *Coding:
		m.ValueCoding = v
	case ContactPoint:
		m.ValueContactPoint = &v
	case *ContactPoint:
		m.ValueContactPoint = v
	case Count:
		m.ValueCount = &v
	case *Count:
		m.ValueCount = v
	case Distance:
		m.ValueDistance = &v
	case *Distance:
		m.ValueDistance = v
	case Duration:
		m.ValueDuration = &v
	case *Duration:
		m.ValueDuration = v
	case HumanName:
		m.ValueHumanName = &v
	case *HumanName:
		m.ValueHumanName = v
	case Identifier:
		m.ValueIdentifier = &v
	case *Identifier:
		m.ValueIdentifier = v
	case Money:
		m.ValueMoney = &v
	case *Money:
		m.ValueMoney = v
	case Period:
		m.ValuePeriod = &v
	case *Period:
		m.ValuePeriod = v
	case Quantity:
		m.ValueQuantity = &v
	case *Quantity:
		m.ValueQuantity = v
	case Range:
		m.ValueRange = &v
	case *Range:
		m.ValueRange = v
	case Ratio:
		m.ValueRatio = &v
	case *Ratio:
		m.ValueRatio = v
	case Reference:
		m.ValueReference = &v
	case *Reference:
		m.ValueReference = v
	case SampledData:
		m.ValueSampledData = &v
	case *SampledData:
		m.ValueSampledData = v
	case Signature:
		m.ValueSignature = &v
	case *Signature:
		m.ValueSignature = v
	case Timing:
		m.ValueTiming = &v
	case *Timing:
		m.ValueTiming = v
	case ContactDetail:
		m.ValueContactDetail = &v
	case *ContactDetail:
		m.ValueContactDetail = v
	case Contributor:
		m.ValueContributor = &v
	case *Contributor:
		m.ValueContributor = v
	case DataRequirement:
		m.ValueDataRequirement = &v
	case *DataRequirement:
		m.ValueDataRequirement = v
	case Expression:
		m.ValueExpression = &v
	case *Expression:
		m.ValueExpression = v
	case ParameterDefinition:
		m.ValueParameterDefinition = &v
	case *ParameterDefinition:
		m.ValueParameterDefinition = v
	case RelatedArtifact:
		m.ValueRelatedArtifact = &v
	case *RelatedArtifact:
		m.ValueRelatedArtifact = v
	case TriggerDefinition:
		m.ValueTriggerDefinition = &v
	case *TriggerDefinition:
		m.ValueTriggerDefinition = v
	case UsageContext:
		m.ValueUsageContext = &v
	case *UsageContext:
		m.ValueUsageContext = v
	case Dosage:
		m.ValueDosage = &v
	case *Dosage:
		m.ValueDosage = v
	case Meta:
		m.ValueMeta = &v
	case *Meta:
		m.ValueMeta = v
	}
	return m
}
func (r *ElementDefinitionExample) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionExample
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionExample) unmarshalJSON(m jsonElementDefinitionExample) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Label = m.Label
	if m.LabelPrimitiveElement != nil {
		r.Label.Id = m.LabelPrimitiveElement.Id
		r.Label.Extension = m.LabelPrimitiveElement.Extension
	}
	if m.ValueBase64Binary != nil || m.ValueBase64BinaryPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueBase64Binary
		if m.ValueBase64BinaryPrimitiveElement != nil {
			if v == nil {
				v = &Base64Binary{}
			}
			v.Id = m.ValueBase64BinaryPrimitiveElement.Id
			v.Extension = m.ValueBase64BinaryPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueBoolean != nil || m.ValueBooleanPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueBoolean
		if m.ValueBooleanPrimitiveElement != nil {
			if v == nil {
				v = &Boolean{}
			}
			v.Id = m.ValueBooleanPrimitiveElement.Id
			v.Extension = m.ValueBooleanPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueCanonical != nil || m.ValueCanonicalPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueCanonical
		if m.ValueCanonicalPrimitiveElement != nil {
			if v == nil {
				v = &Canonical{}
			}
			v.Id = m.ValueCanonicalPrimitiveElement.Id
			v.Extension = m.ValueCanonicalPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueCode != nil || m.ValueCodePrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueCode
		if m.ValueCodePrimitiveElement != nil {
			if v == nil {
				v = &Code{}
			}
			v.Id = m.ValueCodePrimitiveElement.Id
			v.Extension = m.ValueCodePrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueDate != nil || m.ValueDatePrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueDate
		if m.ValueDatePrimitiveElement != nil {
			if v == nil {
				v = &Date{}
			}
			v.Id = m.ValueDatePrimitiveElement.Id
			v.Extension = m.ValueDatePrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueDateTime != nil || m.ValueDateTimePrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueDateTime
		if m.ValueDateTimePrimitiveElement != nil {
			if v == nil {
				v = &DateTime{}
			}
			v.Id = m.ValueDateTimePrimitiveElement.Id
			v.Extension = m.ValueDateTimePrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueDecimal != nil || m.ValueDecimalPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueDecimal
		if m.ValueDecimalPrimitiveElement != nil {
			if v == nil {
				v = &Decimal{}
			}
			v.Id = m.ValueDecimalPrimitiveElement.Id
			v.Extension = m.ValueDecimalPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueId != nil || m.ValueIdPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueId
		if m.ValueIdPrimitiveElement != nil {
			if v == nil {
				v = &Id{}
			}
			v.Id = m.ValueIdPrimitiveElement.Id
			v.Extension = m.ValueIdPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueInstant != nil || m.ValueInstantPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueInstant
		if m.ValueInstantPrimitiveElement != nil {
			if v == nil {
				v = &Instant{}
			}
			v.Id = m.ValueInstantPrimitiveElement.Id
			v.Extension = m.ValueInstantPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueInteger != nil || m.ValueIntegerPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueInteger
		if m.ValueIntegerPrimitiveElement != nil {
			if v == nil {
				v = &Integer{}
			}
			v.Id = m.ValueIntegerPrimitiveElement.Id
			v.Extension = m.ValueIntegerPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueMarkdown != nil || m.ValueMarkdownPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueMarkdown
		if m.ValueMarkdownPrimitiveElement != nil {
			if v == nil {
				v = &Markdown{}
			}
			v.Id = m.ValueMarkdownPrimitiveElement.Id
			v.Extension = m.ValueMarkdownPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueOid != nil || m.ValueOidPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueOid
		if m.ValueOidPrimitiveElement != nil {
			if v == nil {
				v = &Oid{}
			}
			v.Id = m.ValueOidPrimitiveElement.Id
			v.Extension = m.ValueOidPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValuePositiveInt != nil || m.ValuePositiveIntPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValuePositiveInt
		if m.ValuePositiveIntPrimitiveElement != nil {
			if v == nil {
				v = &PositiveInt{}
			}
			v.Id = m.ValuePositiveIntPrimitiveElement.Id
			v.Extension = m.ValuePositiveIntPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueString != nil || m.ValueStringPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueString
		if m.ValueStringPrimitiveElement != nil {
			if v == nil {
				v = &String{}
			}
			v.Id = m.ValueStringPrimitiveElement.Id
			v.Extension = m.ValueStringPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueTime != nil || m.ValueTimePrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueTime
		if m.ValueTimePrimitiveElement != nil {
			if v == nil {
				v = &Time{}
			}
			v.Id = m.ValueTimePrimitiveElement.Id
			v.Extension = m.ValueTimePrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueUnsignedInt != nil || m.ValueUnsignedIntPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueUnsignedInt
		if m.ValueUnsignedIntPrimitiveElement != nil {
			if v == nil {
				v = &UnsignedInt{}
			}
			v.Id = m.ValueUnsignedIntPrimitiveElement.Id
			v.Extension = m.ValueUnsignedIntPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueUri != nil || m.ValueUriPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueUri
		if m.ValueUriPrimitiveElement != nil {
			if v == nil {
				v = &Uri{}
			}
			v.Id = m.ValueUriPrimitiveElement.Id
			v.Extension = m.ValueUriPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueUrl != nil || m.ValueUrlPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueUrl
		if m.ValueUrlPrimitiveElement != nil {
			if v == nil {
				v = &Url{}
			}
			v.Id = m.ValueUrlPrimitiveElement.Id
			v.Extension = m.ValueUrlPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueUuid != nil || m.ValueUuidPrimitiveElement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueUuid
		if m.ValueUuidPrimitiveElement != nil {
			if v == nil {
				v = &Uuid{}
			}
			v.Id = m.ValueUuidPrimitiveElement.Id
			v.Extension = m.ValueUuidPrimitiveElement.Extension
		}
		r.Value = v
	}
	if m.ValueAddress != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueAddress
		r.Value = v
	}
	if m.ValueAge != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueAge
		r.Value = v
	}
	if m.ValueAnnotation != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueAnnotation
		r.Value = v
	}
	if m.ValueAttachment != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueAttachment
		r.Value = v
	}
	if m.ValueCodeableConcept != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueCodeableConcept
		r.Value = v
	}
	if m.ValueCoding != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueCoding
		r.Value = v
	}
	if m.ValueContactPoint != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueContactPoint
		r.Value = v
	}
	if m.ValueCount != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueCount
		r.Value = v
	}
	if m.ValueDistance != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueDistance
		r.Value = v
	}
	if m.ValueDuration != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueDuration
		r.Value = v
	}
	if m.ValueHumanName != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueHumanName
		r.Value = v
	}
	if m.ValueIdentifier != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueIdentifier
		r.Value = v
	}
	if m.ValueMoney != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueMoney
		r.Value = v
	}
	if m.ValuePeriod != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValuePeriod
		r.Value = v
	}
	if m.ValueQuantity != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueQuantity
		r.Value = v
	}
	if m.ValueRange != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueRange
		r.Value = v
	}
	if m.ValueRatio != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueRatio
		r.Value = v
	}
	if m.ValueReference != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueReference
		r.Value = v
	}
	if m.ValueSampledData != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueSampledData
		r.Value = v
	}
	if m.ValueSignature != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueSignature
		r.Value = v
	}
	if m.ValueTiming != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueTiming
		r.Value = v
	}
	if m.ValueContactDetail != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueContactDetail
		r.Value = v
	}
	if m.ValueContributor != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueContributor
		r.Value = v
	}
	if m.ValueDataRequirement != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueDataRequirement
		r.Value = v
	}
	if m.ValueExpression != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueExpression
		r.Value = v
	}
	if m.ValueParameterDefinition != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueParameterDefinition
		r.Value = v
	}
	if m.ValueRelatedArtifact != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueRelatedArtifact
		r.Value = v
	}
	if m.ValueTriggerDefinition != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueTriggerDefinition
		r.Value = v
	}
	if m.ValueUsageContext != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueUsageContext
		r.Value = v
	}
	if m.ValueDosage != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueDosage
		r.Value = v
	}
	if m.ValueMeta != nil {
		if r.Value != nil {
			return fmt.Errorf("multiple values for field \"Value\"")
		}
		v := m.ValueMeta
		r.Value = v
	}
	return nil
}
func (r ElementDefinitionExample) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
type ElementDefinitionConstraint struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
	Key Id
	// Description of why this constraint is necessary or appropriate.
	Requirements *String
	// Identifies the impact constraint violation has on the conformance of the instance.
	Severity Code
	// Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
	Human String
	// A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
	Expression *String
	// An XPath expression of constraint that can be executed to see if this constraint is met.
	Xpath *String
	// A reference to the original source of the constraint, for traceability purposes.
	Source *Canonical
}
type jsonElementDefinitionConstraint struct {
	Id                           *string           `json:"id,omitempty"`
	Extension                    []Extension       `json:"extension,omitempty"`
	Key                          Id                `json:"key,omitempty"`
	KeyPrimitiveElement          *primitiveElement `json:"_key,omitempty"`
	Requirements                 *String           `json:"requirements,omitempty"`
	RequirementsPrimitiveElement *primitiveElement `json:"_requirements,omitempty"`
	Severity                     Code              `json:"severity,omitempty"`
	SeverityPrimitiveElement     *primitiveElement `json:"_severity,omitempty"`
	Human                        String            `json:"human,omitempty"`
	HumanPrimitiveElement        *primitiveElement `json:"_human,omitempty"`
	Expression                   *String           `json:"expression,omitempty"`
	ExpressionPrimitiveElement   *primitiveElement `json:"_expression,omitempty"`
	Xpath                        *String           `json:"xpath,omitempty"`
	XpathPrimitiveElement        *primitiveElement `json:"_xpath,omitempty"`
	Source                       *Canonical        `json:"source,omitempty"`
	SourcePrimitiveElement       *primitiveElement `json:"_source,omitempty"`
}

func (r ElementDefinitionConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionConstraint) marshalJSON() jsonElementDefinitionConstraint {
	m := jsonElementDefinitionConstraint{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Key = r.Key
	if r.Key.Id != nil || r.Key.Extension != nil {
		m.KeyPrimitiveElement = &primitiveElement{Id: r.Key.Id, Extension: r.Key.Extension}
	}
	m.Requirements = r.Requirements
	if r.Requirements != nil && (r.Requirements.Id != nil || r.Requirements.Extension != nil) {
		m.RequirementsPrimitiveElement = &primitiveElement{Id: r.Requirements.Id, Extension: r.Requirements.Extension}
	}
	m.Severity = r.Severity
	if r.Severity.Id != nil || r.Severity.Extension != nil {
		m.SeverityPrimitiveElement = &primitiveElement{Id: r.Severity.Id, Extension: r.Severity.Extension}
	}
	m.Human = r.Human
	if r.Human.Id != nil || r.Human.Extension != nil {
		m.HumanPrimitiveElement = &primitiveElement{Id: r.Human.Id, Extension: r.Human.Extension}
	}
	m.Expression = r.Expression
	if r.Expression != nil && (r.Expression.Id != nil || r.Expression.Extension != nil) {
		m.ExpressionPrimitiveElement = &primitiveElement{Id: r.Expression.Id, Extension: r.Expression.Extension}
	}
	m.Xpath = r.Xpath
	if r.Xpath != nil && (r.Xpath.Id != nil || r.Xpath.Extension != nil) {
		m.XpathPrimitiveElement = &primitiveElement{Id: r.Xpath.Id, Extension: r.Xpath.Extension}
	}
	m.Source = r.Source
	if r.Source != nil && (r.Source.Id != nil || r.Source.Extension != nil) {
		m.SourcePrimitiveElement = &primitiveElement{Id: r.Source.Id, Extension: r.Source.Extension}
	}
	return m
}
func (r *ElementDefinitionConstraint) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionConstraint
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionConstraint) unmarshalJSON(m jsonElementDefinitionConstraint) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Key = m.Key
	if m.KeyPrimitiveElement != nil {
		r.Key.Id = m.KeyPrimitiveElement.Id
		r.Key.Extension = m.KeyPrimitiveElement.Extension
	}
	r.Requirements = m.Requirements
	if m.RequirementsPrimitiveElement != nil {
		r.Requirements.Id = m.RequirementsPrimitiveElement.Id
		r.Requirements.Extension = m.RequirementsPrimitiveElement.Extension
	}
	r.Severity = m.Severity
	if m.SeverityPrimitiveElement != nil {
		r.Severity.Id = m.SeverityPrimitiveElement.Id
		r.Severity.Extension = m.SeverityPrimitiveElement.Extension
	}
	r.Human = m.Human
	if m.HumanPrimitiveElement != nil {
		r.Human.Id = m.HumanPrimitiveElement.Id
		r.Human.Extension = m.HumanPrimitiveElement.Extension
	}
	r.Expression = m.Expression
	if m.ExpressionPrimitiveElement != nil {
		r.Expression.Id = m.ExpressionPrimitiveElement.Id
		r.Expression.Extension = m.ExpressionPrimitiveElement.Extension
	}
	r.Xpath = m.Xpath
	if m.XpathPrimitiveElement != nil {
		r.Xpath.Id = m.XpathPrimitiveElement.Id
		r.Xpath.Extension = m.XpathPrimitiveElement.Extension
	}
	r.Source = m.Source
	if m.SourcePrimitiveElement != nil {
		r.Source.Id = m.SourcePrimitiveElement.Id
		r.Source.Extension = m.SourcePrimitiveElement.Extension
	}
	return nil
}
func (r ElementDefinitionConstraint) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
type ElementDefinitionBinding struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
	Strength Code
	// Describes the intended use of this particular set of codes.
	Description *String
	// Refers to the value set that identifies the set of codes the binding refers to.
	ValueSet *Canonical
}
type jsonElementDefinitionBinding struct {
	Id                          *string           `json:"id,omitempty"`
	Extension                   []Extension       `json:"extension,omitempty"`
	Strength                    Code              `json:"strength,omitempty"`
	StrengthPrimitiveElement    *primitiveElement `json:"_strength,omitempty"`
	Description                 *String           `json:"description,omitempty"`
	DescriptionPrimitiveElement *primitiveElement `json:"_description,omitempty"`
	ValueSet                    *Canonical        `json:"valueSet,omitempty"`
	ValueSetPrimitiveElement    *primitiveElement `json:"_valueSet,omitempty"`
}

func (r ElementDefinitionBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionBinding) marshalJSON() jsonElementDefinitionBinding {
	m := jsonElementDefinitionBinding{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Strength = r.Strength
	if r.Strength.Id != nil || r.Strength.Extension != nil {
		m.StrengthPrimitiveElement = &primitiveElement{Id: r.Strength.Id, Extension: r.Strength.Extension}
	}
	m.Description = r.Description
	if r.Description != nil && (r.Description.Id != nil || r.Description.Extension != nil) {
		m.DescriptionPrimitiveElement = &primitiveElement{Id: r.Description.Id, Extension: r.Description.Extension}
	}
	m.ValueSet = r.ValueSet
	if r.ValueSet != nil && (r.ValueSet.Id != nil || r.ValueSet.Extension != nil) {
		m.ValueSetPrimitiveElement = &primitiveElement{Id: r.ValueSet.Id, Extension: r.ValueSet.Extension}
	}
	return m
}
func (r *ElementDefinitionBinding) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionBinding
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionBinding) unmarshalJSON(m jsonElementDefinitionBinding) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Strength = m.Strength
	if m.StrengthPrimitiveElement != nil {
		r.Strength.Id = m.StrengthPrimitiveElement.Id
		r.Strength.Extension = m.StrengthPrimitiveElement.Extension
	}
	r.Description = m.Description
	if m.DescriptionPrimitiveElement != nil {
		r.Description.Id = m.DescriptionPrimitiveElement.Id
		r.Description.Extension = m.DescriptionPrimitiveElement.Extension
	}
	r.ValueSet = m.ValueSet
	if m.ValueSetPrimitiveElement != nil {
		r.ValueSet.Id = m.ValueSetPrimitiveElement.Id
		r.ValueSet.Extension = m.ValueSetPrimitiveElement.Extension
	}
	return nil
}
func (r ElementDefinitionBinding) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}

// Identifies a concept from an external specification that roughly corresponds to this element.
type ElementDefinitionMapping struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id *string
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension
	// An internal reference to the definition of a mapping.
	Identity Id
	// Identifies the computable language in which mapping.map is expressed.
	Language *Code
	// Expresses what part of the target specification corresponds to this element.
	Map String
	// Comments that provide information about the mapping or its use.
	Comment *String
}
type jsonElementDefinitionMapping struct {
	Id                       *string           `json:"id,omitempty"`
	Extension                []Extension       `json:"extension,omitempty"`
	Identity                 Id                `json:"identity,omitempty"`
	IdentityPrimitiveElement *primitiveElement `json:"_identity,omitempty"`
	Language                 *Code             `json:"language,omitempty"`
	LanguagePrimitiveElement *primitiveElement `json:"_language,omitempty"`
	Map                      String            `json:"map,omitempty"`
	MapPrimitiveElement      *primitiveElement `json:"_map,omitempty"`
	Comment                  *String           `json:"comment,omitempty"`
	CommentPrimitiveElement  *primitiveElement `json:"_comment,omitempty"`
}

func (r ElementDefinitionMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.marshalJSON())
}
func (r ElementDefinitionMapping) marshalJSON() jsonElementDefinitionMapping {
	m := jsonElementDefinitionMapping{}
	m.Id = r.Id
	m.Extension = r.Extension
	m.Identity = r.Identity
	if r.Identity.Id != nil || r.Identity.Extension != nil {
		m.IdentityPrimitiveElement = &primitiveElement{Id: r.Identity.Id, Extension: r.Identity.Extension}
	}
	m.Language = r.Language
	if r.Language != nil && (r.Language.Id != nil || r.Language.Extension != nil) {
		m.LanguagePrimitiveElement = &primitiveElement{Id: r.Language.Id, Extension: r.Language.Extension}
	}
	m.Map = r.Map
	if r.Map.Id != nil || r.Map.Extension != nil {
		m.MapPrimitiveElement = &primitiveElement{Id: r.Map.Id, Extension: r.Map.Extension}
	}
	m.Comment = r.Comment
	if r.Comment != nil && (r.Comment.Id != nil || r.Comment.Extension != nil) {
		m.CommentPrimitiveElement = &primitiveElement{Id: r.Comment.Id, Extension: r.Comment.Extension}
	}
	return m
}
func (r *ElementDefinitionMapping) UnmarshalJSON(b []byte) error {
	var m jsonElementDefinitionMapping
	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}
	return r.unmarshalJSON(m)
}
func (r *ElementDefinitionMapping) unmarshalJSON(m jsonElementDefinitionMapping) error {
	r.Id = m.Id
	r.Extension = m.Extension
	r.Identity = m.Identity
	if m.IdentityPrimitiveElement != nil {
		r.Identity.Id = m.IdentityPrimitiveElement.Id
		r.Identity.Extension = m.IdentityPrimitiveElement.Extension
	}
	r.Language = m.Language
	if m.LanguagePrimitiveElement != nil {
		r.Language.Id = m.LanguagePrimitiveElement.Id
		r.Language.Extension = m.LanguagePrimitiveElement.Extension
	}
	r.Map = m.Map
	if m.MapPrimitiveElement != nil {
		r.Map.Id = m.MapPrimitiveElement.Id
		r.Map.Extension = m.MapPrimitiveElement.Extension
	}
	r.Comment = m.Comment
	if m.CommentPrimitiveElement != nil {
		r.Comment.Id = m.CommentPrimitiveElement.Id
		r.Comment.Extension = m.CommentPrimitiveElement.Extension
	}
	return nil
}
func (r ElementDefinitionMapping) String() string {
	buf, err := json.MarshalIndent(r, "", "  ")
	if err != nil {
		panic(err)
	}
	return string(buf)
}
